<Type Name="Interpolation" FullName="MathNet.Numerics.Interpolation.Interpolation">
  <TypeSignature Language="C#" Value="public static class Interpolation" />
  <AssemblyInfo>
    <AssemblyName>MathNet.Iridium</AssemblyName>
    <AssemblyVersion>1.0.0.8645</AssemblyVersion>
    <AssemblyVersion>2008.8.16.470</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Interpolation Facade.
            </summary>
    <remarks>
            For most cases it is recommended to use the default scheme, see <see cref="M:MathNet.Numerics.Interpolation.Interpolation.Create(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double})" />.
            </remarks>
  </Docs>
  <Members>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static MathNet.Numerics.Interpolation.IInterpolationMethod Create (System.Collections.Generic.IList&lt;double&gt; points, System.Collections.Generic.IList&lt;double&gt; values);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.Interpolation.IInterpolationMethod</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="points" Type="System.Collections.Generic.IList&lt;System.Double&gt;" />
        <Parameter Name="values" Type="System.Collections.Generic.IList&lt;System.Double&gt;" />
      </Parameters>
      <Docs>
        <param name="points">The sample points t. Supports both lists and arrays.</param>
        <param name="values">The sample point values x(t). Supports both lists and arrays.</param>
        <summary>
            Create a rational pole-free interpolation based on arbitrary points. This is the default interpolation scheme.
            </summary>
        <returns>
            An interpolation scheme optimized for the given sample points and values,
            which can then be used to compute interpolations and extrapolations
            on arbitrary points.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateAkimaCubicSpline">
      <MemberSignature Language="C#" Value="public static MathNet.Numerics.Interpolation.IInterpolationMethod CreateAkimaCubicSpline (System.Collections.Generic.IList&lt;double&gt; points, System.Collections.Generic.IList&lt;double&gt; values);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.Interpolation.IInterpolationMethod</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="points" Type="System.Collections.Generic.IList&lt;System.Double&gt;" />
        <Parameter Name="values" Type="System.Collections.Generic.IList&lt;System.Double&gt;" />
      </Parameters>
      <Docs>
        <param name="points">The sample points t. Supports both lists and arrays.</param>
        <param name="values">The sample point values x(t). Supports both lists and arrays.</param>
        <summary>
            Create an akima cubic spline interpolation based on arbitrary points.
            Akima splines are cubic splines which are stable to outliers.
            </summary>
        <returns>
            An interpolation scheme optimized for the given sample points and values,
            which can then be used to compute interpolations and extrapolations
            on arbitrary points.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateCubicSpline">
      <MemberSignature Language="C#" Value="public static MathNet.Numerics.Interpolation.IInterpolationMethod CreateCubicSpline (System.Collections.Generic.IList&lt;double&gt; points, System.Collections.Generic.IList&lt;double&gt; values, MathNet.Numerics.Interpolation.SplineBoundaryCondition leftBoundaryCondition, double leftBoundary, MathNet.Numerics.Interpolation.SplineBoundaryCondition rightBoundaryCondition, double rightBoundary);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.Interpolation.IInterpolationMethod</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="points" Type="System.Collections.Generic.IList&lt;System.Double&gt;" />
        <Parameter Name="values" Type="System.Collections.Generic.IList&lt;System.Double&gt;" />
        <Parameter Name="leftBoundaryCondition" Type="MathNet.Numerics.Interpolation.SplineBoundaryCondition" />
        <Parameter Name="leftBoundary" Type="System.Double" />
        <Parameter Name="rightBoundaryCondition" Type="MathNet.Numerics.Interpolation.SplineBoundaryCondition" />
        <Parameter Name="rightBoundary" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="points">The sample points t. Supports both lists and arrays.</param>
        <param name="values">The sample point values x(t). Supports both lists and arrays.</param>
        <param name="leftBoundaryCondition">Condition of the left boundary.</param>
        <param name="leftBoundary">Left boundary value. Ignored in the parabolic case.</param>
        <param name="rightBoundaryCondition">Condition of the right boundary.</param>
        <param name="rightBoundary">Right boundary value. Ignored in the parabolic case.</param>
        <summary>
            Create a cubic spline interpolation based on arbitrary points, with specified boundary conditions.
            </summary>
        <returns>
            An interpolation scheme optimized for the given sample points and values,
            which can then be used to compute interpolations and extrapolations
            on arbitrary points.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateLinearSpline">
      <MemberSignature Language="C#" Value="public static MathNet.Numerics.Interpolation.IInterpolationMethod CreateLinearSpline (System.Collections.Generic.IList&lt;double&gt; points, System.Collections.Generic.IList&lt;double&gt; values);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.Interpolation.IInterpolationMethod</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="points" Type="System.Collections.Generic.IList&lt;System.Double&gt;" />
        <Parameter Name="values" Type="System.Collections.Generic.IList&lt;System.Double&gt;" />
      </Parameters>
      <Docs>
        <param name="points">The sample points t. Supports both lists and arrays.</param>
        <param name="values">The sample point values x(t). Supports both lists and arrays.</param>
        <summary>
            Create a linear spline interpolation based on arbitrary points.
            </summary>
        <returns>
            An interpolation scheme optimized for the given sample points and values,
            which can then be used to compute interpolations and extrapolations
            on arbitrary points.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateNaturalCubicSpline">
      <MemberSignature Language="C#" Value="public static MathNet.Numerics.Interpolation.IInterpolationMethod CreateNaturalCubicSpline (System.Collections.Generic.IList&lt;double&gt; points, System.Collections.Generic.IList&lt;double&gt; values);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.Interpolation.IInterpolationMethod</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="points" Type="System.Collections.Generic.IList&lt;System.Double&gt;" />
        <Parameter Name="values" Type="System.Collections.Generic.IList&lt;System.Double&gt;" />
      </Parameters>
      <Docs>
        <param name="points">The sample points t. Supports both lists and arrays.</param>
        <param name="values">The sample point values x(t). Supports both lists and arrays.</param>
        <summary>
            Create a natural cubic spline interpolation based on arbitrary points.
            Natural splines are cubic splines with zero second derivative at the boundaries (i.e. straigth lines).
            </summary>
        <returns>
            An interpolation scheme optimized for the given sample points and values,
            which can then be used to compute interpolations and extrapolations
            on arbitrary points.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateOnChebyshevFirstKindPoints">
      <MemberSignature Language="C#" Value="public static MathNet.Numerics.Interpolation.IInterpolationMethod CreateOnChebyshevFirstKindPoints (double leftBound, double rightBound, System.Collections.Generic.IList&lt;double&gt; values);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.Interpolation.IInterpolationMethod</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="leftBound" Type="System.Double" />
        <Parameter Name="rightBound" Type="System.Double" />
        <Parameter Name="values" Type="System.Collections.Generic.IList&lt;System.Double&gt;" />
      </Parameters>
      <Docs>
        <param name="leftBound">The left (smallest) sample point t bound.</param>
        <param name="rightBound">The right (biggest) sample point t bound.</param>
        <param name="values">The sample point values x(t). Supports both lists and arrays.</param>
        <summary>
            Create a polynomial interpolation based on chebyshev (first kind) points, that is, "t(i) = 0.5*(b+a) + 0.5*(b-a)*cos(Pi*(2*i+1)/(2*n))".
            </summary>
        <returns>
            An interpolation scheme optimized for the given sample points and values,
            which can then be used to compute interpolations and extrapolations
            on arbitrary points.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateOnChebyshevSecondKindPoints">
      <MemberSignature Language="C#" Value="public static MathNet.Numerics.Interpolation.IInterpolationMethod CreateOnChebyshevSecondKindPoints (double leftBound, double rightBound, System.Collections.Generic.IList&lt;double&gt; values);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.Interpolation.IInterpolationMethod</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="leftBound" Type="System.Double" />
        <Parameter Name="rightBound" Type="System.Double" />
        <Parameter Name="values" Type="System.Collections.Generic.IList&lt;System.Double&gt;" />
      </Parameters>
      <Docs>
        <param name="leftBound">The left (smallest) sample point t bound.</param>
        <param name="rightBound">The right (biggest) sample point t bound.</param>
        <param name="values">The sample point values x(t). Supports both lists and arrays.</param>
        <summary>
            Create a polynomial interpolation based on chebyshev (second kind) points, that is, "t(i) = 0.5*(b+a) + 0.5*(b-a)*cos(Pi*i/n)".
            </summary>
        <returns>
            An interpolation scheme optimized for the given sample points and values,
            which can then be used to compute interpolations and extrapolations
            on arbitrary points.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateOnEquidistantPoints">
      <MemberSignature Language="C#" Value="public static MathNet.Numerics.Interpolation.IInterpolationMethod CreateOnEquidistantPoints (double leftBound, double rightBound, System.Collections.Generic.IList&lt;double&gt; values);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.Interpolation.IInterpolationMethod</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="leftBound" Type="System.Double" />
        <Parameter Name="rightBound" Type="System.Double" />
        <Parameter Name="values" Type="System.Collections.Generic.IList&lt;System.Double&gt;" />
      </Parameters>
      <Docs>
        <param name="leftBound">The leftmost (smallest) sample point t.</param>
        <param name="rightBound">The rightmost (biggest) sample point t.</param>
        <param name="values">The sample point values x(t). Supports both lists and arrays.</param>
        <summary>
            Create a polynomial interpolation based on equidistant sample points.
            </summary>
        <returns>
            An interpolation scheme optimized for the given sample points and values,
            which can then be used to compute interpolations and extrapolations
            on arbitrary points.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreatePolynomial">
      <MemberSignature Language="C#" Value="public static MathNet.Numerics.Interpolation.IInterpolationMethod CreatePolynomial (System.Collections.Generic.IList&lt;double&gt; points, System.Collections.Generic.IList&lt;double&gt; values);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.Interpolation.IInterpolationMethod</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="points" Type="System.Collections.Generic.IList&lt;System.Double&gt;" />
        <Parameter Name="values" Type="System.Collections.Generic.IList&lt;System.Double&gt;" />
      </Parameters>
      <Docs>
        <param name="points">The sample points t. Supports both lists and arrays.</param>
        <param name="values">The sample point values x(t). Supports both lists and arrays.</param>
        <summary>
            Create a polynomial (neville) interpolation based on arbitrary points.
            </summary>
        <returns>
            An interpolation scheme optimized for the given sample points and values,
            which can then be used to compute interpolations and extrapolations
            on arbitrary points.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateRational">
      <MemberSignature Language="C#" Value="public static MathNet.Numerics.Interpolation.IInterpolationMethod CreateRational (System.Collections.Generic.IList&lt;double&gt; points, System.Collections.Generic.IList&lt;double&gt; values);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.Interpolation.IInterpolationMethod</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="points" Type="System.Collections.Generic.IList&lt;System.Double&gt;" />
        <Parameter Name="values" Type="System.Collections.Generic.IList&lt;System.Double&gt;" />
      </Parameters>
      <Docs>
        <param name="points">The sample points t. Supports both lists and arrays.</param>
        <param name="values">The sample point values x(t). Supports both lists and arrays.</param>
        <summary>
            Create a rational (with poles; Bulirsch &amp; Stoer) interpolation based on arbitrary points.
            </summary>
        <returns>
            An interpolation scheme optimized for the given sample points and values,
            which can then be used to compute interpolations and extrapolations
            on arbitrary points.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateChebyshevFirstKindSamplePoints">
      <MemberSignature Language="C#" Value="public static double[] GenerateChebyshevFirstKindSamplePoints (double a, double b, int numberOfPoints);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.Double" />
        <Parameter Name="b" Type="System.Double" />
        <Parameter Name="numberOfPoints" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="a">Left bound of the interval.</param>
        <param name="b">Right bound of the interval.</param>
        <param name="numberOfPoints">Number of sample nodes to generate.</param>
        <summary>
            Generate a set of chebyshev points of the first kind in the interval [a,b].
            These are the expected points t for the values v(t) to be provided in <see cref="M:MathNet.Numerics.Interpolation.Interpolation.CreateOnChebyshevFirstKindPoints(System.Double,System.Double,System.Collections.Generic.IList{System.Double})" />.
            </summary>
        <returns>Chebyshev points (first kind) in the interval [a,b], i.e. 0.5*(b+a) + 0.5*(b-a)*cos(Pi*(2*i+1)/(2*n))</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateChebyshevSecondKindSamplePoints">
      <MemberSignature Language="C#" Value="public static double[] GenerateChebyshevSecondKindSamplePoints (double a, double b, int numberOfPoints);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.Double" />
        <Parameter Name="b" Type="System.Double" />
        <Parameter Name="numberOfPoints" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="a">Left bound of the interval.</param>
        <param name="b">Right bound of the interval.</param>
        <param name="numberOfPoints">Number of sample nodes to generate.</param>
        <summary>
            Generate a set of chebyshev points of the second kind in the interval [a,b].
            These are the expected points t for the values v(t) to be provided in <see cref="M:MathNet.Numerics.Interpolation.Interpolation.CreateOnChebyshevSecondKindPoints(System.Double,System.Double,System.Collections.Generic.IList{System.Double})" />.
            </summary>
        <returns>Chebyshev points (second kind) in the interval [a,b], i.e. 0.5*(b+a) + 0.5*(b-a)*cos(Pi*i/n)</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
