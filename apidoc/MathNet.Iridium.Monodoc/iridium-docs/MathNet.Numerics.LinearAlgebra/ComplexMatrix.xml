<Type Name="ComplexMatrix" FullName="MathNet.Numerics.LinearAlgebra.ComplexMatrix">
  <TypeSignature Language="C#" Value="public class ComplexMatrix : ICloneable, MathNet.Numerics.LinearAlgebra.IMatrix&lt;MathNet.Numerics.Complex&gt;" />
  <AssemblyInfo>
    <AssemblyName>MathNet.Iridium</AssemblyName>
    <AssemblyVersion>1.0.0.8645</AssemblyVersion>
    <AssemblyVersion>2008.8.16.470</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>MathNet.Numerics.LinearAlgebra.IMatrix&lt;MathNet.Numerics.Complex&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Reflection.DefaultMember("Item")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
            Complex Matrix.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ComplexMatrix (MathNet.Numerics.Complex[][] A);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="A" Type="MathNet.Numerics.Complex[][]" />
      </Parameters>
      <Docs>
        <param name="A">Two-dimensional jagged array of complex numbers.</param>
        <summary>
            Constructs a matrix from a jagged 2-D array,
            directly using the provided array as internal data structure.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">All rows must have the same length.</exception>
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.Create(MathNet.Numerics.Complex[][])" />
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.Create(MathNet.Numerics.Complex[0:,0:])" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ComplexMatrix (MathNet.Numerics.Complex[] vals, int m);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="vals" Type="MathNet.Numerics.Complex[]" />
        <Parameter Name="m" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="vals">One-dimensional array of complex numbers, packed by columns (ala Fortran).</param>
        <param name="m">Number of rows.</param>
        <summary>
            Construct a matrix from a one-dimensional packed array.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Array length must be a multiple of m.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ComplexMatrix (int m, MathNet.Numerics.Complex s);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="m" Type="System.Int32" />
        <Parameter Name="s" Type="MathNet.Numerics.Complex" />
      </Parameters>
      <Docs>
        <param name="m">Size of the square matrix.</param>
        <param name="s">Diagonal value.</param>
        <summary>
            Constructs a m-by-m square matrix.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ComplexMatrix (int m, int n);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="m" Type="System.Int32" />
        <Parameter Name="n" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="m">Number of rows.</param>
        <param name="n">Number of columns.</param>
        <summary>
            Construct an m-by-n matrix of zeros.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ComplexMatrix (int m, int n, MathNet.Numerics.Complex s);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="m" Type="System.Int32" />
        <Parameter Name="n" Type="System.Int32" />
        <Parameter Name="s" Type="MathNet.Numerics.Complex" />
      </Parameters>
      <Docs>
        <param name="m">Number of rows.</param>
        <param name="n">Number of columns.</param>
        <param name="s">Fill the matrix with this scalar value.</param>
        <summary>
            Construct an m-by-n constant matrix.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public MathNet.Numerics.LinearAlgebra.ComplexMatrix Add (MathNet.Numerics.Complex b);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.ComplexMatrix</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="b" Type="MathNet.Numerics.Complex" />
      </Parameters>
      <Docs>
        <param name="b">The complex scalar.</param>
        <summary>
            Add a complex scalar to all elements of this complex matrix.
            </summary>
        <returns>
            Matrix ret[i,j] = this[i,j] + b
            </returns>
        <remarks>
            This method has the same effect as the overloaded + operator.
            </remarks>
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.AddInplace(MathNet.Numerics.Complex)" />
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.op_Addition(MathNet.Numerics.LinearAlgebra.ComplexMatrix,MathNet.Numerics.Complex)" />
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public MathNet.Numerics.LinearAlgebra.ComplexMatrix Add (MathNet.Numerics.LinearAlgebra.IMatrix&lt;MathNet.Numerics.Complex&gt; b);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.ComplexMatrix</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="b" Type="MathNet.Numerics.LinearAlgebra.IMatrix&lt;MathNet.Numerics.Complex&gt;" />
      </Parameters>
      <Docs>
        <param name="b">The other complex matrix.</param>
        <summary>
            Add another complex matrix to this complex matrix.
            </summary>
        <returns>
            Matrix ret[i,j] = this[i,j] + b[i,j]
            </returns>
        <remarks>
            This method has the same effect as the overloaded + operator.
            </remarks>
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.AddInplace(MathNet.Numerics.LinearAlgebra.IMatrix{MathNet.Numerics.Complex})" />
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.op_Addition(MathNet.Numerics.LinearAlgebra.ComplexMatrix,MathNet.Numerics.LinearAlgebra.ComplexMatrix)" />
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public MathNet.Numerics.LinearAlgebra.ComplexMatrix Add (MathNet.Numerics.LinearAlgebra.IMatrix&lt;double&gt; b);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.ComplexMatrix</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="b" Type="MathNet.Numerics.LinearAlgebra.IMatrix&lt;System.Double&gt;" />
      </Parameters>
      <Docs>
        <param name="b">The other real matrix.</param>
        <summary>
            Add another real matrix to this complex matrix.
            </summary>
        <returns>
            Matrix ret[i,j] = this[i,j] + b[i,j]
            </returns>
        <remarks>
            This method has the same effect as the overloaded + operator.
            </remarks>
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.AddInplace(MathNet.Numerics.LinearAlgebra.IMatrix{System.Double})" />
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.op_Addition(MathNet.Numerics.LinearAlgebra.ComplexMatrix,MathNet.Numerics.LinearAlgebra.Matrix)" />
      </Docs>
    </Member>
    <Member MemberName="AddInplace">
      <MemberSignature Language="C#" Value="public void AddInplace (MathNet.Numerics.Complex b);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="b" Type="MathNet.Numerics.Complex" />
      </Parameters>
      <Docs>
        <param name="b">The complex scalar.</param>
        <summary>
            In place addition of a complex scalar to all elements of this complex matrix.
            </summary>
        <remarks>
            This method changes this matrix.
            </remarks>
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.Add(MathNet.Numerics.Complex)" />
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.op_Addition(MathNet.Numerics.LinearAlgebra.ComplexMatrix,MathNet.Numerics.Complex)" />
      </Docs>
    </Member>
    <Member MemberName="AddInplace">
      <MemberSignature Language="C#" Value="public void AddInplace (MathNet.Numerics.LinearAlgebra.IMatrix&lt;MathNet.Numerics.Complex&gt; b);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="b" Type="MathNet.Numerics.LinearAlgebra.IMatrix&lt;MathNet.Numerics.Complex&gt;" />
      </Parameters>
      <Docs>
        <param name="b">The other complex matrix.</param>
        <summary>
            In place addition of another complex matrix to this complex matrix.
            </summary>
        <remarks>
            This method changes this matrix.
            </remarks>
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.Add(MathNet.Numerics.LinearAlgebra.IMatrix{MathNet.Numerics.Complex})" />
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.op_Addition(MathNet.Numerics.LinearAlgebra.ComplexMatrix,MathNet.Numerics.LinearAlgebra.ComplexMatrix)" />
      </Docs>
    </Member>
    <Member MemberName="AddInplace">
      <MemberSignature Language="C#" Value="public void AddInplace (MathNet.Numerics.LinearAlgebra.IMatrix&lt;double&gt; b);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="b" Type="MathNet.Numerics.LinearAlgebra.IMatrix&lt;System.Double&gt;" />
      </Parameters>
      <Docs>
        <param name="b">The other real matrix.</param>
        <summary>
            In place addition of another real matrix to this complex matrix.
            </summary>
        <remarks>
            This method changes this matrix.
            </remarks>
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.Add(MathNet.Numerics.LinearAlgebra.IMatrix{System.Double})" />
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.op_Addition(MathNet.Numerics.LinearAlgebra.ComplexMatrix,MathNet.Numerics.LinearAlgebra.Matrix)" />
      </Docs>
    </Member>
    <Member MemberName="ArrayDivide">
      <MemberSignature Language="C#" Value="public MathNet.Numerics.LinearAlgebra.ComplexMatrix ArrayDivide (MathNet.Numerics.LinearAlgebra.IMatrix&lt;MathNet.Numerics.Complex&gt; b);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.ComplexMatrix</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="b" Type="MathNet.Numerics.LinearAlgebra.IMatrix&lt;MathNet.Numerics.Complex&gt;" />
      </Parameters>
      <Docs>
        <param name="b">The other complex matrix.</param>
        <summary>
            Element-by-element division of this matrix with another complex matrix, "ret = this ./ b".
            </summary>
        <returns>
            Matrix ret[i,j] = this[i,j] / b[i,j]
            </returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.ArrayDivideInplace(MathNet.Numerics.LinearAlgebra.IMatrix{MathNet.Numerics.Complex})" />
      </Docs>
    </Member>
    <Member MemberName="ArrayDivide">
      <MemberSignature Language="C#" Value="public MathNet.Numerics.LinearAlgebra.ComplexMatrix ArrayDivide (MathNet.Numerics.LinearAlgebra.IMatrix&lt;double&gt; b);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.ComplexMatrix</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="b" Type="MathNet.Numerics.LinearAlgebra.IMatrix&lt;System.Double&gt;" />
      </Parameters>
      <Docs>
        <param name="b">The other real matrix.</param>
        <summary>
            Element-by-element division of this matrix with another real matrix, "ret = this ./ b".
            </summary>
        <returns>
            Matrix ret[i,j] = this[i,j] / b[i,j]
            </returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.ArrayDivideInplace(MathNet.Numerics.LinearAlgebra.IMatrix{System.Double})" />
      </Docs>
    </Member>
    <Member MemberName="ArrayDivideInplace">
      <MemberSignature Language="C#" Value="public void ArrayDivideInplace (MathNet.Numerics.LinearAlgebra.IMatrix&lt;MathNet.Numerics.Complex&gt; b);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="b" Type="MathNet.Numerics.LinearAlgebra.IMatrix&lt;MathNet.Numerics.Complex&gt;" />
      </Parameters>
      <Docs>
        <param name="b">The other complex matrix.</param>
        <summary>
            Inplace element-by-element division of this matrix with another complex matrix, "this ./= b".
            </summary>
        <remarks>
            This method changes this matrix.
            </remarks>
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.ArrayDivide(MathNet.Numerics.LinearAlgebra.IMatrix{MathNet.Numerics.Complex})" />
      </Docs>
    </Member>
    <Member MemberName="ArrayDivideInplace">
      <MemberSignature Language="C#" Value="public void ArrayDivideInplace (MathNet.Numerics.LinearAlgebra.IMatrix&lt;double&gt; b);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="b" Type="MathNet.Numerics.LinearAlgebra.IMatrix&lt;System.Double&gt;" />
      </Parameters>
      <Docs>
        <param name="b">The other real matrix.</param>
        <summary>
            Inplace element-by-element division of this matrix with another real matrix, "this ./= b". 
            </summary>
        <remarks>
            This method changes this matrix.
            </remarks>
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.ArrayMultiply(MathNet.Numerics.LinearAlgebra.IMatrix{MathNet.Numerics.Complex})" />
      </Docs>
    </Member>
    <Member MemberName="ArrayMap">
      <MemberSignature Language="C#" Value="public MathNet.Numerics.LinearAlgebra.ComplexMatrix ArrayMap (Converter&lt;MathNet.Numerics.Complex,MathNet.Numerics.Complex&gt; mapping);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.ComplexMatrix</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mapping" Type="System.Converter&lt;MathNet.Numerics.Complex,MathNet.Numerics.Complex&gt;" />
      </Parameters>
      <Docs>
        <param name="mapping">The element-by-element mapping.</param>
        <summary>
            Map an arbitrary function to all elements of this matrix.
            </summary>
        <returns>
            Matrix ret[i,j] = mapping(this[i,j])
            </returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.ArrayMapInplace(System.Converter{MathNet.Numerics.Complex,MathNet.Numerics.Complex})" />
      </Docs>
    </Member>
    <Member MemberName="ArrayMapInplace">
      <MemberSignature Language="C#" Value="public void ArrayMapInplace (Converter&lt;MathNet.Numerics.Complex,MathNet.Numerics.Complex&gt; mapping);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mapping" Type="System.Converter&lt;MathNet.Numerics.Complex,MathNet.Numerics.Complex&gt;" />
      </Parameters>
      <Docs>
        <param name="mapping">The element-by-element mapping.</param>
        <summary>
            Inplace map an arbitrary function to all elements of this matrix.
            </summary>
        <remarks>
            This method changes this matrix.
            </remarks>
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.ArrayMap(System.Converter{MathNet.Numerics.Complex,MathNet.Numerics.Complex})" />
      </Docs>
    </Member>
    <Member MemberName="ArrayMultiply">
      <MemberSignature Language="C#" Value="public MathNet.Numerics.LinearAlgebra.ComplexMatrix ArrayMultiply (MathNet.Numerics.LinearAlgebra.IMatrix&lt;MathNet.Numerics.Complex&gt; b);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.ComplexMatrix</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="b" Type="MathNet.Numerics.LinearAlgebra.IMatrix&lt;MathNet.Numerics.Complex&gt;" />
      </Parameters>
      <Docs>
        <param name="b">The other complex matrix.</param>
        <summary>
            Element-by-element multiplication of this matrix with another complex matrix, "ret = this .* b".
            </summary>
        <returns>
            Matrix ret[i,j] = this[i,j] * b[i,j]
            </returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.ArrayMultiplyInplace(MathNet.Numerics.LinearAlgebra.IMatrix{MathNet.Numerics.Complex})" />
      </Docs>
    </Member>
    <Member MemberName="ArrayMultiply">
      <MemberSignature Language="C#" Value="public MathNet.Numerics.LinearAlgebra.ComplexMatrix ArrayMultiply (MathNet.Numerics.LinearAlgebra.IMatrix&lt;double&gt; b);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.ComplexMatrix</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="b" Type="MathNet.Numerics.LinearAlgebra.IMatrix&lt;System.Double&gt;" />
      </Parameters>
      <Docs>
        <param name="b">The other real matrix.</param>
        <summary>
            Element-by-element multiplication of this matrix with another real matrix, "ret = this .* b".
            </summary>
        <returns>
            Matrix ret[i,j] = this[i,j] * b[i,j]
            </returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.ArrayMultiplyInplace(MathNet.Numerics.LinearAlgebra.IMatrix{System.Double})" />
      </Docs>
    </Member>
    <Member MemberName="ArrayMultiplyInplace">
      <MemberSignature Language="C#" Value="public void ArrayMultiplyInplace (MathNet.Numerics.LinearAlgebra.IMatrix&lt;MathNet.Numerics.Complex&gt; b);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="b" Type="MathNet.Numerics.LinearAlgebra.IMatrix&lt;MathNet.Numerics.Complex&gt;" />
      </Parameters>
      <Docs>
        <param name="b">The other complex matrix.</param>
        <summary>
            Inplace element-by-element multiplication of this matrix with another complex matrix, "this .*= b".
            </summary>
        <remarks>
            This method changes this matrix.
            </remarks>
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.ArrayMultiply(MathNet.Numerics.LinearAlgebra.IMatrix{MathNet.Numerics.Complex})" />
      </Docs>
    </Member>
    <Member MemberName="ArrayMultiplyInplace">
      <MemberSignature Language="C#" Value="public void ArrayMultiplyInplace (MathNet.Numerics.LinearAlgebra.IMatrix&lt;double&gt; b);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="b" Type="MathNet.Numerics.LinearAlgebra.IMatrix&lt;System.Double&gt;" />
      </Parameters>
      <Docs>
        <param name="b">The other real matrix.</param>
        <summary>
            Inplace element-by-element multiplication of this matrix with another real matrix, "this .*= b".
            </summary>
        <remarks>
            This method changes this matrix.
            </remarks>
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.ArrayMultiply(MathNet.Numerics.LinearAlgebra.IMatrix{MathNet.Numerics.Complex})" />
      </Docs>
    </Member>
    <Member MemberName="ArrayPower">
      <MemberSignature Language="C#" Value="public MathNet.Numerics.LinearAlgebra.ComplexMatrix ArrayPower (MathNet.Numerics.Complex exponent);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.ComplexMatrix</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="exponent" Type="MathNet.Numerics.Complex" />
      </Parameters>
      <Docs>
        <param name="exponent">The exponent to raise to power to.</param>
        <summary>
            Element-by-element raise to power, "ret = this .^ exponent".
            </summary>
        <returns>
            Matrix ret[i,j] = this[i,j] ^ exponent
            </returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.ArrayPowerInplace(MathNet.Numerics.Complex)" />
      </Docs>
    </Member>
    <Member MemberName="ArrayPowerInplace">
      <MemberSignature Language="C#" Value="public void ArrayPowerInplace (MathNet.Numerics.Complex exponent);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="exponent" Type="MathNet.Numerics.Complex" />
      </Parameters>
      <Docs>
        <param name="exponent">The exponent to raise to power to.</param>
        <summary>
            Inplace element-by-element raise to power, "this .^= exponent".
            </summary>
        <remarks>
            This method changes this matrix.
            </remarks>
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.ArrayPower(MathNet.Numerics.Complex)" />
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public MathNet.Numerics.LinearAlgebra.ComplexMatrix Clone ();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.ComplexMatrix</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Returns a deep copy of this instance.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CloneMatrixData">
      <MemberSignature Language="C#" Value="public static MathNet.Numerics.Complex[][] CloneMatrixData (MathNet.Numerics.Complex[][] data);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.Complex[][]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="MathNet.Numerics.Complex[][]" />
      </Parameters>
      <Docs>
        <param name="data">To be added.</param>
        <summary>
            Creates a copy of a given internal matrix data structure.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ColumnCount">
      <MemberSignature Language="C#" Value="public int ColumnCount { get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the number of columns.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Conjugate">
      <MemberSignature Language="C#" Value="public MathNet.Numerics.LinearAlgebra.ComplexMatrix Conjugate ();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.ComplexMatrix</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Conjugate this complex matrix.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConjugateInplace">
      <MemberSignature Language="C#" Value="public void ConjugateInplace ();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            In place conjugation of this complex matrix.
            </summary>
        <remarks>
            This method changes this matrix.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyToArray">
      <MemberSignature Language="C#" Value="public MathNet.Numerics.Complex[,] CopyToArray ();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.Complex[,]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Copies the internal data structure to a 2-dimensional array.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyToJaggedArray">
      <MemberSignature Language="C#" Value="public MathNet.Numerics.Complex[][] CopyToJaggedArray ();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.Complex[][]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Copies the internal data structure to a jagged rectangular array.
            </summary>
        <returns />
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static MathNet.Numerics.LinearAlgebra.ComplexMatrix Create (MathNet.Numerics.Complex[,] A);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.ComplexMatrix</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="A" Type="MathNet.Numerics.Complex[,]" />
      </Parameters>
      <Docs>
        <param name="A">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static MathNet.Numerics.LinearAlgebra.ComplexMatrix Create (MathNet.Numerics.Complex[][] A);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.ComplexMatrix</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="A" Type="MathNet.Numerics.Complex[][]" />
      </Parameters>
      <Docs>
        <param name="A">Two-dimensional array of complex numbers.</param>
        <summary>
            Constructs a matrix from a copy of a 2-D array by deep-copy.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static MathNet.Numerics.LinearAlgebra.ComplexMatrix Create (MathNet.Numerics.LinearAlgebra.IMatrix&lt;double&gt; realMatrix);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.ComplexMatrix</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="realMatrix" Type="MathNet.Numerics.LinearAlgebra.IMatrix&lt;System.Double&gt;" />
      </Parameters>
      <Docs>
        <param name="realMatrix">The real matrix to copy from.</param>
        <summary>
            Construct a matrix from a real matrix by deep-copy.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateFromColumns">
      <MemberSignature Language="C#" Value="public static MathNet.Numerics.LinearAlgebra.ComplexMatrix CreateFromColumns (System.Collections.Generic.IList&lt;MathNet.Numerics.LinearAlgebra.ComplexVector&gt; columnVectors);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.ComplexMatrix</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="columnVectors" Type="System.Collections.Generic.IList&lt;MathNet.Numerics.LinearAlgebra.ComplexVector&gt;" />
      </Parameters>
      <Docs>
        <param name="columnVectors">To be added.</param>
        <summary>
            Construct a complex matrix from a set of complex column vectors.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateFromRows">
      <MemberSignature Language="C#" Value="public static MathNet.Numerics.LinearAlgebra.ComplexMatrix CreateFromRows (System.Collections.Generic.IList&lt;MathNet.Numerics.LinearAlgebra.ComplexVector&gt; rowVectors);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.ComplexMatrix</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rowVectors" Type="System.Collections.Generic.IList&lt;MathNet.Numerics.LinearAlgebra.ComplexVector&gt;" />
      </Parameters>
      <Docs>
        <param name="rowVectors">To be added.</param>
        <summary>
            Construct a complex matrix from a set of complex row vectors.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateMatrixData">
      <MemberSignature Language="C#" Value="public static MathNet.Numerics.Complex[][] CreateMatrixData (int m, int n);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.Complex[][]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Int32" />
        <Parameter Name="n" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="m">Number of rows.</param>
        <param name="n">Number of columns.</param>
        <summary>
            Create the internal matrix data structure for a matrix of the given size.
            Initializing matrices directly on the internal structure may be faster
            than accessing the cells through the matrix class.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Diagonal">
      <MemberSignature Language="C#" Value="public static MathNet.Numerics.LinearAlgebra.ComplexMatrix Diagonal (MathNet.Numerics.LinearAlgebra.IVector&lt;MathNet.Numerics.Complex&gt; diagonalVector);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.ComplexMatrix</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="diagonalVector" Type="MathNet.Numerics.LinearAlgebra.IVector&lt;MathNet.Numerics.Complex&gt;" />
      </Parameters>
      <Docs>
        <param name="diagonalVector">The values of the matrix diagonal.</param>
        <summary>
            Creates a new square diagonal matrix based on the diagonal vector.
            </summary>
        <returns>
            An m-by-n matrix with the values from the diagonal vector on the diagonal and zeros elsewhere.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Diagonal">
      <MemberSignature Language="C#" Value="public static MathNet.Numerics.LinearAlgebra.ComplexMatrix Diagonal (MathNet.Numerics.LinearAlgebra.IVector&lt;MathNet.Numerics.Complex&gt; diagonalVector, int m, int n);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.ComplexMatrix</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="diagonalVector" Type="MathNet.Numerics.LinearAlgebra.IVector&lt;MathNet.Numerics.Complex&gt;" />
        <Parameter Name="m" Type="System.Int32" />
        <Parameter Name="n" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="diagonalVector">The values of the matrix diagonal.</param>
        <param name="m">Number of rows.</param>
        <param name="n">Number of columns.</param>
        <summary>
            Creates a new diagonal m-by-n matrix based on the diagonal vector.
            </summary>
        <returns>
            An m-by-n matrix with the values from the diagonal vector on the diagonal and zeros elsewhere.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetArray">
      <MemberSignature Language="C#" Value="public MathNet.Numerics.Complex[][] GetArray ();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.Complex[][]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Returns the internal data structure array.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetColumnVector">
      <MemberSignature Language="C#" Value="public MathNet.Numerics.LinearAlgebra.ComplexVector GetColumnVector (int columnIndex);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.ComplexVector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="columnIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="columnIndex">To be added.</param>
        <summary>
            Copies a specified column of this matrix to a new vector.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMatrix">
      <MemberSignature Language="C#" Value="public MathNet.Numerics.LinearAlgebra.ComplexMatrix GetMatrix (int[] r, int[] c);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.ComplexMatrix</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="r" Type="System.Int32[]" />
        <Parameter Name="c" Type="System.Int32[]" />
      </Parameters>
      <Docs>
        <param name="r">Array of row indices.</param>
        <param name="c">Array of column indices.</param>
        <summary>
            Gets a submatrix.
            </summary>
        <returns>A(r(:),c(:))</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.IndexOutOfRangeException">Submatrix indices.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetMatrix">
      <MemberSignature Language="C#" Value="public MathNet.Numerics.LinearAlgebra.ComplexMatrix GetMatrix (int i0, int i1, int[] c);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.ComplexMatrix</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="i0" Type="System.Int32" />
        <Parameter Name="i1" Type="System.Int32" />
        <Parameter Name="c" Type="System.Int32[]" />
      </Parameters>
      <Docs>
        <param name="i0">First row index.</param>
        <param name="i1">Last row index (inclusive).</param>
        <param name="c">Array of column indices.</param>
        <summary>
            Get a submatrix.
            </summary>
        <returns>A(i0:i1,c(:))</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.IndexOutOfRangeException">Submatrix indices.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetMatrix">
      <MemberSignature Language="C#" Value="public MathNet.Numerics.LinearAlgebra.ComplexMatrix GetMatrix (int[] r, int j0, int j1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.ComplexMatrix</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="r" Type="System.Int32[]" />
        <Parameter Name="j0" Type="System.Int32" />
        <Parameter Name="j1" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="r">Array of row indices.</param>
        <param name="j0">First column index.</param>
        <param name="j1">Last column index (inclusive).</param>
        <summary>
            Get a submatrix.
            </summary>
        <returns>A(r(:),j0:j1)</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.IndexOutOfRangeException">Submatrix indices.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetMatrix">
      <MemberSignature Language="C#" Value="public MathNet.Numerics.LinearAlgebra.ComplexMatrix GetMatrix (int i0, int i1, int j0, int j1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.ComplexMatrix</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="i0" Type="System.Int32" />
        <Parameter Name="i1" Type="System.Int32" />
        <Parameter Name="j0" Type="System.Int32" />
        <Parameter Name="j1" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="i0">First row index.</param>
        <param name="i1">Last row index (inclusive).</param>
        <param name="j0">First column index.</param>
        <param name="j1">Last column index (inclusive).</param>
        <summary>
            Gets a submatrix.
            </summary>
        <returns>A(i0:i1,j0:j1)</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.IndexOutOfRangeException">Submatrix indices</exception>
      </Docs>
    </Member>
    <Member MemberName="GetRowColumnCount">
      <MemberSignature Language="C#" Value="public static void GetRowColumnCount (MathNet.Numerics.Complex[][] data, out int rows, out int columns);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="MathNet.Numerics.Complex[][]" />
        <Parameter Name="rows" Type="System.Int32&amp;" RefType="out" />
        <Parameter Name="columns" Type="System.Int32&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="data">To be added.</param>
        <param name="rows">To be added.</param>
        <param name="columns">To be added.</param>
        <summary>
            Tries to find out the row column count of a given internal matrix data structure.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRowVector">
      <MemberSignature Language="C#" Value="public MathNet.Numerics.LinearAlgebra.ComplexVector GetRowVector (int rowIndex);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.ComplexVector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rowIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="rowIndex">To be added.</param>
        <summary>
            Copies a specified row of this matrix to a new vector.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HermitianTranspose">
      <MemberSignature Language="C#" Value="public MathNet.Numerics.LinearAlgebra.ComplexMatrix HermitianTranspose ();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.ComplexMatrix</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Transpose this complex matrix. The elements conjugated by this method,
            see <see cref="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.Transpose" /> for non-conjugated transposing.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HermitianTransposeInplace">
      <MemberSignature Language="C#" Value="public void HermitianTransposeInplace ();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Inplace transpose this square complex matrix. The elements are conjugated by this method,
            see <see cref="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.Transpose" /> for non-conjugated transposing.
            </summary>
        <remarks>
            This method changes this matrix. Only square matrices are supported.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Identity">
      <MemberSignature Language="C#" Value="public static MathNet.Numerics.LinearAlgebra.ComplexMatrix Identity (int m, int n);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.ComplexMatrix</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Int32" />
        <Parameter Name="n" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="m">Number of rows.</param>
        <param name="n">Number of columns.</param>
        <summary>
            Generates the identity matrix.
            </summary>
        <returns>An m-by-n matrix with ones on the diagonal and zeros elsewhere.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public MathNet.Numerics.Complex this[int i, int j] { set; get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="i" Type="System.Int32" />
        <Parameter Name="j" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="i">Row index.</param>
        <param name="j">Column index.</param>
        <summary>
            Gets or set the element indexed by <c>(i, j)</c>
            in the <c>Matrix</c>.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="KroneckerProduct">
      <MemberSignature Language="C#" Value="public static MathNet.Numerics.LinearAlgebra.ComplexMatrix KroneckerProduct (MathNet.Numerics.LinearAlgebra.ComplexMatrix A, MathNet.Numerics.LinearAlgebra.ComplexMatrix B);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.ComplexMatrix</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="A" Type="MathNet.Numerics.LinearAlgebra.ComplexMatrix" />
        <Parameter Name="B" Type="MathNet.Numerics.LinearAlgebra.ComplexMatrix" />
      </Parameters>
      <Docs>
        <param name="A">To be added.</param>
        <param name="B">To be added.</param>
        <summary>
            Kronecker Product of two matrices.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Multiply">
      <MemberSignature Language="C#" Value="public MathNet.Numerics.LinearAlgebra.ComplexMatrix Multiply (MathNet.Numerics.Complex b);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.ComplexMatrix</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="b" Type="MathNet.Numerics.Complex" />
      </Parameters>
      <Docs>
        <param name="b">The other complex scalar.</param>
        <summary>
            Scale this complex matrix with a complex scalar.
            </summary>
        <returns>
            Matrix ret[i,j] = this[i,j] * b
            </returns>
        <remarks>
            This method has the same effect as the overloaded * operator.
            </remarks>
        <exception cref="T:System.ArgumentNullException">B must not be null.</exception>
        <exception cref="T:System.ArgumentException">Matrix inner dimensions must agree.</exception>
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.MultiplyInplace(MathNet.Numerics.Complex)" />
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.op_Multiply(MathNet.Numerics.LinearAlgebra.ComplexMatrix,MathNet.Numerics.Complex)" />
      </Docs>
    </Member>
    <Member MemberName="Multiply">
      <MemberSignature Language="C#" Value="public MathNet.Numerics.LinearAlgebra.ComplexMatrix Multiply (MathNet.Numerics.LinearAlgebra.IMatrix&lt;MathNet.Numerics.Complex&gt; b);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.ComplexMatrix</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="b" Type="MathNet.Numerics.LinearAlgebra.IMatrix&lt;MathNet.Numerics.Complex&gt;" />
      </Parameters>
      <Docs>
        <param name="b">The other complex matrix.</param>
        <summary>
            Complex matrix multiplication.
            </summary>
        <returns>
            Matrix ret[i,j] = sum(this[i,k] * b[k,j])
            </returns>
        <remarks>
            This method has the same effect as the overloaded * operator.
            </remarks>
        <exception cref="T:System.ArgumentNullException">B must not be null.</exception>
        <exception cref="T:System.ArgumentException">Matrix inner dimensions must agree.</exception>
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.MultiplyInplace(MathNet.Numerics.LinearAlgebra.IMatrix{MathNet.Numerics.Complex})" />
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.op_Multiply(MathNet.Numerics.LinearAlgebra.ComplexMatrix,MathNet.Numerics.LinearAlgebra.ComplexMatrix)" />
      </Docs>
    </Member>
    <Member MemberName="Multiply">
      <MemberSignature Language="C#" Value="public MathNet.Numerics.LinearAlgebra.ComplexMatrix Multiply (MathNet.Numerics.LinearAlgebra.IMatrix&lt;double&gt; b);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.ComplexMatrix</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="b" Type="MathNet.Numerics.LinearAlgebra.IMatrix&lt;System.Double&gt;" />
      </Parameters>
      <Docs>
        <param name="b">The other real matrix.</param>
        <summary>
            Complex matrix multiplication.
            </summary>
        <returns>
            Matrix ret[i,j] = sum(this[i,k] * b[k,j])
            </returns>
        <remarks>
            This method has the same effect as the overloaded * operator.
            </remarks>
        <exception cref="T:System.ArgumentNullException">B must not be null.</exception>
        <exception cref="T:System.ArgumentException">Matrix inner dimensions must agree.</exception>
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.MultiplyInplace(MathNet.Numerics.LinearAlgebra.IMatrix{System.Double})" />
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.op_Multiply(MathNet.Numerics.LinearAlgebra.ComplexMatrix,MathNet.Numerics.LinearAlgebra.Matrix)" />
      </Docs>
    </Member>
    <Member MemberName="MultiplyInplace">
      <MemberSignature Language="C#" Value="public void MultiplyInplace (MathNet.Numerics.Complex b);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="b" Type="MathNet.Numerics.Complex" />
      </Parameters>
      <Docs>
        <param name="b">The other complex scalar.</param>
        <summary>
            Inplace scale this matrix by a complex scalar.
            </summary>
        <remarks>
            This method changes this matrix.
            </remarks>
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.Multiply(MathNet.Numerics.Complex)" />
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.op_Multiply(MathNet.Numerics.LinearAlgebra.ComplexMatrix,MathNet.Numerics.Complex)" />
      </Docs>
    </Member>
    <Member MemberName="MultiplyInplace">
      <MemberSignature Language="C#" Value="public void MultiplyInplace (MathNet.Numerics.LinearAlgebra.IMatrix&lt;MathNet.Numerics.Complex&gt; b);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="b" Type="MathNet.Numerics.LinearAlgebra.IMatrix&lt;MathNet.Numerics.Complex&gt;" />
      </Parameters>
      <Docs>
        <param name="b">The other square complex matrix.</param>
        <summary>
            Inplace complex square matrix multiplication.
            </summary>
        <remarks>
            This method changes this matrix. Only square matrices are supported.
            </remarks>
        <exception cref="T:System.ArgumentNullException">B must not be null.</exception>
        <exception cref="T:System.ArgumentException">Matrix inner dimensions must agree.</exception>
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.Multiply(MathNet.Numerics.LinearAlgebra.IMatrix{MathNet.Numerics.Complex})" />
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.op_Multiply(MathNet.Numerics.LinearAlgebra.ComplexMatrix,MathNet.Numerics.LinearAlgebra.ComplexMatrix)" />
      </Docs>
    </Member>
    <Member MemberName="MultiplyInplace">
      <MemberSignature Language="C#" Value="public void MultiplyInplace (MathNet.Numerics.LinearAlgebra.IMatrix&lt;double&gt; b);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="b" Type="MathNet.Numerics.LinearAlgebra.IMatrix&lt;System.Double&gt;" />
      </Parameters>
      <Docs>
        <param name="b">The other square real matrix.</param>
        <summary>
            Inplace complex square matrix multiplication.
            </summary>
        <remarks>
            This method changes this matrix. Only square matrices are supported.
            </remarks>
        <exception cref="T:System.ArgumentNullException">B must not be null.</exception>
        <exception cref="T:System.ArgumentException">Matrix inner dimensions must agree.</exception>
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.Multiply(MathNet.Numerics.LinearAlgebra.IMatrix{System.Double})" />
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.op_Multiply(MathNet.Numerics.LinearAlgebra.ComplexMatrix,MathNet.Numerics.LinearAlgebra.Matrix)" />
      </Docs>
    </Member>
    <Member MemberName="MultiplyLeftDiagonal">
      <MemberSignature Language="C#" Value="public MathNet.Numerics.LinearAlgebra.ComplexMatrix MultiplyLeftDiagonal (MathNet.Numerics.LinearAlgebra.IVector&lt;MathNet.Numerics.Complex&gt; diagonal);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.ComplexMatrix</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="diagonal" Type="MathNet.Numerics.LinearAlgebra.IVector&lt;MathNet.Numerics.Complex&gt;" />
      </Parameters>
      <Docs>
        <param name="diagonal">The left diagonal complex matrix.</param>
        <summary>
            Muliply a diagonal complex matrix with this matrix. This has the same effect
            as scaling the rows of this matrix by the scalar elements of the diagonal.
            </summary>
        <returns>
            Matrix ret[i,j] = this[i,j] * diagonal[i]
            </returns>
        <remarks>
            This method has the same effect as the overloaded * operator.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="MultiplyLeftDiagonal">
      <MemberSignature Language="C#" Value="public MathNet.Numerics.LinearAlgebra.ComplexMatrix MultiplyLeftDiagonal (MathNet.Numerics.LinearAlgebra.IVector&lt;double&gt; diagonal);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.ComplexMatrix</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="diagonal" Type="MathNet.Numerics.LinearAlgebra.IVector&lt;System.Double&gt;" />
      </Parameters>
      <Docs>
        <param name="diagonal">The left diagonal real matrix.</param>
        <summary>
            Muliply a diagonal real matrix with this matrix. This has the same effect
            as scaling the rows of this matrix by the scalar elements of the diagonal.
            </summary>
        <returns>
            Matrix ret[i,j] = this[i,j] * diagonal[i]
            </returns>
        <remarks>
            This method has the same effect as the overloaded * operator.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="MultiplyLeftDiagonalInplace">
      <MemberSignature Language="C#" Value="public void MultiplyLeftDiagonalInplace (MathNet.Numerics.LinearAlgebra.IVector&lt;MathNet.Numerics.Complex&gt; diagonal);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="diagonal" Type="MathNet.Numerics.LinearAlgebra.IVector&lt;MathNet.Numerics.Complex&gt;" />
      </Parameters>
      <Docs>
        <param name="diagonal">The left diagonal complex matrix.</param>
        <summary>
            Inplace muliply a complex diagonal matrix with this matrix. This has the same effect
            as scaling the rows of this matrix by the scalar elements of the diagonal.
            </summary>
        <remarks>
            This method changes this matrix.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="MultiplyLeftDiagonalInplace">
      <MemberSignature Language="C#" Value="public void MultiplyLeftDiagonalInplace (MathNet.Numerics.LinearAlgebra.IVector&lt;double&gt; diagonal);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="diagonal" Type="MathNet.Numerics.LinearAlgebra.IVector&lt;System.Double&gt;" />
      </Parameters>
      <Docs>
        <param name="diagonal">The left diagonal real matrix.</param>
        <summary>
            Inplace muliply a real diagonal matrix with this matrix. This has the same effect
            as scaling the rows of this matrix by the scalar elements of the diagonal.
            </summary>
        <remarks>
            This method changes this matrix.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="MultiplyRightColumn">
      <MemberSignature Language="C#" Value="public MathNet.Numerics.LinearAlgebra.ComplexVector MultiplyRightColumn (MathNet.Numerics.LinearAlgebra.IVector&lt;MathNet.Numerics.Complex&gt; b);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.ComplexVector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="b" Type="MathNet.Numerics.LinearAlgebra.IVector&lt;MathNet.Numerics.Complex&gt;" />
      </Parameters>
      <Docs>
        <param name="b">The right complex column vector.</param>
        <summary>
            Multiply this matrix with a right complex column vector.
            </summary>
        <returns>
            Vector ret[i] = sum(this[i,k] * b[k])
            </returns>
        <remarks>
            This method has the same effect as the overloaded * operator.
            </remarks>
        <exception cref="T:System.ArgumentNullException">B must not be null.</exception>
        <exception cref="T:System.ArgumentException">Matrix inner dimensions must agree.</exception>
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.op_Multiply(MathNet.Numerics.LinearAlgebra.ComplexMatrix,MathNet.Numerics.LinearAlgebra.ComplexVector)" />
      </Docs>
    </Member>
    <Member MemberName="MultiplyRightColumn">
      <MemberSignature Language="C#" Value="public MathNet.Numerics.LinearAlgebra.ComplexVector MultiplyRightColumn (MathNet.Numerics.LinearAlgebra.IVector&lt;double&gt; b);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.ComplexVector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="b" Type="MathNet.Numerics.LinearAlgebra.IVector&lt;System.Double&gt;" />
      </Parameters>
      <Docs>
        <param name="b">The right real column vector.</param>
        <summary>
            Multiply this matrix with a right real column vector.
            </summary>
        <returns>
            Vector ret[i] = sum(this[i,k] * b[k])
            </returns>
        <remarks>
            This method has the same effect as the overloaded * operator.
            </remarks>
        <exception cref="T:System.ArgumentNullException">B must not be null.</exception>
        <exception cref="T:System.ArgumentException">Matrix inner dimensions must agree.</exception>
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.op_Multiply(MathNet.Numerics.LinearAlgebra.ComplexMatrix,MathNet.Numerics.LinearAlgebra.Vector)" />
      </Docs>
    </Member>
    <Member MemberName="MultiplyRightDiagonal">
      <MemberSignature Language="C#" Value="public MathNet.Numerics.LinearAlgebra.ComplexMatrix MultiplyRightDiagonal (MathNet.Numerics.LinearAlgebra.IVector&lt;MathNet.Numerics.Complex&gt; diagonal);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.ComplexMatrix</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="diagonal" Type="MathNet.Numerics.LinearAlgebra.IVector&lt;MathNet.Numerics.Complex&gt;" />
      </Parameters>
      <Docs>
        <param name="diagonal">The right diagonal complex matrix.</param>
        <summary>
            Muliply this matrix with a complex diagonal matrix. This has the same effect
            as scaling the columns of this matrix by the scalar elements of the diagonal.
            </summary>
        <returns>
            Matrix ret[i,j] = this[i,j] * diagonal[j]
            </returns>
        <remarks>
            This method has the same effect as the overloaded * operator.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="MultiplyRightDiagonal">
      <MemberSignature Language="C#" Value="public MathNet.Numerics.LinearAlgebra.ComplexMatrix MultiplyRightDiagonal (MathNet.Numerics.LinearAlgebra.IVector&lt;double&gt; diagonal);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.ComplexMatrix</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="diagonal" Type="MathNet.Numerics.LinearAlgebra.IVector&lt;System.Double&gt;" />
      </Parameters>
      <Docs>
        <param name="diagonal">The right diagonal real matrix.</param>
        <summary>
            Muliply this matrix with a real diagonal matrix. This has the same effect
            as scaling the columns of this matrix by the scalar elements of the diagonal.
            </summary>
        <returns>
            Matrix ret[i,j] = this[i,j] * diagonal[j]
            </returns>
        <remarks>
            This method has the same effect as the overloaded * operator.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="MultiplyRightDiagonalInplace">
      <MemberSignature Language="C#" Value="public void MultiplyRightDiagonalInplace (MathNet.Numerics.LinearAlgebra.IVector&lt;MathNet.Numerics.Complex&gt; diagonal);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="diagonal" Type="MathNet.Numerics.LinearAlgebra.IVector&lt;MathNet.Numerics.Complex&gt;" />
      </Parameters>
      <Docs>
        <param name="diagonal">The right diagonal complex matrix.</param>
        <summary>
            Inplace Muliply this matrix with a complex diagonal matrix. This has the same effect
            as scaling the columns of this matrix by the scalar elements of the diagonal.
            </summary>
        <remarks>
            This method changes this matrix.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="MultiplyRightDiagonalInplace">
      <MemberSignature Language="C#" Value="public void MultiplyRightDiagonalInplace (MathNet.Numerics.LinearAlgebra.IVector&lt;double&gt; diagonal);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="diagonal" Type="MathNet.Numerics.LinearAlgebra.IVector&lt;System.Double&gt;" />
      </Parameters>
      <Docs>
        <param name="diagonal">The right diagonal real matrix.</param>
        <summary>
            Inplace Muliply this matrix with a real diagonal matrix. This has the same effect
            as scaling the columns of this matrix by the scalar elements of the diagonal.
            </summary>
        <remarks>
            This method changes this matrix.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Negate">
      <MemberSignature Language="C#" Value="public MathNet.Numerics.LinearAlgebra.ComplexMatrix Negate ();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.ComplexMatrix</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Negate this complex matrix.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NegateInplace">
      <MemberSignature Language="C#" Value="public void NegateInplace ();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            In place negation of this complex matrix.
            </summary>
        <remarks>
            This method changes this matrix.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Norm1">
      <MemberSignature Language="C#" Value="public double Norm1 ();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>One norm</summary>
        <returns>Maximum column sum.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Ones">
      <MemberSignature Language="C#" Value="public static MathNet.Numerics.LinearAlgebra.ComplexMatrix Ones (int m);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.ComplexMatrix</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="m">Number of rows = Number of columns</param>
        <summary>
            Generates an m-by-m matrix filled with 1.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Addition">
      <MemberSignature Language="C#" Value="public static MathNet.Numerics.LinearAlgebra.ComplexMatrix op_Addition (MathNet.Numerics.Complex scalar, MathNet.Numerics.LinearAlgebra.ComplexMatrix m2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.ComplexMatrix</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scalar" Type="MathNet.Numerics.Complex" />
        <Parameter Name="m2" Type="MathNet.Numerics.LinearAlgebra.ComplexMatrix" />
      </Parameters>
      <Docs>
        <param name="scalar">To be added.</param>
        <param name="m2">To be added.</param>
        <summary>
            Addition Operator
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Addition">
      <MemberSignature Language="C#" Value="public static MathNet.Numerics.LinearAlgebra.ComplexMatrix op_Addition (MathNet.Numerics.LinearAlgebra.ComplexMatrix m1, MathNet.Numerics.Complex scalar);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.ComplexMatrix</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m1" Type="MathNet.Numerics.LinearAlgebra.ComplexMatrix" />
        <Parameter Name="scalar" Type="MathNet.Numerics.Complex" />
      </Parameters>
      <Docs>
        <param name="m1">To be added.</param>
        <param name="scalar">To be added.</param>
        <summary>
            Addition Operator
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Addition">
      <MemberSignature Language="C#" Value="public static MathNet.Numerics.LinearAlgebra.ComplexMatrix op_Addition (MathNet.Numerics.LinearAlgebra.ComplexMatrix m1, MathNet.Numerics.LinearAlgebra.ComplexMatrix m2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.ComplexMatrix</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m1" Type="MathNet.Numerics.LinearAlgebra.ComplexMatrix" />
        <Parameter Name="m2" Type="MathNet.Numerics.LinearAlgebra.ComplexMatrix" />
      </Parameters>
      <Docs>
        <param name="m1">To be added.</param>
        <param name="m2">To be added.</param>
        <summary>
            Addition Operator
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Addition">
      <MemberSignature Language="C#" Value="public static MathNet.Numerics.LinearAlgebra.ComplexMatrix op_Addition (MathNet.Numerics.LinearAlgebra.ComplexMatrix m1, MathNet.Numerics.LinearAlgebra.Matrix m2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.ComplexMatrix</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m1" Type="MathNet.Numerics.LinearAlgebra.ComplexMatrix" />
        <Parameter Name="m2" Type="MathNet.Numerics.LinearAlgebra.Matrix" />
      </Parameters>
      <Docs>
        <param name="m1">To be added.</param>
        <param name="m2">To be added.</param>
        <summary>
            Addition Operator
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static MathNet.Numerics.Complex op_Explicit (MathNet.Numerics.LinearAlgebra.ComplexMatrix m);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="MathNet.Numerics.LinearAlgebra.ComplexMatrix" />
      </Parameters>
      <Docs>
        <param name="m">1-by-1 Matrix</param>
        <summary>
            Excplicit conversion to a <c>Complex</c> scalar of a single column and row (1-by-1) matrix.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static MathNet.Numerics.Complex[] op_Explicit (MathNet.Numerics.LinearAlgebra.ComplexMatrix m);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.Complex[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="MathNet.Numerics.LinearAlgebra.ComplexMatrix" />
      </Parameters>
      <Docs>
        <param name="m">Exactly one column expected.</param>
        <summary>
            Explicit convertion to a <c>Complex[]</c> array of a single column matrix.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static MathNet.Numerics.Complex[][] op_Implicit (MathNet.Numerics.LinearAlgebra.ComplexMatrix m);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.Complex[][]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="MathNet.Numerics.LinearAlgebra.ComplexMatrix" />
      </Parameters>
      <Docs>
        <param name="m">To be added.</param>
        <summary>Implicit convertion to a <c>Complex[][]</c> array.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Multiply">
      <MemberSignature Language="C#" Value="public static MathNet.Numerics.LinearAlgebra.ComplexMatrix op_Multiply (MathNet.Numerics.Complex s, MathNet.Numerics.LinearAlgebra.ComplexMatrix m);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.ComplexMatrix</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="MathNet.Numerics.Complex" />
        <Parameter Name="m" Type="MathNet.Numerics.LinearAlgebra.ComplexMatrix" />
      </Parameters>
      <Docs>
        <param name="s">To be added.</param>
        <param name="m">To be added.</param>
        <summary>
            Multiplication of a matrix by a scalar, C = s*A
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Multiply">
      <MemberSignature Language="C#" Value="public static MathNet.Numerics.LinearAlgebra.ComplexMatrix op_Multiply (MathNet.Numerics.LinearAlgebra.ComplexMatrix m, MathNet.Numerics.Complex s);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.ComplexMatrix</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="MathNet.Numerics.LinearAlgebra.ComplexMatrix" />
        <Parameter Name="s" Type="MathNet.Numerics.Complex" />
      </Parameters>
      <Docs>
        <param name="m">To be added.</param>
        <param name="s">To be added.</param>
        <summary>
            Multiplication of a matrix by a scalar, C = s*A
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Multiply">
      <MemberSignature Language="C#" Value="public static MathNet.Numerics.LinearAlgebra.ComplexMatrix op_Multiply (MathNet.Numerics.LinearAlgebra.ComplexMatrix m1, MathNet.Numerics.LinearAlgebra.ComplexMatrix m2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.ComplexMatrix</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m1" Type="MathNet.Numerics.LinearAlgebra.ComplexMatrix" />
        <Parameter Name="m2" Type="MathNet.Numerics.LinearAlgebra.ComplexMatrix" />
      </Parameters>
      <Docs>
        <param name="m1">To be added.</param>
        <param name="m2">To be added.</param>
        <summary>
            Multiplication Operator.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Matrix inner dimensions must agree.</exception>
      </Docs>
    </Member>
    <Member MemberName="op_Multiply">
      <MemberSignature Language="C#" Value="public static MathNet.Numerics.LinearAlgebra.ComplexVector op_Multiply (MathNet.Numerics.LinearAlgebra.ComplexMatrix m1, MathNet.Numerics.LinearAlgebra.ComplexVector v2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.ComplexVector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m1" Type="MathNet.Numerics.LinearAlgebra.ComplexMatrix" />
        <Parameter Name="v2" Type="MathNet.Numerics.LinearAlgebra.ComplexVector" />
      </Parameters>
      <Docs>
        <param name="m1">To be added.</param>
        <param name="v2">To be added.</param>
        <summary>
            Multiply a complex matrix with a complex column vector.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Matrix inner dimensions must agree.</exception>
      </Docs>
    </Member>
    <Member MemberName="op_Multiply">
      <MemberSignature Language="C#" Value="public static MathNet.Numerics.LinearAlgebra.ComplexMatrix op_Multiply (MathNet.Numerics.LinearAlgebra.ComplexMatrix m1, MathNet.Numerics.LinearAlgebra.Matrix m2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.ComplexMatrix</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m1" Type="MathNet.Numerics.LinearAlgebra.ComplexMatrix" />
        <Parameter Name="m2" Type="MathNet.Numerics.LinearAlgebra.Matrix" />
      </Parameters>
      <Docs>
        <param name="m1">To be added.</param>
        <param name="m2">To be added.</param>
        <summary>
            Multiplication Operator.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Matrix inner dimensions must agree.</exception>
      </Docs>
    </Member>
    <Member MemberName="op_Multiply">
      <MemberSignature Language="C#" Value="public static MathNet.Numerics.LinearAlgebra.ComplexVector op_Multiply (MathNet.Numerics.LinearAlgebra.ComplexMatrix m1, MathNet.Numerics.LinearAlgebra.Vector v2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.ComplexVector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m1" Type="MathNet.Numerics.LinearAlgebra.ComplexMatrix" />
        <Parameter Name="v2" Type="MathNet.Numerics.LinearAlgebra.Vector" />
      </Parameters>
      <Docs>
        <param name="m1">To be added.</param>
        <param name="v2">To be added.</param>
        <summary>
            Multiply a complex matrix with a real column vector.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Matrix inner dimensions must agree.</exception>
      </Docs>
    </Member>
    <Member MemberName="op_Subtraction">
      <MemberSignature Language="C#" Value="public static MathNet.Numerics.LinearAlgebra.ComplexMatrix op_Subtraction (MathNet.Numerics.LinearAlgebra.ComplexMatrix m1, MathNet.Numerics.Complex scalar);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.ComplexMatrix</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m1" Type="MathNet.Numerics.LinearAlgebra.ComplexMatrix" />
        <Parameter Name="scalar" Type="MathNet.Numerics.Complex" />
      </Parameters>
      <Docs>
        <param name="m1">To be added.</param>
        <param name="scalar">To be added.</param>
        <summary>
            Subtraction Operator
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Subtraction">
      <MemberSignature Language="C#" Value="public static MathNet.Numerics.LinearAlgebra.ComplexMatrix op_Subtraction (MathNet.Numerics.LinearAlgebra.ComplexMatrix m1, MathNet.Numerics.LinearAlgebra.ComplexMatrix m2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.ComplexMatrix</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m1" Type="MathNet.Numerics.LinearAlgebra.ComplexMatrix" />
        <Parameter Name="m2" Type="MathNet.Numerics.LinearAlgebra.ComplexMatrix" />
      </Parameters>
      <Docs>
        <param name="m1">To be added.</param>
        <param name="m2">To be added.</param>
        <summary>
            Subtraction Operator
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Subtraction">
      <MemberSignature Language="C#" Value="public static MathNet.Numerics.LinearAlgebra.ComplexMatrix op_Subtraction (MathNet.Numerics.LinearAlgebra.ComplexMatrix m1, MathNet.Numerics.LinearAlgebra.Matrix m2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.ComplexMatrix</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m1" Type="MathNet.Numerics.LinearAlgebra.ComplexMatrix" />
        <Parameter Name="m2" Type="MathNet.Numerics.LinearAlgebra.Matrix" />
      </Parameters>
      <Docs>
        <param name="m1">To be added.</param>
        <param name="m2">To be added.</param>
        <summary>
            Subtraction Operator
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_UnaryNegation">
      <MemberSignature Language="C#" Value="public static MathNet.Numerics.LinearAlgebra.ComplexMatrix op_UnaryNegation (MathNet.Numerics.LinearAlgebra.ComplexMatrix m1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.ComplexMatrix</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m1" Type="MathNet.Numerics.LinearAlgebra.ComplexMatrix" />
      </Parameters>
      <Docs>
        <param name="m1">To be added.</param>
        <summary>
            Negation Operator
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Random">
      <MemberSignature Language="C#" Value="public static MathNet.Numerics.LinearAlgebra.ComplexMatrix Random (int m, int n, MathNet.Numerics.Distributions.IContinuousGenerator randomDistribution);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.ComplexMatrix</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Int32" />
        <Parameter Name="n" Type="System.Int32" />
        <Parameter Name="randomDistribution" Type="MathNet.Numerics.Distributions.IContinuousGenerator" />
      </Parameters>
      <Docs>
        <param name="m">Number of rows.</param>
        <param name="n">Number of columns.</param>
        <param name="randomDistribution">Continuous Random Distribution or Source</param>
        <summary>
            Generates matrix with random real and imaginary elements.
            </summary>
        <returns>An m-by-n matrix with real and imaginary elements distributed according to the provided distribution.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RandomPolar">
      <MemberSignature Language="C#" Value="public static MathNet.Numerics.LinearAlgebra.ComplexMatrix RandomPolar (int m, int n, MathNet.Numerics.Distributions.IContinuousGenerator modulusRandomDistribution, MathNet.Numerics.Distributions.IContinuousGenerator argumentRandomDistribution);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.ComplexMatrix</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Int32" />
        <Parameter Name="n" Type="System.Int32" />
        <Parameter Name="modulusRandomDistribution" Type="MathNet.Numerics.Distributions.IContinuousGenerator" />
        <Parameter Name="argumentRandomDistribution" Type="MathNet.Numerics.Distributions.IContinuousGenerator" />
      </Parameters>
      <Docs>
        <param name="m">Number of rows.</param>
        <param name="n">Number of columns.</param>
        <param name="modulusRandomDistribution">Continuous Random Distribution or Source for the modulus part (must be non-negative!).</param>
        <param name="argumentRandomDistribution">Continuous Random Distribution or Source for the argument part.</param>
        <summary>
            Generates matrix with random modulus and argument elements.
            </summary>
        <returns>An m-by-n matrix with imaginary parts distributed according to the provided distribution.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RandomReal">
      <MemberSignature Language="C#" Value="public static MathNet.Numerics.LinearAlgebra.ComplexMatrix RandomReal (int m, int n, MathNet.Numerics.Distributions.IContinuousGenerator realRandomDistribution);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.ComplexMatrix</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Int32" />
        <Parameter Name="n" Type="System.Int32" />
        <Parameter Name="realRandomDistribution" Type="MathNet.Numerics.Distributions.IContinuousGenerator" />
      </Parameters>
      <Docs>
        <param name="m">Number of rows.</param>
        <param name="n">Number of columns.</param>
        <param name="realRandomDistribution">Continuous Random Distribution or Source for the real part.</param>
        <summary>
            Generates matrix with random real and zero imaginary elements.
            </summary>
        <returns>An m-by-n matrix with real parts distributed according to the provided distribution.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RandomUnitCircle">
      <MemberSignature Language="C#" Value="public static MathNet.Numerics.LinearAlgebra.ComplexMatrix RandomUnitCircle (int m, int n, MathNet.Numerics.Distributions.IContinuousGenerator argumentRandomDistribution);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.ComplexMatrix</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Int32" />
        <Parameter Name="n" Type="System.Int32" />
        <Parameter Name="argumentRandomDistribution" Type="MathNet.Numerics.Distributions.IContinuousGenerator" />
      </Parameters>
      <Docs>
        <param name="m">Number of rows.</param>
        <param name="n">Number of columns.</param>
        <param name="argumentRandomDistribution">Continuous random distribution or source for the complex number arguments.</param>
        <summary>
            Generates a matrix of complex numbers on the unit circle with random argument.
            </summary>
        <returns>An m-by-n matrix with complex arguments distributed according to the provided distribution.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResetComputations">
      <MemberSignature Language="C#" Value="public void ResetComputations ();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Reset various internal computations.
            Call this method after you made changes directly
            on the the internal double[][] data structure.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RowCount">
      <MemberSignature Language="C#" Value="public int RowCount { get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the number of rows.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetColumnVector">
      <MemberSignature Language="C#" Value="public void SetColumnVector (MathNet.Numerics.LinearAlgebra.IVector&lt;MathNet.Numerics.Complex&gt; columnVector, int columnIndex);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="columnVector" Type="MathNet.Numerics.LinearAlgebra.IVector&lt;MathNet.Numerics.Complex&gt;" />
        <Parameter Name="columnIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="columnVector">To be added.</param>
        <param name="columnIndex">To be added.</param>
        <summary>
            Copies a column vector to a specified column of this matrix.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetMatrix">
      <MemberSignature Language="C#" Value="public void SetMatrix (int[] r, int[] c, MathNet.Numerics.LinearAlgebra.IMatrix&lt;MathNet.Numerics.Complex&gt; X);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="r" Type="System.Int32[]" />
        <Parameter Name="c" Type="System.Int32[]" />
        <Parameter Name="X" Type="MathNet.Numerics.LinearAlgebra.IMatrix&lt;MathNet.Numerics.Complex&gt;" />
      </Parameters>
      <Docs>
        <param name="r">Array of row indices.</param>
        <param name="c">Array of column indices.</param>
        <param name="X">A(r(:),c(:))</param>
        <summary>
            Sets a submatrix.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.IndexOutOfRangeException">Submatrix indices</exception>
      </Docs>
    </Member>
    <Member MemberName="SetMatrix">
      <MemberSignature Language="C#" Value="public void SetMatrix (int i0, int i1, int[] c, MathNet.Numerics.LinearAlgebra.IMatrix&lt;MathNet.Numerics.Complex&gt; X);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="i0" Type="System.Int32" />
        <Parameter Name="i1" Type="System.Int32" />
        <Parameter Name="c" Type="System.Int32[]" />
        <Parameter Name="X" Type="MathNet.Numerics.LinearAlgebra.IMatrix&lt;MathNet.Numerics.Complex&gt;" />
      </Parameters>
      <Docs>
        <param name="i0">First row index.</param>
        <param name="i1">Last row index (inclusive).</param>
        <param name="c">Array of column indices.</param>
        <param name="X">A(i0:i1,c(:))</param>
        <summary>
            Set a submatrix.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.IndexOutOfRangeException">Submatrix indices.</exception>
      </Docs>
    </Member>
    <Member MemberName="SetMatrix">
      <MemberSignature Language="C#" Value="public void SetMatrix (int[] r, int j0, int j1, MathNet.Numerics.LinearAlgebra.IMatrix&lt;MathNet.Numerics.Complex&gt; X);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="r" Type="System.Int32[]" />
        <Parameter Name="j0" Type="System.Int32" />
        <Parameter Name="j1" Type="System.Int32" />
        <Parameter Name="X" Type="MathNet.Numerics.LinearAlgebra.IMatrix&lt;MathNet.Numerics.Complex&gt;" />
      </Parameters>
      <Docs>
        <param name="r">Array of row indices.</param>
        <param name="j0">First column index.</param>
        <param name="j1">Last column index (inclusive).</param>
        <param name="X">A(r(:),j0:j1)</param>
        <summary>
            Sets a submatrix.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.IndexOutOfRangeException">Submatrix indices</exception>
      </Docs>
    </Member>
    <Member MemberName="SetMatrix">
      <MemberSignature Language="C#" Value="public void SetMatrix (int i0, int i1, int j0, int j1, MathNet.Numerics.LinearAlgebra.IMatrix&lt;MathNet.Numerics.Complex&gt; X);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="i0" Type="System.Int32" />
        <Parameter Name="i1" Type="System.Int32" />
        <Parameter Name="j0" Type="System.Int32" />
        <Parameter Name="j1" Type="System.Int32" />
        <Parameter Name="X" Type="MathNet.Numerics.LinearAlgebra.IMatrix&lt;MathNet.Numerics.Complex&gt;" />
      </Parameters>
      <Docs>
        <param name="i0">First row index.</param>
        <param name="i1">Last row index (inclusive).</param>
        <param name="j0">First column index.</param>
        <param name="j1">Last column index (inclusive).</param>
        <param name="X">A(i0:i1,j0:j1)</param>
        <summary>
            Set a submatrix.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.IndexOutOfRangeException">Submatrix indices.</exception>
      </Docs>
    </Member>
    <Member MemberName="SetRowVector">
      <MemberSignature Language="C#" Value="public void SetRowVector (MathNet.Numerics.LinearAlgebra.IVector&lt;MathNet.Numerics.Complex&gt; rowVector, int rowIndex);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rowVector" Type="MathNet.Numerics.LinearAlgebra.IVector&lt;MathNet.Numerics.Complex&gt;" />
        <Parameter Name="rowIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="rowVector">To be added.</param>
        <param name="rowIndex">To be added.</param>
        <summary>
            Copies a row vector to a specified row of this matrix.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Subtract">
      <MemberSignature Language="C#" Value="public MathNet.Numerics.LinearAlgebra.ComplexMatrix Subtract (MathNet.Numerics.Complex b);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.ComplexMatrix</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="b" Type="MathNet.Numerics.Complex" />
      </Parameters>
      <Docs>
        <param name="b">The complex scalar.</param>
        <summary>
            Subtract a complex scalar from all elements of this complex matrix.
            </summary>
        <returns>
            Matrix ret[i,j] = this[i,j] - b
            </returns>
        <remarks>
            This method has the same effect as the overloaded - operator.
            </remarks>
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.SubtractInplace(MathNet.Numerics.Complex)" />
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.op_Subtraction(MathNet.Numerics.LinearAlgebra.ComplexMatrix,MathNet.Numerics.Complex)" />
      </Docs>
    </Member>
    <Member MemberName="Subtract">
      <MemberSignature Language="C#" Value="public MathNet.Numerics.LinearAlgebra.ComplexMatrix Subtract (MathNet.Numerics.LinearAlgebra.IMatrix&lt;MathNet.Numerics.Complex&gt; b);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.ComplexMatrix</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="b" Type="MathNet.Numerics.LinearAlgebra.IMatrix&lt;MathNet.Numerics.Complex&gt;" />
      </Parameters>
      <Docs>
        <param name="b">The other complex matrix.</param>
        <summary>
            Subtract another complex matrix from this complex matrix.
            </summary>
        <returns>
            Matrix ret[i,j] = this[i,j] - b[i,j]
            </returns>
        <remarks>
            This method has the same effect as the overloaded - operator.
            </remarks>
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.SubtractInplace(MathNet.Numerics.LinearAlgebra.IMatrix{MathNet.Numerics.Complex})" />
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.op_Subtraction(MathNet.Numerics.LinearAlgebra.ComplexMatrix,MathNet.Numerics.LinearAlgebra.ComplexMatrix)" />
      </Docs>
    </Member>
    <Member MemberName="Subtract">
      <MemberSignature Language="C#" Value="public MathNet.Numerics.LinearAlgebra.ComplexMatrix Subtract (MathNet.Numerics.LinearAlgebra.IMatrix&lt;double&gt; b);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.ComplexMatrix</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="b" Type="MathNet.Numerics.LinearAlgebra.IMatrix&lt;System.Double&gt;" />
      </Parameters>
      <Docs>
        <param name="b">The other real matrix.</param>
        <summary>
            Subtract another real matrix from this complex matrix.
            </summary>
        <returns>
            Matrix ret[i,j] = this[i,j] - b[i,j]
            </returns>
        <remarks>
            This method has the same effect as the overloaded - operator.
            </remarks>
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.SubtractInplace(MathNet.Numerics.LinearAlgebra.IMatrix{System.Double})" />
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.op_Subtraction(MathNet.Numerics.LinearAlgebra.ComplexMatrix,MathNet.Numerics.LinearAlgebra.Matrix)" />
      </Docs>
    </Member>
    <Member MemberName="SubtractInplace">
      <MemberSignature Language="C#" Value="public void SubtractInplace (MathNet.Numerics.Complex b);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="b" Type="MathNet.Numerics.Complex" />
      </Parameters>
      <Docs>
        <param name="b">The complex scalar.</param>
        <summary>
            In place subtraction of a complex scalar from all elements of this complex matrix.
            </summary>
        <remarks>
            This method changes this matrix.
            </remarks>
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.Subtract(MathNet.Numerics.Complex)" />
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.op_Subtraction(MathNet.Numerics.LinearAlgebra.ComplexMatrix,MathNet.Numerics.Complex)" />
      </Docs>
    </Member>
    <Member MemberName="SubtractInplace">
      <MemberSignature Language="C#" Value="public void SubtractInplace (MathNet.Numerics.LinearAlgebra.IMatrix&lt;MathNet.Numerics.Complex&gt; b);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="b" Type="MathNet.Numerics.LinearAlgebra.IMatrix&lt;MathNet.Numerics.Complex&gt;" />
      </Parameters>
      <Docs>
        <param name="b">The other complex matrix.</param>
        <summary>
            In place subtraction of another complex matrix from this complex matrix.
            </summary>
        <remarks>
            This method changes this matrix.
            </remarks>
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.Subtract(MathNet.Numerics.LinearAlgebra.IMatrix{MathNet.Numerics.Complex})" />
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.op_Subtraction(MathNet.Numerics.LinearAlgebra.ComplexMatrix,MathNet.Numerics.LinearAlgebra.ComplexMatrix)" />
      </Docs>
    </Member>
    <Member MemberName="SubtractInplace">
      <MemberSignature Language="C#" Value="public void SubtractInplace (MathNet.Numerics.LinearAlgebra.IMatrix&lt;double&gt; b);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="b" Type="MathNet.Numerics.LinearAlgebra.IMatrix&lt;System.Double&gt;" />
      </Parameters>
      <Docs>
        <param name="b">The other real matrix.</param>
        <summary>
            In place subtraction of another real matrix from this complex matrix.
            </summary>
        <remarks>
            This method changes this matrix.
            </remarks>
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.Subtract(MathNet.Numerics.LinearAlgebra.IMatrix{System.Double})" />
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.op_Subtraction(MathNet.Numerics.LinearAlgebra.ComplexMatrix,MathNet.Numerics.LinearAlgebra.Matrix)" />
      </Docs>
    </Member>
    <Member MemberName="System.ICloneable.Clone">
      <MemberSignature Language="C#" Value="object ICloneable.Clone ();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TensorMultiply">
      <MemberSignature Language="C#" Value="public MathNet.Numerics.LinearAlgebra.ComplexMatrix TensorMultiply (MathNet.Numerics.LinearAlgebra.ComplexMatrix B);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.ComplexMatrix</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="B" Type="MathNet.Numerics.LinearAlgebra.ComplexMatrix" />
      </Parameters>
      <Docs>
        <param name="B">The matrix to operate on.</param>
        <summary>
            Tensor Product (Kronecker) of this and another matrix.
            </summary>
        <returns>
            Kronecker Product of this and the given matrix.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Formats this matrix to a human-readable string
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Transpose">
      <MemberSignature Language="C#" Value="public MathNet.Numerics.LinearAlgebra.ComplexMatrix Transpose ();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.ComplexMatrix</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Transpose this complex matrix. The elements are not conjugated by this method,
            see <see cref="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.HermitianTranspose" /> for conjugated transposing.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TransposeInplace">
      <MemberSignature Language="C#" Value="public void TransposeInplace ();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Inplace transpose this square complex matrix. The elements are not conjugated by this method,
            see <see cref="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.HermitianTransposeInplace" /> for conjugated transposing.
            </summary>
        <remarks>
            This method changes this matrix. Only square matrices are supported.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Zeros">
      <MemberSignature Language="C#" Value="public static MathNet.Numerics.LinearAlgebra.ComplexMatrix Zeros (int m);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.ComplexMatrix</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="m">Number of rows = Number of columns</param>
        <summary>
            Generates an m-by-m matrix filled with 0.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
