<Type Name="Matrix" FullName="MathNet.Numerics.LinearAlgebra.Matrix">
  <TypeSignature Language="C#" Value="public class Matrix : ICloneable, MathNet.Numerics.LinearAlgebra.IMatrix&lt;double&gt;" />
  <AssemblyInfo>
    <AssemblyName>MathNet.Iridium</AssemblyName>
    <AssemblyVersion>2008.8.16.470</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>MathNet.Numerics.LinearAlgebra.IMatrix&lt;System.Double&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Reflection.DefaultMember("Item")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
            Real matrix.
            </summary>
    <remarks>
            The class <c>Matrix</c> provides the elementary operations
            on matrices (addition, multiplication, inversion, transposition, ...).
            Helpers to handle sub-matrices are also provided.
            </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Matrix (double[,] A);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Use 'Matrix.Create(double[,])' or 'new Matrix(double[][])' instead")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="A" Type="System.Double[,]" />
      </Parameters>
      <Docs>
        <param name="A">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Matrix (double[][] A);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="A" Type="System.Double[][]" />
      </Parameters>
      <Docs>
        <param name="A">Two-dimensional jagged array of doubles.</param>
        <summary>
            Constructs a matrix from a jagged 2-D array,
            directly using the provided array as internal data structure.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">All rows must have the same length.</exception>
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.Matrix.Create(System.Double[][])" />
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.Matrix.Create(System.Double[0:,0:])" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Matrix (double[] vals, int m);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="vals" Type="System.Double[]" />
        <Parameter Name="m" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="vals">One-dimensional array of doubles, packed by columns (ala Fortran).</param>
        <param name="m">Number of rows.</param>
        <summary>
            Construct a matrix from a one-dimensional packed array
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Array length must be a multiple of m.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Matrix (int m, double s);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="m" Type="System.Int32" />
        <Parameter Name="s" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="m">Size of the square matrix.</param>
        <param name="s">Diagonal value.</param>
        <summary>
            Constructs a m-by-m square matrix.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Matrix (int m, int n);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="m" Type="System.Int32" />
        <Parameter Name="n" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="m">Number of rows.</param>
        <param name="n">Number of columns.</param>
        <summary>
            Construct an m-by-n matrix of zeros.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Matrix (int m, int n, double s);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="m" Type="System.Int32" />
        <Parameter Name="n" Type="System.Int32" />
        <Parameter Name="s" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="m">Number of rows.</param>
        <param name="n">Number of columns.</param>
        <param name="s">Fill the matrix with this scalar value.</param>
        <summary>
            Construct an m-by-n constant matrix.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public virtual void Add (MathNet.Numerics.LinearAlgebra.IMatrix&lt;double&gt; m);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="MathNet.Numerics.LinearAlgebra.IMatrix&lt;System.Double&gt;" />
      </Parameters>
      <Docs>
        <param name="m">To be added.</param>
        <summary>
            In place addition of <c>m</c> to this <c>Matrix</c>.
            </summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.Matrix.op_Addition(MathNet.Numerics.LinearAlgebra.Matrix,MathNet.Numerics.LinearAlgebra.Matrix)" />
      </Docs>
    </Member>
    <Member MemberName="AlmostEqual">
      <MemberSignature Language="C#" Value="public static bool AlmostEqual (MathNet.Numerics.LinearAlgebra.Matrix X, MathNet.Numerics.LinearAlgebra.Matrix Y);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="X" Type="MathNet.Numerics.LinearAlgebra.Matrix" />
        <Parameter Name="Y" Type="MathNet.Numerics.LinearAlgebra.Matrix" />
      </Parameters>
      <Docs>
        <param name="X">To be added.</param>
        <param name="Y">To be added.</param>
        <summary>
            Returns true if two matrices are almost equal.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AlmostEqual">
      <MemberSignature Language="C#" Value="public static bool AlmostEqual (MathNet.Numerics.LinearAlgebra.Matrix X, MathNet.Numerics.LinearAlgebra.Matrix Y, double relativeAccuracy);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="X" Type="MathNet.Numerics.LinearAlgebra.Matrix" />
        <Parameter Name="Y" Type="MathNet.Numerics.LinearAlgebra.Matrix" />
        <Parameter Name="relativeAccuracy" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="X">To be added.</param>
        <param name="Y">To be added.</param>
        <param name="relativeAccuracy">To be added.</param>
        <summary>
            Returns true if two matrices are almost equal (with some given relative accuracy).
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ArrayDivide">
      <MemberSignature Language="C#" Value="public void ArrayDivide (MathNet.Numerics.LinearAlgebra.IMatrix&lt;double&gt; m);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="MathNet.Numerics.LinearAlgebra.IMatrix&lt;System.Double&gt;" />
      </Parameters>
      <Docs>
        <param name="m">To be added.</param>
        <summary>
            In place element-by-element right division, <c>A ./= M</c>.
            </summary>
        <remarks>
            This instance and <c>m</c> must have the same dimensions.
            </remarks>
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.Matrix.ArrayDivide(MathNet.Numerics.LinearAlgebra.IMatrix{System.Double},MathNet.Numerics.LinearAlgebra.IMatrix{System.Double})" />
      </Docs>
    </Member>
    <Member MemberName="ArrayDivide">
      <MemberSignature Language="C#" Value="public static MathNet.Numerics.LinearAlgebra.Matrix ArrayDivide (MathNet.Numerics.LinearAlgebra.IMatrix&lt;double&gt; m1, MathNet.Numerics.LinearAlgebra.IMatrix&lt;double&gt; m2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.Matrix</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m1" Type="MathNet.Numerics.LinearAlgebra.IMatrix&lt;System.Double&gt;" />
        <Parameter Name="m2" Type="MathNet.Numerics.LinearAlgebra.IMatrix&lt;System.Double&gt;" />
      </Parameters>
      <Docs>
        <param name="m1">To be added.</param>
        <param name="m2">To be added.</param>
        <summary>
            Element-by-element right division, <c>result = M1 ./ M2</c>.
            </summary>
        <returns>To be added.</returns>
        <remarks>
          <c>m1</c> and <c>m2</c> must have the same dimensions.
            </remarks>
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.Matrix.ArrayDivide(MathNet.Numerics.LinearAlgebra.IMatrix{System.Double})" />
      </Docs>
    </Member>
    <Member MemberName="ArrayMap">
      <MemberSignature Language="C#" Value="public void ArrayMap (Converter&lt;double,double&gt; mapping);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mapping" Type="System.Converter&lt;System.Double,System.Double&gt;" />
      </Parameters>
      <Docs>
        <param name="mapping">To be added.</param>
        <summary>
            In place element-by-element mapping of an arbitrary function, <c>A[i,j] = mapping(A[i,j])</c>.
            </summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.Matrix.ArrayMap(MathNet.Numerics.LinearAlgebra.IMatrix{System.Double},System.Converter{System.Double,System.Double})" />
      </Docs>
    </Member>
    <Member MemberName="ArrayMap">
      <MemberSignature Language="C#" Value="public static MathNet.Numerics.LinearAlgebra.Matrix ArrayMap (MathNet.Numerics.LinearAlgebra.IMatrix&lt;double&gt; m, Converter&lt;double,double&gt; mapping);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.Matrix</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="MathNet.Numerics.LinearAlgebra.IMatrix&lt;System.Double&gt;" />
        <Parameter Name="mapping" Type="System.Converter&lt;System.Double,System.Double&gt;" />
      </Parameters>
      <Docs>
        <param name="m">To be added.</param>
        <param name="mapping">To be added.</param>
        <summary>
            Element-by-element mapping of an arbitrary function, <c>result[i,j] = mapping(M[i,j])</c>.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.Matrix.ArrayMap(System.Converter{System.Double,System.Double})" />
      </Docs>
    </Member>
    <Member MemberName="ArrayMultiply">
      <MemberSignature Language="C#" Value="public void ArrayMultiply (MathNet.Numerics.LinearAlgebra.IMatrix&lt;double&gt; m);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="MathNet.Numerics.LinearAlgebra.IMatrix&lt;System.Double&gt;" />
      </Parameters>
      <Docs>
        <param name="m">To be added.</param>
        <summary>
            In place element-by-element multiplication, <c>A .*= M</c>.
            </summary>
        <remarks>
            This instance and <c>m</c> must have the same dimensions.
            </remarks>
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.Matrix.ArrayMultiply(MathNet.Numerics.LinearAlgebra.IMatrix{System.Double},MathNet.Numerics.LinearAlgebra.IMatrix{System.Double})" />
      </Docs>
    </Member>
    <Member MemberName="ArrayMultiply">
      <MemberSignature Language="C#" Value="public static MathNet.Numerics.LinearAlgebra.Matrix ArrayMultiply (MathNet.Numerics.LinearAlgebra.IMatrix&lt;double&gt; m1, MathNet.Numerics.LinearAlgebra.IMatrix&lt;double&gt; m2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.Matrix</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m1" Type="MathNet.Numerics.LinearAlgebra.IMatrix&lt;System.Double&gt;" />
        <Parameter Name="m2" Type="MathNet.Numerics.LinearAlgebra.IMatrix&lt;System.Double&gt;" />
      </Parameters>
      <Docs>
        <param name="m1">To be added.</param>
        <param name="m2">To be added.</param>
        <summary>
            Element-by-element multiplication, <c>result = M1 .* M2</c>.
            </summary>
        <returns>To be added.</returns>
        <remarks>
          <c>m1</c> and <c>m2</c> must have the same dimensions.
            </remarks>
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.Matrix.ArrayMultiply(MathNet.Numerics.LinearAlgebra.IMatrix{System.Double})" />
      </Docs>
    </Member>
    <Member MemberName="ArrayPower">
      <MemberSignature Language="C#" Value="public void ArrayPower (double exponent);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="exponent" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="exponent">To be added.</param>
        <summary>
            In place element-by-element raise to power, <c>A[i,j] = A[i,j]^exponent</c>.
            </summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.Matrix.ArrayPower(MathNet.Numerics.LinearAlgebra.IMatrix{System.Double},System.Double)" />
      </Docs>
    </Member>
    <Member MemberName="ArrayPower">
      <MemberSignature Language="C#" Value="public static MathNet.Numerics.LinearAlgebra.Matrix ArrayPower (MathNet.Numerics.LinearAlgebra.IMatrix&lt;double&gt; m, double exponent);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.Matrix</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="MathNet.Numerics.LinearAlgebra.IMatrix&lt;System.Double&gt;" />
        <Parameter Name="exponent" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="m">To be added.</param>
        <param name="exponent">To be added.</param>
        <summary>
            Element-by-element raise to power, <c>result[i,j] = M[i,j]^exponent</c>.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.Matrix.ArrayPower(System.Double)" />
      </Docs>
    </Member>
    <Member MemberName="chol">
      <MemberSignature Language="C#" Value="public virtual MathNet.Numerics.LinearAlgebra.CholeskyDecomposition chol ();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Use the CholeskyDecomposition property instead.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.CholeskyDecomposition</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Cholesky Decomposition
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <altmember cref="P:MathNet.Numerics.LinearAlgebra.Matrix.CholeskyDecomposition" />
      </Docs>
    </Member>
    <Member MemberName="CholeskyDecomposition">
      <MemberSignature Language="C#" Value="public MathNet.Numerics.LinearAlgebra.CholeskyDecomposition CholeskyDecomposition { get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.CholeskyDecomposition</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Cholesky Decomposition
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <altmember cref="P:MathNet.Numerics.LinearAlgebra.Matrix.CholeskyDecomposition" />
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public MathNet.Numerics.LinearAlgebra.Matrix Clone ();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.Matrix</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns a deep copy of this instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CloneMatrixData">
      <MemberSignature Language="C#" Value="public static double[][] CloneMatrixData (double[][] data);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double[][]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Double[][]" />
      </Parameters>
      <Docs>
        <param name="data">To be added.</param>
        <summary>
            Creates a copy of a given internal matrix data structure.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ColumnCount">
      <MemberSignature Language="C#" Value="public int ColumnCount { get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the number of columns.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Condition">
      <MemberSignature Language="C#" Value="public virtual double Condition ();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Matrix condition (2 norm)</summary>
        <returns>ratio of largest to smallest singular value.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyToArray">
      <MemberSignature Language="C#" Value="public double[,] CopyToArray ();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double[,]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Copies the internal data structure to a 2-dimensional array.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyToJaggedArray">
      <MemberSignature Language="C#" Value="public double[][] CopyToJaggedArray ();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double[][]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Copies the internal data structure to a jagged rectangular array.
            </summary>
        <returns />
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static MathNet.Numerics.LinearAlgebra.Matrix Create (double[,] A);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.Matrix</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="A" Type="System.Double[,]" />
      </Parameters>
      <Docs>
        <param name="A">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static MathNet.Numerics.LinearAlgebra.Matrix Create (double[][] A);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.Matrix</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="A" Type="System.Double[][]" />
      </Parameters>
      <Docs>
        <param name="A">Two-dimensional array of doubles.</param>
        <summary>
            Constructs a matrix from a copy of a 2-D array by deep-copy.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateFromColumns">
      <MemberSignature Language="C#" Value="public static MathNet.Numerics.LinearAlgebra.Matrix CreateFromColumns (System.Collections.Generic.IList&lt;MathNet.Numerics.LinearAlgebra.Vector&gt; columnVectors);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.Matrix</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="columnVectors" Type="System.Collections.Generic.IList&lt;MathNet.Numerics.LinearAlgebra.Vector&gt;" />
      </Parameters>
      <Docs>
        <param name="columnVectors">To be added.</param>
        <summary>
            Construct a real matrix from a set of real column vectors.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateFromRows">
      <MemberSignature Language="C#" Value="public static MathNet.Numerics.LinearAlgebra.Matrix CreateFromRows (System.Collections.Generic.IList&lt;MathNet.Numerics.LinearAlgebra.Vector&gt; rowVectors);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.Matrix</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rowVectors" Type="System.Collections.Generic.IList&lt;MathNet.Numerics.LinearAlgebra.Vector&gt;" />
      </Parameters>
      <Docs>
        <param name="rowVectors">To be added.</param>
        <summary>
            Construct a real matrix from a set of real row vectors.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateMatrixData">
      <MemberSignature Language="C#" Value="public static double[][] CreateMatrixData (int m, int n);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double[][]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Int32" />
        <Parameter Name="n" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="m">Number of rows.</param>
        <param name="n">Number of columns.</param>
        <summary>
            Create the internal matrix data structure for a matrix of the given size.
            Initializing matrices directly on the internal structure may be faster
            than accessing the cells through the matrix class.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Determinant">
      <MemberSignature Language="C#" Value="public virtual double Determinant ();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Matrix determinant</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Diagonal">
      <MemberSignature Language="C#" Value="public static MathNet.Numerics.LinearAlgebra.Matrix Diagonal (MathNet.Numerics.LinearAlgebra.IVector&lt;double&gt; diagonalVector);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.Matrix</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="diagonalVector" Type="MathNet.Numerics.LinearAlgebra.IVector&lt;System.Double&gt;" />
      </Parameters>
      <Docs>
        <param name="diagonalVector">The values of the matrix diagonal.</param>
        <summary>
            Creates a new square diagonal matrix based on the diagonal vector.
            </summary>
        <returns>
            An m-by-n matrix with the values from the diagonal vector on the diagonal and zeros elsewhere.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Diagonal">
      <MemberSignature Language="C#" Value="public static MathNet.Numerics.LinearAlgebra.Matrix Diagonal (MathNet.Numerics.LinearAlgebra.IVector&lt;double&gt; diagonalVector, int m, int n);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.Matrix</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="diagonalVector" Type="MathNet.Numerics.LinearAlgebra.IVector&lt;System.Double&gt;" />
        <Parameter Name="m" Type="System.Int32" />
        <Parameter Name="n" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="diagonalVector">The values of the matrix diagonal.</param>
        <param name="m">Number of rows.</param>
        <param name="n">Number of columns.</param>
        <summary>
            Creates a new diagonal m-by-n matrix based on the diagonal vector.
            </summary>
        <returns>
            An m-by-n matrix with the values from the diagonal vector on the diagonal and zeros elsewhere.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Eigen">
      <MemberSignature Language="C#" Value="public virtual MathNet.Numerics.LinearAlgebra.EigenvalueDecomposition Eigen ();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Use the EigenvalueDecomposition property instead.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.EigenvalueDecomposition</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Eigenvalue Decomposition
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <altmember cref="P:MathNet.Numerics.LinearAlgebra.Matrix.EigenvalueDecomposition" />
      </Docs>
    </Member>
    <Member MemberName="EigenvalueDecomposition">
      <MemberSignature Language="C#" Value="public MathNet.Numerics.LinearAlgebra.EigenvalueDecomposition EigenvalueDecomposition { get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.EigenvalueDecomposition</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Eigenvalue Decomposition
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <altmember cref="P:MathNet.Numerics.LinearAlgebra.Matrix.EigenvalueDecomposition" />
      </Docs>
    </Member>
    <Member MemberName="EigenValues">
      <MemberSignature Language="C#" Value="public MathNet.Numerics.LinearAlgebra.ComplexVector EigenValues { get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.ComplexVector</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the complex eigen values of this matrix.
            </summary>
        <value>To be added.</value>
        <remarks>
            The eigenvalue decomposition is cached internally..
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="EigenVectors">
      <MemberSignature Language="C#" Value="public MathNet.Numerics.LinearAlgebra.Matrix EigenVectors { get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.Matrix</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the complex eigen vectors of this matrix.
            </summary>
        <value>To be added.</value>
        <remarks>
            The eigenvalue decomposition is cached internally.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetArray">
      <MemberSignature Language="C#" Value="public double[][] GetArray ();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double[][]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Returns the internal data structure array.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetColumnVector">
      <MemberSignature Language="C#" Value="public MathNet.Numerics.LinearAlgebra.Vector GetColumnVector (int columnIndex);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.Vector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="columnIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="columnIndex">To be added.</param>
        <summary>
            Copies a specified column of this matrix to a new vector.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMatrix">
      <MemberSignature Language="C#" Value="public virtual MathNet.Numerics.LinearAlgebra.Matrix GetMatrix (int[] r, int[] c);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.Matrix</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="r" Type="System.Int32[]" />
        <Parameter Name="c" Type="System.Int32[]" />
      </Parameters>
      <Docs>
        <param name="r">Array of row indices.</param>
        <param name="c">Array of column indices.</param>
        <summary>
            Gets a submatrix.
            </summary>
        <returns>A(r(:),c(:))</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.IndexOutOfRangeException">Submatrix indices.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetMatrix">
      <MemberSignature Language="C#" Value="public virtual MathNet.Numerics.LinearAlgebra.Matrix GetMatrix (int i0, int i1, int[] c);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.Matrix</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="i0" Type="System.Int32" />
        <Parameter Name="i1" Type="System.Int32" />
        <Parameter Name="c" Type="System.Int32[]" />
      </Parameters>
      <Docs>
        <param name="i0">First row index.</param>
        <param name="i1">Last row index (inclusive).</param>
        <param name="c">Array of column indices.</param>
        <summary>
            Get a submatrix.
            </summary>
        <returns>A(i0:i1,c(:))</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.IndexOutOfRangeException">Submatrix indices.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetMatrix">
      <MemberSignature Language="C#" Value="public virtual MathNet.Numerics.LinearAlgebra.Matrix GetMatrix (int[] r, int j0, int j1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.Matrix</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="r" Type="System.Int32[]" />
        <Parameter Name="j0" Type="System.Int32" />
        <Parameter Name="j1" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="r">Array of row indices.</param>
        <param name="j0">First column index.</param>
        <param name="j1">Last column index (inclusive).</param>
        <summary>
            Get a submatrix.
            </summary>
        <returns>A(r(:),j0:j1)</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.IndexOutOfRangeException">Submatrix indices.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetMatrix">
      <MemberSignature Language="C#" Value="public virtual MathNet.Numerics.LinearAlgebra.Matrix GetMatrix (int i0, int i1, int j0, int j1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.Matrix</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="i0" Type="System.Int32" />
        <Parameter Name="i1" Type="System.Int32" />
        <Parameter Name="j0" Type="System.Int32" />
        <Parameter Name="j1" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="i0">First row index.</param>
        <param name="i1">Last row index (inclusive).</param>
        <param name="j0">First column index.</param>
        <param name="j1">Last column index (inclusive).</param>
        <summary>
            Gets a submatrix.
            </summary>
        <returns>A(i0:i1,j0:j1)</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.IndexOutOfRangeException">Submatrix indices</exception>
      </Docs>
    </Member>
    <Member MemberName="GetRowColumnCount">
      <MemberSignature Language="C#" Value="public static void GetRowColumnCount (double[][] data, out int rows, out int columns);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Double[][]" />
        <Parameter Name="rows" Type="System.Int32&amp;" RefType="out" />
        <Parameter Name="columns" Type="System.Int32&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="data">To be added.</param>
        <param name="rows">To be added.</param>
        <param name="columns">To be added.</param>
        <summary>
            Tries to find out the row column count of a given internal matrix data structure.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRowVector">
      <MemberSignature Language="C#" Value="public MathNet.Numerics.LinearAlgebra.Vector GetRowVector (int rowIndex);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.Vector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rowIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="rowIndex">To be added.</param>
        <summary>
            Copies a specified row of this matrix to a new vector.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Identity">
      <MemberSignature Language="C#" Value="public static MathNet.Numerics.LinearAlgebra.Matrix Identity (int m, int n);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.Matrix</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Int32" />
        <Parameter Name="n" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="m">Number of rows.</param>
        <param name="n">Number of columns.</param>
        <summary>
            Generates identity matrix
            </summary>
        <returns>An m-by-n matrix with ones on the diagonal and zeros elsewhere.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Inverse">
      <MemberSignature Language="C#" Value="public virtual MathNet.Numerics.LinearAlgebra.Matrix Inverse ();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.Matrix</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Matrix inverse or pseudoinverse.</summary>
        <returns> inverse(A) if A is square, pseudoinverse otherwise.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public double this[int i, int j] { set; get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="i" Type="System.Int32" />
        <Parameter Name="j" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="i">Row index.</param>
        <param name="j">Column index.</param>
        <summary>
            Gets or set the element indexed by <c>(i, j)</c>
            in the <c>Matrix</c>.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="KroneckerProduct">
      <MemberSignature Language="C#" Value="public static MathNet.Numerics.LinearAlgebra.Matrix KroneckerProduct (MathNet.Numerics.LinearAlgebra.Matrix A, MathNet.Numerics.LinearAlgebra.Matrix B);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.Matrix</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="A" Type="MathNet.Numerics.LinearAlgebra.Matrix" />
        <Parameter Name="B" Type="MathNet.Numerics.LinearAlgebra.Matrix" />
      </Parameters>
      <Docs>
        <param name="A">To be added.</param>
        <param name="B">To be added.</param>
        <summary>Kronecker Product of two matrices.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LUD">
      <MemberSignature Language="C#" Value="public virtual MathNet.Numerics.LinearAlgebra.LUDecomposition LUD ();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Use the LUDecomposition property instead.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.LUDecomposition</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            LU Decomposition
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <altmember cref="P:MathNet.Numerics.LinearAlgebra.Matrix.LUDecomposition" />
      </Docs>
    </Member>
    <Member MemberName="LUDecomposition">
      <MemberSignature Language="C#" Value="public MathNet.Numerics.LinearAlgebra.LUDecomposition LUDecomposition { get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.LUDecomposition</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            LU Decomposition
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <altmember cref="P:MathNet.Numerics.LinearAlgebra.Matrix.LUDecomposition" />
      </Docs>
    </Member>
    <Member MemberName="Multiply">
      <MemberSignature Language="C#" Value="public MathNet.Numerics.LinearAlgebra.Matrix Multiply (MathNet.Numerics.LinearAlgebra.Matrix B);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.Matrix</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="B" Type="MathNet.Numerics.LinearAlgebra.Matrix" />
      </Parameters>
      <Docs>
        <param name="B">To be added.</param>
        <summary>
            Linear algebraic matrix multiplication, A * B
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">B must not be null.</exception>
        <exception cref="T:System.ArgumentException">Matrix inner dimensions must agree.</exception>
      </Docs>
    </Member>
    <Member MemberName="Multiply">
      <MemberSignature Language="C#" Value="public virtual void Multiply (double s);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="s">To be added.</param>
        <summary>
            Multiplies in place this <c>Matrix</c> by a scalar.
            </summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.Matrix.op_Multiply(System.Double,MathNet.Numerics.LinearAlgebra.Matrix)" />
      </Docs>
    </Member>
    <Member MemberName="Multiply">
      <MemberSignature Language="C#" Value="public virtual void Multiply (double[] diagonal);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="diagonal" Type="System.Double[]" />
      </Parameters>
      <Docs>
        <param name="diagonal">Diagonal values of D.</param>
        <summary>
            In place linear algebraic matrix multiplication, D * A where
            D is the diagonal matrix.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <c>diagonal</c> must not be null.</exception>
        <exception cref="T:System.ArgumentException">Matrix inner dimensions must agree.</exception>
      </Docs>
    </Member>
    <Member MemberName="Norm1">
      <MemberSignature Language="C#" Value="public double Norm1 ();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>One norm</summary>
        <returns>Maximum column sum.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Norm2">
      <MemberSignature Language="C#" Value="public double Norm2 ();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Two norm</summary>
        <returns>Maximum singular value.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NormF">
      <MemberSignature Language="C#" Value="public double NormF ();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Frobenius norm</summary>
        <returns>Sqrt of sum of squares of all elements.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NormInf">
      <MemberSignature Language="C#" Value="public double NormInf ();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Infinity norm</summary>
        <returns>Maximum row sum.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Ones">
      <MemberSignature Language="C#" Value="public static MathNet.Numerics.LinearAlgebra.Matrix Ones (int m);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.Matrix</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="m">Number of rows = Number of columns</param>
        <summary>
            Generates an m-by-m matrix filled with 1.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Addition">
      <MemberSignature Language="C#" Value="public static MathNet.Numerics.LinearAlgebra.Matrix op_Addition (MathNet.Numerics.LinearAlgebra.Matrix m1, MathNet.Numerics.LinearAlgebra.Matrix m2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.Matrix</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m1" Type="MathNet.Numerics.LinearAlgebra.Matrix" />
        <Parameter Name="m2" Type="MathNet.Numerics.LinearAlgebra.Matrix" />
      </Parameters>
      <Docs>
        <param name="m1">To be added.</param>
        <param name="m2">To be added.</param>
        <summary>Addition of matrices</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static double op_Explicit (MathNet.Numerics.LinearAlgebra.Matrix m);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="MathNet.Numerics.LinearAlgebra.Matrix" />
      </Parameters>
      <Docs>
        <param name="m">1-by-1 Matrix</param>
        <summary>
            Excplicit conversion to a <c>double</c> scalar of a single column and row (1-by-1) matrix.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static double[,] op_Explicit (MathNet.Numerics.LinearAlgebra.Matrix m);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Convert to double[][] instead.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double[,]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="MathNet.Numerics.LinearAlgebra.Matrix" />
      </Parameters>
      <Docs>
        <param name="m">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static double[] op_Explicit (MathNet.Numerics.LinearAlgebra.Matrix m);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="MathNet.Numerics.LinearAlgebra.Matrix" />
      </Parameters>
      <Docs>
        <param name="m">Exactly one column expected.</param>
        <summary>
            Explicit convertion to a <c>double[]</c> array of a single column matrix.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static double[][] op_Implicit (MathNet.Numerics.LinearAlgebra.Matrix m);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double[][]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="MathNet.Numerics.LinearAlgebra.Matrix" />
      </Parameters>
      <Docs>
        <param name="m">To be added.</param>
        <summary>Implicit convertion to a <c>double[][]</c> array.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Multiply">
      <MemberSignature Language="C#" Value="public static MathNet.Numerics.LinearAlgebra.Matrix op_Multiply (MathNet.Numerics.LinearAlgebra.Matrix m1, MathNet.Numerics.LinearAlgebra.Matrix m2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.Matrix</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m1" Type="MathNet.Numerics.LinearAlgebra.Matrix" />
        <Parameter Name="m2" Type="MathNet.Numerics.LinearAlgebra.Matrix" />
      </Parameters>
      <Docs>
        <param name="m1">To be added.</param>
        <param name="m2">To be added.</param>
        <summary>Linear algebraic matrix multiplication.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Matrix inner dimensions must agree.</exception>
      </Docs>
    </Member>
    <Member MemberName="op_Multiply">
      <MemberSignature Language="C#" Value="public static MathNet.Numerics.LinearAlgebra.Matrix op_Multiply (MathNet.Numerics.LinearAlgebra.Matrix m, double s);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.Matrix</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="MathNet.Numerics.LinearAlgebra.Matrix" />
        <Parameter Name="s" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="m">To be added.</param>
        <param name="s">To be added.</param>
        <summary>Multiplication of a matrix by a scalar, C = s*A</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Multiply">
      <MemberSignature Language="C#" Value="public static MathNet.Numerics.LinearAlgebra.Matrix op_Multiply (double s, MathNet.Numerics.LinearAlgebra.Matrix m);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.Matrix</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.Double" />
        <Parameter Name="m" Type="MathNet.Numerics.LinearAlgebra.Matrix" />
      </Parameters>
      <Docs>
        <param name="s">To be added.</param>
        <param name="m">To be added.</param>
        <summary>Multiplication of a matrix by a scalar, C = s*A</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Subtraction">
      <MemberSignature Language="C#" Value="public static MathNet.Numerics.LinearAlgebra.Matrix op_Subtraction (MathNet.Numerics.LinearAlgebra.Matrix m1, MathNet.Numerics.LinearAlgebra.Matrix m2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.Matrix</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m1" Type="MathNet.Numerics.LinearAlgebra.Matrix" />
        <Parameter Name="m2" Type="MathNet.Numerics.LinearAlgebra.Matrix" />
      </Parameters>
      <Docs>
        <param name="m1">To be added.</param>
        <param name="m2">To be added.</param>
        <summary>Subtraction of matrices</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_UnaryNegation">
      <MemberSignature Language="C#" Value="public static MathNet.Numerics.LinearAlgebra.Matrix op_UnaryNegation (MathNet.Numerics.LinearAlgebra.Matrix m1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.Matrix</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m1" Type="MathNet.Numerics.LinearAlgebra.Matrix" />
      </Parameters>
      <Docs>
        <param name="m1">To be added.</param>
        <summary>Negation of a matrix</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="QRD">
      <MemberSignature Language="C#" Value="public virtual MathNet.Numerics.LinearAlgebra.QRDecomposition QRD ();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Use the QRDecomposition property instead.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.QRDecomposition</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            QR Decomposition
            </summary>
        <returns>QRDecomposition</returns>
        <remarks>To be added.</remarks>
        <altmember cref="P:MathNet.Numerics.LinearAlgebra.Matrix.QRDecomposition" />
      </Docs>
    </Member>
    <Member MemberName="QRDecomposition">
      <MemberSignature Language="C#" Value="public MathNet.Numerics.LinearAlgebra.QRDecomposition QRDecomposition { get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.QRDecomposition</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            QR Decomposition
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <altmember cref="P:MathNet.Numerics.LinearAlgebra.Matrix.QRDecomposition" />
      </Docs>
    </Member>
    <Member MemberName="Random">
      <MemberSignature Language="C#" Value="public static MathNet.Numerics.LinearAlgebra.Matrix Random (int m, int n);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.Matrix</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Int32" />
        <Parameter Name="n" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="m">Number of rows.</param>
        <param name="n">Number of columns.</param>
        <summary>
            Generates matrix with standard-distributed random elements.
            </summary>
        <returns>An m-by-n matrix with uniformly distributed
            random elements in <c>[0, 1)</c> interval.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Random">
      <MemberSignature Language="C#" Value="public static MathNet.Numerics.LinearAlgebra.Matrix Random (int m, int n, MathNet.Numerics.Distributions.IContinuousGenerator randomDistribution);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.Matrix</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Int32" />
        <Parameter Name="n" Type="System.Int32" />
        <Parameter Name="randomDistribution" Type="MathNet.Numerics.Distributions.IContinuousGenerator" />
      </Parameters>
      <Docs>
        <param name="m">Number of rows.</param>
        <param name="n">Number of columns.</param>
        <param name="randomDistribution">Continuous Random Distribution or Source</param>
        <summary>
            Generates matrix with random elements.
            </summary>
        <returns>An m-by-n matrix with elements distributed according to the provided distribution.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Rank">
      <MemberSignature Language="C#" Value="public virtual int Rank ();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Matrix rank</summary>
        <returns>effective numerical rank, obtained from SVD.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResetComputations">
      <MemberSignature Language="C#" Value="public void ResetComputations ();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Reset various internal computations.
            Call this method after you made changes directly
            on the the internal double[][] data structure.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RowCount">
      <MemberSignature Language="C#" Value="public int RowCount { get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the number of rows.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetColumnVector">
      <MemberSignature Language="C#" Value="public void SetColumnVector (MathNet.Numerics.LinearAlgebra.IVector&lt;double&gt; columnVector, int columnIndex);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="columnVector" Type="MathNet.Numerics.LinearAlgebra.IVector&lt;System.Double&gt;" />
        <Parameter Name="columnIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="columnVector">To be added.</param>
        <param name="columnIndex">To be added.</param>
        <summary>
            Copies a column vector to a specified column of this matrix.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetMatrix">
      <MemberSignature Language="C#" Value="public virtual void SetMatrix (int[] r, int[] c, MathNet.Numerics.LinearAlgebra.IMatrix&lt;double&gt; X);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="r" Type="System.Int32[]" />
        <Parameter Name="c" Type="System.Int32[]" />
        <Parameter Name="X" Type="MathNet.Numerics.LinearAlgebra.IMatrix&lt;System.Double&gt;" />
      </Parameters>
      <Docs>
        <param name="r">Array of row indices.</param>
        <param name="c">Array of column indices.</param>
        <param name="X">A(r(:),c(:))</param>
        <summary>
            Sets a submatrix.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.IndexOutOfRangeException">Submatrix indices</exception>
      </Docs>
    </Member>
    <Member MemberName="SetMatrix">
      <MemberSignature Language="C#" Value="public virtual void SetMatrix (int i0, int i1, int[] c, MathNet.Numerics.LinearAlgebra.IMatrix&lt;double&gt; X);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="i0" Type="System.Int32" />
        <Parameter Name="i1" Type="System.Int32" />
        <Parameter Name="c" Type="System.Int32[]" />
        <Parameter Name="X" Type="MathNet.Numerics.LinearAlgebra.IMatrix&lt;System.Double&gt;" />
      </Parameters>
      <Docs>
        <param name="i0">First row index.</param>
        <param name="i1">Last row index (inclusive).</param>
        <param name="c">Array of column indices.</param>
        <param name="X">A(i0:i1,c(:))</param>
        <summary>
            Set a submatrix.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.IndexOutOfRangeException">Submatrix indices.</exception>
      </Docs>
    </Member>
    <Member MemberName="SetMatrix">
      <MemberSignature Language="C#" Value="public virtual void SetMatrix (int[] r, int j0, int j1, MathNet.Numerics.LinearAlgebra.IMatrix&lt;double&gt; X);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="r" Type="System.Int32[]" />
        <Parameter Name="j0" Type="System.Int32" />
        <Parameter Name="j1" Type="System.Int32" />
        <Parameter Name="X" Type="MathNet.Numerics.LinearAlgebra.IMatrix&lt;System.Double&gt;" />
      </Parameters>
      <Docs>
        <param name="r">Array of row indices.</param>
        <param name="j0">First column index.</param>
        <param name="j1">Last column index (inclusive).</param>
        <param name="X">A(r(:),j0:j1)</param>
        <summary>
            Sets a submatrix.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.IndexOutOfRangeException">Submatrix indices</exception>
      </Docs>
    </Member>
    <Member MemberName="SetMatrix">
      <MemberSignature Language="C#" Value="public virtual void SetMatrix (int i0, int i1, int j0, int j1, MathNet.Numerics.LinearAlgebra.IMatrix&lt;double&gt; X);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="i0" Type="System.Int32" />
        <Parameter Name="i1" Type="System.Int32" />
        <Parameter Name="j0" Type="System.Int32" />
        <Parameter Name="j1" Type="System.Int32" />
        <Parameter Name="X" Type="MathNet.Numerics.LinearAlgebra.IMatrix&lt;System.Double&gt;" />
      </Parameters>
      <Docs>
        <param name="i0">First row index.</param>
        <param name="i1">Last row index (inclusive).</param>
        <param name="j0">First column index.</param>
        <param name="j1">Last column index (inclusive).</param>
        <param name="X">A(i0:i1,j0:j1)</param>
        <summary>
            Set a submatrix.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.IndexOutOfRangeException">Submatrix indices.</exception>
      </Docs>
    </Member>
    <Member MemberName="SetRowVector">
      <MemberSignature Language="C#" Value="public void SetRowVector (MathNet.Numerics.LinearAlgebra.IVector&lt;double&gt; rowVector, int rowIndex);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rowVector" Type="MathNet.Numerics.LinearAlgebra.IVector&lt;System.Double&gt;" />
        <Parameter Name="rowIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="rowVector">To be added.</param>
        <param name="rowIndex">To be added.</param>
        <summary>
            Copies a row vector to a specified row of this matrix.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SingularValueDecomposition">
      <MemberSignature Language="C#" Value="public MathNet.Numerics.LinearAlgebra.SingularValueDecomposition SingularValueDecomposition { get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.SingularValueDecomposition</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Singular Value Decomposition
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <altmember cref="P:MathNet.Numerics.LinearAlgebra.Matrix.SingularValueDecomposition" />
      </Docs>
    </Member>
    <Member MemberName="Solve">
      <MemberSignature Language="C#" Value="public virtual MathNet.Numerics.LinearAlgebra.Matrix Solve (MathNet.Numerics.LinearAlgebra.Matrix B);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.Matrix</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="B" Type="MathNet.Numerics.LinearAlgebra.Matrix" />
      </Parameters>
      <Docs>
        <param name="B">right hand side</param>
        <summary>
            Solve A*X = B against a Least Square (L2) criterion.
            </summary>
        <returns>solution if A is square, least squares solution otherwise.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">Matrix rank is deficient.</exception>
      </Docs>
    </Member>
    <Member MemberName="SolveRobust">
      <MemberSignature Language="C#" Value="public virtual MathNet.Numerics.LinearAlgebra.Matrix SolveRobust (MathNet.Numerics.LinearAlgebra.Matrix B);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.Matrix</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="B" Type="MathNet.Numerics.LinearAlgebra.Matrix" />
      </Parameters>
      <Docs>
        <param name="B">right hand side</param>
        <summary>Solve A*X = B against a Least Absolute Deviation (L1) criterion.</summary>
        <returns>The implementation relies on the IRLS (iterated Re-weighted Least Square) algorithm.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">Matrix rank is deficient.</exception>
      </Docs>
    </Member>
    <Member MemberName="SolveTranspose">
      <MemberSignature Language="C#" Value="public virtual MathNet.Numerics.LinearAlgebra.Matrix SolveTranspose (MathNet.Numerics.LinearAlgebra.Matrix B);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.Matrix</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="B" Type="MathNet.Numerics.LinearAlgebra.Matrix" />
      </Parameters>
      <Docs>
        <param name="B">right hand side</param>
        <summary>Solve X*A = B, which is also A'*X' = B'</summary>
        <returns>solution if A is square, least squares solution otherwise.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Subtract">
      <MemberSignature Language="C#" Value="public virtual void Subtract (MathNet.Numerics.LinearAlgebra.IMatrix&lt;double&gt; m);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="MathNet.Numerics.LinearAlgebra.IMatrix&lt;System.Double&gt;" />
      </Parameters>
      <Docs>
        <param name="m">To be added.</param>
        <summary>
            In place subtraction of <c>m</c> to this <c>Matrix</c>.
            </summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.Matrix.op_Subtraction(MathNet.Numerics.LinearAlgebra.Matrix,MathNet.Numerics.LinearAlgebra.Matrix)" />
      </Docs>
    </Member>
    <Member MemberName="SVD">
      <MemberSignature Language="C#" Value="public virtual MathNet.Numerics.LinearAlgebra.SingularValueDecomposition SVD ();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Use the SingularValueDecomposition property instead.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.SingularValueDecomposition</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Singular Value Decomposition
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <altmember cref="P:MathNet.Numerics.LinearAlgebra.Matrix.SingularValueDecomposition" />
      </Docs>
    </Member>
    <Member MemberName="System.ICloneable.Clone">
      <MemberSignature Language="C#" Value="object ICloneable.Clone ();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TensorMultiply">
      <MemberSignature Language="C#" Value="public MathNet.Numerics.LinearAlgebra.Matrix TensorMultiply (MathNet.Numerics.LinearAlgebra.Matrix B);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.Matrix</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="B" Type="MathNet.Numerics.LinearAlgebra.Matrix" />
      </Parameters>
      <Docs>
        <param name="B">The matrix to operate on.</param>
        <summary>Tensor Product (Kronecker) of this and another matrix.</summary>
        <returns>Kronecker Product of this and the given matrix.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Formats this matrix to a human-readable string
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Trace">
      <MemberSignature Language="C#" Value="public virtual double Trace ();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Matrix trace.</summary>
        <returns>sum of the diagonal elements.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Transpose">
      <MemberSignature Language="C#" Value="public virtual void Transpose ();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>In place transposition of this <c>Matrix</c>.</summary>
        <remarks>
            In case of non-quadratic matrices, this operation replaces the
            internal data structure. Hence, if you hold a reference to it
            for faster access, you'll need to get a new reference to it
            using <see cref="M:MathNet.Numerics.LinearAlgebra.Matrix.GetArray" />.
            </remarks>
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.Matrix.Transpose(MathNet.Numerics.LinearAlgebra.IMatrix{System.Double})" />
      </Docs>
    </Member>
    <Member MemberName="Transpose">
      <MemberSignature Language="C#" Value="public static MathNet.Numerics.LinearAlgebra.Matrix Transpose (MathNet.Numerics.LinearAlgebra.IMatrix&lt;double&gt; m);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.Matrix</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="MathNet.Numerics.LinearAlgebra.IMatrix&lt;System.Double&gt;" />
      </Parameters>
      <Docs>
        <param name="m">To be added.</param>
        <summary>Gets the transposition of the provided <c>Matrix</c>.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UnaryMinus">
      <MemberSignature Language="C#" Value="public virtual void UnaryMinus ();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            In place unary minus of the <c>Matrix</c>.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Zeros">
      <MemberSignature Language="C#" Value="public static MathNet.Numerics.LinearAlgebra.Matrix Zeros (int m);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.Matrix</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="m">Number of rows = Number of columns</param>
        <summary>
            Generates an m-by-m matrix filled with 0.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
