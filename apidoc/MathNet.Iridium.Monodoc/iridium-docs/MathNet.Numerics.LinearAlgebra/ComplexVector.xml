<Type Name="ComplexVector" FullName="MathNet.Numerics.LinearAlgebra.ComplexVector">
  <TypeSignature Language="C#" Value="public class ComplexVector : ICloneable, MathNet.Numerics.LinearAlgebra.IVector&lt;MathNet.Numerics.Complex&gt;, System.Collections.Generic.IList&lt;MathNet.Numerics.Complex&gt;" />
  <AssemblyInfo>
    <AssemblyName>MathNet.Iridium</AssemblyName>
    <AssemblyVersion>1.0.0.8645</AssemblyVersion>
    <AssemblyVersion>2008.8.16.470</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>MathNet.Numerics.LinearAlgebra.IVector&lt;MathNet.Numerics.Complex&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IList&lt;MathNet.Numerics.Complex&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Reflection.DefaultMember("Item")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
            Complex Vector.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ComplexVector (MathNet.Numerics.Complex[] components);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="components" Type="MathNet.Numerics.Complex[]" />
      </Parameters>
      <Docs>
        <param name="components">One-dimensional array of doubles.</param>
        <summary>
            Constructs a vector from a 1-D array, directly using
            the provided array as internal data structure.
            </summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.ComplexVector.Create(MathNet.Numerics.Complex[])" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ComplexVector (int n);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="n" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="n">Dimensionality of vector.</param>
        <summary>
            Constructs an n-dimensional vector of zeros.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ComplexVector (int n, MathNet.Numerics.Complex value);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="n" Type="System.Int32" />
        <Parameter Name="value" Type="MathNet.Numerics.Complex" />
      </Parameters>
      <Docs>
        <param name="n">Dimensionality of vector.</param>
        <param name="value">Fill the vector with this scalar value.</param>
        <summary>
            Constructs an n-dimensional constant vector.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ComplexVector (int n, int i);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="n" Type="System.Int32" />
        <Parameter Name="i" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="n">Dimensionality of vector.</param>
        <param name="i">Coordinate index.</param>
        <summary>
            Constructs an n-dimensional unit vector for i'th coordinate.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public MathNet.Numerics.LinearAlgebra.ComplexVector Add (MathNet.Numerics.Complex b);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.ComplexVector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="b" Type="MathNet.Numerics.Complex" />
      </Parameters>
      <Docs>
        <param name="b">The complex scalar.</param>
        <summary>
            Add a complex scalar to all elements of this vector.
            </summary>
        <returns>
            Vector ret[i] = this[i] + b
            </returns>
        <remarks>
            This method has the same effect as the overloaded + operator.
            </remarks>
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.ComplexVector.AddInplace(MathNet.Numerics.Complex)" />
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.ComplexVector.op_Addition(MathNet.Numerics.LinearAlgebra.ComplexVector,MathNet.Numerics.Complex)" />
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public MathNet.Numerics.LinearAlgebra.ComplexVector Add (MathNet.Numerics.LinearAlgebra.IVector&lt;MathNet.Numerics.Complex&gt; b);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.ComplexVector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="b" Type="MathNet.Numerics.LinearAlgebra.IVector&lt;MathNet.Numerics.Complex&gt;" />
      </Parameters>
      <Docs>
        <param name="b">The other complex vector.</param>
        <summary>
            Add another complex vector to this vector.
            </summary>
        <returns>
            Vector ret[i] = this[i] + b[i]
            </returns>
        <remarks>
            This method has the same effect as the overloaded + operator.
            </remarks>
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.ComplexVector.AddInplace(MathNet.Numerics.LinearAlgebra.IVector{MathNet.Numerics.Complex})" />
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.ComplexVector.op_Addition(MathNet.Numerics.LinearAlgebra.ComplexVector,MathNet.Numerics.LinearAlgebra.ComplexVector)" />
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public MathNet.Numerics.LinearAlgebra.ComplexVector Add (MathNet.Numerics.LinearAlgebra.IVector&lt;double&gt; b);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.ComplexVector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="b" Type="MathNet.Numerics.LinearAlgebra.IVector&lt;System.Double&gt;" />
      </Parameters>
      <Docs>
        <param name="b">The other real vector.</param>
        <summary>
            Add another real vector to this vector.
            </summary>
        <returns>
            Vector ret[i] = this[i] + b[i]
            </returns>
        <remarks>
            This method has the same effect as the overloaded + operator.
            </remarks>
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.ComplexVector.AddInplace(MathNet.Numerics.LinearAlgebra.IVector{System.Double})" />
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.ComplexVector.op_Addition(MathNet.Numerics.LinearAlgebra.ComplexVector,MathNet.Numerics.LinearAlgebra.Vector)" />
      </Docs>
    </Member>
    <Member MemberName="AddInplace">
      <MemberSignature Language="C#" Value="public void AddInplace (MathNet.Numerics.Complex b);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="b" Type="MathNet.Numerics.Complex" />
      </Parameters>
      <Docs>
        <param name="b">To be added.</param>
        <summary>
            In place addition of a complex scalar to all elements of this vector.
            </summary>
        <remarks>
            This method changes this vector.
            </remarks>
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.ComplexVector.Add(MathNet.Numerics.Complex)" />
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.ComplexVector.op_Addition(MathNet.Numerics.LinearAlgebra.ComplexVector,MathNet.Numerics.Complex)" />
      </Docs>
    </Member>
    <Member MemberName="AddInplace">
      <MemberSignature Language="C#" Value="public void AddInplace (MathNet.Numerics.LinearAlgebra.IVector&lt;MathNet.Numerics.Complex&gt; b);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="b" Type="MathNet.Numerics.LinearAlgebra.IVector&lt;MathNet.Numerics.Complex&gt;" />
      </Parameters>
      <Docs>
        <param name="b">To be added.</param>
        <summary>
            In place addition of a complex vector to this vector.
            </summary>
        <remarks>
            This method changes this vector.
            </remarks>
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.ComplexVector.Add(MathNet.Numerics.LinearAlgebra.IVector{MathNet.Numerics.Complex})" />
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.ComplexVector.op_Addition(MathNet.Numerics.LinearAlgebra.ComplexVector,MathNet.Numerics.LinearAlgebra.ComplexVector)" />
      </Docs>
    </Member>
    <Member MemberName="AddInplace">
      <MemberSignature Language="C#" Value="public void AddInplace (MathNet.Numerics.LinearAlgebra.IVector&lt;double&gt; b);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="b" Type="MathNet.Numerics.LinearAlgebra.IVector&lt;System.Double&gt;" />
      </Parameters>
      <Docs>
        <param name="b">To be added.</param>
        <summary>
            In place addition of a real vector to this vector.
            </summary>
        <remarks>
            This method changes this vector.
            </remarks>
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.ComplexVector.Add(MathNet.Numerics.LinearAlgebra.IVector{System.Double})" />
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.ComplexVector.op_Addition(MathNet.Numerics.LinearAlgebra.ComplexVector,MathNet.Numerics.LinearAlgebra.Vector)" />
      </Docs>
    </Member>
    <Member MemberName="ArrayDivide">
      <MemberSignature Language="C#" Value="public MathNet.Numerics.LinearAlgebra.ComplexVector ArrayDivide (MathNet.Numerics.LinearAlgebra.IVector&lt;MathNet.Numerics.Complex&gt; b);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.ComplexVector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="b" Type="MathNet.Numerics.LinearAlgebra.IVector&lt;MathNet.Numerics.Complex&gt;" />
      </Parameters>
      <Docs>
        <param name="b">To be added.</param>
        <summary>
            Array (element-by-element) quotient of this vector and another complex vector.
            </summary>
        <returns>
            Vector ret[i] = this[i] / b[i]
            </returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.ComplexVector.ArrayQuotient(MathNet.Numerics.LinearAlgebra.IVector{MathNet.Numerics.Complex},MathNet.Numerics.LinearAlgebra.IVector{MathNet.Numerics.Complex})" />
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.ComplexVector.ArrayDivideInplace(MathNet.Numerics.LinearAlgebra.IVector{MathNet.Numerics.Complex})" />
      </Docs>
    </Member>
    <Member MemberName="ArrayDivide">
      <MemberSignature Language="C#" Value="public MathNet.Numerics.LinearAlgebra.ComplexVector ArrayDivide (MathNet.Numerics.LinearAlgebra.IVector&lt;double&gt; b);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.ComplexVector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="b" Type="MathNet.Numerics.LinearAlgebra.IVector&lt;System.Double&gt;" />
      </Parameters>
      <Docs>
        <param name="b">To be added.</param>
        <summary>
            Array (element-by-element) quotient of this vector and another real vector.
            </summary>
        <returns>
            Vector ret[i] = this[i] / b[i]
            </returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.ComplexVector.ArrayQuotient(MathNet.Numerics.LinearAlgebra.IVector{MathNet.Numerics.Complex},MathNet.Numerics.LinearAlgebra.IVector{System.Double})" />
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.ComplexVector.ArrayDivideInplace(MathNet.Numerics.LinearAlgebra.IVector{System.Double})" />
      </Docs>
    </Member>
    <Member MemberName="ArrayDivideInplace">
      <MemberSignature Language="C#" Value="public void ArrayDivideInplace (MathNet.Numerics.LinearAlgebra.IVector&lt;MathNet.Numerics.Complex&gt; b);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="b" Type="MathNet.Numerics.LinearAlgebra.IVector&lt;MathNet.Numerics.Complex&gt;" />
      </Parameters>
      <Docs>
        <param name="b">To be added.</param>
        <summary>
            Divide in place (element-by-element) this vector by another complex vector.
            </summary>
        <remarks>
            This method changes this vector.
            </remarks>
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.ComplexVector.ArrayQuotient(MathNet.Numerics.LinearAlgebra.IVector{MathNet.Numerics.Complex},MathNet.Numerics.LinearAlgebra.IVector{MathNet.Numerics.Complex})" />
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.ComplexVector.ArrayDivide(MathNet.Numerics.LinearAlgebra.IVector{MathNet.Numerics.Complex})" />
      </Docs>
    </Member>
    <Member MemberName="ArrayDivideInplace">
      <MemberSignature Language="C#" Value="public void ArrayDivideInplace (MathNet.Numerics.LinearAlgebra.IVector&lt;double&gt; b);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="b" Type="MathNet.Numerics.LinearAlgebra.IVector&lt;System.Double&gt;" />
      </Parameters>
      <Docs>
        <param name="b">To be added.</param>
        <summary>
            Divide in place (element-by-element) this vector by another real vector.
            </summary>
        <remarks>
            This method changes this vector.
            </remarks>
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.ComplexVector.ArrayQuotient(MathNet.Numerics.LinearAlgebra.IVector{MathNet.Numerics.Complex},MathNet.Numerics.LinearAlgebra.IVector{System.Double})" />
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.ComplexVector.ArrayDivide(MathNet.Numerics.LinearAlgebra.IVector{System.Double})" />
      </Docs>
    </Member>
    <Member MemberName="ArrayMap">
      <MemberSignature Language="C#" Value="public MathNet.Numerics.LinearAlgebra.ComplexVector ArrayMap (Converter&lt;MathNet.Numerics.Complex,MathNet.Numerics.Complex&gt; mapping);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.ComplexVector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mapping" Type="System.Converter&lt;MathNet.Numerics.Complex,MathNet.Numerics.Complex&gt;" />
      </Parameters>
      <Docs>
        <param name="mapping">To be added.</param>
        <summary>
            Map an arbitrary function to all elements of this vector.
            </summary>
        <returns>
            Vector ret[i] = mapping(this[i])
            </returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.ComplexVector.ArrayMapInplace(System.Converter{MathNet.Numerics.Complex,MathNet.Numerics.Complex})" />
      </Docs>
    </Member>
    <Member MemberName="ArrayMapInplace">
      <MemberSignature Language="C#" Value="public void ArrayMapInplace (Converter&lt;MathNet.Numerics.Complex,MathNet.Numerics.Complex&gt; mapping);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mapping" Type="System.Converter&lt;MathNet.Numerics.Complex,MathNet.Numerics.Complex&gt;" />
      </Parameters>
      <Docs>
        <param name="mapping">To be added.</param>
        <summary>
            In place map an arbitrary function to all elements of this vector.
            </summary>
        <remarks>
            This method changes this vector.
            </remarks>
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.ComplexVector.ArrayMap(System.Converter{MathNet.Numerics.Complex,MathNet.Numerics.Complex})" />
      </Docs>
    </Member>
    <Member MemberName="ArrayMultiply">
      <MemberSignature Language="C#" Value="public MathNet.Numerics.LinearAlgebra.ComplexVector ArrayMultiply (MathNet.Numerics.LinearAlgebra.IVector&lt;MathNet.Numerics.Complex&gt; b);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.ComplexVector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="b" Type="MathNet.Numerics.LinearAlgebra.IVector&lt;MathNet.Numerics.Complex&gt;" />
      </Parameters>
      <Docs>
        <param name="b">To be added.</param>
        <summary>
            Array (element-by-element) product of this vector and another vector.
            </summary>
        <returns>
            Vector ret[i] = this[i] * b[i]
            </returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.ComplexVector.ArrayProduct(MathNet.Numerics.LinearAlgebra.IVector{MathNet.Numerics.Complex},MathNet.Numerics.LinearAlgebra.IVector{MathNet.Numerics.Complex})" />
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.ComplexVector.ArrayMultiplyInplace(MathNet.Numerics.LinearAlgebra.IVector{MathNet.Numerics.Complex})" />
      </Docs>
    </Member>
    <Member MemberName="ArrayMultiply">
      <MemberSignature Language="C#" Value="public MathNet.Numerics.LinearAlgebra.ComplexVector ArrayMultiply (MathNet.Numerics.LinearAlgebra.IVector&lt;double&gt; b);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.ComplexVector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="b" Type="MathNet.Numerics.LinearAlgebra.IVector&lt;System.Double&gt;" />
      </Parameters>
      <Docs>
        <param name="b">To be added.</param>
        <summary>
            Array (element-by-element) product of this vector and another vector.
            </summary>
        <returns>
            Vector ret[i] = this[i] * b[i]
            </returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.ComplexVector.ArrayProduct(MathNet.Numerics.LinearAlgebra.IVector{MathNet.Numerics.Complex},MathNet.Numerics.LinearAlgebra.IVector{System.Double})" />
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.ComplexVector.ArrayMultiplyInplace(MathNet.Numerics.LinearAlgebra.IVector{System.Double})" />
      </Docs>
    </Member>
    <Member MemberName="ArrayMultiplyInplace">
      <MemberSignature Language="C#" Value="public void ArrayMultiplyInplace (MathNet.Numerics.LinearAlgebra.IVector&lt;MathNet.Numerics.Complex&gt; b);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="b" Type="MathNet.Numerics.LinearAlgebra.IVector&lt;MathNet.Numerics.Complex&gt;" />
      </Parameters>
      <Docs>
        <param name="b">To be added.</param>
        <summary>
            Multiply in place (element-by-element) another vector to this vector.
            </summary>
        <remarks>
            This method changes this vector.
            </remarks>
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.ComplexVector.ArrayProduct(MathNet.Numerics.LinearAlgebra.IVector{MathNet.Numerics.Complex},MathNet.Numerics.LinearAlgebra.IVector{MathNet.Numerics.Complex})" />
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.ComplexVector.ArrayMultiply(MathNet.Numerics.LinearAlgebra.IVector{MathNet.Numerics.Complex})" />
      </Docs>
    </Member>
    <Member MemberName="ArrayMultiplyInplace">
      <MemberSignature Language="C#" Value="public void ArrayMultiplyInplace (MathNet.Numerics.LinearAlgebra.IVector&lt;double&gt; b);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="b" Type="MathNet.Numerics.LinearAlgebra.IVector&lt;System.Double&gt;" />
      </Parameters>
      <Docs>
        <param name="b">To be added.</param>
        <summary>
            Multiply in place (element-by-element) another vector to this vector.
            </summary>
        <remarks>
            This method changes this vector.
            </remarks>
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.ComplexVector.ArrayProduct(MathNet.Numerics.LinearAlgebra.IVector{MathNet.Numerics.Complex},MathNet.Numerics.LinearAlgebra.IVector{System.Double})" />
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.ComplexVector.ArrayMultiply(MathNet.Numerics.LinearAlgebra.IVector{System.Double})" />
      </Docs>
    </Member>
    <Member MemberName="ArrayPower">
      <MemberSignature Language="C#" Value="public MathNet.Numerics.LinearAlgebra.ComplexVector ArrayPower (MathNet.Numerics.Complex exponent);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.ComplexVector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="exponent" Type="MathNet.Numerics.Complex" />
      </Parameters>
      <Docs>
        <param name="exponent">To be added.</param>
        <summary>
            Array (element-by-element) raise to power.
            </summary>
        <returns>
            Vector ret[i] = this[i] ^ exponent
            </returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.ComplexVector.ArrayPowerInplace(MathNet.Numerics.Complex)" />
      </Docs>
    </Member>
    <Member MemberName="ArrayPowerInplace">
      <MemberSignature Language="C#" Value="public void ArrayPowerInplace (MathNet.Numerics.Complex exponent);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="exponent" Type="MathNet.Numerics.Complex" />
      </Parameters>
      <Docs>
        <param name="exponent">To be added.</param>
        <summary>
            In place array (element-by-element) raise to power.
            </summary>
        <remarks>
            This method changes this vector.
            </remarks>
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.ComplexVector.ArrayPower(MathNet.Numerics.Complex)" />
      </Docs>
    </Member>
    <Member MemberName="ArrayProduct">
      <MemberSignature Language="C#" Value="public static MathNet.Numerics.LinearAlgebra.ComplexVector ArrayProduct (MathNet.Numerics.LinearAlgebra.IVector&lt;MathNet.Numerics.Complex&gt; a, MathNet.Numerics.LinearAlgebra.IVector&lt;MathNet.Numerics.Complex&gt; b);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.ComplexVector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="MathNet.Numerics.LinearAlgebra.IVector&lt;MathNet.Numerics.Complex&gt;" />
        <Parameter Name="b" Type="MathNet.Numerics.LinearAlgebra.IVector&lt;MathNet.Numerics.Complex&gt;" />
      </Parameters>
      <Docs>
        <param name="a">To be added.</param>
        <param name="b">To be added.</param>
        <summary>
            Array (element-by-element) product of two vectors.
            </summary>
        <returns>
            Vector ret[i] = u[i] * v[i]
            </returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.ComplexVector.ArrayMultiply(MathNet.Numerics.LinearAlgebra.IVector{MathNet.Numerics.Complex})" />
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.ComplexVector.ArrayMultiplyInplace(MathNet.Numerics.LinearAlgebra.IVector{MathNet.Numerics.Complex})" />
      </Docs>
    </Member>
    <Member MemberName="ArrayProduct">
      <MemberSignature Language="C#" Value="public static MathNet.Numerics.LinearAlgebra.ComplexVector ArrayProduct (MathNet.Numerics.LinearAlgebra.IVector&lt;MathNet.Numerics.Complex&gt; a, MathNet.Numerics.LinearAlgebra.IVector&lt;double&gt; b);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.ComplexVector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="MathNet.Numerics.LinearAlgebra.IVector&lt;MathNet.Numerics.Complex&gt;" />
        <Parameter Name="b" Type="MathNet.Numerics.LinearAlgebra.IVector&lt;System.Double&gt;" />
      </Parameters>
      <Docs>
        <param name="a">To be added.</param>
        <param name="b">To be added.</param>
        <summary>
            Array (element-by-element) product of two vectors.
            </summary>
        <returns>
            Vector ret[i] = u[i] * v[i]
            </returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.ComplexVector.ArrayMultiply(MathNet.Numerics.LinearAlgebra.IVector{System.Double})" />
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.ComplexVector.ArrayMultiplyInplace(MathNet.Numerics.LinearAlgebra.IVector{System.Double})" />
      </Docs>
    </Member>
    <Member MemberName="ArrayQuotient">
      <MemberSignature Language="C#" Value="public static MathNet.Numerics.LinearAlgebra.ComplexVector ArrayQuotient (MathNet.Numerics.LinearAlgebra.IVector&lt;MathNet.Numerics.Complex&gt; a, MathNet.Numerics.LinearAlgebra.IVector&lt;MathNet.Numerics.Complex&gt; b);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.ComplexVector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="MathNet.Numerics.LinearAlgebra.IVector&lt;MathNet.Numerics.Complex&gt;" />
        <Parameter Name="b" Type="MathNet.Numerics.LinearAlgebra.IVector&lt;MathNet.Numerics.Complex&gt;" />
      </Parameters>
      <Docs>
        <param name="a">To be added.</param>
        <param name="b">To be added.</param>
        <summary>
            Array (element-by-element) quotient of two vectors.
            </summary>
        <returns>
            Vector ret[i] = u[i] / v[i]
            </returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.ComplexVector.ArrayDivide(MathNet.Numerics.LinearAlgebra.IVector{MathNet.Numerics.Complex})" />
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.ComplexVector.ArrayDivideInplace(MathNet.Numerics.LinearAlgebra.IVector{MathNet.Numerics.Complex})" />
      </Docs>
    </Member>
    <Member MemberName="ArrayQuotient">
      <MemberSignature Language="C#" Value="public static MathNet.Numerics.LinearAlgebra.ComplexVector ArrayQuotient (MathNet.Numerics.LinearAlgebra.IVector&lt;MathNet.Numerics.Complex&gt; a, MathNet.Numerics.LinearAlgebra.IVector&lt;double&gt; b);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.ComplexVector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="MathNet.Numerics.LinearAlgebra.IVector&lt;MathNet.Numerics.Complex&gt;" />
        <Parameter Name="b" Type="MathNet.Numerics.LinearAlgebra.IVector&lt;System.Double&gt;" />
      </Parameters>
      <Docs>
        <param name="a">To be added.</param>
        <param name="b">To be added.</param>
        <summary>
            Array (element-by-element) quotient of two vectors.
            </summary>
        <returns>
            Vector ret[i] = u[i] / v[i]
            </returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.ComplexVector.ArrayDivide(MathNet.Numerics.LinearAlgebra.IVector{System.Double})" />
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.ComplexVector.ArrayDivideInplace(MathNet.Numerics.LinearAlgebra.IVector{System.Double})" />
      </Docs>
    </Member>
    <Member MemberName="BasisVector">
      <MemberSignature Language="C#" Value="public static MathNet.Numerics.LinearAlgebra.ComplexVector BasisVector (int n, int i);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.ComplexVector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="n" Type="System.Int32" />
        <Parameter Name="i" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="n">Dimensionality of vector.</param>
        <param name="i">Coordinate index.</param>
        <summary>
            Generates an n-dimensional unit vector for i'th coordinate.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public MathNet.Numerics.LinearAlgebra.ComplexVector Clone ();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.ComplexVector</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns a deep copy of this instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Conjugate">
      <MemberSignature Language="C#" Value="public MathNet.Numerics.LinearAlgebra.ComplexVector Conjugate ();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.ComplexVector</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Conjugate this vector.
            </summary>
        <returns>
            Vector ret[i] = real(this[i]) - imag(this[i])
            </returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.ComplexVector.ConjugateInplace" />
      </Docs>
    </Member>
    <Member MemberName="ConjugateInplace">
      <MemberSignature Language="C#" Value="public void ConjugateInplace ();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            In place conjugation of this vector.
            </summary>
        <remarks>
            This method changes this vector.
            </remarks>
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.ComplexVector.Conjugate" />
      </Docs>
    </Member>
    <Member MemberName="CopyToArray">
      <MemberSignature Language="C#" Value="public MathNet.Numerics.Complex[] CopyToArray ();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.Complex[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Copies the internal data structure to an array.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static MathNet.Numerics.LinearAlgebra.ComplexVector Create (MathNet.Numerics.Complex[] components);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.ComplexVector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="components" Type="MathNet.Numerics.Complex[]" />
      </Parameters>
      <Docs>
        <param name="components">One-dimensional array of doubles.</param>
        <summary>
            Constructs a vector from a copy of a 1-D array.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static MathNet.Numerics.LinearAlgebra.ComplexVector Create (System.Collections.Generic.IList&lt;double&gt; realComponents);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.ComplexVector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="realComponents" Type="System.Collections.Generic.IList&lt;System.Double&gt;" />
      </Parameters>
      <Docs>
        <param name="realComponents">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static MathNet.Numerics.LinearAlgebra.ComplexVector Create (System.Collections.Generic.IList&lt;double&gt; realComponents, System.Collections.Generic.IList&lt;double&gt; imagComponents);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.ComplexVector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="realComponents" Type="System.Collections.Generic.IList&lt;System.Double&gt;" />
        <Parameter Name="imagComponents" Type="System.Collections.Generic.IList&lt;System.Double&gt;" />
      </Parameters>
      <Docs>
        <param name="realComponents">One-dimensional array of doubles representing the real part of the vector.</param>
        <param name="imagComponents">One-dimensional array of doubles representing the imaginary part of the vector.</param>
        <summary>
            Constructs a complex vector from a real and an imaginary vector.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CrossMultiply">
      <MemberSignature Language="C#" Value="public MathNet.Numerics.LinearAlgebra.ComplexVector CrossMultiply (MathNet.Numerics.LinearAlgebra.IVector&lt;MathNet.Numerics.Complex&gt; b);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.ComplexVector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="b" Type="MathNet.Numerics.LinearAlgebra.IVector&lt;MathNet.Numerics.Complex&gt;" />
      </Parameters>
      <Docs>
        <param name="b">The other vector.</param>
        <summary>
            Cross product of this vector with another vector.
            </summary>
        <returns>
            Vector ret = (this[2]b[3] - this[3]b[2], this[3]b[1] - this[1]b[3], this[1]b[2] - this[2]b[1]).
            </returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.ComplexVector.CrossProduct(MathNet.Numerics.LinearAlgebra.IVector{MathNet.Numerics.Complex},MathNet.Numerics.LinearAlgebra.IVector{MathNet.Numerics.Complex})" />
      </Docs>
    </Member>
    <Member MemberName="CrossProduct">
      <MemberSignature Language="C#" Value="public static MathNet.Numerics.LinearAlgebra.ComplexVector CrossProduct (MathNet.Numerics.LinearAlgebra.IVector&lt;MathNet.Numerics.Complex&gt; u, MathNet.Numerics.LinearAlgebra.IVector&lt;MathNet.Numerics.Complex&gt; v);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.ComplexVector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="u" Type="MathNet.Numerics.LinearAlgebra.IVector&lt;MathNet.Numerics.Complex&gt;" />
        <Parameter Name="v" Type="MathNet.Numerics.LinearAlgebra.IVector&lt;MathNet.Numerics.Complex&gt;" />
      </Parameters>
      <Docs>
        <param name="u">To be added.</param>
        <param name="v">To be added.</param>
        <summary>
            Cross product of two 3-dimensional vectors.
            </summary>
        <returns>
            Vector ret = (u[2]v[3] - u[3]v[2], u[3]v[1] - u[1]v[3], u[1]v[2] - u[2]v[1]).
            </returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.ComplexVector.CrossMultiply(MathNet.Numerics.LinearAlgebra.IVector{MathNet.Numerics.Complex})" />
      </Docs>
    </Member>
    <Member MemberName="DyadicProduct">
      <MemberSignature Language="C#" Value="public static MathNet.Numerics.LinearAlgebra.ComplexMatrix DyadicProduct (MathNet.Numerics.LinearAlgebra.IVector&lt;MathNet.Numerics.Complex&gt; u, MathNet.Numerics.LinearAlgebra.IVector&lt;MathNet.Numerics.Complex&gt; v);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.ComplexMatrix</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="u" Type="MathNet.Numerics.LinearAlgebra.IVector&lt;MathNet.Numerics.Complex&gt;" />
        <Parameter Name="v" Type="MathNet.Numerics.LinearAlgebra.IVector&lt;MathNet.Numerics.Complex&gt;" />
      </Parameters>
      <Docs>
        <param name="u">To be added.</param>
        <param name="v">To be added.</param>
        <summary>
            Dyadic Product of two vectors.
            </summary>
        <returns>
            Matrix M[i,j] = u[i] * v[j].
            </returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.ComplexVector.TensorMultiply(MathNet.Numerics.LinearAlgebra.IVector{MathNet.Numerics.Complex})" />
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public MathNet.Numerics.Complex this[int i] { set; get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="i" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="i">Dimension index.</param>
        <summary>
            Gets or sets the element indexed by <c>i</c>
            in the <c>Vector</c>.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Length">
      <MemberSignature Language="C#" Value="public int Length { get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets dimensionality of the vector.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Multiply">
      <MemberSignature Language="C#" Value="public MathNet.Numerics.LinearAlgebra.ComplexVector Multiply (MathNet.Numerics.Complex scalar);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.ComplexVector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scalar" Type="MathNet.Numerics.Complex" />
      </Parameters>
      <Docs>
        <param name="scalar">The scalar to scale with</param>
        <summary>
            Scale this complex vector with a complex scalar.
            </summary>
        <returns>
            Vector ret[i] = this[i] * scalar
            </returns>
        <remarks>
            This method has the same effect as the overloaded * operator.
            </remarks>
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.ComplexVector.MultiplyInplace(MathNet.Numerics.Complex)" />
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.ComplexVector.op_Multiply(MathNet.Numerics.LinearAlgebra.ComplexVector,MathNet.Numerics.Complex)" />
      </Docs>
    </Member>
    <Member MemberName="MultiplyInplace">
      <MemberSignature Language="C#" Value="public void MultiplyInplace (MathNet.Numerics.Complex scalar);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scalar" Type="MathNet.Numerics.Complex" />
      </Parameters>
      <Docs>
        <param name="scalar">To be added.</param>
        <summary>
            Multiplies in place this <c>Vector</c> by a scalar.
            </summary>
        <remarks>
            This method changes this vector.
            </remarks>
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.ComplexVector.Multiply(MathNet.Numerics.Complex)" />
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.ComplexVector.op_Multiply(MathNet.Numerics.LinearAlgebra.ComplexVector,MathNet.Numerics.Complex)" />
      </Docs>
    </Member>
    <Member MemberName="Negate">
      <MemberSignature Language="C#" Value="public MathNet.Numerics.LinearAlgebra.ComplexVector Negate ();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.ComplexVector</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Negate this vector.
            </summary>
        <returns>
            Vector ret[i] = -this[i]
            </returns>
        <remarks>
            This method has the same effect as the overloaded - operator.
            </remarks>
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.ComplexVector.NegateInplace" />
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.ComplexVector.op_UnaryNegation(MathNet.Numerics.LinearAlgebra.ComplexVector)" />
      </Docs>
    </Member>
    <Member MemberName="NegateInplace">
      <MemberSignature Language="C#" Value="public void NegateInplace ();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            In place unary minus of the <c>Vector</c>.
            </summary>
        <remarks>
            This method changes this vector.
            </remarks>
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.ComplexVector.Negate" />
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.ComplexVector.op_UnaryNegation(MathNet.Numerics.LinearAlgebra.ComplexVector)" />
      </Docs>
    </Member>
    <Member MemberName="Norm1">
      <MemberSignature Language="C#" Value="public double Norm1 ();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            1-Norm also known as Manhattan Norm or Taxicab Norm.
            </summary>
        <returns>
            Scalar ret = sum(abs(this[i]))
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Ones">
      <MemberSignature Language="C#" Value="public static MathNet.Numerics.LinearAlgebra.ComplexVector Ones (int n);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.ComplexVector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="n" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="n">Dimensionality of vector.</param>
        <summary>
            Generates an n-dimensional vector filled with 1.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Addition">
      <MemberSignature Language="C#" Value="public static MathNet.Numerics.LinearAlgebra.ComplexVector op_Addition (MathNet.Numerics.LinearAlgebra.ComplexVector complexVector, MathNet.Numerics.Complex scalar);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.ComplexVector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="complexVector" Type="MathNet.Numerics.LinearAlgebra.ComplexVector" />
        <Parameter Name="scalar" Type="MathNet.Numerics.Complex" />
      </Parameters>
      <Docs>
        <param name="complexVector">To be added.</param>
        <param name="scalar">To be added.</param>
        <summary>
            Addition Operator.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Addition">
      <MemberSignature Language="C#" Value="public static MathNet.Numerics.LinearAlgebra.ComplexVector op_Addition (MathNet.Numerics.LinearAlgebra.ComplexVector u, MathNet.Numerics.LinearAlgebra.ComplexVector v);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.ComplexVector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="u" Type="MathNet.Numerics.LinearAlgebra.ComplexVector" />
        <Parameter Name="v" Type="MathNet.Numerics.LinearAlgebra.ComplexVector" />
      </Parameters>
      <Docs>
        <param name="u">To be added.</param>
        <param name="v">To be added.</param>
        <summary>
            Addition Operator.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Addition">
      <MemberSignature Language="C#" Value="public static MathNet.Numerics.LinearAlgebra.ComplexVector op_Addition (MathNet.Numerics.LinearAlgebra.ComplexVector complexVector, MathNet.Numerics.LinearAlgebra.Vector realVector);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.ComplexVector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="complexVector" Type="MathNet.Numerics.LinearAlgebra.ComplexVector" />
        <Parameter Name="realVector" Type="MathNet.Numerics.LinearAlgebra.Vector" />
      </Parameters>
      <Docs>
        <param name="complexVector">To be added.</param>
        <param name="realVector">To be added.</param>
        <summary>
            Addition Operator.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Division">
      <MemberSignature Language="C#" Value="public static MathNet.Numerics.LinearAlgebra.ComplexVector op_Division (MathNet.Numerics.LinearAlgebra.ComplexVector vector, MathNet.Numerics.Complex scalar);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.ComplexVector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector" Type="MathNet.Numerics.LinearAlgebra.ComplexVector" />
        <Parameter Name="scalar" Type="MathNet.Numerics.Complex" />
      </Parameters>
      <Docs>
        <param name="vector">To be added.</param>
        <param name="scalar">To be added.</param>
        <summary>
            Scaling a vector by the inverse of a scalar.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static MathNet.Numerics.LinearAlgebra.ComplexVector op_Implicit (MathNet.Numerics.Complex[] v);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.ComplexVector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="v" Type="MathNet.Numerics.Complex[]" />
      </Parameters>
      <Docs>
        <param name="v">To be added.</param>
        <summary>
            Returns a vector bound directly to a reference of the provided array.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static MathNet.Numerics.Complex[] op_Implicit (MathNet.Numerics.LinearAlgebra.ComplexVector v);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.Complex[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="v" Type="MathNet.Numerics.LinearAlgebra.ComplexVector" />
      </Parameters>
      <Docs>
        <param name="v">To be added.</param>
        <summary>
            Returns a reference to the internel data structure.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Multiply">
      <MemberSignature Language="C#" Value="public static MathNet.Numerics.LinearAlgebra.ComplexVector op_Multiply (MathNet.Numerics.Complex scalar, MathNet.Numerics.LinearAlgebra.ComplexVector vector);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.ComplexVector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scalar" Type="MathNet.Numerics.Complex" />
        <Parameter Name="vector" Type="MathNet.Numerics.LinearAlgebra.ComplexVector" />
      </Parameters>
      <Docs>
        <param name="scalar">To be added.</param>
        <param name="vector">To be added.</param>
        <summary>
            Scaling a vector by a scalar.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Multiply">
      <MemberSignature Language="C#" Value="public static MathNet.Numerics.LinearAlgebra.ComplexVector op_Multiply (MathNet.Numerics.LinearAlgebra.ComplexVector vector, MathNet.Numerics.Complex scalar);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.ComplexVector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector" Type="MathNet.Numerics.LinearAlgebra.ComplexVector" />
        <Parameter Name="scalar" Type="MathNet.Numerics.Complex" />
      </Parameters>
      <Docs>
        <param name="vector">To be added.</param>
        <param name="scalar">To be added.</param>
        <summary>
            Scaling a vector by a scalar.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Multiply">
      <MemberSignature Language="C#" Value="public static MathNet.Numerics.Complex op_Multiply (MathNet.Numerics.LinearAlgebra.ComplexVector u, MathNet.Numerics.LinearAlgebra.ComplexVector v);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="u" Type="MathNet.Numerics.LinearAlgebra.ComplexVector" />
        <Parameter Name="v" Type="MathNet.Numerics.LinearAlgebra.ComplexVector" />
      </Parameters>
      <Docs>
        <param name="u">To be added.</param>
        <param name="v">To be added.</param>
        <summary>
            Scalar/dot product of two vectors.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Multiply">
      <MemberSignature Language="C#" Value="public static MathNet.Numerics.Complex op_Multiply (MathNet.Numerics.LinearAlgebra.ComplexVector u, MathNet.Numerics.LinearAlgebra.Vector v);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="u" Type="MathNet.Numerics.LinearAlgebra.ComplexVector" />
        <Parameter Name="v" Type="MathNet.Numerics.LinearAlgebra.Vector" />
      </Parameters>
      <Docs>
        <param name="u">To be added.</param>
        <param name="v">To be added.</param>
        <summary>
            Scalar/dot product of two vectors.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Subtraction">
      <MemberSignature Language="C#" Value="public static MathNet.Numerics.LinearAlgebra.ComplexVector op_Subtraction (MathNet.Numerics.LinearAlgebra.ComplexVector complexVector, MathNet.Numerics.Complex scalar);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.ComplexVector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="complexVector" Type="MathNet.Numerics.LinearAlgebra.ComplexVector" />
        <Parameter Name="scalar" Type="MathNet.Numerics.Complex" />
      </Parameters>
      <Docs>
        <param name="complexVector">To be added.</param>
        <param name="scalar">To be added.</param>
        <summary>
            Subtraction Operator.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Subtraction">
      <MemberSignature Language="C#" Value="public static MathNet.Numerics.LinearAlgebra.ComplexVector op_Subtraction (MathNet.Numerics.LinearAlgebra.ComplexVector u, MathNet.Numerics.LinearAlgebra.ComplexVector v);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.ComplexVector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="u" Type="MathNet.Numerics.LinearAlgebra.ComplexVector" />
        <Parameter Name="v" Type="MathNet.Numerics.LinearAlgebra.ComplexVector" />
      </Parameters>
      <Docs>
        <param name="u">To be added.</param>
        <param name="v">To be added.</param>
        <summary>
            Subtraction Operator.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Subtraction">
      <MemberSignature Language="C#" Value="public static MathNet.Numerics.LinearAlgebra.ComplexVector op_Subtraction (MathNet.Numerics.LinearAlgebra.ComplexVector complexVector, MathNet.Numerics.LinearAlgebra.Vector realVector);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.ComplexVector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="complexVector" Type="MathNet.Numerics.LinearAlgebra.ComplexVector" />
        <Parameter Name="realVector" Type="MathNet.Numerics.LinearAlgebra.Vector" />
      </Parameters>
      <Docs>
        <param name="complexVector">To be added.</param>
        <param name="realVector">To be added.</param>
        <summary>
            Subtraction Operator.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_UnaryNegation">
      <MemberSignature Language="C#" Value="public static MathNet.Numerics.LinearAlgebra.ComplexVector op_UnaryNegation (MathNet.Numerics.LinearAlgebra.ComplexVector v);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.ComplexVector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="v" Type="MathNet.Numerics.LinearAlgebra.ComplexVector" />
      </Parameters>
      <Docs>
        <param name="v">To be added.</param>
        <summary>
            Negate a vectors
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ScalarMultiply">
      <MemberSignature Language="C#" Value="public MathNet.Numerics.Complex ScalarMultiply (MathNet.Numerics.LinearAlgebra.IVector&lt;MathNet.Numerics.Complex&gt; b);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="b" Type="MathNet.Numerics.LinearAlgebra.IVector&lt;MathNet.Numerics.Complex&gt;" />
      </Parameters>
      <Docs>
        <param name="b">The other complex vector.</param>
        <summary>
            Scalar product of this vector with another complex vector.
            </summary>
        <returns>
            Scalar ret = sum(this[i] * b[i])
            </returns>
        <remarks>
            This method has the same effect as the overloaded * operator.
            </remarks>
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.ComplexVector.ScalarProduct(MathNet.Numerics.LinearAlgebra.IVector{MathNet.Numerics.Complex},MathNet.Numerics.LinearAlgebra.IVector{MathNet.Numerics.Complex})" />
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.ComplexVector.op_Multiply(MathNet.Numerics.LinearAlgebra.ComplexVector,MathNet.Numerics.LinearAlgebra.ComplexVector)" />
      </Docs>
    </Member>
    <Member MemberName="ScalarMultiply">
      <MemberSignature Language="C#" Value="public MathNet.Numerics.Complex ScalarMultiply (MathNet.Numerics.LinearAlgebra.IVector&lt;double&gt; b);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="b" Type="MathNet.Numerics.LinearAlgebra.IVector&lt;System.Double&gt;" />
      </Parameters>
      <Docs>
        <param name="b">The other real vector.</param>
        <summary>
            Scalar product of this vector with another real vector.
            </summary>
        <returns>
            Scalar ret = sum(this[i] * b[i])
            </returns>
        <remarks>
            This method has the same effect as the overloaded * operator.
            </remarks>
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.ComplexVector.ScalarProduct(MathNet.Numerics.LinearAlgebra.IVector{MathNet.Numerics.Complex},MathNet.Numerics.LinearAlgebra.IVector{System.Double})" />
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.ComplexVector.op_Multiply(MathNet.Numerics.LinearAlgebra.ComplexVector,MathNet.Numerics.LinearAlgebra.Vector)" />
      </Docs>
    </Member>
    <Member MemberName="ScalarProduct">
      <MemberSignature Language="C#" Value="public static MathNet.Numerics.Complex ScalarProduct (MathNet.Numerics.LinearAlgebra.IVector&lt;MathNet.Numerics.Complex&gt; u, MathNet.Numerics.LinearAlgebra.IVector&lt;MathNet.Numerics.Complex&gt; v);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="u" Type="MathNet.Numerics.LinearAlgebra.IVector&lt;MathNet.Numerics.Complex&gt;" />
        <Parameter Name="v" Type="MathNet.Numerics.LinearAlgebra.IVector&lt;MathNet.Numerics.Complex&gt;" />
      </Parameters>
      <Docs>
        <param name="u">To be added.</param>
        <param name="v">To be added.</param>
        <summary>
            Scalar product of two vectors.
            </summary>
        <returns>
            Scalar ret = sum(u[i] * v[i])
            </returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.ComplexVector.ScalarMultiply(MathNet.Numerics.LinearAlgebra.IVector{MathNet.Numerics.Complex})" />
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.ComplexVector.op_Multiply(MathNet.Numerics.LinearAlgebra.ComplexVector,MathNet.Numerics.LinearAlgebra.ComplexVector)" />
      </Docs>
    </Member>
    <Member MemberName="ScalarProduct">
      <MemberSignature Language="C#" Value="public static MathNet.Numerics.Complex ScalarProduct (MathNet.Numerics.LinearAlgebra.IVector&lt;MathNet.Numerics.Complex&gt; u, MathNet.Numerics.LinearAlgebra.IVector&lt;double&gt; v);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="u" Type="MathNet.Numerics.LinearAlgebra.IVector&lt;MathNet.Numerics.Complex&gt;" />
        <Parameter Name="v" Type="MathNet.Numerics.LinearAlgebra.IVector&lt;System.Double&gt;" />
      </Parameters>
      <Docs>
        <param name="u">To be added.</param>
        <param name="v">To be added.</param>
        <summary>
            Scalar product of two vectors.
            </summary>
        <returns>
            Scalar ret = sum(u[i] * v[i])
            </returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.ComplexVector.ScalarMultiply(MathNet.Numerics.LinearAlgebra.IVector{System.Double})" />
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.ComplexVector.op_Multiply(MathNet.Numerics.LinearAlgebra.ComplexVector,MathNet.Numerics.LinearAlgebra.Vector)" />
      </Docs>
    </Member>
    <Member MemberName="Subtract">
      <MemberSignature Language="C#" Value="public MathNet.Numerics.LinearAlgebra.ComplexVector Subtract (MathNet.Numerics.Complex b);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.ComplexVector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="b" Type="MathNet.Numerics.Complex" />
      </Parameters>
      <Docs>
        <param name="b">The complex scalar.</param>
        <summary>
            Subtract a complex scalar from all elements of this vector.
            </summary>
        <returns>
            Vector ret[i] = this[i] - b
            </returns>
        <remarks>
            This method has the same effect as the overloaded - operator.
            </remarks>
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.ComplexVector.SubtractInplace(MathNet.Numerics.Complex)" />
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.ComplexVector.op_Subtraction(MathNet.Numerics.LinearAlgebra.ComplexVector,MathNet.Numerics.Complex)" />
      </Docs>
    </Member>
    <Member MemberName="Subtract">
      <MemberSignature Language="C#" Value="public MathNet.Numerics.LinearAlgebra.ComplexVector Subtract (MathNet.Numerics.LinearAlgebra.IVector&lt;MathNet.Numerics.Complex&gt; b);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.ComplexVector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="b" Type="MathNet.Numerics.LinearAlgebra.IVector&lt;MathNet.Numerics.Complex&gt;" />
      </Parameters>
      <Docs>
        <param name="b">The other complex vector.</param>
        <summary>
            Subtract a complex vector from this vector.
            </summary>
        <returns>
            Vector ret[i] = this[i] - b[i]
            </returns>
        <remarks>
            This method has the same effect as the overloaded - operator.
            </remarks>
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.ComplexVector.SubtractInplace(MathNet.Numerics.LinearAlgebra.IVector{MathNet.Numerics.Complex})" />
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.ComplexVector.op_Subtraction(MathNet.Numerics.LinearAlgebra.ComplexVector,MathNet.Numerics.LinearAlgebra.ComplexVector)" />
      </Docs>
    </Member>
    <Member MemberName="Subtract">
      <MemberSignature Language="C#" Value="public MathNet.Numerics.LinearAlgebra.ComplexVector Subtract (MathNet.Numerics.LinearAlgebra.IVector&lt;double&gt; b);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.ComplexVector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="b" Type="MathNet.Numerics.LinearAlgebra.IVector&lt;System.Double&gt;" />
      </Parameters>
      <Docs>
        <param name="b">The other real vector.</param>
        <summary>
            Subtract a real vector from this vector.
            </summary>
        <returns>
            Vector ret[i] = this[i] - b[i]
            </returns>
        <remarks>
            This method has the same effect as the overloaded - operator.
            </remarks>
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.ComplexVector.SubtractInplace(MathNet.Numerics.LinearAlgebra.IVector{System.Double})" />
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.ComplexVector.op_Subtraction(MathNet.Numerics.LinearAlgebra.ComplexVector,MathNet.Numerics.LinearAlgebra.Vector)" />
      </Docs>
    </Member>
    <Member MemberName="SubtractInplace">
      <MemberSignature Language="C#" Value="public void SubtractInplace (MathNet.Numerics.Complex b);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="b" Type="MathNet.Numerics.Complex" />
      </Parameters>
      <Docs>
        <param name="b">To be added.</param>
        <summary>
            In place subtraction of a complex scalar from all elements of this vector.
            </summary>
        <remarks>
            This method changes this vector.
            </remarks>
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.ComplexVector.Subtract(MathNet.Numerics.Complex)" />
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.ComplexVector.op_Subtraction(MathNet.Numerics.LinearAlgebra.ComplexVector,MathNet.Numerics.Complex)" />
      </Docs>
    </Member>
    <Member MemberName="SubtractInplace">
      <MemberSignature Language="C#" Value="public void SubtractInplace (MathNet.Numerics.LinearAlgebra.IVector&lt;MathNet.Numerics.Complex&gt; b);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="b" Type="MathNet.Numerics.LinearAlgebra.IVector&lt;MathNet.Numerics.Complex&gt;" />
      </Parameters>
      <Docs>
        <param name="b">To be added.</param>
        <summary>
            In place subtraction of a complex vector from this vector.
            </summary>
        <remarks>
            This method changes this vector.
            </remarks>
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.ComplexVector.Subtract(MathNet.Numerics.LinearAlgebra.IVector{MathNet.Numerics.Complex})" />
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.ComplexVector.op_Subtraction(MathNet.Numerics.LinearAlgebra.ComplexVector,MathNet.Numerics.LinearAlgebra.ComplexVector)" />
      </Docs>
    </Member>
    <Member MemberName="SubtractInplace">
      <MemberSignature Language="C#" Value="public void SubtractInplace (MathNet.Numerics.LinearAlgebra.IVector&lt;double&gt; b);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="b" Type="MathNet.Numerics.LinearAlgebra.IVector&lt;System.Double&gt;" />
      </Parameters>
      <Docs>
        <param name="b">To be added.</param>
        <summary>
            In place subtraction of a real vector from this vector.
            </summary>
        <remarks>
            This method changes this vector.
            </remarks>
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.ComplexVector.Subtract(MathNet.Numerics.LinearAlgebra.IVector{System.Double})" />
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.ComplexVector.op_Subtraction(MathNet.Numerics.LinearAlgebra.ComplexVector,MathNet.Numerics.LinearAlgebra.Vector)" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.ICollection&lt;MathNet.Numerics.Complex&gt;.Add">
      <MemberSignature Language="C#" Value="void ICollection&lt;Complex&gt;.Add (MathNet.Numerics.Complex item);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="MathNet.Numerics.Complex" />
      </Parameters>
      <Docs>
        <param name="item">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.ICollection&lt;MathNet.Numerics.Complex&gt;.Clear">
      <MemberSignature Language="C#" Value="void ICollection&lt;Complex&gt;.Clear ();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.ICollection&lt;MathNet.Numerics.Complex&gt;.Contains">
      <MemberSignature Language="C#" Value="bool ICollection&lt;Complex&gt;.Contains (MathNet.Numerics.Complex item);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="MathNet.Numerics.Complex" />
      </Parameters>
      <Docs>
        <param name="item">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.ICollection&lt;MathNet.Numerics.Complex&gt;.CopyTo">
      <MemberSignature Language="C#" Value="void ICollection&lt;Complex&gt;.CopyTo (MathNet.Numerics.Complex[] array, int arrayIndex);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="MathNet.Numerics.Complex[]" />
        <Parameter Name="arrayIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array">To be added.</param>
        <param name="arrayIndex">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.ICollection&lt;MathNet.Numerics.Complex&gt;.Count">
      <MemberSignature Language="C#" Value="int System.Collections.Generic.ICollection&lt;MathNet.Numerics.Complex&gt;.Count { get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.ICollection&lt;MathNet.Numerics.Complex&gt;.IsReadOnly">
      <MemberSignature Language="C#" Value="bool System.Collections.Generic.ICollection&lt;MathNet.Numerics.Complex&gt;.IsReadOnly { get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.ICollection&lt;MathNet.Numerics.Complex&gt;.Remove">
      <MemberSignature Language="C#" Value="bool ICollection&lt;Complex&gt;.Remove (MathNet.Numerics.Complex item);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="MathNet.Numerics.Complex" />
      </Parameters>
      <Docs>
        <param name="item">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IEnumerable&lt;MathNet.Numerics.Complex&gt;.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.Generic.IEnumerator&lt;MathNet.Numerics.Complex&gt; IEnumerable&lt;Complex&gt;.GetEnumerator ();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;MathNet.Numerics.Complex&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IList&lt;MathNet.Numerics.Complex&gt;.IndexOf">
      <MemberSignature Language="C#" Value="int IList&lt;Complex&gt;.IndexOf (MathNet.Numerics.Complex item);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="MathNet.Numerics.Complex" />
      </Parameters>
      <Docs>
        <param name="item">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IList&lt;MathNet.Numerics.Complex&gt;.Insert">
      <MemberSignature Language="C#" Value="void IList&lt;Complex&gt;.Insert (int index, MathNet.Numerics.Complex item);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="item" Type="MathNet.Numerics.Complex" />
      </Parameters>
      <Docs>
        <param name="index">To be added.</param>
        <param name="item">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IList&lt;MathNet.Numerics.Complex&gt;.RemoveAt">
      <MemberSignature Language="C#" Value="void IList&lt;Complex&gt;.RemoveAt (int index);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.ICloneable.Clone">
      <MemberSignature Language="C#" Value="object ICloneable.Clone ();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TensorMultiply">
      <MemberSignature Language="C#" Value="public MathNet.Numerics.LinearAlgebra.ComplexMatrix TensorMultiply (MathNet.Numerics.LinearAlgebra.IVector&lt;MathNet.Numerics.Complex&gt; b);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.ComplexMatrix</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="b" Type="MathNet.Numerics.LinearAlgebra.IVector&lt;MathNet.Numerics.Complex&gt;" />
      </Parameters>
      <Docs>
        <param name="b">The vector to operate on.</param>
        <summary>
            Tensor Product (Dyadic) of this and another vector.
            </summary>
        <returns>
            Matrix M[i,j] = this[i] * v[j].
            </returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.ComplexVector.DyadicProduct(MathNet.Numerics.LinearAlgebra.IVector{MathNet.Numerics.Complex},MathNet.Numerics.LinearAlgebra.IVector{MathNet.Numerics.Complex})" />
      </Docs>
    </Member>
    <Member MemberName="ToColumnMatrix">
      <MemberSignature Language="C#" Value="public MathNet.Numerics.LinearAlgebra.ComplexMatrix ToColumnMatrix ();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.ComplexMatrix</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Create a matrix based on this vector in column form (one single column).
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToRowMatrix">
      <MemberSignature Language="C#" Value="public MathNet.Numerics.LinearAlgebra.ComplexMatrix ToRowMatrix ();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.ComplexMatrix</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Create a matrix based on this vector in row form (one single row).
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Formats this vector to a human-readable string
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Zeros">
      <MemberSignature Language="C#" Value="public static MathNet.Numerics.LinearAlgebra.ComplexVector Zeros (int n);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.ComplexVector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="n" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="n">Dimensionality of vector.</param>
        <summary>
            Generates an n-dimensional vector filled with 0.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
