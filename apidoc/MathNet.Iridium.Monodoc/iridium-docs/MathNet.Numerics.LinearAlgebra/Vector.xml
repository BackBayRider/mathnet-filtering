<Type Name="Vector" FullName="MathNet.Numerics.LinearAlgebra.Vector">
  <TypeSignature Language="C#" Value="public class Vector : ICloneable, MathNet.Numerics.LinearAlgebra.IVector&lt;double&gt;, System.Collections.Generic.IList&lt;double&gt;" />
  <AssemblyInfo>
    <AssemblyName>MathNet.Iridium</AssemblyName>
    <AssemblyVersion>2008.8.16.470</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>MathNet.Numerics.LinearAlgebra.IVector&lt;System.Double&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IList&lt;System.Double&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Reflection.DefaultMember("Item")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
            Real vector.
            </summary>
    <remarks>
            The class <c>Vector</c> provides the elementary 
            algebraic and conversion operations.
            </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Vector (double[] components);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="components" Type="System.Double[]" />
      </Parameters>
      <Docs>
        <param name="components">One-dimensional array of doubles.</param>
        <summary>
            Constructs a vector from a 1-D array, directly using
            the provided array as internal data structure.
            </summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.Vector.Create(System.Double[])" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Vector (int n);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="n" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="n">Dimensionality of vector.</param>
        <summary>
            Constructs an n-dimensional vector of zeros.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Vector (int n, double value);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="n" Type="System.Int32" />
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="n">Dimensionality of vector.</param>
        <param name="value">Fill the vector with this scalar value.</param>
        <summary>
            Constructs an n-dimensional constant vector.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Vector (int n, int i);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="n" Type="System.Int32" />
        <Parameter Name="i" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="n">Dimensionality of vector.</param>
        <param name="i">Coordinate index.</param>
        <summary>
            Constructs an n-dimensional unit vector for i'th coordinate.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public MathNet.Numerics.LinearAlgebra.Vector Add (MathNet.Numerics.LinearAlgebra.IVector&lt;double&gt; b);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.Vector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="b" Type="MathNet.Numerics.LinearAlgebra.IVector&lt;System.Double&gt;" />
      </Parameters>
      <Docs>
        <param name="b">The other vector.</param>
        <summary>
            Add another vector to this vector.
            </summary>
        <returns>
            Vector ret[i] = this[i] + b[i]
            </returns>
        <remarks>
            This method has the same effect as the overloaded + operator.
            </remarks>
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.Vector.AddInplace(MathNet.Numerics.LinearAlgebra.IVector{System.Double})" />
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.Vector.op_Addition(MathNet.Numerics.LinearAlgebra.Vector,MathNet.Numerics.LinearAlgebra.Vector)" />
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public MathNet.Numerics.LinearAlgebra.Vector Add (double b);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.Vector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="b" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="b">The real scalar.</param>
        <summary>
            Add a real scalar to all elements of this vector.
            </summary>
        <returns>
            Vector ret[i] = this[i] + b
            </returns>
        <remarks>
            This method has the same effect as the overloaded + operator.
            </remarks>
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.Vector.AddInplace(System.Double)" />
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.Vector.op_Addition(MathNet.Numerics.LinearAlgebra.Vector,System.Double)" />
      </Docs>
    </Member>
    <Member MemberName="AddInplace">
      <MemberSignature Language="C#" Value="public void AddInplace (MathNet.Numerics.LinearAlgebra.IVector&lt;double&gt; b);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="b" Type="MathNet.Numerics.LinearAlgebra.IVector&lt;System.Double&gt;" />
      </Parameters>
      <Docs>
        <param name="b">To be added.</param>
        <summary>
            In place addition of a real vector to this vector.
            </summary>
        <remarks>
            This method changes this vector.
            </remarks>
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.Vector.Add(MathNet.Numerics.LinearAlgebra.IVector{System.Double})" />
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.Vector.op_Addition(MathNet.Numerics.LinearAlgebra.Vector,MathNet.Numerics.LinearAlgebra.Vector)" />
      </Docs>
    </Member>
    <Member MemberName="AddInplace">
      <MemberSignature Language="C#" Value="public void AddInplace (double b);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="b" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="b">To be added.</param>
        <summary>
            In place addition of real scalar to all elements of this vector.
            </summary>
        <remarks>
            This method changes this vector.
            </remarks>
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.Vector.Add(System.Double)" />
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.Vector.op_Addition(MathNet.Numerics.LinearAlgebra.Vector,System.Double)" />
      </Docs>
    </Member>
    <Member MemberName="AlmostEqual">
      <MemberSignature Language="C#" Value="public static bool AlmostEqual (MathNet.Numerics.LinearAlgebra.Vector u, MathNet.Numerics.LinearAlgebra.Vector v);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="u" Type="MathNet.Numerics.LinearAlgebra.Vector" />
        <Parameter Name="v" Type="MathNet.Numerics.LinearAlgebra.Vector" />
      </Parameters>
      <Docs>
        <param name="u">To be added.</param>
        <param name="v">To be added.</param>
        <summary>
            Returns true if two vectors are almost equal.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AlmostEqual">
      <MemberSignature Language="C#" Value="public static bool AlmostEqual (MathNet.Numerics.LinearAlgebra.Vector u, MathNet.Numerics.LinearAlgebra.Vector v, double relativeAccuracy);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="u" Type="MathNet.Numerics.LinearAlgebra.Vector" />
        <Parameter Name="v" Type="MathNet.Numerics.LinearAlgebra.Vector" />
        <Parameter Name="relativeAccuracy" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="u">To be added.</param>
        <param name="v">To be added.</param>
        <param name="relativeAccuracy">To be added.</param>
        <summary>
            Returns true if two vectors are almost equal (with some given relative accuracy).
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ArrayDivide">
      <MemberSignature Language="C#" Value="public MathNet.Numerics.LinearAlgebra.Vector ArrayDivide (MathNet.Numerics.LinearAlgebra.IVector&lt;double&gt; b);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.Vector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="b" Type="MathNet.Numerics.LinearAlgebra.IVector&lt;System.Double&gt;" />
      </Parameters>
      <Docs>
        <param name="b">To be added.</param>
        <summary>
            Array (element-by-element) quotient of this vector and another vector.
            </summary>
        <returns>
            Vector ret[i] = this[i] / b[i]
            </returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.Vector.ArrayQuotient(MathNet.Numerics.LinearAlgebra.IVector{System.Double},MathNet.Numerics.LinearAlgebra.IVector{System.Double})" />
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.Vector.ArrayDivideInplace(MathNet.Numerics.LinearAlgebra.IVector{System.Double})" />
      </Docs>
    </Member>
    <Member MemberName="ArrayDivideInplace">
      <MemberSignature Language="C#" Value="public void ArrayDivideInplace (MathNet.Numerics.LinearAlgebra.IVector&lt;double&gt; b);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="b" Type="MathNet.Numerics.LinearAlgebra.IVector&lt;System.Double&gt;" />
      </Parameters>
      <Docs>
        <param name="b">To be added.</param>
        <summary>
            Divide in place (element-by-element) this vector by another vector.
            </summary>
        <remarks>
            This method changes this vector.
            </remarks>
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.Vector.ArrayQuotient(MathNet.Numerics.LinearAlgebra.IVector{System.Double},MathNet.Numerics.LinearAlgebra.IVector{System.Double})" />
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.Vector.ArrayDivide(MathNet.Numerics.LinearAlgebra.IVector{System.Double})" />
      </Docs>
    </Member>
    <Member MemberName="ArrayMultiply">
      <MemberSignature Language="C#" Value="public MathNet.Numerics.LinearAlgebra.Vector ArrayMultiply (MathNet.Numerics.LinearAlgebra.IVector&lt;double&gt; b);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.Vector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="b" Type="MathNet.Numerics.LinearAlgebra.IVector&lt;System.Double&gt;" />
      </Parameters>
      <Docs>
        <param name="b">To be added.</param>
        <summary>
            Array (element-by-element) product of this vector and another vector.
            </summary>
        <returns>
            Vector ret[i] = this[i] * b[i]
            </returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.Vector.ArrayProduct(MathNet.Numerics.LinearAlgebra.IVector{System.Double},MathNet.Numerics.LinearAlgebra.IVector{System.Double})" />
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.Vector.ArrayMultiplyInplace(MathNet.Numerics.LinearAlgebra.IVector{System.Double})" />
      </Docs>
    </Member>
    <Member MemberName="ArrayMultiplyInplace">
      <MemberSignature Language="C#" Value="public void ArrayMultiplyInplace (MathNet.Numerics.LinearAlgebra.IVector&lt;double&gt; b);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="b" Type="MathNet.Numerics.LinearAlgebra.IVector&lt;System.Double&gt;" />
      </Parameters>
      <Docs>
        <param name="b">To be added.</param>
        <summary>
            Multiply in place (element-by-element) another vector to this vector.
            </summary>
        <remarks>
            This method changes this vector.
            </remarks>
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.Vector.ArrayProduct(MathNet.Numerics.LinearAlgebra.IVector{System.Double},MathNet.Numerics.LinearAlgebra.IVector{System.Double})" />
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.Vector.ArrayMultiply(MathNet.Numerics.LinearAlgebra.IVector{System.Double})" />
      </Docs>
    </Member>
    <Member MemberName="ArrayProduct">
      <MemberSignature Language="C#" Value="public static MathNet.Numerics.LinearAlgebra.Vector ArrayProduct (MathNet.Numerics.LinearAlgebra.IVector&lt;double&gt; a, MathNet.Numerics.LinearAlgebra.IVector&lt;double&gt; b);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.Vector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="MathNet.Numerics.LinearAlgebra.IVector&lt;System.Double&gt;" />
        <Parameter Name="b" Type="MathNet.Numerics.LinearAlgebra.IVector&lt;System.Double&gt;" />
      </Parameters>
      <Docs>
        <param name="a">To be added.</param>
        <param name="b">To be added.</param>
        <summary>
            Array (element-by-element) product of two vectors.
            </summary>
        <returns>
            Vector ret[i] = u[i] * v[i]
            </returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.Vector.ArrayMultiply(MathNet.Numerics.LinearAlgebra.IVector{System.Double})" />
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.Vector.ArrayMultiplyInplace(MathNet.Numerics.LinearAlgebra.IVector{System.Double})" />
      </Docs>
    </Member>
    <Member MemberName="ArrayQuotient">
      <MemberSignature Language="C#" Value="public static MathNet.Numerics.LinearAlgebra.Vector ArrayQuotient (MathNet.Numerics.LinearAlgebra.IVector&lt;double&gt; a, MathNet.Numerics.LinearAlgebra.IVector&lt;double&gt; b);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.Vector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="MathNet.Numerics.LinearAlgebra.IVector&lt;System.Double&gt;" />
        <Parameter Name="b" Type="MathNet.Numerics.LinearAlgebra.IVector&lt;System.Double&gt;" />
      </Parameters>
      <Docs>
        <param name="a">To be added.</param>
        <param name="b">To be added.</param>
        <summary>
            Array (element-by-element) quotient of two vectors.
            </summary>
        <returns>
            Vector ret[i] = u[i] / v[i]
            </returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.Vector.ArrayDivide(MathNet.Numerics.LinearAlgebra.IVector{System.Double})" />
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.Vector.ArrayDivideInplace(MathNet.Numerics.LinearAlgebra.IVector{System.Double})" />
      </Docs>
    </Member>
    <Member MemberName="BasisVector">
      <MemberSignature Language="C#" Value="public static MathNet.Numerics.LinearAlgebra.Vector BasisVector (int n, int i);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.Vector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="n" Type="System.Int32" />
        <Parameter Name="i" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="n">Dimensionality of vector.</param>
        <param name="i">Coordinate index.</param>
        <summary>
            Generates an n-dimensional unit vector for i'th coordinate.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public MathNet.Numerics.LinearAlgebra.Vector Clone ();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.Vector</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns a deep copy of this instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyToArray">
      <MemberSignature Language="C#" Value="public double[] CopyToArray ();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Copies the internal data structure to an array.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static MathNet.Numerics.LinearAlgebra.Vector Create (double[] components);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.Vector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="components" Type="System.Double[]" />
      </Parameters>
      <Docs>
        <param name="components">One-dimensional array of doubles.</param>
        <summary>
            Constructs a vector from a copy of a 1-D array.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CrossMultiply">
      <MemberSignature Language="C#" Value="public MathNet.Numerics.LinearAlgebra.Vector CrossMultiply (MathNet.Numerics.LinearAlgebra.IVector&lt;double&gt; b);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.Vector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="b" Type="MathNet.Numerics.LinearAlgebra.IVector&lt;System.Double&gt;" />
      </Parameters>
      <Docs>
        <param name="b">The other vector.</param>
        <summary>
            Cross product of this vector with another vector.
            </summary>
        <returns>
            Vector ret = (this[2]b[3] - this[3]b[2], this[3]b[1] - this[1]b[3], this[1]b[2] - this[2]b[1]).
            </returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.Vector.CrossProduct(MathNet.Numerics.LinearAlgebra.IVector{System.Double},MathNet.Numerics.LinearAlgebra.IVector{System.Double})" />
      </Docs>
    </Member>
    <Member MemberName="CrossProduct">
      <MemberSignature Language="C#" Value="public static MathNet.Numerics.LinearAlgebra.Vector CrossProduct (MathNet.Numerics.LinearAlgebra.IVector&lt;double&gt; u, MathNet.Numerics.LinearAlgebra.IVector&lt;double&gt; v);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.Vector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="u" Type="MathNet.Numerics.LinearAlgebra.IVector&lt;System.Double&gt;" />
        <Parameter Name="v" Type="MathNet.Numerics.LinearAlgebra.IVector&lt;System.Double&gt;" />
      </Parameters>
      <Docs>
        <param name="u">To be added.</param>
        <param name="v">To be added.</param>
        <summary>
            Cross product of two 3-dimensional vectors.
            </summary>
        <returns>
            Vector ret = (u[2]v[3] - u[3]v[2], u[3]v[1] - u[1]v[3], u[1]v[2] - u[2]v[1]).
            </returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.Vector.CrossMultiply(MathNet.Numerics.LinearAlgebra.IVector{System.Double})" />
      </Docs>
    </Member>
    <Member MemberName="DyadicProduct">
      <MemberSignature Language="C#" Value="public static MathNet.Numerics.LinearAlgebra.Matrix DyadicProduct (MathNet.Numerics.LinearAlgebra.IVector&lt;double&gt; u, MathNet.Numerics.LinearAlgebra.IVector&lt;double&gt; v);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.Matrix</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="u" Type="MathNet.Numerics.LinearAlgebra.IVector&lt;System.Double&gt;" />
        <Parameter Name="v" Type="MathNet.Numerics.LinearAlgebra.IVector&lt;System.Double&gt;" />
      </Parameters>
      <Docs>
        <param name="u">To be added.</param>
        <param name="v">To be added.</param>
        <summary>
            Dyadic Product of two vectors.
            </summary>
        <returns>
            Matrix M[i,j] = u[i] * v[j].
            </returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.Vector.TensorMultiply(MathNet.Numerics.LinearAlgebra.IVector{System.Double})" />
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public double this[int i] { set; get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="i" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="i">Dimension index.</param>
        <summary>
            Gets or sets the element indexed by <c>i</c>
            in the <c>Vector</c>.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Length">
      <MemberSignature Language="C#" Value="public int Length { get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets dimensionality of the vector.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Negate">
      <MemberSignature Language="C#" Value="public MathNet.Numerics.LinearAlgebra.Vector Negate ();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.Vector</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Negate this vector.
            </summary>
        <returns>
            Vector ret[i] = -this[i]
            </returns>
        <remarks>
            This method has the same effect as the overloaded - operator.
            </remarks>
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.Vector.NegateInplace" />
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.Vector.op_UnaryNegation(MathNet.Numerics.LinearAlgebra.Vector)" />
      </Docs>
    </Member>
    <Member MemberName="NegateInplace">
      <MemberSignature Language="C#" Value="public void NegateInplace ();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            In place unary minus of this vector.
            </summary>
        <remarks>
            This method changes this vector.
            </remarks>
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.Vector.Negate" />
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.Vector.op_UnaryNegation(MathNet.Numerics.LinearAlgebra.Vector)" />
      </Docs>
    </Member>
    <Member MemberName="Norm">
      <MemberSignature Language="C#" Value="public double Norm ();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Euclidean Norm also known as 2-Norm.
            </summary>
        <returns>
            Scalar ret = sqrt(sum(this[i]^2))
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Norm1">
      <MemberSignature Language="C#" Value="public double Norm1 ();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            1-Norm also known as Manhattan Norm or Taxicab Norm.
            </summary>
        <returns>
            Scalar ret = sum(abs(this[i]))
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Normalize">
      <MemberSignature Language="C#" Value="public MathNet.Numerics.LinearAlgebra.Vector Normalize ();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.Vector</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Normalizes this vector to a unit vector with respect to the Eucliden 2-Norm.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NormInf">
      <MemberSignature Language="C#" Value="public double NormInf ();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Infinity-Norm.
            </summary>
        <returns>
            Scalar ret = max(abs(this[i]))
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NormP">
      <MemberSignature Language="C#" Value="public double NormP (int p);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="p" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="p">To be added.</param>
        <summary>
            p-Norm.
            </summary>
        <returns>
            Scalar ret = (sum(abs(this[i])^p))^(1/p)
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Ones">
      <MemberSignature Language="C#" Value="public static MathNet.Numerics.LinearAlgebra.Vector Ones (int n);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.Vector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="n" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="n">Dimensionality of vector.</param>
        <summary>
            Generates an n-dimensional vector filled with 1.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Addition">
      <MemberSignature Language="C#" Value="public static MathNet.Numerics.LinearAlgebra.Vector op_Addition (MathNet.Numerics.LinearAlgebra.Vector u, MathNet.Numerics.LinearAlgebra.Vector v);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.Vector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="u" Type="MathNet.Numerics.LinearAlgebra.Vector" />
        <Parameter Name="v" Type="MathNet.Numerics.LinearAlgebra.Vector" />
      </Parameters>
      <Docs>
        <param name="u">To be added.</param>
        <param name="v">To be added.</param>
        <summary>
            Addition Operator
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Addition">
      <MemberSignature Language="C#" Value="public static MathNet.Numerics.LinearAlgebra.Vector op_Addition (MathNet.Numerics.LinearAlgebra.Vector vector, double scalar);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.Vector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector" Type="MathNet.Numerics.LinearAlgebra.Vector" />
        <Parameter Name="scalar" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="vector">To be added.</param>
        <param name="scalar">To be added.</param>
        <summary>
            Addition Operator
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Addition">
      <MemberSignature Language="C#" Value="public static MathNet.Numerics.LinearAlgebra.Vector op_Addition (double scalar, MathNet.Numerics.LinearAlgebra.Vector vector);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.Vector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scalar" Type="System.Double" />
        <Parameter Name="vector" Type="MathNet.Numerics.LinearAlgebra.Vector" />
      </Parameters>
      <Docs>
        <param name="scalar">To be added.</param>
        <param name="vector">To be added.</param>
        <summary>
            Addition Operator
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Division">
      <MemberSignature Language="C#" Value="public static MathNet.Numerics.LinearAlgebra.Vector op_Division (MathNet.Numerics.LinearAlgebra.Vector vector, double scalar);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.Vector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector" Type="MathNet.Numerics.LinearAlgebra.Vector" />
        <Parameter Name="scalar" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="vector">To be added.</param>
        <param name="scalar">To be added.</param>
        <summary>
            Scaling a vector by the inverse of a scalar.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static double[] op_Implicit (MathNet.Numerics.LinearAlgebra.Vector v);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="v" Type="MathNet.Numerics.LinearAlgebra.Vector" />
      </Parameters>
      <Docs>
        <param name="v">To be added.</param>
        <summary>
            Returns a reference to the internel data structure.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static MathNet.Numerics.LinearAlgebra.Vector op_Implicit (double[] v);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.Vector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="v" Type="System.Double[]" />
      </Parameters>
      <Docs>
        <param name="v">To be added.</param>
        <summary>
            Returns a vector bound directly to a reference of the provided array.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Multiply">
      <MemberSignature Language="C#" Value="public static double op_Multiply (MathNet.Numerics.LinearAlgebra.Vector u, MathNet.Numerics.LinearAlgebra.Vector v);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="u" Type="MathNet.Numerics.LinearAlgebra.Vector" />
        <Parameter Name="v" Type="MathNet.Numerics.LinearAlgebra.Vector" />
      </Parameters>
      <Docs>
        <param name="u">To be added.</param>
        <param name="v">To be added.</param>
        <summary>
            Scalar/dot product of two vectors.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Multiply">
      <MemberSignature Language="C#" Value="public static MathNet.Numerics.LinearAlgebra.Vector op_Multiply (MathNet.Numerics.LinearAlgebra.Vector vector, double scalar);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.Vector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector" Type="MathNet.Numerics.LinearAlgebra.Vector" />
        <Parameter Name="scalar" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="vector">To be added.</param>
        <param name="scalar">To be added.</param>
        <summary>
            Scaling a vector by a scalar.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Multiply">
      <MemberSignature Language="C#" Value="public static MathNet.Numerics.LinearAlgebra.Vector op_Multiply (double scalar, MathNet.Numerics.LinearAlgebra.Vector vector);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.Vector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scalar" Type="System.Double" />
        <Parameter Name="vector" Type="MathNet.Numerics.LinearAlgebra.Vector" />
      </Parameters>
      <Docs>
        <param name="scalar">To be added.</param>
        <param name="vector">To be added.</param>
        <summary>
            Scaling a vector by a scalar.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Subtraction">
      <MemberSignature Language="C#" Value="public static MathNet.Numerics.LinearAlgebra.Vector op_Subtraction (MathNet.Numerics.LinearAlgebra.Vector u, MathNet.Numerics.LinearAlgebra.Vector v);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.Vector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="u" Type="MathNet.Numerics.LinearAlgebra.Vector" />
        <Parameter Name="v" Type="MathNet.Numerics.LinearAlgebra.Vector" />
      </Parameters>
      <Docs>
        <param name="u">To be added.</param>
        <param name="v">To be added.</param>
        <summary>
            Subtraction Operator
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Subtraction">
      <MemberSignature Language="C#" Value="public static MathNet.Numerics.LinearAlgebra.Vector op_Subtraction (MathNet.Numerics.LinearAlgebra.Vector vector, double scalar);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.Vector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector" Type="MathNet.Numerics.LinearAlgebra.Vector" />
        <Parameter Name="scalar" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="vector">To be added.</param>
        <param name="scalar">To be added.</param>
        <summary>
            Subtraction Operator
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_UnaryNegation">
      <MemberSignature Language="C#" Value="public static MathNet.Numerics.LinearAlgebra.Vector op_UnaryNegation (MathNet.Numerics.LinearAlgebra.Vector v);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.Vector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="v" Type="MathNet.Numerics.LinearAlgebra.Vector" />
      </Parameters>
      <Docs>
        <param name="v">To be added.</param>
        <summary>
            Negate a vectors
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Random">
      <MemberSignature Language="C#" Value="public static MathNet.Numerics.LinearAlgebra.Vector Random (int n);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.Vector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="n" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="n">Dimensionality of vector.</param>
        <summary>
            Generates vector with random elements
            </summary>
        <returns>
            An n-dimensional vector with uniformly distributed
            random elements in <c>[0, 1)</c> interval.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Random">
      <MemberSignature Language="C#" Value="public static MathNet.Numerics.LinearAlgebra.Vector Random (int n, MathNet.Numerics.Distributions.IContinuousGenerator randomDistribution);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.Vector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="n" Type="System.Int32" />
        <Parameter Name="randomDistribution" Type="MathNet.Numerics.Distributions.IContinuousGenerator" />
      </Parameters>
      <Docs>
        <param name="n">Dimensionality of vector.</param>
        <param name="randomDistribution">Continuous Random Distribution or Source</param>
        <summary>
            Generates vector with random elements
            </summary>
        <returns>
            An n-dimensional vector with random elements distributed according
            to the specified random distribution.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ScalarMultiply">
      <MemberSignature Language="C#" Value="public double ScalarMultiply (MathNet.Numerics.LinearAlgebra.IVector&lt;double&gt; b);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="b" Type="MathNet.Numerics.LinearAlgebra.IVector&lt;System.Double&gt;" />
      </Parameters>
      <Docs>
        <param name="b">The other vector.</param>
        <summary>
            Scalar product of this vector with another vector.
            </summary>
        <returns>
            Scalar ret = sum(this[i] * b[i])
            </returns>
        <remarks>
            This method has the same effect as the overloaded * operator.
            </remarks>
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.Vector.ScalarProduct(MathNet.Numerics.LinearAlgebra.IVector{System.Double},MathNet.Numerics.LinearAlgebra.IVector{System.Double})" />
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.Vector.op_Multiply(MathNet.Numerics.LinearAlgebra.Vector,MathNet.Numerics.LinearAlgebra.Vector)" />
      </Docs>
    </Member>
    <Member MemberName="ScalarProduct">
      <MemberSignature Language="C#" Value="public static double ScalarProduct (MathNet.Numerics.LinearAlgebra.IVector&lt;double&gt; u, MathNet.Numerics.LinearAlgebra.IVector&lt;double&gt; v);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="u" Type="MathNet.Numerics.LinearAlgebra.IVector&lt;System.Double&gt;" />
        <Parameter Name="v" Type="MathNet.Numerics.LinearAlgebra.IVector&lt;System.Double&gt;" />
      </Parameters>
      <Docs>
        <param name="u">To be added.</param>
        <param name="v">To be added.</param>
        <summary>
            Scalar product of two vectors.
            </summary>
        <returns>
            Scalar ret = sum(u[i] * v[i])
            </returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.Vector.ScalarMultiply(MathNet.Numerics.LinearAlgebra.IVector{System.Double})" />
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.Vector.op_Multiply(MathNet.Numerics.LinearAlgebra.Vector,MathNet.Numerics.LinearAlgebra.Vector)" />
      </Docs>
    </Member>
    <Member MemberName="Scale">
      <MemberSignature Language="C#" Value="public MathNet.Numerics.LinearAlgebra.Vector Scale (double scalar);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.Vector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scalar" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="scalar">The scalar to scale with</param>
        <summary>
            Scale this vector with a scalar.
            </summary>
        <returns>
            Vector ret[i] = this[i] * scalar
            </returns>
        <remarks>
            This method has the same effect as the overloaded * operator.
            </remarks>
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.Vector.ScaleInplace(System.Double)" />
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.Vector.op_Multiply(MathNet.Numerics.LinearAlgebra.Vector,System.Double)" />
      </Docs>
    </Member>
    <Member MemberName="ScaleInplace">
      <MemberSignature Language="C#" Value="public void ScaleInplace (double scalar);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scalar" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="scalar">To be added.</param>
        <summary>
            Multiplies in place this <c>Vector</c> by a scalar.
            </summary>
        <remarks>
            This method changes this vector.
            </remarks>
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.Vector.Scale(System.Double)" />
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.Vector.op_Multiply(MathNet.Numerics.LinearAlgebra.Vector,System.Double)" />
      </Docs>
    </Member>
    <Member MemberName="SquaredNorm">
      <MemberSignature Language="C#" Value="public double SquaredNorm ();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Squared Euclidean 2-Norm.
            </summary>
        <returns>
            Scalar ret = sum(this[i]^2)
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Subtract">
      <MemberSignature Language="C#" Value="public MathNet.Numerics.LinearAlgebra.Vector Subtract (MathNet.Numerics.LinearAlgebra.IVector&lt;double&gt; b);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.Vector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="b" Type="MathNet.Numerics.LinearAlgebra.IVector&lt;System.Double&gt;" />
      </Parameters>
      <Docs>
        <param name="b">The other vector.</param>
        <summary>
            Subtract another vector from this vector.
            </summary>
        <returns>
            Vector ret[i] = this[i] - b[i]
            </returns>
        <remarks>
            This method has the same effect as the overloaded - operator.
            </remarks>
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.Vector.SubtractInplace(MathNet.Numerics.LinearAlgebra.IVector{System.Double})" />
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.Vector.op_Subtraction(MathNet.Numerics.LinearAlgebra.Vector,MathNet.Numerics.LinearAlgebra.Vector)" />
      </Docs>
    </Member>
    <Member MemberName="Subtract">
      <MemberSignature Language="C#" Value="public MathNet.Numerics.LinearAlgebra.Vector Subtract (double b);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.Vector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="b" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="b">The real scalar.</param>
        <summary>
            Subtract a real scalar from all elements of this vector.
            </summary>
        <returns>
            Vector ret[i] = this[i] - b
            </returns>
        <remarks>
            This method has the same effect as the overloaded - operator.
            </remarks>
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.Vector.SubtractInplace(System.Double)" />
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.Vector.op_Subtraction(MathNet.Numerics.LinearAlgebra.Vector,System.Double)" />
      </Docs>
    </Member>
    <Member MemberName="SubtractInplace">
      <MemberSignature Language="C#" Value="public void SubtractInplace (MathNet.Numerics.LinearAlgebra.IVector&lt;double&gt; b);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="b" Type="MathNet.Numerics.LinearAlgebra.IVector&lt;System.Double&gt;" />
      </Parameters>
      <Docs>
        <param name="b">To be added.</param>
        <summary>
            In place subtraction of a real vector from this vector.
            </summary>
        <remarks>
            This method changes this vector.
            </remarks>
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.Vector.Subtract(MathNet.Numerics.LinearAlgebra.IVector{System.Double})" />
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.Vector.op_Subtraction(MathNet.Numerics.LinearAlgebra.Vector,MathNet.Numerics.LinearAlgebra.Vector)" />
      </Docs>
    </Member>
    <Member MemberName="SubtractInplace">
      <MemberSignature Language="C#" Value="public void SubtractInplace (double b);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="b" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="b">To be added.</param>
        <summary>
            In place subtraction of a real scalar from all elements of this vector.
            </summary>
        <remarks>
            This method changes this vector.
            </remarks>
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.Vector.Subtract(System.Double)" />
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.Vector.op_Subtraction(MathNet.Numerics.LinearAlgebra.Vector,System.Double)" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.ICollection&lt;System.Double&gt;.Add">
      <MemberSignature Language="C#" Value="void ICollection&lt;double&gt;.Add (double item);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="item">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.ICollection&lt;System.Double&gt;.Clear">
      <MemberSignature Language="C#" Value="void ICollection&lt;double&gt;.Clear ();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.ICollection&lt;System.Double&gt;.Contains">
      <MemberSignature Language="C#" Value="bool ICollection&lt;double&gt;.Contains (double item);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="item">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.ICollection&lt;System.Double&gt;.CopyTo">
      <MemberSignature Language="C#" Value="void ICollection&lt;double&gt;.CopyTo (double[] array, int arrayIndex);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Double[]" />
        <Parameter Name="arrayIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array">To be added.</param>
        <param name="arrayIndex">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.ICollection&lt;System.Double&gt;.Count">
      <MemberSignature Language="C#" Value="int System.Collections.Generic.ICollection&lt;System.Double&gt;.Count { get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.ICollection&lt;System.Double&gt;.IsReadOnly">
      <MemberSignature Language="C#" Value="bool System.Collections.Generic.ICollection&lt;System.Double&gt;.IsReadOnly { get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.ICollection&lt;System.Double&gt;.Remove">
      <MemberSignature Language="C#" Value="bool ICollection&lt;double&gt;.Remove (double item);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="item">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IEnumerable&lt;System.Double&gt;.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.Generic.IEnumerator&lt;double&gt; IEnumerable&lt;double&gt;.GetEnumerator ();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;System.Double&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IList&lt;System.Double&gt;.IndexOf">
      <MemberSignature Language="C#" Value="int IList&lt;double&gt;.IndexOf (double item);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="item">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IList&lt;System.Double&gt;.Insert">
      <MemberSignature Language="C#" Value="void IList&lt;double&gt;.Insert (int index, double item);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="item" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="index">To be added.</param>
        <param name="item">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IList&lt;System.Double&gt;.RemoveAt">
      <MemberSignature Language="C#" Value="void IList&lt;double&gt;.RemoveAt (int index);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.ICloneable.Clone">
      <MemberSignature Language="C#" Value="object ICloneable.Clone ();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TensorMultiply">
      <MemberSignature Language="C#" Value="public MathNet.Numerics.LinearAlgebra.Matrix TensorMultiply (MathNet.Numerics.LinearAlgebra.IVector&lt;double&gt; b);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.Matrix</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="b" Type="MathNet.Numerics.LinearAlgebra.IVector&lt;System.Double&gt;" />
      </Parameters>
      <Docs>
        <param name="b">The vector to operate on.</param>
        <summary>
            Tensor Product (Dyadic) of this and another vector.
            </summary>
        <returns>
            Matrix M[i,j] = this[i] * v[j].
            </returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:MathNet.Numerics.LinearAlgebra.Vector.DyadicProduct(MathNet.Numerics.LinearAlgebra.IVector{System.Double},MathNet.Numerics.LinearAlgebra.IVector{System.Double})" />
      </Docs>
    </Member>
    <Member MemberName="ToColumnMatrix">
      <MemberSignature Language="C#" Value="public MathNet.Numerics.LinearAlgebra.Matrix ToColumnMatrix ();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.Matrix</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Create a matrix based on this vector in column form (one single column).
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToRowMatrix">
      <MemberSignature Language="C#" Value="public MathNet.Numerics.LinearAlgebra.Matrix ToRowMatrix ();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.Matrix</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Create a matrix based on this vector in row form (one single row).
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Formats this vector to a human-readable string
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Zeros">
      <MemberSignature Language="C#" Value="public static MathNet.Numerics.LinearAlgebra.Vector Zeros (int n);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.Vector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="n" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="n">Dimensionality of vector.</param>
        <summary>
            Generates an n-dimensional vector filled with 0.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
