<Type Name="EigenvalueDecomposition" FullName="MathNet.Numerics.LinearAlgebra.EigenvalueDecomposition">
  <TypeSignature Language="C#" Value="public class EigenvalueDecomposition" />
  <AssemblyInfo>
    <AssemblyName>MathNet.Iridium</AssemblyName>
    <AssemblyVersion>2008.8.16.470</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Eigenvalues and eigenvectors of a real matrix.
            </summary>
    <remarks>
            If A is symmetric, then A = V*D*V' where the eigenvalue matrix D is
            diagonal and the eigenvector matrix V is orthogonal.
            I.e. A = V.Multiply(D.Multiply(V.Transpose())) and 
            V.Multiply(V.Transpose()) equals the identity matrix.
            If A is not symmetric, then the eigenvalue matrix D is block diagonal
            with the real eigenvalues in 1-by-1 blocks and any complex eigenvalues,
            lambda + i*mu, in 2-by-2 blocks, [lambda, mu; -mu, lambda].  The
            columns of V represent the eigenvectors in the sense that A*V = V*D,
            i.e. A.Multiply(V) equals V.Multiply(D).  The matrix V may be badly
            conditioned, or even singular, so the validity of the equation
            A = V*D*Inverse(V) depends upon V.cond().
            </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EigenvalueDecomposition (MathNet.Numerics.LinearAlgebra.Matrix Arg);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="Arg" Type="MathNet.Numerics.LinearAlgebra.Matrix" />
      </Parameters>
      <Docs>
        <param name="Arg">Square matrix</param>
        <summary>
            Check for symmetry, then construct the eigenvalue decomposition
            </summary>
        <remarks>Provides access to D and V</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EigenvalueDecomposition (double[] d, double[] e);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="d" Type="System.Double[]" />
        <Parameter Name="e" Type="System.Double[]" />
      </Parameters>
      <Docs>
        <param name="d">To be added.</param>
        <param name="e">To be added.</param>
        <summary>
            Constructs the eigenvalue decomposition from a symmetrical, 
            tridiagonal matrix.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BlockDiagonal">
      <MemberSignature Language="C#" Value="public MathNet.Numerics.LinearAlgebra.Matrix BlockDiagonal { get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.Matrix</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the block diagonal eigenvalue matrix
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EigenValues">
      <MemberSignature Language="C#" Value="public MathNet.Numerics.LinearAlgebra.ComplexVector EigenValues { get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.ComplexVector</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the eigenvalues.
            </summary>
        <returns>diag(D)</returns>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EigenVectors">
      <MemberSignature Language="C#" Value="public MathNet.Numerics.LinearAlgebra.Matrix EigenVectors { get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.Matrix</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Returns the eigenvector matrix
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ImagEigenvalues">
      <MemberSignature Language="C#" Value="public MathNet.Numerics.LinearAlgebra.Vector ImagEigenvalues { get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.Vector</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the imaginary part of the eigenvalues.
            </summary>
        <returns>imag(diag(D))</returns>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RealEigenvalues">
      <MemberSignature Language="C#" Value="public MathNet.Numerics.LinearAlgebra.Vector RealEigenvalues { get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.LinearAlgebra.Vector</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the real part of the eigenvalues.
            </summary>
        <returns>real(diag(D))</returns>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
