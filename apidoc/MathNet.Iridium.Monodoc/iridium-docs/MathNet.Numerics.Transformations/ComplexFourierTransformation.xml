<Type Name="ComplexFourierTransformation" FullName="MathNet.Numerics.Transformations.ComplexFourierTransformation">
  <TypeSignature Language="C#" Value="public class ComplexFourierTransformation" />
  <AssemblyInfo>
    <AssemblyName>MathNet.Iridium</AssemblyName>
    <AssemblyVersion>1.0.0.8645</AssemblyVersion>
    <AssemblyVersion>2008.8.16.470</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <para>The <c>ComplexFourierTransformation</c> provides algorithms
            for one, two and three dimensional fast fourier transformations
            (FFT) on complex vectors.</para>
      <para>This class caches precomputations locally, thus consider reusing/caching it.</para>
    </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ComplexFourierTransformation ();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
            Construct a complex fourier transformation instance.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ComplexFourierTransformation (MathNet.Numerics.Transformations.TransformationConvention convention);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="convention" Type="MathNet.Numerics.Transformations.TransformationConvention" />
      </Parameters>
      <Docs>
        <param name="convention">Fourier Transformation Convention</param>
        <summary>
            Construct a complex fourier transformation instance with a given convention.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Convention">
      <MemberSignature Language="C#" Value="public MathNet.Numerics.Transformations.TransformationConvention Convention { set; get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.Transformations.TransformationConvention</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Fourier Transformation Convention
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateFrequencyScale">
      <MemberSignature Language="C#" Value="public double[] GenerateFrequencyScale (double sampleRate, int numberOfSamplePairs);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sampleRate" Type="System.Double" />
        <Parameter Name="numberOfSamplePairs" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="sampleRate">The sampling rate of the time-space data.</param>
        <param name="numberOfSamplePairs">The real &amp; complex numbers count together as only one sample.</param>
        <summary>
            Generate the expected sample points in frequency space.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateTimeScale">
      <MemberSignature Language="C#" Value="public double[] GenerateTimeScale (double sampleRate, int numberOfSamplePairs);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sampleRate" Type="System.Double" />
        <Parameter Name="numberOfSamplePairs" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="sampleRate">The sampling rate of the time-space data.</param>
        <param name="numberOfSamplePairs">The real &amp; complex numbers count together as only one sample.</param>
        <summary>
            Generate the expected sample points in time space.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TransformBackward">
      <MemberSignature Language="C#" Value="public void TransformBackward (MathNet.Numerics.Complex[] samples);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="samples" Type="MathNet.Numerics.Complex[]" />
      </Parameters>
      <Docs>
        <param name="samples">Complex samples. Length must be a power of two.</param>
        <summary>
            Inplace Backward Transformation in one dimension. Size must be Power of Two.
            </summary>
        <remarks>
            This method provides a simple shortcut if your data is already available as
            <see cref="T:MathNet.Numerics.Complex" /> type instances. However, if not, consider using the
            overloaded method with double pairs instead, it requires less internal copying.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="TransformBackward">
      <MemberSignature Language="C#" Value="public void TransformBackward (double[] samplePairs);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="samplePairs" Type="System.Double[]" />
      </Parameters>
      <Docs>
        <param name="samplePairs">Complex samples (even = real, odd = imaginary). Length must be a power of two.</param>
        <summary>
            Inplace Backward Transformation in one dimension. Size must be Power of Two.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TransformBackward">
      <MemberSignature Language="C#" Value="public void TransformBackward (MathNet.Numerics.Complex[] samples, int[] dimensionLengths);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="samples" Type="MathNet.Numerics.Complex[]" />
        <Parameter Name="dimensionLengths" Type="System.Int32[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="samples">Complex samples. Length must be a power of two.</param>
        <param name="dimensionLengths">Sizes, must be Power of Two in each dimension</param>
        <summary>
            Inplace Backward Transformation in multiple dimensions.
            Size must be Power of Two in each dimension.
            The Data is expected to be ordered such that the last index changes most rapidly (in 2D this means row-by-row when indexing as [y,x]).
            </summary>
        <remarks>
            This method provides a simple shortcut if your data is already available as
            <see cref="T:MathNet.Numerics.Complex" /> type instances. However, if not, consider using the
            overloaded method with double pairs instead, it requires less internal copying.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="TransformBackward">
      <MemberSignature Language="C#" Value="public void TransformBackward (double[] samplePairs, int[] dimensionLengths);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="samplePairs" Type="System.Double[]" />
        <Parameter Name="dimensionLengths" Type="System.Int32[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="samplePairs">Complex samples (even = real, odd = imaginary). Length must be a power of two in each dimension.</param>
        <param name="dimensionLengths">Sizes, must be Power of Two in each dimension</param>
        <summary>
            Inplace Backward Transformation in multiple dimensions.
            Size must be Power of Two in each dimension.
            The Data is expected to be ordered such that the last index changes most rapidly (in 2D this means row-by-row when indexing as [y,x]).
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TransformForward">
      <MemberSignature Language="C#" Value="public void TransformForward (MathNet.Numerics.Complex[] samples);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="samples" Type="MathNet.Numerics.Complex[]" />
      </Parameters>
      <Docs>
        <param name="samples">Complex samples. Length must be a power of two.</param>
        <summary>
            Inplace Forward Transformation in one dimension. Size must be Power of Two.
            </summary>
        <remarks>
            This method provides a simple shortcut if your data is already available as
            <see cref="T:MathNet.Numerics.Complex" /> type instances. However, if not, consider using the
            overloaded method with double pairs instead, it requires less internal copying.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="TransformForward">
      <MemberSignature Language="C#" Value="public void TransformForward (double[] samplePairs);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="samplePairs" Type="System.Double[]" />
      </Parameters>
      <Docs>
        <param name="samplePairs">Complex samples (even = real, odd = imaginary). Length must be a power of two.</param>
        <summary>
            Inplace Forward Transformation in one dimension. Size must be Power of Two.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TransformForward">
      <MemberSignature Language="C#" Value="public void TransformForward (MathNet.Numerics.Complex[] samples, int[] dimensionLengths);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="samples" Type="MathNet.Numerics.Complex[]" />
        <Parameter Name="dimensionLengths" Type="System.Int32[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="samples">Complex samples. Length must be a power of two in each dimension.</param>
        <param name="dimensionLengths">Sizes, must be Power of Two in each dimension</param>
        <summary>
            Inplace Forward Transformation in multiple dimensions.
            Size must be Power of Two in each dimension.
            The Data is expected to be ordered such that the last index changes most rapidly (in 2D this means row-by-row when indexing as [y,x]).
            </summary>
        <remarks>
            This method provides a simple shortcut if your data is already available as
            <see cref="T:MathNet.Numerics.Complex" /> type instances. However, if not, consider using the
            overloaded method with double pairs instead, it requires less internal copying.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="TransformForward">
      <MemberSignature Language="C#" Value="public void TransformForward (double[] samplePairs, int[] dimensionLengths);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="samplePairs" Type="System.Double[]" />
        <Parameter Name="dimensionLengths" Type="System.Int32[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="samplePairs">Complex samples (even = real, odd = imaginary). Length must be a power of two in each dimension.</param>
        <param name="dimensionLengths">Sizes, must be Power of Two in each dimension</param>
        <summary>
            Inplace Forward Transformation in multiple dimensions.
            Size must be Power of Two in each dimension.
            The Data is expected to be ordered such that the last index changes most rapidly (in 2D this means row-by-row when indexing as [y,x]).
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
