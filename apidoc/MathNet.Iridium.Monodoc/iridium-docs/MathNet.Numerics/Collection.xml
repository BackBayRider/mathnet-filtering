<Type Name="Collection" FullName="MathNet.Numerics.Collection">
  <TypeSignature Language="C#" Value="public sealed class Collection" />
  <AssemblyInfo>
    <AssemblyName>MathNet.Iridium</AssemblyName>
    <AssemblyVersion>1.0.0.8645</AssemblyVersion>
    <AssemblyVersion>2008.8.16.470</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            The class <c>Collection</c> contains several utilities performing
            some basic collection operations (like union, intersection...).
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Concat">
      <MemberSignature Language="C#" Value="public static System.Collections.ICollection Concat (System.Collections.ICollection c1, System.Collections.ICollection c2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ICollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c1" Type="System.Collections.ICollection" />
        <Parameter Name="c2" Type="System.Collections.ICollection" />
      </Parameters>
      <Docs>
        <param name="c1">Should not be null.</param>
        <param name="c2">Should not be null.</param>
        <summary>
            Returns a collection resulting from the concatenation from
            <c>c1</c> and <c>c2</c>.
            </summary>
        <returns>To be added.</returns>
        <remarks>The call is performed in <c>O(1)</c> computational time, the
            concatenated collection is not built explicitly.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Inter">
      <MemberSignature Language="C#" Value="public static System.Collections.ICollection Inter (System.Collections.ICollection c1, System.Collections.ICollection c2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Use Set&lt;T&gt;.Intersect() instead.", false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.ICollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c1" Type="System.Collections.ICollection" />
        <Parameter Name="c2" Type="System.Collections.ICollection" />
      </Parameters>
      <Docs>
        <param name="c1">Should not be null.</param>
        <param name="c2">Should not be null.</param>
        <summary>
            Returns a collection resulting from the mathematical intersection
            of <c>c1</c> and <c>c2</c>.
            </summary>
        <returns>To be added.</returns>
        <remarks>
          <p>The call is performed in <c>O(c1.Count+c2.Count)</c> and
            the intersection is built explicitly.</p>
          <p>The resulting collection will not contain several identical elements.</p>
          <p>Example: Inter({1;1;2;3},{0;1;1;3;4}) = {1;3}.</p>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Minus">
      <MemberSignature Language="C#" Value="public static System.Collections.ICollection Minus (System.Collections.ICollection c1, System.Collections.ICollection c2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Use Set&lt;T&gt;.Subtract() instead.", false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.ICollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c1" Type="System.Collections.ICollection" />
        <Parameter Name="c2" Type="System.Collections.ICollection" />
      </Parameters>
      <Docs>
        <param name="c1">Should not be null.</param>
        <param name="c2">Should not be null.</param>
        <summary>
            Returns a collection resulting from the subtraction of
            the items of <c>c2</c> to the collection <c>c1</c>. 
            </summary>
        <returns>To be added.</returns>
        <remarks>The call is performed in <c>O(c1.Count+c2.Count)</c></remarks>
      </Docs>
    </Member>
    <Member MemberName="Product">
      <MemberSignature Language="C#" Value="public static System.Collections.ICollection Product (System.Collections.ICollection c1, System.Collections.ICollection c2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ICollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c1" Type="System.Collections.ICollection" />
        <Parameter Name="c2" Type="System.Collections.ICollection" />
      </Parameters>
      <Docs>
        <param name="c1">Should not be null.</param>
        <param name="c2">Should not be null.</param>
        <summary>
            Returns the cartesian product of the two collections <c>c1</c>
            and <c>c2</c>.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Union">
      <MemberSignature Language="C#" Value="public static System.Collections.ICollection Union (System.Collections.ICollection c1, System.Collections.ICollection c2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Use Set&lt;T&gt;.Union() instead.", false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.ICollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c1" Type="System.Collections.ICollection" />
        <Parameter Name="c2" Type="System.Collections.ICollection" />
      </Parameters>
      <Docs>
        <param name="c1">Should not be null.</param>
        <param name="c2">Should not be null.</param>
        <summary>
            Returns a collection resulting from the union of the items
            of <c>c1</c> and <c>c2</c>.
            </summary>
        <returns>To be added.</returns>
        <remarks>
          <p>The call is performed in <c>O(c1.Count+c2.Count)</c>
            computational time.</p>
          <p>The resulting collection will not contain several identical elements.</p>
          <p>Example: Union({1;1;3},{0;1;2;3}) = {0;1;2;3}</p>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
