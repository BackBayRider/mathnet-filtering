<Type Name="Number" FullName="MathNet.Numerics.Number">
  <TypeSignature Language="C#" Value="public static class Number" />
  <AssemblyInfo>
    <AssemblyName>MathNet.Iridium</AssemblyName>
    <AssemblyVersion>1.0.0.8645</AssemblyVersion>
    <AssemblyVersion>2008.8.16.470</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Helper functions for dealing with floating point numbers.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="AlmostEqual">
      <MemberSignature Language="C#" Value="public static bool AlmostEqual (double a, double b);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.Double" />
        <Parameter Name="b" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="a">The first number</param>
        <param name="b">The second number</param>
        <summary>
            Checks whether two real numbers are almost equal.
            </summary>
        <returns>
            True if <paramref name="a" /> and <paramref name="b" /> are almost equal up to a maximum
            relative error of 10*2^(-52) = 0.22e-14, False otherwise.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AlmostEqual">
      <MemberSignature Language="C#" Value="public static bool AlmostEqual (double[] x, double[] y);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Double[]" />
        <Parameter Name="y" Type="System.Double[]" />
      </Parameters>
      <Docs>
        <param name="x">The first vector</param>
        <param name="y">The second vector</param>
        <summary>
            Checks whether two real arrays are almost equal.
            </summary>
        <returns>
            True if all components with the same index of <paramref name="x" /> and <paramref name="y" />
            are almost equal up to a maximum relative error of 10*2^(-52) = 0.22e-14, False otherwise.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AlmostEqual">
      <MemberSignature Language="C#" Value="public static bool AlmostEqual (double a, double b, double relativeAccuracy);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.Double" />
        <Parameter Name="b" Type="System.Double" />
        <Parameter Name="relativeAccuracy" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="a">The first number</param>
        <param name="b">The second number</param>
        <param name="relativeAccuracy">The relative accuracy required for being almost equal.</param>
        <summary>
            Checks whether two real numbers are almost equal.
            </summary>
        <returns>
            True if <paramref name="a" /> and <paramref name="b" /> are almost equal up to a maximum
            relative error of <paramref name="relativeAccuracy" />, False otherwise.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AlmostEqual">
      <MemberSignature Language="C#" Value="public static bool AlmostEqual (double a, double b, int maxNumbersBetween);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.Double" />
        <Parameter Name="b" Type="System.Double" />
        <Parameter Name="maxNumbersBetween" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="a">The first number</param>
        <param name="b">The second number</param>
        <param name="maxNumbersBetween">The maximum count of numbers between the two numbers plus one ([a,a] -&gt; 0, [a,a+e] -&gt; 1, [a,a+2e] -&gt; 2, ...).</param>
        <summary>
            Checks whether two real numbers are almost equal.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AlmostEqual">
      <MemberSignature Language="C#" Value="public static bool AlmostEqual (double a, double b, ulong maxNumbersBetween);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.Double" />
        <Parameter Name="b" Type="System.Double" />
        <Parameter Name="maxNumbersBetween" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="a">The first number</param>
        <param name="b">The second number</param>
        <param name="maxNumbersBetween">The maximum count of numbers between the two numbers plus one ([a,a] -&gt; 0, [a,a+e] -&gt; 1, [a,a+2e] -&gt; 2, ...).</param>
        <summary>
            Checks whether two real numbers are almost equal.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AlmostEqualNorm">
      <MemberSignature Language="C#" Value="public static bool AlmostEqualNorm (double a, double b, double diff);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.Double" />
        <Parameter Name="b" Type="System.Double" />
        <Parameter Name="diff" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="a">The first number</param>
        <param name="b">The second number</param>
        <param name="diff">The difference of the two numbers according to the Norm</param>
        <summary>
            Checks whether two real numbers are almost equal.
            </summary>
        <returns>
            True if <paramref name="a" /> and <paramref name="b" /> are almost equal up to a maximum
            relative error of 10*2^(-52) = 0.22e-14, False otherwise.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AlmostEqualNorm">
      <MemberSignature Language="C#" Value="public static bool AlmostEqualNorm (double a, double b, double diff, double relativeAccuracy);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.Double" />
        <Parameter Name="b" Type="System.Double" />
        <Parameter Name="diff" Type="System.Double" />
        <Parameter Name="relativeAccuracy" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="a">The first number</param>
        <param name="b">The second number</param>
        <param name="diff">The difference of the two numbers according to the Norm</param>
        <param name="relativeAccuracy">The relative accuracy required for being almost equal.</param>
        <summary>
            Checks whether two real numbers are almost equal.
            </summary>
        <returns>
            True if <paramref name="a" /> and <paramref name="b" /> are almost equal up to a maximum
            relative error of <paramref name="relativeAccuracy" />, False otherwise.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AlmostZero">
      <MemberSignature Language="C#" Value="public static bool AlmostZero (double a);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="a">The real number to check for being almost zero.</param>
        <summary>
            True if the given number is almost equal to zero.
            </summary>
        <returns>
            True if |<paramref name="a" />| is smaller than 10*2^(-52) = 0.22e-14, False otherwise.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AlmostZero">
      <MemberSignature Language="C#" Value="public static bool AlmostZero (double a, double absoluteAccuracy);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.Double" />
        <Parameter Name="absoluteAccuracy" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="a">The real number to check for being almost zero.</param>
        <param name="absoluteAccuracy">The absolute threshold for <paramref name="a" /> to consider it as zero.</param>
        <summary>
            True if the given number is almost equal to zero, according to the specified absolute accuracy.
            </summary>
        <returns>
            True if |<paramref name="a" />| is smaller than <paramref name="absoluteAccuracy" />, False otherwise.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CoerceZero">
      <MemberSignature Language="C#" Value="public static double CoerceZero (double a);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="a">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CoerceZero">
      <MemberSignature Language="C#" Value="public static double CoerceZero (double a, double absoluteAccuracy);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.Double" />
        <Parameter Name="absoluteAccuracy" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="a">To be added.</param>
        <param name="absoluteAccuracy">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Decrement">
      <MemberSignature Language="C#" Value="public static double Decrement (double value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>
            Decrements a floating point number to the next smaller number representable by the data type.
            </summary>
        <returns>To be added.</returns>
        <remarks>
            The decrementation step length depends on the provided value.
            Decrement(double.MinValue) will return negative infinity.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultRelativeAccuracy">
      <MemberSignature Language="C#" Value="public static readonly double DefaultRelativeAccuracy = 2.22044604925031E-15;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <MemberValue>2.22044604925031E-15</MemberValue>
      <Docs>
        <summary>10 * 2^(-52)</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EpsilonOf">
      <MemberSignature Language="C#" Value="public static double EpsilonOf (double value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>
            Evaluates the minimum distance to the next distinguishable number near the argument value.
            </summary>
        <returns>Relative Epsilon (positive double or NaN).</returns>
        <remarks>Evaluates the <b>negative</b> epsilon. The more common positive epsilon is equal to two times this negative epsilon.</remarks>
        <altmember cref="M:MathNet.Numerics.Number.PositiveEpsilonOf(System.Double)" />
      </Docs>
    </Member>
    <Member MemberName="Increment">
      <MemberSignature Language="C#" Value="public static double Increment (double value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>
            Increments a floating point number to the next bigger number representable by the data type.
            </summary>
        <returns>To be added.</returns>
        <remarks>
            The incrementation step length depends on the provided value.
            Increment(double.MaxValue) will return positive infinity.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="NumbersBetween">
      <MemberSignature Language="C#" Value="public static ulong NumbersBetween (double a, double b);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.Double" />
        <Parameter Name="b" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="a">To be added.</param>
        <param name="b">To be added.</param>
        <summary>
            Evaluates the count of numbers between two double numbers
            </summary>
        <returns>To be added.</returns>
        <remarks>The second number is included in the number, thus two equal numbers evaluate to zero and two neighbour numbers evaluate to one. Therefore, what is returned is actually the count of numbers between plus 1.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PositiveEpsilonOf">
      <MemberSignature Language="C#" Value="public static double PositiveEpsilonOf (double value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>
            Evaluates the minimum distance to the next distinguishable number near the argument value.
            </summary>
        <returns>Relative Epsilon (positive double or NaN)</returns>
        <remarks>Evaluates the <b>positive</b> epsilon. See also <see cref="M:MathNet.Numerics.Number.EpsilonOf(System.Double)" /></remarks>
        <altmember cref="M:MathNet.Numerics.Number.EpsilonOf(System.Double)" />
      </Docs>
    </Member>
    <Member MemberName="PositiveRelativeAccuracy">
      <MemberSignature Language="C#" Value="public static readonly double PositiveRelativeAccuracy = 2.22044604925031E-16;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <MemberValue>2.22044604925031E-16</MemberValue>
      <Docs>
        <summary>2^(-52)</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RelativeAccuracy">
      <MemberSignature Language="C#" Value="public static readonly double RelativeAccuracy = 1.11022302462516E-16;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <MemberValue>1.11022302462516E-16</MemberValue>
      <Docs>
        <summary>2^(-53)</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SignedMagnitudeToTwosComplementInt64">
      <MemberSignature Language="C#" Value="public static long SignedMagnitudeToTwosComplementInt64 (long value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>
            Converts an unsigned long integer in two-complement to a long integer in signed-magnitude format format.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SignedMagnitudeToTwosComplementUInt64">
      <MemberSignature Language="C#" Value="public static ulong SignedMagnitudeToTwosComplementUInt64 (long value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>
            Converts a long integer in signed-magnitude format to an unsigned long integer in two-complement format.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SmallestNumberGreaterThanZero">
      <MemberSignature Language="C#" Value="public const double SmallestNumberGreaterThanZero = 4.94065645841247E-324;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <MemberValue>4.94065645841247E-324</MemberValue>
      <Docs>
        <summary>2^(-1074)</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToLexicographicalOrderedInt64">
      <MemberSignature Language="C#" Value="public static long ToLexicographicalOrderedInt64 (double value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>
            Maps a double to an signed long integer which provides lexicographical ordering.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToLexicographicalOrderedUInt64">
      <MemberSignature Language="C#" Value="public static ulong ToLexicographicalOrderedUInt64 (double value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>
            Maps a double to an unsigned long integer which provides lexicographical ordering.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
