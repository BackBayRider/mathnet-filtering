<Type Name="Complex" FullName="MathNet.Numerics.Complex">
  <TypeSignature Language="C#" Value="public struct Complex : IComparable&lt;MathNet.Numerics.Complex&gt;, IEquatable&lt;MathNet.Numerics.Complex&gt;" />
  <AssemblyInfo>
    <AssemblyName>MathNet.Iridium</AssemblyName>
    <AssemblyVersion>2008.8.16.470</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IComparable&lt;MathNet.Numerics.Complex&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IEquatable&lt;MathNet.Numerics.Complex&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
            Complex numbers class.
            </summary>
    <remarks>
      <p>The class <c>Complex</c> provides all elementary operations
            on complex numbers. All the operators <c>+</c>, <c>-</c>,
            <c>*</c>, <c>/</c>, <c>==</c>, <c>!=</c> are defined in the
            canonical way. Additional complex trigonometric functions such 
            as <see cref="M:MathNet.Numerics.Complex.Cosine" />, ... 
            are also provided. Note that the <c>Complex</c> structures 
            has two special constant values <see cref="P:MathNet.Numerics.Complex.NaN" /> and 
            <see cref="P:MathNet.Numerics.Complex.Infinity" />.</p>
      <p>In order to avoid possible ambiguities resulting from a 
            <c>Complex(double, double)</c> constructor, the static methods 
            <see cref="M:MathNet.Numerics.Complex.FromRealImaginary(System.Double,System.Double)" /> and <see cref="M:MathNet.Numerics.Complex.FromModulusArgument(System.Double,System.Double)" />
            are provided instead.</p>
      <code>
            Complex x = Complex.FromRealImaginary(1d, 2d);
            Complex y = Complex.FromModulusArgument(1d, Math.Pi);
            Complex z = (x + y) / (x - y);
            </code>
      <p>Since there is no canonical order among the complex numbers,
            <c>Complex</c> does not implement <c>IComparable</c> but several
            lexicographic <c>IComparer</c> implementations are provided, see 
            <see cref="P:MathNet.Numerics.Complex.RealImaginaryComparer" />,
            <see cref="P:MathNet.Numerics.Complex.ModulusArgumentComparer" /> and
            <see cref="P:MathNet.Numerics.Complex.ArgumentModulusComparer" />.</p>
      <p>For mathematical details about complex numbers, please
            have a look at the <a href="http://en.wikipedia.org/wiki/Complex_number">
            Wikipedia</a></p>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Complex (double real, double imag);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="real" Type="System.Double" />
        <Parameter Name="imag" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="real">To be added.</param>
        <param name="imag">To be added.</param>
        <summary>
            Constructs a <c>Complex</c> from its real
            and imaginary parts.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Argument">
      <MemberSignature Language="C#" Value="public double Argument { set; get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets the argument of this <c>Complex</c>.
            </summary>
        <value>To be added.</value>
        <remarks>
            Argument always returns a value bigger than negative Pi and
            smaller or equal to Pi. If this <c>Complex</c> is zero, the Complex
            is assumed to be positive real with an argument of zero.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ArgumentModulusComparer">
      <MemberSignature Language="C#" Value="public static System.Collections.IComparer ArgumentModulusComparer { get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IComparer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the lexicographical comparer based on <c>(argument, modulus)</c>.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (MathNet.Numerics.Complex other);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="MathNet.Numerics.Complex" />
      </Parameters>
      <Docs>
        <param name="other">The complex number to compare with.</param>
        <summary>
            Compare this complex number with another complex number.
            </summary>
        <returns>To be added.</returns>
        <remarks>
            The complex number's real part takes precedence over the imaginary part.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conjugate">
      <MemberSignature Language="C#" Value="public MathNet.Numerics.Complex Conjugate { set; get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets the conjugate of this <c>Complex</c>.
            </summary>
        <value>To be added.</value>
        <remarks>
            The semantic of <i>setting the conjugate</i> is such that
            <code>
            // a, b of type Complex
            a.Conjugate = b;
            </code>
            is equivalent to
            <code>
            // a, b of type Complex
            a = b.Conjugate
            </code></remarks>
      </Docs>
    </Member>
    <Member MemberName="Cosecant">
      <MemberSignature Language="C#" Value="public MathNet.Numerics.Complex Cosecant ();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Trigonometric Cosecant (csc, Cosekans) of this <c>Complex</c>.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Cosine">
      <MemberSignature Language="C#" Value="public MathNet.Numerics.Complex Cosine ();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Trigonometric Cosine (cos, Cosinus) of this <c>Complex</c>.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Cotangent">
      <MemberSignature Language="C#" Value="public MathNet.Numerics.Complex Cotangent ();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Trigonometric Cotangent (cot, Cotangens) of this <c>Complex</c>.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (MathNet.Numerics.Complex other);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="MathNet.Numerics.Complex" />
      </Parameters>
      <Docs>
        <param name="other">To be added.</param>
        <summary>
            Indicates whether <c>z</c> is equal to this complex number.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">To be added.</param>
        <summary>
            Indicates whether <c>obj</c> is equal to this instance.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Exponential">
      <MemberSignature Language="C#" Value="public MathNet.Numerics.Complex Exponential ();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Exponential of this <c>Complex</c> (exp(x), E^x).
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromModulusArgument">
      <MemberSignature Language="C#" Value="public static MathNet.Numerics.Complex FromModulusArgument (double modulus, double argument);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="modulus" Type="System.Double" />
        <Parameter Name="argument" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="modulus">Must be non-negative.</param>
        <param name="argument">Real number.</param>
        <summary>
            Constructs a <c>Complex</c> from its modulus and
            argument.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromRealImaginary">
      <MemberSignature Language="C#" Value="public static MathNet.Numerics.Complex FromRealImaginary (double real, double imag);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="real" Type="System.Double" />
        <Parameter Name="imag" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="real">To be added.</param>
        <param name="imag">To be added.</param>
        <summary>
            Constructs a <c>Complex</c> from its real
            and imaginary parts.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Gets the hashcode of this <c>Complex</c>.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HyperbolicCosecant">
      <MemberSignature Language="C#" Value="public MathNet.Numerics.Complex HyperbolicCosecant ();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Trigonometric Hyperbolic Cosecant (csch, Cosecans hyperbolicus) of this <c>Complex</c>.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HyperbolicCosine">
      <MemberSignature Language="C#" Value="public MathNet.Numerics.Complex HyperbolicCosine ();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Trigonometric Hyperbolic Cosine (cosh, Cosinus hyperbolicus) of this <c>Complex</c>.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HyperbolicCotangent">
      <MemberSignature Language="C#" Value="public MathNet.Numerics.Complex HyperbolicCotangent ();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Trigonometric Hyperbolic Cotangent (coth, Cotangens hyperbolicus) of this <c>Complex</c>.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HyperbolicSecant">
      <MemberSignature Language="C#" Value="public MathNet.Numerics.Complex HyperbolicSecant ();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Trigonometric Hyperbolic Secant (sech, Secans hyperbolicus) of this <c>Complex</c>.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HyperbolicSine">
      <MemberSignature Language="C#" Value="public MathNet.Numerics.Complex HyperbolicSine ();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Trigonometric Hyperbolic Sine (sinh, Sinus hyperbolicus) of this <c>Complex</c>.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HyperbolicTangent">
      <MemberSignature Language="C#" Value="public MathNet.Numerics.Complex HyperbolicTangent ();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Trigonometric Hyperbolic Tangent (tanh, Tangens hyperbolicus) of this <c>Complex</c>.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="I">
      <MemberSignature Language="C#" Value="public static MathNet.Numerics.Complex I { get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Represents the imaginary unit number. This field is constant.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Imag">
      <MemberSignature Language="C#" Value="public double Imag { set; get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets the imaginary part of this <c>Complex</c>.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <altmember cref="P:MathNet.Numerics.Complex.Real" />
      </Docs>
    </Member>
    <Member MemberName="Infinity">
      <MemberSignature Language="C#" Value="public static MathNet.Numerics.Complex Infinity { get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Represents the infinity value. This field is constant.
            </summary>
        <value>To be added.</value>
        <remarks>
            The semantic associated to this value is a <c>Complex</c> of 
            infinite real and imaginary part. If you need more formal complex
            number handling (according to the Riemann Sphere and the extended
            complex plane C*, or using directed infinity) please check out the
            alternative MathNet.PreciseNumerics and MathNet.Symbolics packages
            instead.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="InverseCosecant">
      <MemberSignature Language="C#" Value="public MathNet.Numerics.Complex InverseCosecant ();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Trigonometric Arcus Cosecant (acsc, Arkuscosekans) of this <c>Complex</c>.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InverseCosine">
      <MemberSignature Language="C#" Value="public MathNet.Numerics.Complex InverseCosine ();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Trigonometric Arcus Cosine (acos, Arkuscosinus) of this <c>Complex</c>.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InverseCotangent">
      <MemberSignature Language="C#" Value="public MathNet.Numerics.Complex InverseCotangent ();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Trigonometric Arcus Cotangent (acot, Arkuscotangens) of this <c>Complex</c>.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InverseHyperbolicCosecant">
      <MemberSignature Language="C#" Value="public MathNet.Numerics.Complex InverseHyperbolicCosecant ();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Trigonometric Hyperbolic Area Cosecant (acsch, Areacosekans hyperbolicus) of this <c>Complex</c>.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InverseHyperbolicCosine">
      <MemberSignature Language="C#" Value="public MathNet.Numerics.Complex InverseHyperbolicCosine ();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Trigonometric Hyperbolic Area Cosine (acosh, Areacosinus hyperbolicus) of this <c>Complex</c>.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InverseHyperbolicCotangent">
      <MemberSignature Language="C#" Value="public MathNet.Numerics.Complex InverseHyperbolicCotangent ();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Trigonometric Hyperbolic Area Cotangent (acoth, Areacotangens hyperbolicus) of this <c>Complex</c>.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InverseHyperbolicSecant">
      <MemberSignature Language="C#" Value="public MathNet.Numerics.Complex InverseHyperbolicSecant ();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Trigonometric Hyperbolic Area Secant (asech, Areasekans hyperbolicus) of this <c>Complex</c>.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InverseHyperbolicSine">
      <MemberSignature Language="C#" Value="public MathNet.Numerics.Complex InverseHyperbolicSine ();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Trigonometric Hyperbolic Area Sine (asinh, reasinus hyperbolicus) of this <c>Complex</c>.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InverseHyperbolicTangent">
      <MemberSignature Language="C#" Value="public MathNet.Numerics.Complex InverseHyperbolicTangent ();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Trigonometric Hyperbolic Area Tangent (atanh, Areatangens hyperbolicus) of this <c>Complex</c>.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InverseSecant">
      <MemberSignature Language="C#" Value="public MathNet.Numerics.Complex InverseSecant ();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Trigonometric Arcus Secant (asec, Arkussekans) of this <c>Complex</c>.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InverseSine">
      <MemberSignature Language="C#" Value="public MathNet.Numerics.Complex InverseSine ();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Trigonometric Arcus Sine (asin, Arkussinus) of this <c>Complex</c>.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InverseTangent">
      <MemberSignature Language="C#" Value="public MathNet.Numerics.Complex InverseTangent ();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Trigonometric Arcus Tangent (atan, Arkustangens) of this <c>Complex</c>.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsI">
      <MemberSignature Language="C#" Value="public bool IsI { get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Indicates whether the <c>Complex</c> is the imaginary unit.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsImaginary">
      <MemberSignature Language="C#" Value="public bool IsImaginary { get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Indicates the provided <c>Complex</c> is imaginary.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsInfinity">
      <MemberSignature Language="C#" Value="public bool IsInfinity { get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Indicates the provided <c>Complex</c> evaluates to an
            infinite value.
            </summary>
        <value>To be added.</value>
        <remarks>
            True if it either evaluates to a complex infinity
            or to a directed infinity.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNaN">
      <MemberSignature Language="C#" Value="public bool IsNaN { get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Indicates whether the provided <c>Complex</c> evaluates to a
            value that is not a number.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsOne">
      <MemberSignature Language="C#" Value="public bool IsOne { get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Indicates whether the <c>Complex</c> is one.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsReal">
      <MemberSignature Language="C#" Value="public bool IsReal { get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Indicates the provided <c>Complex</c> is real.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsRealNonNegative">
      <MemberSignature Language="C#" Value="public bool IsRealNonNegative { get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Indicates the provided <c>Complex</c> is real and not negative, that is &gt;= 0.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsZero">
      <MemberSignature Language="C#" Value="public bool IsZero { get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Indicates whether the <c>Complex</c> is zero.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Modulus">
      <MemberSignature Language="C#" Value="public double Modulus { set; get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets the modulus of this <c>Complex</c>.
            </summary>
        <value>To be added.</value>
        <remarks>
            If this <c>Complex</c> is zero when the modulus is set,
            the Complex is assumed to be positive real with an argument of zero.
            </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if an attempt is made to set a negative modulus.
            </exception>
        <altmember cref="P:MathNet.Numerics.Complex.Argument" />
      </Docs>
    </Member>
    <Member MemberName="ModulusArgumentComparer">
      <MemberSignature Language="C#" Value="public static System.Collections.IComparer ModulusArgumentComparer { get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IComparer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the lexicographical comparer based on <c>(modulus, argument)</c>.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ModulusSquared">
      <MemberSignature Language="C#" Value="public double ModulusSquared { set; get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets the squared modulus of this <c>Complex</c>.
            </summary>
        <value>To be added.</value>
        <remarks>
            If this <c>Complex</c> is zero when the modulus is set,
            the Complex is assumed to be positive real with an argument of zero.
            </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if an attempt is made to set a negative modulus.
            </exception>
        <altmember cref="P:MathNet.Numerics.Complex.Argument" />
      </Docs>
    </Member>
    <Member MemberName="NaN">
      <MemberSignature Language="C#" Value="public static MathNet.Numerics.Complex NaN { get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Represents a value that is not a number. This field is constant.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NaturalLogarithm">
      <MemberSignature Language="C#" Value="public MathNet.Numerics.Complex NaturalLogarithm ();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Natural Logarithm of this <c>Complex</c> (Base E).
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="One">
      <MemberSignature Language="C#" Value="public static MathNet.Numerics.Complex One { get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Represents the <c>1</c> value. This field is constant.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Addition">
      <MemberSignature Language="C#" Value="public static MathNet.Numerics.Complex op_Addition (MathNet.Numerics.Complex summand1, MathNet.Numerics.Complex summand2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="summand1" Type="MathNet.Numerics.Complex" />
        <Parameter Name="summand2" Type="MathNet.Numerics.Complex" />
      </Parameters>
      <Docs>
        <param name="summand1">To be added.</param>
        <param name="summand2">To be added.</param>
        <summary>
            Complex addition.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Addition">
      <MemberSignature Language="C#" Value="public static MathNet.Numerics.Complex op_Addition (MathNet.Numerics.Complex summand1, double summand2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="summand1" Type="MathNet.Numerics.Complex" />
        <Parameter Name="summand2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="summand1">To be added.</param>
        <param name="summand2">To be added.</param>
        <summary>
            Complex addition.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Addition">
      <MemberSignature Language="C#" Value="public static MathNet.Numerics.Complex op_Addition (double summand1, MathNet.Numerics.Complex summand2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="summand1" Type="System.Double" />
        <Parameter Name="summand2" Type="MathNet.Numerics.Complex" />
      </Parameters>
      <Docs>
        <param name="summand1">To be added.</param>
        <param name="summand2">To be added.</param>
        <summary>
            Complex addition.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Division">
      <MemberSignature Language="C#" Value="public static MathNet.Numerics.Complex op_Division (MathNet.Numerics.Complex dividend, MathNet.Numerics.Complex divisor);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dividend" Type="MathNet.Numerics.Complex" />
        <Parameter Name="divisor" Type="MathNet.Numerics.Complex" />
      </Parameters>
      <Docs>
        <param name="dividend">To be added.</param>
        <param name="divisor">To be added.</param>
        <summary>
            Complex division.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Division">
      <MemberSignature Language="C#" Value="public static MathNet.Numerics.Complex op_Division (MathNet.Numerics.Complex dividend, double divisor);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dividend" Type="MathNet.Numerics.Complex" />
        <Parameter Name="divisor" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="dividend">To be added.</param>
        <param name="divisor">To be added.</param>
        <summary>
            Complex division.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Division">
      <MemberSignature Language="C#" Value="public static MathNet.Numerics.Complex op_Division (double dividend, MathNet.Numerics.Complex divisor);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dividend" Type="System.Double" />
        <Parameter Name="divisor" Type="MathNet.Numerics.Complex" />
      </Parameters>
      <Docs>
        <param name="dividend">To be added.</param>
        <param name="divisor">To be added.</param>
        <summary>
            Complex division.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool op_Equality (MathNet.Numerics.Complex complex1, MathNet.Numerics.Complex complex2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="complex1" Type="MathNet.Numerics.Complex" />
        <Parameter Name="complex2" Type="MathNet.Numerics.Complex" />
      </Parameters>
      <Docs>
        <param name="complex1">To be added.</param>
        <param name="complex2">To be added.</param>
        <summary>
            Equality test.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static MathNet.Numerics.Complex op_Implicit (double number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="number" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="number">To be added.</param>
        <summary>
            Implicit conversion of a real double to a real <c>Complex</c>.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool op_Inequality (MathNet.Numerics.Complex complex1, MathNet.Numerics.Complex complex2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="complex1" Type="MathNet.Numerics.Complex" />
        <Parameter Name="complex2" Type="MathNet.Numerics.Complex" />
      </Parameters>
      <Docs>
        <param name="complex1">To be added.</param>
        <param name="complex2">To be added.</param>
        <summary>
            Inequality test.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Multiply">
      <MemberSignature Language="C#" Value="public static MathNet.Numerics.Complex op_Multiply (MathNet.Numerics.Complex multiplicand, MathNet.Numerics.Complex multiplier);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="multiplicand" Type="MathNet.Numerics.Complex" />
        <Parameter Name="multiplier" Type="MathNet.Numerics.Complex" />
      </Parameters>
      <Docs>
        <param name="multiplicand">To be added.</param>
        <param name="multiplier">To be added.</param>
        <summary>
            Complex multiplication.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Multiply">
      <MemberSignature Language="C#" Value="public static MathNet.Numerics.Complex op_Multiply (MathNet.Numerics.Complex multiplicand, double multiplier);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="multiplicand" Type="MathNet.Numerics.Complex" />
        <Parameter Name="multiplier" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="multiplicand">To be added.</param>
        <param name="multiplier">To be added.</param>
        <summary>
            Complex multiplication.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Multiply">
      <MemberSignature Language="C#" Value="public static MathNet.Numerics.Complex op_Multiply (double multiplicand, MathNet.Numerics.Complex multiplier);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="multiplicand" Type="System.Double" />
        <Parameter Name="multiplier" Type="MathNet.Numerics.Complex" />
      </Parameters>
      <Docs>
        <param name="multiplicand">To be added.</param>
        <param name="multiplier">To be added.</param>
        <summary>
            Complex multiplication.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Subtraction">
      <MemberSignature Language="C#" Value="public static MathNet.Numerics.Complex op_Subtraction (MathNet.Numerics.Complex minuend, MathNet.Numerics.Complex subtrahend);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="minuend" Type="MathNet.Numerics.Complex" />
        <Parameter Name="subtrahend" Type="MathNet.Numerics.Complex" />
      </Parameters>
      <Docs>
        <param name="minuend">To be added.</param>
        <param name="subtrahend">To be added.</param>
        <summary>
            Complex subtraction.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Subtraction">
      <MemberSignature Language="C#" Value="public static MathNet.Numerics.Complex op_Subtraction (MathNet.Numerics.Complex minuend, double subtrahend);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="minuend" Type="MathNet.Numerics.Complex" />
        <Parameter Name="subtrahend" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="minuend">To be added.</param>
        <param name="subtrahend">To be added.</param>
        <summary>
            Complex subtraction.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Subtraction">
      <MemberSignature Language="C#" Value="public static MathNet.Numerics.Complex op_Subtraction (double minuend, MathNet.Numerics.Complex subtrahend);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="minuend" Type="System.Double" />
        <Parameter Name="subtrahend" Type="MathNet.Numerics.Complex" />
      </Parameters>
      <Docs>
        <param name="minuend">To be added.</param>
        <param name="subtrahend">To be added.</param>
        <summary>
            Complex subtraction.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_UnaryNegation">
      <MemberSignature Language="C#" Value="public static MathNet.Numerics.Complex op_UnaryNegation (MathNet.Numerics.Complex subtrahend);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="subtrahend" Type="MathNet.Numerics.Complex" />
      </Parameters>
      <Docs>
        <param name="subtrahend">To be added.</param>
        <summary>
            Unary minus.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_UnaryPlus">
      <MemberSignature Language="C#" Value="public static MathNet.Numerics.Complex op_UnaryPlus (MathNet.Numerics.Complex summand);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="summand" Type="MathNet.Numerics.Complex" />
      </Parameters>
      <Docs>
        <param name="summand">To be added.</param>
        <summary>
            Unary addition.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static MathNet.Numerics.Complex Parse (string complex);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="complex" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="complex">To be added.</param>
        <summary>
            Parse a string into a <c>Complex</c>.
            </summary>
        <returns>To be added.</returns>
        <remarks>
            The adopted string representation for the complex numbers is 
            <i>UVW+I*XYZ</i> where <i>UVW</i> and <i>XYZ</i> are <c>double</c> 
            strings. Some alternative representations are <i>UVW+XYZi</i>,
            <i>UVW+iXYZ</i>, <i>UVW</i> and <i>iXYZ</i>. 
            Additionally the string <c>"NaN"</c> is mapped to 
            <c>Complex.NaN</c>, the string <c>"Infinity"</c> to 
            <c>Complex.ComplexInfinity</c>, <c>"PositiveInfinity"</c>
            to <c>Complex.DirectedInfinity(Complex.One)</c>,
            <c>"NegativeInfinity"</c> to <c>Complex.DirectedInfinity(-Complex.One)</c>
            and finally <c>"DirectedInfinity(WVW+I*XYZ)"</c> to <c>Complex.DirectedInfinity(WVW+I*XYZ)</c>.
            <code>
            Complex z = Complex.Parse("12.5+I*7");
            Complex nan = Complex.Parse("NaN");
            Complex infinity = Complex.Parse("Infinity");
            </code>
            This method is symmetric to <see cref="M:MathNet.Numerics.Complex.ToString" />.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static MathNet.Numerics.Complex Parse (string complex, System.Globalization.NumberFormatInfo numberFormat);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="complex" Type="System.String" />
        <Parameter Name="numberFormat" Type="System.Globalization.NumberFormatInfo" />
      </Parameters>
      <Docs>
        <param name="complex">To be added.</param>
        <param name="numberFormat">To be added.</param>
        <summary>
            Parse a string into a <c>Complex</c>.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Power">
      <MemberSignature Language="C#" Value="public MathNet.Numerics.Complex Power (MathNet.Numerics.Complex exponent);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="exponent" Type="MathNet.Numerics.Complex" />
      </Parameters>
      <Docs>
        <param name="exponent">To be added.</param>
        <summary>
            Raise this <c>Complex</c> to the given value.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Random">
      <MemberSignature Language="C#" Value="public static MathNet.Numerics.Complex Random (MathNet.Numerics.Distributions.IContinuousGenerator randomDistribution);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="randomDistribution" Type="MathNet.Numerics.Distributions.IContinuousGenerator" />
      </Parameters>
      <Docs>
        <param name="randomDistribution">Continuous random distribution or source for the real and imaginary parts.</param>
        <summary>
            Constructs a complex number with random real and imaginary value.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Random">
      <MemberSignature Language="C#" Value="public static MathNet.Numerics.Complex Random (MathNet.Numerics.Distributions.IContinuousGenerator realRandomDistribution, MathNet.Numerics.Distributions.IContinuousGenerator imagRandomDistribution);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="realRandomDistribution" Type="MathNet.Numerics.Distributions.IContinuousGenerator" />
        <Parameter Name="imagRandomDistribution" Type="MathNet.Numerics.Distributions.IContinuousGenerator" />
      </Parameters>
      <Docs>
        <param name="realRandomDistribution">Continuous random distribution or source for the real part.</param>
        <param name="imagRandomDistribution">Continuous random distribution or source for the imaginary part.</param>
        <summary>
            Constructs a complex number with random real and imaginary value.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RandomPolar">
      <MemberSignature Language="C#" Value="public static MathNet.Numerics.Complex RandomPolar (MathNet.Numerics.Distributions.IContinuousGenerator modulusRandomDistribution, MathNet.Numerics.Distributions.IContinuousGenerator argumentRandomDistribution);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="modulusRandomDistribution" Type="MathNet.Numerics.Distributions.IContinuousGenerator" />
        <Parameter Name="argumentRandomDistribution" Type="MathNet.Numerics.Distributions.IContinuousGenerator" />
      </Parameters>
      <Docs>
        <param name="modulusRandomDistribution">Continuous random distribution or source for the modulus.</param>
        <param name="argumentRandomDistribution">Continuous random distribution or source for the argument.</param>
        <summary>
            Constructs a complex number with random modulus and argument.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RandomUnitCircle">
      <MemberSignature Language="C#" Value="public static MathNet.Numerics.Complex RandomUnitCircle (MathNet.Numerics.Distributions.IContinuousGenerator argumentRandomDistribution);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="argumentRandomDistribution" Type="MathNet.Numerics.Distributions.IContinuousGenerator" />
      </Parameters>
      <Docs>
        <param name="argumentRandomDistribution">Continuous random distribution or source for the argument.</param>
        <summary>
            Constructs a complex number on the unit circle with random argument.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Real">
      <MemberSignature Language="C#" Value="public double Real { set; get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets the real part of this <c>Complex</c>.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <altmember cref="P:MathNet.Numerics.Complex.Imag" />
      </Docs>
    </Member>
    <Member MemberName="RealImaginaryComparer">
      <MemberSignature Language="C#" Value="public static System.Collections.IComparer RealImaginaryComparer { get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IComparer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the lexicographical comparer based on <c>(real, imaginary)</c>. 
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Root">
      <MemberSignature Language="C#" Value="public MathNet.Numerics.Complex Root (MathNet.Numerics.Complex rootexponent);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rootexponent" Type="MathNet.Numerics.Complex" />
      </Parameters>
      <Docs>
        <param name="rootexponent">To be added.</param>
        <summary>
            Raise this <c>Complex</c> to the inverse of the given value.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Secant">
      <MemberSignature Language="C#" Value="public MathNet.Numerics.Complex Secant ();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Trigonometric Secant (sec, Sekans) of this <c>Complex</c>.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Sign">
      <MemberSignature Language="C#" Value="public MathNet.Numerics.Complex Sign { get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the unity of this complex (same argument, but on the unit circle; exp(I*arg))
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Sine">
      <MemberSignature Language="C#" Value="public MathNet.Numerics.Complex Sine ();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Trigonometric Sine (sin, Sinus) of this <c>Complex</c>.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Square">
      <MemberSignature Language="C#" Value="public MathNet.Numerics.Complex Square ();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            The Square (power 2) of this <c>Complex</c></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SquareRoot">
      <MemberSignature Language="C#" Value="public MathNet.Numerics.Complex SquareRoot ();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            The Square Root (power 1/2) of this <c>Complex</c></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Tangent">
      <MemberSignature Language="C#" Value="public MathNet.Numerics.Complex Tangent ();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Trigonometric Tangent (tan, Tangens) of this <c>Complex</c>.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Formats this <c>Complex</c> into a <c>string</c>.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (System.Globalization.NumberFormatInfo numberFormat);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="numberFormat" Type="System.Globalization.NumberFormatInfo" />
      </Parameters>
      <Docs>
        <param name="numberFormat">To be added.</param>
        <summary>
            Formats this <c>Complex</c> into a <c>string</c>.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Zero">
      <MemberSignature Language="C#" Value="public static MathNet.Numerics.Complex Zero { get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Represents the zero value. This field is constant.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
