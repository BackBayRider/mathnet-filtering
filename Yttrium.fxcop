<?xml version="1.0" encoding="utf-8"?>
<FxCopProject Version="1.35" Name="YttriumAnalysis">
 <ProjectOptions>
  <SharedProject>True</SharedProject>
  <Stylesheet Apply="False">http://www.gotdotnet.com/team/fxcop//xsl/1.35/FxCopReport.xsl</Stylesheet>
  <SaveMessages>
   <Project Status="Active, Excluded" NewOnly="False" />
   <Report Status="Active" NewOnly="False" />
  </SaveMessages>
  <ProjectFile Compress="False" DefaultTargetCheck="True" DefaultRuleCheck="True" SaveByRuleGroup="" Deterministic="True" />
  <EnableMultithreadedLoad>True</EnableMultithreadedLoad>
  <EnableMultithreadedAnalysis>True</EnableMultithreadedAnalysis>
  <SourceLookup>True</SourceLookup>
  <AnalysisExceptionsThreshold>10</AnalysisExceptionsThreshold>
  <RuleExceptionsThreshold>1</RuleExceptionsThreshold>
  <Spelling Locale="en-us" />
  <VersionAware>False</VersionAware>
  <OverrideRuleVisibilities>False</OverrideRuleVisibilities>
  <CustomDictionaries SearchFxCopDir="True" SearchUserProfile="True" SearchProjectDir="True" />
  <SearchGlobalAssemblyCache>False</SearchGlobalAssemblyCache>
  <DeadlockDetectionTimeout>120</DeadlockDetectionTimeout>
 </ProjectOptions>
 <Targets>
  <AssemblyReferenceDirectories>
   <Directory>$(ProjectDir)/../build/checkout/src/app/MathNet.Yttrium/Library/bin/Debug/</Directory>
   <Directory>$(ProjectDir)/../build/checkout/src/test/MathNet.Yttrium.Test/bin/Debug/</Directory>
  </AssemblyReferenceDirectories>
  <Target Name="$(ProjectDir)/src/app/MathNet.Yttrium/Library/bin/Debug/MathNet.Yttrium.dll" Analyze="True">
   <Modules>
    <Module Name="mathnet.yttrium.dll" Analyze="True">
     <Namespaces>
      <Namespace Name="" Analyze="True">
       <Types>
        <Type Name="&lt;Module&gt;" Analyze="True" />
       </Types>
      </Namespace>
      <Namespace Name="MathNet.Symbolics.Backend" Analyze="True">
       <Types>
        <Type Name="Context" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="_builder" Analyze="True" />
          <Member Name="_hintChannel" Analyze="True" />
          <Member Name="_library" Analyze="True" />
          <Member Name="_random" Analyze="True" />
          <Member Name="_scheduler" Analyze="True" />
          <Member Name="_simulationTime" Analyze="True" />
          <Member Name="_singletonSignals" Analyze="True" />
          <Member Name="Builder" Analyze="True">
           <Accessors>
            <Accessor Name="get_Builder():MathNet.Symbolics.Workplace.Builder" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Culture" Analyze="True">
           <Accessors>
            <Accessor Name="get_Culture():System.Globalization.CultureInfo" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="DefaultEncoding" Analyze="True">
           <Accessors>
            <Accessor Name="get_DefaultEncoding():System.Text.Encoding" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="OnBusAttachedToPort" Kind="Event" Analyze="True">
           <Accessors>
            <Accessor Name="add_OnBusAttachedToPort(System.EventHandler`1&lt;MathNet.Symbolics.Backend.Events.BusPortIndexEventArgs&gt;):System.Void" Analyze="True" />
            <Accessor Name="remove_OnBusAttachedToPort(System.EventHandler`1&lt;MathNet.Symbolics.Backend.Events.BusPortIndexEventArgs&gt;):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="OnBusNoLongerAttachedToPort" Kind="Event" Analyze="True">
           <Accessors>
            <Accessor Name="add_OnBusNoLongerAttachedToPort(System.EventHandler`1&lt;MathNet.Symbolics.Backend.Events.BusPortIndexEventArgs&gt;):System.Void" Analyze="True" />
            <Accessor Name="remove_OnBusNoLongerAttachedToPort(System.EventHandler`1&lt;MathNet.Symbolics.Backend.Events.BusPortIndexEventArgs&gt;):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="OnNewBusConstructed" Kind="Event" Analyze="True">
           <Accessors>
            <Accessor Name="add_OnNewBusConstructed(System.EventHandler`1&lt;MathNet.Symbolics.Backend.Events.BusEventArgs&gt;):System.Void" Analyze="True" />
            <Accessor Name="remove_OnNewBusConstructed(System.EventHandler`1&lt;MathNet.Symbolics.Backend.Events.BusEventArgs&gt;):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="OnNewPortConstructed" Kind="Event" Analyze="True">
           <Accessors>
            <Accessor Name="add_OnNewPortConstructed(System.EventHandler`1&lt;MathNet.Symbolics.Backend.Events.PortEventArgs&gt;):System.Void" Analyze="True" />
            <Accessor Name="remove_OnNewPortConstructed(System.EventHandler`1&lt;MathNet.Symbolics.Backend.Events.PortEventArgs&gt;):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="OnNewSignalConstructed" Kind="Event" Analyze="True">
           <Accessors>
            <Accessor Name="add_OnNewSignalConstructed(System.EventHandler`1&lt;MathNet.Symbolics.Backend.Events.SignalEventArgs&gt;):System.Void" Analyze="True" />
            <Accessor Name="remove_OnNewSignalConstructed(System.EventHandler`1&lt;MathNet.Symbolics.Backend.Events.SignalEventArgs&gt;):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="OnSignalDrivenByPort" Kind="Event" Analyze="True">
           <Accessors>
            <Accessor Name="add_OnSignalDrivenByPort(System.EventHandler`1&lt;MathNet.Symbolics.Backend.Events.SignalPortIndexEventArgs&gt;):System.Void" Analyze="True" />
            <Accessor Name="remove_OnSignalDrivenByPort(System.EventHandler`1&lt;MathNet.Symbolics.Backend.Events.SignalPortIndexEventArgs&gt;):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="OnSignalDrivesPort" Kind="Event" Analyze="True">
           <Accessors>
            <Accessor Name="add_OnSignalDrivesPort(System.EventHandler`1&lt;MathNet.Symbolics.Backend.Events.SignalPortIndexEventArgs&gt;):System.Void" Analyze="True" />
            <Accessor Name="remove_OnSignalDrivesPort(System.EventHandler`1&lt;MathNet.Symbolics.Backend.Events.SignalPortIndexEventArgs&gt;):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="OnSignalNoLongerDrivenByPort" Kind="Event" Analyze="True">
           <Accessors>
            <Accessor Name="add_OnSignalNoLongerDrivenByPort(System.EventHandler`1&lt;MathNet.Symbolics.Backend.Events.SignalPortIndexEventArgs&gt;):System.Void" Analyze="True" />
            <Accessor Name="remove_OnSignalNoLongerDrivenByPort(System.EventHandler`1&lt;MathNet.Symbolics.Backend.Events.SignalPortIndexEventArgs&gt;):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="OnSignalNoLongerDrivesPort" Kind="Event" Analyze="True">
           <Accessors>
            <Accessor Name="add_OnSignalNoLongerDrivesPort(System.EventHandler`1&lt;MathNet.Symbolics.Backend.Events.SignalPortIndexEventArgs&gt;):System.Void" Analyze="True" />
            <Accessor Name="remove_OnSignalNoLongerDrivesPort(System.EventHandler`1&lt;MathNet.Symbolics.Backend.Events.SignalPortIndexEventArgs&gt;):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="OnSignalValueChanged" Kind="Event" Analyze="True">
           <Accessors>
            <Accessor Name="add_OnSignalValueChanged(System.EventHandler`1&lt;MathNet.Symbolics.Backend.Events.SignalEventArgs&gt;):System.Void" Analyze="True" />
            <Accessor Name="remove_OnSignalValueChanged(System.EventHandler`1&lt;MathNet.Symbolics.Backend.Events.SignalEventArgs&gt;):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="SimulationTimeShifted" Kind="Event" Analyze="True">
           <Accessors>
            <Accessor Name="add_SimulationTimeShifted(System.EventHandler`1&lt;MathNet.Symbolics.Backend.Events.SimulationTimeEventArgs&gt;):System.Void" Analyze="True" />
            <Accessor Name="remove_SimulationTimeShifted(System.EventHandler`1&lt;MathNet.Symbolics.Backend.Events.SimulationTimeEventArgs&gt;):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="executorCharacter" Analyze="True" />
          <Member Name="ExecutorCharacter" Analyze="True">
           <Accessors>
            <Accessor Name="get_ExecutorCharacter():System.Char" Analyze="True" />
            <Accessor Name="set_ExecutorCharacter(System.Char):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="GenerateInstanceId():System.Guid" Analyze="True" />
          <Member Name="GenerateTag():System.Int32" Analyze="True" />
          <Member Name="Hints" Analyze="True">
           <Accessors>
            <Accessor Name="get_Hints():MathNet.Symbolics.Backend.Channels.HintChannel" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="IdentifierComparer" Analyze="True">
           <Accessors>
            <Accessor Name="get_IdentifierComparer():System.StringComparer" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Library" Analyze="True">
           <Accessors>
            <Accessor Name="get_Library():MathNet.Symbolics.Backend.Library" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="listEncapsulation" Analyze="True" />
          <Member Name="ListEncapsulation" Analyze="True">
           <Accessors>
            <Accessor Name="get_ListEncapsulation():MathNet.Symbolics.Backend.EncapsulationFormat" Analyze="True" />
            <Accessor Name="set_ListEncapsulation(MathNet.Symbolics.Backend.EncapsulationFormat):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="literalEncapsulation" Analyze="True" />
          <Member Name="LiteralEncapsulation" Analyze="True">
           <Accessors>
            <Accessor Name="get_LiteralEncapsulation():MathNet.Symbolics.Backend.EncapsulationFormat" Analyze="True" />
            <Accessor Name="set_LiteralEncapsulation(MathNet.Symbolics.Backend.EncapsulationFormat):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="NotifyBusAttachedToPort(MathNet.Symbolics.Core.Bus,MathNet.Symbolics.Core.Port,System.Int32):System.Void" Analyze="True" />
          <Member Name="NotifyBusNoLongerAttachedToPort(MathNet.Symbolics.Core.Bus,MathNet.Symbolics.Core.Port,System.Int32):System.Void" Analyze="True" />
          <Member Name="NotifyNewBusConstructed(MathNet.Symbolics.Core.Bus):System.Void" Analyze="True" />
          <Member Name="NotifyNewPortConstructed(MathNet.Symbolics.Core.Port):System.Void" Analyze="True" />
          <Member Name="NotifyNewSignalConstructed(MathNet.Symbolics.Core.Signal):System.Void" Analyze="True" />
          <Member Name="NotifySignalDrivenByPort(MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Port,System.Int32):System.Void" Analyze="True" />
          <Member Name="NotifySignalDrivesPort(MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Port,System.Int32):System.Void" Analyze="True" />
          <Member Name="NotifySignalNoLongerDrivenByPort(MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Port,System.Int32):System.Void" Analyze="True" />
          <Member Name="NotifySignalNoLongerDrivesPort(MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Port,System.Int32):System.Void" Analyze="True" />
          <Member Name="NotifySignalValueChanged(MathNet.Symbolics.Core.Signal):System.Void" Analyze="True" />
          <Member Name="NumberFormat" Analyze="True">
           <Accessors>
            <Accessor Name="get_NumberFormat():System.Globalization.NumberFormatInfo" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="OnBusAttachedToPort" Analyze="True" />
          <Member Name="OnBusNoLongerAttachedToPort" Analyze="True" />
          <Member Name="OnNewBusConstructed" Analyze="True" />
          <Member Name="OnNewPortConstructed" Analyze="True" />
          <Member Name="OnNewSignalConstructed" Analyze="True" />
          <Member Name="OnSignalDrivenByPort" Analyze="True" />
          <Member Name="OnSignalDrivesPort" Analyze="True" />
          <Member Name="OnSignalNoLongerDrivenByPort" Analyze="True" />
          <Member Name="OnSignalNoLongerDrivesPort" Analyze="True" />
          <Member Name="OnSignalValueChanged" Analyze="True" />
          <Member Name="Random" Analyze="True">
           <Accessors>
            <Accessor Name="get_Random():System.Random" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ResetSimulationTime():System.Void" Analyze="True" />
          <Member Name="scalarEncapsulation" Analyze="True" />
          <Member Name="ScalarEncapsulation" Analyze="True">
           <Accessors>
            <Accessor Name="get_ScalarEncapsulation():MathNet.Symbolics.Backend.EncapsulationFormat" Analyze="True" />
            <Accessor Name="set_ScalarEncapsulation(MathNet.Symbolics.Backend.EncapsulationFormat):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Scheduler" Analyze="True">
           <Accessors>
            <Accessor Name="get_Scheduler():MathNet.Symbolics.Backend.Simulation.Scheduler" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="separatorCharacter" Analyze="True" />
          <Member Name="SeparatorCharacter" Analyze="True">
           <Accessors>
            <Accessor Name="get_SeparatorCharacter():System.Char" Analyze="True" />
            <Accessor Name="set_SeparatorCharacter(System.Char):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="setEncapsulation" Analyze="True" />
          <Member Name="SetEncapsulation" Analyze="True">
           <Accessors>
            <Accessor Name="get_SetEncapsulation():MathNet.Symbolics.Backend.EncapsulationFormat" Analyze="True" />
            <Accessor Name="set_SetEncapsulation(MathNet.Symbolics.Backend.EncapsulationFormat):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="SimulationTime" Analyze="True">
           <Accessors>
            <Accessor Name="get_SimulationTime():System.TimeSpan" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="SimulationTimeProgressHandler(System.Object,MathNet.Symbolics.Backend.Events.SimulationTimeEventArgs):System.Void" Analyze="True" />
          <Member Name="SimulationTimeShifted" Analyze="True" />
          <Member Name="SingletonSignals" Analyze="True">
           <Accessors>
            <Accessor Name="get_SingletonSignals():MathNet.Symbolics.Backend.Containers.SignalTable" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="vectorEncapsulation" Analyze="True" />
          <Member Name="VectorEncapsulation" Analyze="True">
           <Accessors>
            <Accessor Name="get_VectorEncapsulation():MathNet.Symbolics.Backend.EncapsulationFormat" Analyze="True" />
            <Accessor Name="set_VectorEncapsulation(MathNet.Symbolics.Backend.EncapsulationFormat):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="YttriumNamespace" Analyze="True">
           <Accessors>
            <Accessor Name="get_YttriumNamespace():System.String" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="EncapsulationFormat" Analyze="True">
         <Members>
          <Member Name=".ctor(System.Char,System.Char)" Analyze="True" />
          <Member Name="distinguishable" Analyze="True" />
          <Member Name="Distinguishable" Analyze="True">
           <Accessors>
            <Accessor Name="get_Distinguishable():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="postfix" Analyze="True" />
          <Member Name="Postfix" Analyze="True">
           <Accessors>
            <Accessor Name="get_Postfix():System.Char" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="prefix" Analyze="True" />
          <Member Name="Prefix" Analyze="True">
           <Accessors>
            <Accessor Name="get_Prefix():System.Char" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="IContextSensitive" Analyze="True">
         <Members>
          <Member Name="Context" Analyze="True">
           <Accessors>
            <Accessor Name="get_Context():MathNet.Symbolics.Backend.Context" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="Library" Analyze="True">
         <Members>
          <Member Name=".ctor(MathNet.Symbolics.Backend.Context)" Analyze="True" />
          <Member Name="Architectures" Analyze="True">
           <Accessors>
            <Accessor Name="get_Architectures():MathNet.Symbolics.Backend.Containers.ArchitectureTable" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="archTable" Analyze="True" />
          <Member Name="ContainsArchitecture(MathNet.Symbolics.Core.Port):System.Boolean" Analyze="True" />
          <Member Name="ContainsEntity(MathNet.Symbolics.Core.MathIdentifier):System.Boolean" Analyze="True" />
          <Member Name="ContainsEntity(System.String,MathNet.Symbolics.Core.InfixNotation,System.Int32):System.Boolean" Analyze="True" />
          <Member Name="ContainsEntity(System.String,MathNet.Symbolics.Core.InfixNotation,System.Int32,System.Int32,System.Int32):System.Boolean" Analyze="True" />
          <Member Name="ContainsEntity(System.String,System.Int32):System.Boolean" Analyze="True" />
          <Member Name="ContainsEntity(System.String,System.Int32,System.Int32,System.Int32):System.Boolean" Analyze="True" />
          <Member Name="ContainsTheorem(MathNet.Symbolics.Core.MathIdentifier):System.Boolean" Analyze="True" />
          <Member Name="context" Analyze="True" />
          <Member Name="Context" Analyze="True">
           <Accessors>
            <Accessor Name="get_Context():MathNet.Symbolics.Backend.Context" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Entities" Analyze="True">
           <Accessors>
            <Accessor Name="get_Entities():MathNet.Symbolics.Backend.Containers.EntityTable" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="entityTable" Analyze="True" />
          <Member Name="LoadArchitectureServer(MathNet.Symbolics.Backend.Discovery.IArchitectureServer):System.Void" Analyze="True" />
          <Member Name="LoadAssembly(System.Reflection.Assembly):System.Void" Analyze="True" />
          <Member Name="LoadAssemblyManual(System.Reflection.Assembly):System.Void" Analyze="True" />
          <Member Name="LoadEntityServer(MathNet.Symbolics.Backend.Discovery.IEntityServer):System.Void" Analyze="True" />
          <Member Name="LoadPackageManager(MathNet.Symbolics.Backend.Discovery.IPackageManager):System.Void" Analyze="True" />
          <Member Name="LoadStructureServer(MathNet.Symbolics.Backend.Discovery.IStructureServer):System.Void" Analyze="True" />
          <Member Name="LoadTheoremServer(MathNet.Symbolics.Backend.Discovery.ITheoremServer):System.Void" Analyze="True" />
          <Member Name="LookupArchitecture(MathNet.Symbolics.Core.Port):MathNet.Symbolics.Core.IArchitectureFactory" Analyze="True" />
          <Member Name="LookupEntity(MathNet.Symbolics.Core.MathIdentifier):MathNet.Symbolics.Core.Entity" Analyze="True" />
          <Member Name="LookupEntity(System.String,MathNet.Symbolics.Core.InfixNotation,System.Int32):MathNet.Symbolics.Core.Entity" Analyze="True" />
          <Member Name="LookupEntity(System.String,MathNet.Symbolics.Core.InfixNotation,System.Int32,System.Int32,System.Int32):MathNet.Symbolics.Core.Entity" Analyze="True" />
          <Member Name="LookupEntity(System.String,System.Int32):MathNet.Symbolics.Core.Entity" Analyze="True" />
          <Member Name="LookupEntity(System.String,System.Int32,System.Int32,System.Int32):MathNet.Symbolics.Core.Entity" Analyze="True" />
          <Member Name="LookupTheorem(MathNet.Symbolics.Core.MathIdentifier):MathNet.Symbolics.Backend.Theorems.ITheorem" Analyze="True" />
          <Member Name="LookupTransformationTheoremType(MathNet.Symbolics.Core.MathIdentifier):MathNet.Symbolics.Backend.Containers.TransformationTheoremTypeTable" Analyze="True" />
          <Member Name="Structures" Analyze="True">
           <Accessors>
            <Accessor Name="get_Structures():MathNet.Symbolics.Backend.ValueConversion.StructureTable" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="structureTable" Analyze="True" />
          <Member Name="Theorems" Analyze="True">
           <Accessors>
            <Accessor Name="get_Theorems():MathNet.Symbolics.Backend.Containers.TheoremTable" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="theoremTable" Analyze="True" />
          <Member Name="TryLookupEntity(MathNet.Symbolics.Core.MathIdentifier,MathNet.Symbolics.Core.Entity&amp;):System.Boolean" Analyze="True" />
          <Member Name="TryLookupEntity(System.String,MathNet.Symbolics.Core.InfixNotation,System.Int32,MathNet.Symbolics.Core.Entity&amp;):System.Boolean" Analyze="True" />
          <Member Name="TryLookupEntity(System.String,MathNet.Symbolics.Core.InfixNotation,System.Int32,System.Int32,System.Int32,MathNet.Symbolics.Core.Entity&amp;):System.Boolean" Analyze="True" />
          <Member Name="TryLookupTheorem(MathNet.Symbolics.Core.MathIdentifier,MathNet.Symbolics.Backend.Theorems.ITheorem&amp;):System.Boolean" Analyze="True" />
          <Member Name="TryLookupTheorem(MathNet.Symbolics.Core.MathIdentifier,T&amp;):System.Boolean" Analyze="True" />
          <Member Name="TryLookupTransformationTheoremType(MathNet.Symbolics.Core.MathIdentifier,MathNet.Symbolics.Backend.Containers.TransformationTheoremTypeTable&amp;):System.Boolean" Analyze="True" />
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="MathNet.Symbolics.Backend.Channels" Analyze="True">
       <Types>
        <Type Name="AbstractChannel`1" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="_enabled" Analyze="True" />
          <Member Name="_queue" Analyze="True" />
          <Member Name="AcceptsNewEntries" Analyze="True">
           <Accessors>
            <Accessor Name="get_AcceptsNewEntries():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="EntryAvailable" Kind="Event" Analyze="True">
           <Accessors>
            <Accessor Name="add_EntryAvailable(System.EventHandler):System.Void" Analyze="True" />
            <Accessor Name="remove_EntryAvailable(System.EventHandler):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Enabled" Analyze="True">
           <Accessors>
            <Accessor Name="get_Enabled():System.Boolean" Analyze="True" />
            <Accessor Name="set_Enabled(System.Boolean):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="EntryAvailable" Analyze="True" />
          <Member Name="HasEntries" Analyze="True">
           <Accessors>
            <Accessor Name="get_HasEntries():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="PeekEntry():EntryType" Analyze="True" />
          <Member Name="PopEntry():EntryType" Analyze="True" />
          <Member Name="PushEntry(EntryType):System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="CommandChannel" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
         </Members>
        </Type>
        <Type Name="CommandReference" Analyze="True">
         <Members>
          <Member Name=".ctor(System.Guid,System.Int32)" Analyze="True" />
          <Member Name="Deserialize(System.String,System.Runtime.Serialization.SerializationInfo):MathNet.Symbolics.Backend.Channels.CommandReference" Analyze="True" />
          <Member Name="Deserialize(System.String,System.Xml.XmlReader):MathNet.Symbolics.Backend.Channels.CommandReference" Analyze="True" />
          <Member Name="Index" Analyze="True" />
          <Member Name="InstanceId" Analyze="True" />
          <Member Name="Serialize(System.String,System.Runtime.Serialization.SerializationInfo):System.Void" Analyze="True" />
          <Member Name="Serialize(System.String,System.Xml.XmlWriter):System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="Hint" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="_type" Analyze="True" />
          <Member Name="Type" Analyze="True">
           <Accessors>
            <Accessor Name="get_Type():MathNet.Symbolics.Backend.Channels.HintType" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="HintChannel" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
         </Members>
        </Type>
        <Type Name="HintType" Analyze="True">
         <Members>
          <Member Name="Error" Analyze="True" />
          <Member Name="Hint" Analyze="True" />
          <Member Name="Information" Analyze="True" />
          <Member Name="value__" Analyze="True" />
          <Member Name="Warning" Analyze="True" />
         </Members>
        </Type>
        <Type Name="ICommand" Analyze="True">
         <Members>
          <Member Name="Done" Analyze="True">
           <Accessors>
            <Accessor Name="get_Done():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Executed" Kind="Event" Analyze="True">
           <Accessors>
            <Accessor Name="add_Executed(System.EventHandler):System.Void" Analyze="True" />
            <Accessor Name="remove_Executed(System.EventHandler):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Execute():System.Void" Analyze="True" />
          <Member Name="System" Analyze="True">
           <Accessors>
            <Accessor Name="get_System():MathNet.Symbolics.Workplace.MathSystem" Analyze="True" />
            <Accessor Name="set_System(MathNet.Symbolics.Workplace.MathSystem):System.Void" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="ILogWriter" Analyze="True">
         <Members>
          <Member Name="WriteEntry(System.DateTime,System.Guid,MathNet.Symbolics.Backend.Channels.LogAction,System.Guid,System.Guid,System.Guid,System.String,System.Int32):System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="ISystemObserver" Analyze="True">
         <Members>
          <Member Name="AttachedToSystem(MathNet.Symbolics.Workplace.MathSystem):System.Void" Analyze="True" />
          <Member Name="AutoDetachOnSystemChanged" Analyze="True">
           <Accessors>
            <Accessor Name="get_AutoDetachOnSystemChanged():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="AutoInitialize" Analyze="True">
           <Accessors>
            <Accessor Name="get_AutoInitialize():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="BeginInitialize():System.Void" Analyze="True" />
          <Member Name="DetachedFromSystem(MathNet.Symbolics.Workplace.MathSystem):System.Void" Analyze="True" />
          <Member Name="EndInitialize():System.Void" Analyze="True" />
          <Member Name="OnBusAdded(MathNet.Symbolics.Core.Bus,System.Int32):System.Void" Analyze="True" />
          <Member Name="OnBusAttachedToPort(MathNet.Symbolics.Core.Bus,MathNet.Symbolics.Core.Port,System.Int32):System.Void" Analyze="True" />
          <Member Name="OnBusAttachedToPortNoLonger(MathNet.Symbolics.Core.Bus,MathNet.Symbolics.Core.Port,System.Int32):System.Void" Analyze="True" />
          <Member Name="OnBusMoved(MathNet.Symbolics.Core.Bus,System.Int32,System.Int32):System.Void" Analyze="True" />
          <Member Name="OnBusRemoved(MathNet.Symbolics.Core.Bus,System.Int32):System.Void" Analyze="True" />
          <Member Name="OnInputAdded(MathNet.Symbolics.Core.Signal,System.Int32):System.Void" Analyze="True" />
          <Member Name="OnInputMoved(MathNet.Symbolics.Core.Signal,System.Int32,System.Int32):System.Void" Analyze="True" />
          <Member Name="OnInputRemoved(MathNet.Symbolics.Core.Signal,System.Int32):System.Void" Analyze="True" />
          <Member Name="OnOutputAdded(MathNet.Symbolics.Core.Signal,System.Int32):System.Void" Analyze="True" />
          <Member Name="OnOutputMoved(MathNet.Symbolics.Core.Signal,System.Int32,System.Int32):System.Void" Analyze="True" />
          <Member Name="OnOutputRemoved(MathNet.Symbolics.Core.Signal,System.Int32):System.Void" Analyze="True" />
          <Member Name="OnPortAdded(MathNet.Symbolics.Core.Port,System.Int32):System.Void" Analyze="True" />
          <Member Name="OnPortDrivesSignal(MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Port,System.Int32):System.Void" Analyze="True" />
          <Member Name="OnPortDrivesSignalNoLonger(MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Port,System.Int32):System.Void" Analyze="True" />
          <Member Name="OnPortMoved(MathNet.Symbolics.Core.Port,System.Int32,System.Int32):System.Void" Analyze="True" />
          <Member Name="OnPortRemoved(MathNet.Symbolics.Core.Port,System.Int32):System.Void" Analyze="True" />
          <Member Name="OnSignalAdded(MathNet.Symbolics.Core.Signal,System.Int32):System.Void" Analyze="True" />
          <Member Name="OnSignalDrivesPort(MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Port,System.Int32):System.Void" Analyze="True" />
          <Member Name="OnSignalDrivesPortNoLonger(MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Port,System.Int32):System.Void" Analyze="True" />
          <Member Name="OnSignalMoved(MathNet.Symbolics.Core.Signal,System.Int32,System.Int32):System.Void" Analyze="True" />
          <Member Name="OnSignalRemoved(MathNet.Symbolics.Core.Signal,System.Int32):System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="LogAction" Analyze="True">
         <Members>
          <Member Name="BeginInitialize" Analyze="True" />
          <Member Name="BusAdded" Analyze="True" />
          <Member Name="BusAttachedToPort" Analyze="True" />
          <Member Name="BusDetachedFromPort" Analyze="True" />
          <Member Name="BusRemoved" Analyze="True" />
          <Member Name="EndInitialize" Analyze="True" />
          <Member Name="InputAdded" Analyze="True" />
          <Member Name="InputRemoved" Analyze="True" />
          <Member Name="OutputAdded" Analyze="True" />
          <Member Name="OutputRemoved" Analyze="True" />
          <Member Name="PortAdded" Analyze="True" />
          <Member Name="PortDrivesSignal" Analyze="True" />
          <Member Name="PortRemoved" Analyze="True" />
          <Member Name="PortUndrivesSignal" Analyze="True" />
          <Member Name="SignalAdded" Analyze="True" />
          <Member Name="SignalDrivesPort" Analyze="True" />
          <Member Name="SignalRemoved" Analyze="True" />
          <Member Name="SignalUndrivesPort" Analyze="True" />
          <Member Name="SystemChanged" Analyze="True" />
          <Member Name="value__" Analyze="True" />
         </Members>
        </Type>
        <Type Name="LogObserver" Analyze="True">
         <Members>
          <Member Name=".ctor(MathNet.Symbolics.Backend.Channels.ILogWriter)" Analyze="True" />
          <Member Name="_currentSysId" Analyze="True" />
          <Member Name="_emptyGuid" Analyze="True" />
          <Member Name="_emptyId" Analyze="True" />
          <Member Name="_writer" Analyze="True" />
          <Member Name="AttachedToSystem(MathNet.Symbolics.Workplace.MathSystem):System.Void" Analyze="True" />
          <Member Name="AutoDetachOnSystemChanged" Analyze="True">
           <Accessors>
            <Accessor Name="get_AutoDetachOnSystemChanged():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="AutoInitialize" Analyze="True">
           <Accessors>
            <Accessor Name="get_AutoInitialize():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="BeginInitialize():System.Void" Analyze="True" />
          <Member Name="DetachedFromSystem(MathNet.Symbolics.Workplace.MathSystem):System.Void" Analyze="True" />
          <Member Name="EndInitialize():System.Void" Analyze="True" />
          <Member Name="OnBusAdded(MathNet.Symbolics.Core.Bus,System.Int32):System.Void" Analyze="True" />
          <Member Name="OnBusAttachedToPort(MathNet.Symbolics.Core.Bus,MathNet.Symbolics.Core.Port,System.Int32):System.Void" Analyze="True" />
          <Member Name="OnBusAttachedToPortNoLonger(MathNet.Symbolics.Core.Bus,MathNet.Symbolics.Core.Port,System.Int32):System.Void" Analyze="True" />
          <Member Name="OnBusMoved(MathNet.Symbolics.Core.Bus,System.Int32,System.Int32):System.Void" Analyze="True" />
          <Member Name="OnBusRemoved(MathNet.Symbolics.Core.Bus,System.Int32):System.Void" Analyze="True" />
          <Member Name="OnInputAdded(MathNet.Symbolics.Core.Signal,System.Int32):System.Void" Analyze="True" />
          <Member Name="OnInputMoved(MathNet.Symbolics.Core.Signal,System.Int32,System.Int32):System.Void" Analyze="True" />
          <Member Name="OnInputRemoved(MathNet.Symbolics.Core.Signal,System.Int32):System.Void" Analyze="True" />
          <Member Name="OnOutputAdded(MathNet.Symbolics.Core.Signal,System.Int32):System.Void" Analyze="True" />
          <Member Name="OnOutputMoved(MathNet.Symbolics.Core.Signal,System.Int32,System.Int32):System.Void" Analyze="True" />
          <Member Name="OnOutputRemoved(MathNet.Symbolics.Core.Signal,System.Int32):System.Void" Analyze="True" />
          <Member Name="OnPortAdded(MathNet.Symbolics.Core.Port,System.Int32):System.Void" Analyze="True" />
          <Member Name="OnPortDrivesSignal(MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Port,System.Int32):System.Void" Analyze="True" />
          <Member Name="OnPortDrivesSignalNoLonger(MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Port,System.Int32):System.Void" Analyze="True" />
          <Member Name="OnPortMoved(MathNet.Symbolics.Core.Port,System.Int32,System.Int32):System.Void" Analyze="True" />
          <Member Name="OnPortRemoved(MathNet.Symbolics.Core.Port,System.Int32):System.Void" Analyze="True" />
          <Member Name="OnSignalAdded(MathNet.Symbolics.Core.Signal,System.Int32):System.Void" Analyze="True" />
          <Member Name="OnSignalDrivesPort(MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Port,System.Int32):System.Void" Analyze="True" />
          <Member Name="OnSignalDrivesPortNoLonger(MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Port,System.Int32):System.Void" Analyze="True" />
          <Member Name="OnSignalMoved(MathNet.Symbolics.Core.Signal,System.Int32,System.Int32):System.Void" Analyze="True" />
          <Member Name="OnSignalRemoved(MathNet.Symbolics.Core.Signal,System.Int32):System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="Mediator" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="_commands" Analyze="True" />
          <Member Name="_observers" Analyze="True" />
          <Member Name="_system" Analyze="True" />
          <Member Name="AttachObserver(MathNet.Symbolics.Backend.Channels.ISystemObserver):System.Void" Analyze="True" />
          <Member Name="Commands" Analyze="True">
           <Accessors>
            <Accessor Name="get_Commands():MathNet.Symbolics.Backend.Channels.CommandChannel" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Context" Analyze="True">
           <Accessors>
            <Accessor Name="get_Context():MathNet.Symbolics.Backend.Context" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="context_OnBusAttachedToPort(System.Object,MathNet.Symbolics.Backend.Events.BusPortIndexEventArgs):System.Void" Analyze="True" />
          <Member Name="context_OnBusNoLongerAttachedToPort(System.Object,MathNet.Symbolics.Backend.Events.BusPortIndexEventArgs):System.Void" Analyze="True" />
          <Member Name="context_OnSignalDrivenByPort(System.Object,MathNet.Symbolics.Backend.Events.SignalPortIndexEventArgs):System.Void" Analyze="True" />
          <Member Name="context_OnSignalDrivesPort(System.Object,MathNet.Symbolics.Backend.Events.SignalPortIndexEventArgs):System.Void" Analyze="True" />
          <Member Name="context_OnSignalNoLongerDrivenByPort(System.Object,MathNet.Symbolics.Backend.Events.SignalPortIndexEventArgs):System.Void" Analyze="True" />
          <Member Name="context_OnSignalNoLongerDrivesPort(System.Object,MathNet.Symbolics.Backend.Events.SignalPortIndexEventArgs):System.Void" Analyze="True" />
          <Member Name="DetachObserver(MathNet.Symbolics.Backend.Channels.ISystemObserver):System.Void" Analyze="True" />
          <Member Name="DisableTracking(MathNet.Symbolics.Backend.Context):System.Void" Analyze="True" />
          <Member Name="SystemChanged" Kind="Event" Analyze="True">
           <Accessors>
            <Accessor Name="add_SystemChanged(System.EventHandler):System.Void" Analyze="True" />
            <Accessor Name="remove_SystemChanged(System.EventHandler):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="EnableTracking(MathNet.Symbolics.Backend.Context):System.Void" Analyze="True" />
          <Member Name="EntryAvailableHandler(System.Object,System.EventArgs):System.Void" Analyze="True" />
          <Member Name="InitializeObserverWithCurrentSystem(MathNet.Symbolics.Backend.Channels.ISystemObserver):System.Void" Analyze="True" />
          <Member Name="OnBusAdded(MathNet.Symbolics.Core.Bus,System.Int32):System.Void" Analyze="True" />
          <Member Name="OnBusAttachedToPort(MathNet.Symbolics.Core.Bus,MathNet.Symbolics.Core.Port,System.Int32):System.Void" Analyze="True" />
          <Member Name="OnBusAttachedToPortNoLonger(MathNet.Symbolics.Core.Bus,MathNet.Symbolics.Core.Port,System.Int32):System.Void" Analyze="True" />
          <Member Name="OnBusMoved(MathNet.Symbolics.Core.Bus,System.Int32,System.Int32):System.Void" Analyze="True" />
          <Member Name="OnBusRemoved(MathNet.Symbolics.Core.Bus,System.Int32):System.Void" Analyze="True" />
          <Member Name="OnInputAdded(MathNet.Symbolics.Core.Signal,System.Int32):System.Void" Analyze="True" />
          <Member Name="OnInputMoved(MathNet.Symbolics.Core.Signal,System.Int32,System.Int32):System.Void" Analyze="True" />
          <Member Name="OnInputRemoved(MathNet.Symbolics.Core.Signal,System.Int32):System.Void" Analyze="True" />
          <Member Name="OnOutputAdded(MathNet.Symbolics.Core.Signal,System.Int32):System.Void" Analyze="True" />
          <Member Name="OnOutputMoved(MathNet.Symbolics.Core.Signal,System.Int32,System.Int32):System.Void" Analyze="True" />
          <Member Name="OnOutputRemoved(MathNet.Symbolics.Core.Signal,System.Int32):System.Void" Analyze="True" />
          <Member Name="OnPortAdded(MathNet.Symbolics.Core.Port,System.Int32):System.Void" Analyze="True" />
          <Member Name="OnPortDrivesSignal(MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Port,System.Int32):System.Void" Analyze="True" />
          <Member Name="OnPortDrivesSignalNoLonger(MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Port,System.Int32):System.Void" Analyze="True" />
          <Member Name="OnPortMoved(MathNet.Symbolics.Core.Port,System.Int32,System.Int32):System.Void" Analyze="True" />
          <Member Name="OnPortRemoved(MathNet.Symbolics.Core.Port,System.Int32):System.Void" Analyze="True" />
          <Member Name="OnSignalAdded(MathNet.Symbolics.Core.Signal,System.Int32):System.Void" Analyze="True" />
          <Member Name="OnSignalDrivesPort(MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Port,System.Int32):System.Void" Analyze="True" />
          <Member Name="OnSignalDrivesPortNoLonger(MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Port,System.Int32):System.Void" Analyze="True" />
          <Member Name="OnSignalMoved(MathNet.Symbolics.Core.Signal,System.Int32,System.Int32):System.Void" Analyze="True" />
          <Member Name="OnSignalRemoved(MathNet.Symbolics.Core.Signal,System.Int32):System.Void" Analyze="True" />
          <Member Name="PostCommand(MathNet.Symbolics.Backend.Channels.ICommand):System.Void" Analyze="True" />
          <Member Name="SubscribeSystem(MathNet.Symbolics.Workplace.MathSystem):System.Void" Analyze="True" />
          <Member Name="System" Analyze="True">
           <Accessors>
            <Accessor Name="get_System():MathNet.Symbolics.Workplace.MathSystem" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="SystemChanged" Analyze="True" />
          <Member Name="UnsubscribeSystem(MathNet.Symbolics.Workplace.MathSystem):System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="TextLogWriter" Analyze="True">
         <Members>
          <Member Name=".ctor(System.IO.TextWriter)" Analyze="True" />
          <Member Name="_writer" Analyze="True" />
          <Member Name="WriteEntry(System.DateTime,System.Guid,MathNet.Symbolics.Backend.Channels.LogAction,System.Guid,System.Guid,System.Guid,System.String,System.Int32):System.Void" Analyze="True" />
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="MathNet.Symbolics.Backend.Channels.Commands" Analyze="True">
       <Types>
        <Type Name="AbstractBusCommand" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name=".ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" Analyze="True" />
          <Member Name="_busRef" Analyze="True" />
          <Member Name="Action(MathNet.Symbolics.Core.Bus):System.Void" Analyze="True" />
          <Member Name="BusReference" Analyze="True">
           <Accessors>
            <Accessor Name="get_BusReference():MathNet.Symbolics.Backend.Channels.CommandReference" Analyze="True" />
            <Accessor Name="set_BusReference(MathNet.Symbolics.Backend.Channels.CommandReference):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Execute():System.Void" Analyze="True" />
          <Member Name="GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext):System.Void" Analyze="True" />
          <Member Name="ReadXml(System.Xml.XmlReader):System.Void" Analyze="True" />
          <Member Name="WriteXml(System.Xml.XmlWriter):System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="AbstractCommand" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name=".ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" Analyze="True" />
          <Member Name="Action():System.Void" Analyze="True" />
          <Member Name="Execute():System.Void" Analyze="True" />
          <Member Name="GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext):System.Void" Analyze="True" />
          <Member Name="ReadXml(System.Xml.XmlReader):System.Void" Analyze="True" />
          <Member Name="WriteXml(System.Xml.XmlWriter):System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="AbstractNewCommand" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name=".ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" Analyze="True" />
          <Member Name="_ref" Analyze="True" />
          <Member Name="Action():MathNet.Symbolics.Backend.Channels.CommandReference" Analyze="True" />
          <Member Name="Execute():System.Void" Analyze="True" />
          <Member Name="GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext):System.Void" Analyze="True" />
          <Member Name="NewReference" Analyze="True">
           <Accessors>
            <Accessor Name="get_NewReference():MathNet.Symbolics.Backend.Channels.CommandReference" Analyze="True" />
            <Accessor Name="set_NewReference(MathNet.Symbolics.Backend.Channels.CommandReference):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ReadXml(System.Xml.XmlReader):System.Void" Analyze="True" />
          <Member Name="WriteXml(System.Xml.XmlWriter):System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="AbstractPortBusCommand" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name=".ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" Analyze="True" />
          <Member Name="_busRef" Analyze="True" />
          <Member Name="_portRef" Analyze="True" />
          <Member Name="Action(MathNet.Symbolics.Core.Port,MathNet.Symbolics.Core.Bus):System.Void" Analyze="True" />
          <Member Name="BusReference" Analyze="True">
           <Accessors>
            <Accessor Name="get_BusReference():MathNet.Symbolics.Backend.Channels.CommandReference" Analyze="True" />
            <Accessor Name="set_BusReference(MathNet.Symbolics.Backend.Channels.CommandReference):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Execute():System.Void" Analyze="True" />
          <Member Name="GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext):System.Void" Analyze="True" />
          <Member Name="PortReference" Analyze="True">
           <Accessors>
            <Accessor Name="get_PortReference():MathNet.Symbolics.Backend.Channels.CommandReference" Analyze="True" />
            <Accessor Name="set_PortReference(MathNet.Symbolics.Backend.Channels.CommandReference):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ReadXml(System.Xml.XmlReader):System.Void" Analyze="True" />
          <Member Name="WriteXml(System.Xml.XmlWriter):System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="AbstractPortBusIndexCommand" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name=".ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" Analyze="True" />
          <Member Name="_busRef" Analyze="True" />
          <Member Name="_index" Analyze="True" />
          <Member Name="_portRef" Analyze="True" />
          <Member Name="Action(MathNet.Symbolics.Core.Port,MathNet.Symbolics.Core.Bus,System.Int32):System.Void" Analyze="True" />
          <Member Name="BusReference" Analyze="True">
           <Accessors>
            <Accessor Name="get_BusReference():MathNet.Symbolics.Backend.Channels.CommandReference" Analyze="True" />
            <Accessor Name="set_BusReference(MathNet.Symbolics.Backend.Channels.CommandReference):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Execute():System.Void" Analyze="True" />
          <Member Name="GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext):System.Void" Analyze="True" />
          <Member Name="Index" Analyze="True">
           <Accessors>
            <Accessor Name="get_Index():System.Int32" Analyze="True" />
            <Accessor Name="set_Index(System.Int32):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="PortReference" Analyze="True">
           <Accessors>
            <Accessor Name="get_PortReference():MathNet.Symbolics.Backend.Channels.CommandReference" Analyze="True" />
            <Accessor Name="set_PortReference(MathNet.Symbolics.Backend.Channels.CommandReference):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ReadXml(System.Xml.XmlReader):System.Void" Analyze="True" />
          <Member Name="WriteXml(System.Xml.XmlWriter):System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="AbstractPortCommand" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name=".ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" Analyze="True" />
          <Member Name="_portRef" Analyze="True" />
          <Member Name="Action(MathNet.Symbolics.Core.Port):System.Void" Analyze="True" />
          <Member Name="Execute():System.Void" Analyze="True" />
          <Member Name="GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext):System.Void" Analyze="True" />
          <Member Name="PortReference" Analyze="True">
           <Accessors>
            <Accessor Name="get_PortReference():MathNet.Symbolics.Backend.Channels.CommandReference" Analyze="True" />
            <Accessor Name="set_PortReference(MathNet.Symbolics.Backend.Channels.CommandReference):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ReadXml(System.Xml.XmlReader):System.Void" Analyze="True" />
          <Member Name="WriteXml(System.Xml.XmlWriter):System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="AbstractPortIndexCommand" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name=".ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" Analyze="True" />
          <Member Name="_index" Analyze="True" />
          <Member Name="_portRef" Analyze="True" />
          <Member Name="Action(MathNet.Symbolics.Core.Port,System.Int32):System.Void" Analyze="True" />
          <Member Name="Execute():System.Void" Analyze="True" />
          <Member Name="GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext):System.Void" Analyze="True" />
          <Member Name="Index" Analyze="True">
           <Accessors>
            <Accessor Name="get_Index():System.Int32" Analyze="True" />
            <Accessor Name="set_Index(System.Int32):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="PortReference" Analyze="True">
           <Accessors>
            <Accessor Name="get_PortReference():MathNet.Symbolics.Backend.Channels.CommandReference" Analyze="True" />
            <Accessor Name="set_PortReference(MathNet.Symbolics.Backend.Channels.CommandReference):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ReadXml(System.Xml.XmlReader):System.Void" Analyze="True" />
          <Member Name="WriteXml(System.Xml.XmlWriter):System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="AbstractPortSignalCommand" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name=".ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" Analyze="True" />
          <Member Name="_portRef" Analyze="True" />
          <Member Name="_signalRef" Analyze="True" />
          <Member Name="Action(MathNet.Symbolics.Core.Port,MathNet.Symbolics.Core.Signal):System.Void" Analyze="True" />
          <Member Name="Execute():System.Void" Analyze="True" />
          <Member Name="GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext):System.Void" Analyze="True" />
          <Member Name="PortReference" Analyze="True">
           <Accessors>
            <Accessor Name="get_PortReference():MathNet.Symbolics.Backend.Channels.CommandReference" Analyze="True" />
            <Accessor Name="set_PortReference(MathNet.Symbolics.Backend.Channels.CommandReference):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ReadXml(System.Xml.XmlReader):System.Void" Analyze="True" />
          <Member Name="SignalReference" Analyze="True">
           <Accessors>
            <Accessor Name="get_SignalReference():MathNet.Symbolics.Backend.Channels.CommandReference" Analyze="True" />
            <Accessor Name="set_SignalReference(MathNet.Symbolics.Backend.Channels.CommandReference):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="WriteXml(System.Xml.XmlWriter):System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="AbstractPortSignalIndexCommand" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name=".ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" Analyze="True" />
          <Member Name="_index" Analyze="True" />
          <Member Name="_portRef" Analyze="True" />
          <Member Name="_signalRef" Analyze="True" />
          <Member Name="Action(MathNet.Symbolics.Core.Port,MathNet.Symbolics.Core.Signal,System.Int32):System.Void" Analyze="True" />
          <Member Name="Execute():System.Void" Analyze="True" />
          <Member Name="GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext):System.Void" Analyze="True" />
          <Member Name="Index" Analyze="True">
           <Accessors>
            <Accessor Name="get_Index():System.Int32" Analyze="True" />
            <Accessor Name="set_Index(System.Int32):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="PortReference" Analyze="True">
           <Accessors>
            <Accessor Name="get_PortReference():MathNet.Symbolics.Backend.Channels.CommandReference" Analyze="True" />
            <Accessor Name="set_PortReference(MathNet.Symbolics.Backend.Channels.CommandReference):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ReadXml(System.Xml.XmlReader):System.Void" Analyze="True" />
          <Member Name="SignalReference" Analyze="True">
           <Accessors>
            <Accessor Name="get_SignalReference():MathNet.Symbolics.Backend.Channels.CommandReference" Analyze="True" />
            <Accessor Name="set_SignalReference(MathNet.Symbolics.Backend.Channels.CommandReference):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="WriteXml(System.Xml.XmlWriter):System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="AbstractSignalCommand" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name=".ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" Analyze="True" />
          <Member Name="_signalRef" Analyze="True" />
          <Member Name="Action(MathNet.Symbolics.Core.Signal):System.Void" Analyze="True" />
          <Member Name="Execute():System.Void" Analyze="True" />
          <Member Name="GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext):System.Void" Analyze="True" />
          <Member Name="ReadXml(System.Xml.XmlReader):System.Void" Analyze="True" />
          <Member Name="SignalReference" Analyze="True">
           <Accessors>
            <Accessor Name="get_SignalReference():MathNet.Symbolics.Backend.Channels.CommandReference" Analyze="True" />
            <Accessor Name="set_SignalReference(MathNet.Symbolics.Backend.Channels.CommandReference):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="WriteXml(System.Xml.XmlWriter):System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="BusDrivePortCommand" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name=".ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" Analyze="True" />
          <Member Name="Action(MathNet.Symbolics.Core.Port,MathNet.Symbolics.Core.Bus,System.Int32):System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="BusUnrivePortCommand" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name=".ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" Analyze="True" />
          <Member Name="Action(MathNet.Symbolics.Core.Port,System.Int32):System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="CommandBase" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="_done" Analyze="True" />
          <Member Name="_system" Analyze="True" />
          <Member Name="BeginExecute():System.Boolean" Analyze="True" />
          <Member Name="Done" Analyze="True">
           <Accessors>
            <Accessor Name="get_Done():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Executed" Kind="Event" Analyze="True">
           <Accessors>
            <Accessor Name="add_Executed(System.EventHandler):System.Void" Analyze="True" />
            <Accessor Name="remove_Executed(System.EventHandler):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="EndExecute():System.Void" Analyze="True" />
          <Member Name="Executed" Analyze="True" />
          <Member Name="GetSchema():System.Xml.Schema.XmlSchema" Analyze="True" />
          <Member Name="GetVerifyBus(MathNet.Symbolics.Backend.Channels.CommandReference):MathNet.Symbolics.Core.Bus" Analyze="True" />
          <Member Name="GetVerifyPort(MathNet.Symbolics.Backend.Channels.CommandReference):MathNet.Symbolics.Core.Port" Analyze="True" />
          <Member Name="GetVerifySignal(MathNet.Symbolics.Backend.Channels.CommandReference):MathNet.Symbolics.Core.Signal" Analyze="True" />
          <Member Name="LazyVerify(System.Guid,System.Guid):System.Void" Analyze="True" />
          <Member Name="System" Analyze="True">
           <Accessors>
            <Accessor Name="get_System():MathNet.Symbolics.Workplace.MathSystem" Analyze="True" />
            <Accessor Name="set_System(MathNet.Symbolics.Workplace.MathSystem):System.Void" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="NewBusCommand" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name=".ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" Analyze="True" />
          <Member Name="Action():MathNet.Symbolics.Backend.Channels.CommandReference" Analyze="True" />
         </Members>
        </Type>
        <Type Name="NewPortCommand" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name=".ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" Analyze="True" />
          <Member Name="_busCnt" Analyze="True" />
          <Member Name="_entityId" Analyze="True" />
          <Member Name="_inputCnt" Analyze="True" />
          <Member Name="Action():MathNet.Symbolics.Backend.Channels.CommandReference" Analyze="True" />
          <Member Name="EntityId" Analyze="True">
           <Accessors>
            <Accessor Name="get_EntityId():MathNet.Symbolics.Core.MathIdentifier" Analyze="True" />
            <Accessor Name="set_EntityId(MathNet.Symbolics.Core.MathIdentifier):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext):System.Void" Analyze="True" />
          <Member Name="NumberOfBuses" Analyze="True">
           <Accessors>
            <Accessor Name="get_NumberOfBuses():System.Int32" Analyze="True" />
            <Accessor Name="set_NumberOfBuses(System.Int32):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="NumberOfInputs" Analyze="True">
           <Accessors>
            <Accessor Name="get_NumberOfInputs():System.Int32" Analyze="True" />
            <Accessor Name="set_NumberOfInputs(System.Int32):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ReadXml(System.Xml.XmlReader):System.Void" Analyze="True" />
          <Member Name="WriteXml(System.Xml.XmlWriter):System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="NewSignalCommand" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name=".ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" Analyze="True" />
          <Member Name="Action():MathNet.Symbolics.Backend.Channels.CommandReference" Analyze="True" />
         </Members>
        </Type>
        <Type Name="PortDriveSignalCommand" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name=".ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" Analyze="True" />
          <Member Name="Action(MathNet.Symbolics.Core.Port,MathNet.Symbolics.Core.Signal,System.Int32):System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="PortUndriveSignalCommand" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name=".ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" Analyze="True" />
          <Member Name="Action(MathNet.Symbolics.Core.Port,System.Int32):System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="RemoveBusCommand" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name=".ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" Analyze="True" />
          <Member Name="Action(MathNet.Symbolics.Core.Bus):System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="RemovePortCommand" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name=".ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" Analyze="True" />
          <Member Name="_isolate" Analyze="True" />
          <Member Name="Action(MathNet.Symbolics.Core.Port):System.Void" Analyze="True" />
          <Member Name="GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext):System.Void" Analyze="True" />
          <Member Name="Isolate" Analyze="True">
           <Accessors>
            <Accessor Name="get_Isolate():System.Boolean" Analyze="True" />
            <Accessor Name="set_Isolate(System.Boolean):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ReadXml(System.Xml.XmlReader):System.Void" Analyze="True" />
          <Member Name="WriteXml(System.Xml.XmlWriter):System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="RemoveSignalCommand" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name=".ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" Analyze="True" />
          <Member Name="_isolate" Analyze="True" />
          <Member Name="Action(MathNet.Symbolics.Core.Signal):System.Void" Analyze="True" />
          <Member Name="GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext):System.Void" Analyze="True" />
          <Member Name="Isolate" Analyze="True">
           <Accessors>
            <Accessor Name="get_Isolate():System.Boolean" Analyze="True" />
            <Accessor Name="set_Isolate(System.Boolean):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ReadXml(System.Xml.XmlReader):System.Void" Analyze="True" />
          <Member Name="WriteXml(System.Xml.XmlWriter):System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="SignalDrivePortCommand" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name=".ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" Analyze="True" />
          <Member Name="Action(MathNet.Symbolics.Core.Port,MathNet.Symbolics.Core.Signal,System.Int32):System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="SignalUnrivePortCommand" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name=".ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" Analyze="True" />
          <Member Name="Action(MathNet.Symbolics.Core.Port,System.Int32):System.Void" Analyze="True" />
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="MathNet.Symbolics.Backend.Containers" Analyze="True">
       <Types>
        <Type Name="ArchitectureTable" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="_table" Analyze="True" />
          <Member Name="AddArchitectureBuilder(MathNet.Symbolics.Core.Entity,MathNet.Symbolics.Core.IArchitectureFactory):System.Void" Analyze="True" />
          <Member Name="AddArchitectureBuilder(MathNet.Symbolics.Core.IArchitectureFactory):System.Void" Analyze="True" />
          <Member Name="AddArchitectureBuilder(MathNet.Symbolics.Core.MathIdentifier,MathNet.Symbolics.Core.IArchitectureFactory):System.Void" Analyze="True" />
          <Member Name="AddEntity(MathNet.Symbolics.Core.MathIdentifier):System.Collections.Generic.List`1&lt;MathNet.Symbolics.Core.IArchitectureFactory&gt;" Analyze="True" />
          <Member Name="ContainsEntity(MathNet.Symbolics.Core.Entity):System.Boolean" Analyze="True" />
          <Member Name="ContainsEntity(MathNet.Symbolics.Core.MathIdentifier):System.Boolean" Analyze="True" />
          <Member Name="LookupEntity(MathNet.Symbolics.Core.Entity):System.Collections.ObjectModel.ReadOnlyCollection`1&lt;MathNet.Symbolics.Core.IArchitectureFactory&gt;" Analyze="True" />
          <Member Name="LookupEntity(MathNet.Symbolics.Core.MathIdentifier):System.Collections.ObjectModel.ReadOnlyCollection`1&lt;MathNet.Symbolics.Core.IArchitectureFactory&gt;" Analyze="True" />
         </Members>
        </Type>
        <Type Name="BusSet" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name=".ctor(MathNet.Symbolics.Core.Bus[])" Analyze="True" />
          <Member Name=".ctor(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Core.Bus&gt;)" Analyze="True" />
          <Member Name=".ctor(System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Core.Bus&gt;)" Analyze="True" />
          <Member Name=".ctor(System.Int32)" Analyze="True" />
          <Member Name="AsReadOnly" Analyze="True">
           <Accessors>
            <Accessor Name="get_AsReadOnly():MathNet.Symbolics.Backend.Containers.ReadOnlyBusSet" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ConvertAllFromInstanceIds(MathNet.Symbolics.Backend.Containers.InstanceIdSet,System.Converter`2&lt;System.Guid,MathNet.Symbolics.Core.Bus&gt;):MathNet.Symbolics.Backend.Containers.BusSet" Analyze="True" />
          <Member Name="ConvertAllToInstanceIds():MathNet.Symbolics.Backend.Containers.InstanceIdSet" Analyze="True" />
          <Member Name="ConvertAllToInstanceIds(System.Converter`2&lt;MathNet.Symbolics.Core.Bus,System.Guid&gt;):MathNet.Symbolics.Backend.Containers.InstanceIdSet" Analyze="True" />
          <Member Name="ConvertFrom(MathNet.Numerics.Set`1&lt;MathNet.Symbolics.Core.Bus&gt;):MathNet.Symbolics.Backend.Containers.BusSet" Analyze="True" />
          <Member Name="CreateNewReadOnlyWrapper(System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Core.Bus&gt;):MathNet.Numerics.ReadOnlySet`1&lt;MathNet.Symbolics.Core.Bus&gt;" Analyze="True" />
          <Member Name="CreateNewSet():MathNet.Numerics.Set`1&lt;MathNet.Symbolics.Core.Bus&gt;" Analyze="True" />
         </Members>
        </Type>
        <Type Name="EntityTable" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="_symbolTable" Analyze="True" />
          <Member Name="Add(MathNet.Symbolics.Core.Entity):System.Void" Analyze="True" />
          <Member Name="Add(MathNet.Symbolics.Core.MathIdentifier,MathNet.Symbolics.Core.Entity):System.Void" Analyze="True" />
          <Member Name="AddSymbol(System.String):System.Collections.Generic.List`1&lt;MathNet.Symbolics.Core.Entity&gt;" Analyze="True" />
          <Member Name="ContainsSymbol(System.String):System.Boolean" Analyze="True" />
          <Member Name="ContainsSymbol(System.String,MathNet.Symbolics.Core.InfixNotation):System.Boolean" Analyze="True" />
          <Member Name="LookupSymbol(System.String):System.Collections.ObjectModel.ReadOnlyCollection`1&lt;MathNet.Symbolics.Core.Entity&gt;" Analyze="True" />
          <Member Name="LookupSymbol(System.String,MathNet.Symbolics.Core.InfixNotation):System.Collections.ObjectModel.ReadOnlyCollection`1&lt;MathNet.Symbolics.Core.Entity&gt;" Analyze="True" />
          <Member Name="Remove(MathNet.Symbolics.Core.Entity):System.Void" Analyze="True" />
          <Member Name="Remove(MathNet.Symbolics.Core.MathIdentifier):System.Void" Analyze="True" />
          <Member Name="TryLookupSymbol(System.String,MathNet.Symbolics.Core.InfixNotation,System.Collections.ObjectModel.ReadOnlyCollection`1&lt;MathNet.Symbolics.Core.Entity&gt;&amp;):System.Boolean" Analyze="True" />
         </Members>
        </Type>
        <Type Name="EntityTable+&lt;&gt;c__DisplayClass8" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="&lt;ContainsSymbol&gt;b__7(MathNet.Symbolics.Core.Entity):System.Boolean" Analyze="True" />
          <Member Name="notation" Analyze="True" />
         </Members>
        </Type>
        <Type Name="EntityTable+&lt;&gt;c__DisplayClassb" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="&lt;LookupSymbol&gt;b__a(MathNet.Symbolics.Core.Entity):System.Boolean" Analyze="True" />
          <Member Name="notation" Analyze="True" />
         </Members>
        </Type>
        <Type Name="EntityTable+&lt;&gt;c__DisplayClasse" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="&lt;TryLookupSymbol&gt;b__d(MathNet.Symbolics.Core.Entity):System.Boolean" Analyze="True" />
          <Member Name="notation" Analyze="True" />
         </Members>
        </Type>
        <Type Name="IdentifierDictionary`1" Analyze="True">
         <Members>
          <Member Name=".ctor(System.Int32,System.Int32)" Analyze="True" />
          <Member Name="_labelCapacity" Analyze="True" />
          <Member Name="Add(MathNet.Symbolics.Core.MathIdentifier,T):System.Void" Analyze="True" />
          <Member Name="ContainsId(MathNet.Symbolics.Core.MathIdentifier):System.Boolean" Analyze="True" />
          <Member Name="FindDomainOfLabel(System.String):System.String" Analyze="True" />
          <Member Name="FindValue(System.Predicate`1&lt;T&gt;):T" Analyze="True" />
          <Member Name="GetValue(MathNet.Symbolics.Core.MathIdentifier):T" Analyze="True" />
          <Member Name="Remove(MathNet.Symbolics.Core.MathIdentifier):System.Void" Analyze="True" />
          <Member Name="SelectAll():System.Collections.Generic.IEnumerable`1&lt;T&gt;" Analyze="True" />
          <Member Name="System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator():System.Collections.Generic.IEnumerator`1&lt;T&gt;" Analyze="True" />
          <Member Name="TryFindDomainOfLabel(System.String,System.String&amp;):System.Boolean" Analyze="True" />
          <Member Name="TryFindValue(System.Predicate`1&lt;T&gt;,T&amp;):System.Boolean" Analyze="True" />
          <Member Name="TryGetValue(MathNet.Symbolics.Core.MathIdentifier,T&amp;):System.Boolean" Analyze="True" />
          <Member Name="TryGetValue(MathNet.Symbolics.Core.MathIdentifier,TSub&amp;):System.Boolean" Analyze="True" />
         </Members>
        </Type>
        <Type Name="IdentifierDictionary`1+&lt;SelectAll&gt;d__0" Analyze="True">
         <Members>
          <Member Name=".ctor(System.Int32)" Analyze="True" />
          <Member Name="&lt;&gt;1__state" Analyze="True" />
          <Member Name="&lt;&gt;2__current" Analyze="True" />
          <Member Name="&lt;&gt;4__this" Analyze="True" />
          <Member Name="&lt;&gt;7__wrap3" Analyze="True" />
          <Member Name="&lt;&gt;7__wrap4" Analyze="True" />
          <Member Name="&lt;inner&gt;5__1" Analyze="True" />
          <Member Name="&lt;value&gt;5__2" Analyze="True" />
          <Member Name="MoveNext():System.Boolean" Analyze="True" />
          <Member Name="System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator():System.Collections.Generic.IEnumerator`1&lt;T&gt;" Analyze="True" />
          <Member Name="System.Collections.Generic.IEnumerator&lt;T&gt;.Current" Analyze="True">
           <Accessors>
            <Accessor Name="System.Collections.Generic.IEnumerator&lt;T&gt;.get_Current():T" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="System.Collections.IEnumerable.GetEnumerator():System.Collections.IEnumerator" Analyze="True" />
          <Member Name="System.Collections.IEnumerator.Current" Analyze="True">
           <Accessors>
            <Accessor Name="System.Collections.IEnumerator.get_Current():System.Object" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="System.Collections.IEnumerator.Reset():System.Void" Analyze="True" />
          <Member Name="System.IDisposable.Dispose():System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="InstanceIdSet" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name=".ctor(System.Collections.Generic.IEnumerable`1&lt;System.Guid&gt;)" Analyze="True" />
          <Member Name=".ctor(System.Collections.Generic.IList`1&lt;System.Guid&gt;)" Analyze="True" />
          <Member Name=".ctor(System.Guid[])" Analyze="True" />
          <Member Name=".ctor(System.Int32)" Analyze="True" />
          <Member Name="AsReadOnly" Analyze="True">
           <Accessors>
            <Accessor Name="get_AsReadOnly():MathNet.Symbolics.Backend.Containers.ReadOnlyInstanceIdSet" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ConvertFrom(MathNet.Numerics.Set`1&lt;System.Guid&gt;):MathNet.Symbolics.Backend.Containers.InstanceIdSet" Analyze="True" />
          <Member Name="CreateNewReadOnlyWrapper(System.Collections.Generic.IList`1&lt;System.Guid&gt;):MathNet.Numerics.ReadOnlySet`1&lt;System.Guid&gt;" Analyze="True" />
          <Member Name="CreateNewSet():MathNet.Numerics.Set`1&lt;System.Guid&gt;" Analyze="True" />
         </Members>
        </Type>
        <Type Name="ISignalSet" Analyze="True">
         <Members>
          <Member Name="PostNewValues(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Core.ValueStructure&gt;):System.Void" Analyze="True" />
          <Member Name="PostNewValues(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Core.ValueStructure&gt;,System.Collections.Generic.IEnumerable`1&lt;System.TimeSpan&gt;):System.Void" Analyze="True" />
          <Member Name="PostNewValues(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Core.ValueStructure&gt;,System.TimeSpan):System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="PortSet" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name=".ctor(MathNet.Symbolics.Core.Port[])" Analyze="True" />
          <Member Name=".ctor(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Core.Port&gt;)" Analyze="True" />
          <Member Name=".ctor(System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Core.Port&gt;)" Analyze="True" />
          <Member Name=".ctor(System.Int32)" Analyze="True" />
          <Member Name="AsReadOnly" Analyze="True">
           <Accessors>
            <Accessor Name="get_AsReadOnly():MathNet.Symbolics.Backend.Containers.ReadOnlyPortSet" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ConvertAllFromInstanceIds(MathNet.Symbolics.Backend.Containers.InstanceIdSet,System.Converter`2&lt;System.Guid,MathNet.Symbolics.Core.Port&gt;):MathNet.Symbolics.Backend.Containers.PortSet" Analyze="True" />
          <Member Name="ConvertAllToInstanceIds():MathNet.Symbolics.Backend.Containers.InstanceIdSet" Analyze="True" />
          <Member Name="ConvertAllToInstanceIds(System.Converter`2&lt;MathNet.Symbolics.Core.Port,System.Guid&gt;):MathNet.Symbolics.Backend.Containers.InstanceIdSet" Analyze="True" />
          <Member Name="ConvertFrom(MathNet.Numerics.Set`1&lt;MathNet.Symbolics.Core.Port&gt;):MathNet.Symbolics.Backend.Containers.PortSet" Analyze="True" />
          <Member Name="CreateNewReadOnlyWrapper(System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Core.Port&gt;):MathNet.Numerics.ReadOnlySet`1&lt;MathNet.Symbolics.Core.Port&gt;" Analyze="True" />
          <Member Name="CreateNewSet():MathNet.Numerics.Set`1&lt;MathNet.Symbolics.Core.Port&gt;" Analyze="True" />
         </Members>
        </Type>
        <Type Name="PropertyProviderTable" Analyze="True">
         <Members>
          <Member Name=".ctor(MathNet.Symbolics.Core.MathIdentifier)" Analyze="True" />
          <Member Name="_propertyTypeId" Analyze="True" />
          <Member Name="_table" Analyze="True" />
          <Member Name="AddTheorem(MathNet.Symbolics.Backend.Theorems.IPropagationTheorem):System.Void" Analyze="True" />
          <Member Name="ContainsTheorem(MathNet.Symbolics.Backend.Theorems.IPropagationTheorem):System.Boolean" Analyze="True" />
          <Member Name="PropagatePropertyIfApplicable(MathNet.Symbolics.Core.Signal):System.Boolean" Analyze="True" />
          <Member Name="ProvidedPropertyId" Analyze="True">
           <Accessors>
            <Accessor Name="get_ProvidedPropertyId():MathNet.Symbolics.Core.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="System.Collections.Generic.IEnumerable&lt;MathNet.Symbolics.Backend.Theorems.IPropagationTheorem&gt;.GetEnumerator():System.Collections.Generic.IEnumerator`1&lt;MathNet.Symbolics.Backend.Theorems.IPropagationTheorem&gt;" Analyze="True" />
          <Member Name="System.Collections.IEnumerable.GetEnumerator():System.Collections.IEnumerator" Analyze="True" />
          <Member Name="UpdateProperty(MathNet.Symbolics.Core.Signal):System.Boolean" Analyze="True" />
          <Member Name="WouldBePropagatedTo(MathNet.Symbolics.Core.Signal):System.Boolean" Analyze="True" />
         </Members>
        </Type>
        <Type Name="ReadOnlyBusSet" Analyze="True">
         <Members>
          <Member Name=".ctor(System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Core.Bus&gt;)" Analyze="True" />
          <Member Name="CreateNewSet():MathNet.Numerics.Set`1&lt;MathNet.Symbolics.Core.Bus&gt;" Analyze="True" />
         </Members>
        </Type>
        <Type Name="ReadOnlyInstanceIdSet" Analyze="True">
         <Members>
          <Member Name=".ctor(System.Collections.Generic.IList`1&lt;System.Guid&gt;)" Analyze="True" />
          <Member Name="CreateNewSet():MathNet.Numerics.Set`1&lt;System.Guid&gt;" Analyze="True" />
         </Members>
        </Type>
        <Type Name="ReadOnlyPortSet" Analyze="True">
         <Members>
          <Member Name=".ctor(System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Core.Port&gt;)" Analyze="True" />
          <Member Name="CreateNewSet():MathNet.Numerics.Set`1&lt;MathNet.Symbolics.Core.Port&gt;" Analyze="True" />
         </Members>
        </Type>
        <Type Name="ReadOnlySignalSet" Analyze="True">
         <Members>
          <Member Name=".ctor(System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Core.Signal&gt;)" Analyze="True" />
          <Member Name="CreateNewSet():MathNet.Numerics.Set`1&lt;MathNet.Symbolics.Core.Signal&gt;" Analyze="True" />
          <Member Name="PostNewValues(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Core.ValueStructure&gt;):System.Void" Analyze="True" />
          <Member Name="PostNewValues(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Core.ValueStructure&gt;,System.Collections.Generic.IEnumerable`1&lt;System.TimeSpan&gt;):System.Void" Analyze="True" />
          <Member Name="PostNewValues(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Core.ValueStructure&gt;,System.TimeSpan):System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="SignalSet" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name=".ctor(MathNet.Symbolics.Core.Signal[])" Analyze="True" />
          <Member Name=".ctor(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Core.Signal&gt;)" Analyze="True" />
          <Member Name=".ctor(System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Core.Signal&gt;)" Analyze="True" />
          <Member Name=".ctor(System.Int32)" Analyze="True" />
          <Member Name="AsReadOnly" Analyze="True">
           <Accessors>
            <Accessor Name="get_AsReadOnly():MathNet.Symbolics.Backend.Containers.ReadOnlySignalSet" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ConvertAllFromInstanceIds(MathNet.Symbolics.Backend.Containers.InstanceIdSet,System.Converter`2&lt;System.Guid,MathNet.Symbolics.Core.Signal&gt;):MathNet.Symbolics.Backend.Containers.SignalSet" Analyze="True" />
          <Member Name="ConvertAllToInstanceIds():MathNet.Symbolics.Backend.Containers.InstanceIdSet" Analyze="True" />
          <Member Name="ConvertAllToInstanceIds(System.Converter`2&lt;MathNet.Symbolics.Core.Signal,System.Guid&gt;):MathNet.Symbolics.Backend.Containers.InstanceIdSet" Analyze="True" />
          <Member Name="ConvertFrom(MathNet.Numerics.Set`1&lt;MathNet.Symbolics.Core.Signal&gt;):MathNet.Symbolics.Backend.Containers.SignalSet" Analyze="True" />
          <Member Name="CreateNewReadOnlyWrapper(System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Core.Signal&gt;):MathNet.Numerics.ReadOnlySet`1&lt;MathNet.Symbolics.Core.Signal&gt;" Analyze="True" />
          <Member Name="CreateNewSet():MathNet.Numerics.Set`1&lt;MathNet.Symbolics.Core.Signal&gt;" Analyze="True" />
          <Member Name="PostNewValues(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Core.ValueStructure&gt;):System.Void" Analyze="True" />
          <Member Name="PostNewValues(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Core.ValueStructure&gt;,System.Collections.Generic.IEnumerable`1&lt;System.TimeSpan&gt;):System.Void" Analyze="True" />
          <Member Name="PostNewValues(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Core.ValueStructure&gt;,System.TimeSpan):System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="SignalTable" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
         </Members>
        </Type>
        <Type Name="TheoremTable" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="_properties" Analyze="True" />
          <Member Name="_theorems" Analyze="True" />
          <Member Name="_transformationTheorems" Analyze="True" />
          <Member Name="AddPropagationTheorem(MathNet.Symbolics.Backend.Theorems.IPropagationTheorem):System.Void" Analyze="True" />
          <Member Name="AddPropagationTheorem(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Backend.Theorems.IPropagationTheorem&gt;):System.Void" Analyze="True" />
          <Member Name="AddPropertyProvider(MathNet.Symbolics.Core.MathIdentifier):MathNet.Symbolics.Backend.Containers.PropertyProviderTable" Analyze="True" />
          <Member Name="AddTheorem(MathNet.Symbolics.Backend.Theorems.ITheorem):System.Void" Analyze="True" />
          <Member Name="AddTheorem(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Backend.Theorems.ITheorem&gt;):System.Void" Analyze="True" />
          <Member Name="AddTransformationTheorem(MathNet.Symbolics.Backend.Theorems.ITransformationTheorem):System.Void" Analyze="True" />
          <Member Name="AddTransformationTheorem(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Backend.Theorems.ITransformationTheorem&gt;):System.Void" Analyze="True" />
          <Member Name="AddTransformationType(MathNet.Symbolics.Core.MathIdentifier):MathNet.Symbolics.Backend.Containers.TransformationTheoremTypeTable" Analyze="True" />
          <Member Name="ContainsPropertyProvider(MathNet.Symbolics.Core.MathIdentifier):System.Boolean" Analyze="True" />
          <Member Name="ContainsTheorem(MathNet.Symbolics.Core.MathIdentifier):System.Boolean" Analyze="True" />
          <Member Name="ContainsTransformationType(MathNet.Symbolics.Core.MathIdentifier):System.Boolean" Analyze="True" />
          <Member Name="LookupPropertyProvider(MathNet.Symbolics.Core.MathIdentifier):MathNet.Symbolics.Backend.Containers.PropertyProviderTable" Analyze="True" />
          <Member Name="LookupTheorem(MathNet.Symbolics.Core.MathIdentifier):MathNet.Symbolics.Backend.Theorems.ITheorem" Analyze="True" />
          <Member Name="LookupTransformationType(MathNet.Symbolics.Core.MathIdentifier):MathNet.Symbolics.Backend.Containers.TransformationTheoremTypeTable" Analyze="True" />
          <Member Name="TryLookupPropertyProvider(MathNet.Symbolics.Core.MathIdentifier,MathNet.Symbolics.Backend.Containers.PropertyProviderTable&amp;):System.Boolean" Analyze="True" />
          <Member Name="TryLookupTheorem(MathNet.Symbolics.Core.MathIdentifier,MathNet.Symbolics.Backend.Theorems.ITheorem&amp;):System.Boolean" Analyze="True" />
          <Member Name="TryLookupTheorem(MathNet.Symbolics.Core.MathIdentifier,T&amp;):System.Boolean" Analyze="True" />
          <Member Name="TryLookupTransformationType(MathNet.Symbolics.Core.MathIdentifier,MathNet.Symbolics.Backend.Containers.TransformationTheoremTypeTable&amp;):System.Boolean" Analyze="True" />
         </Members>
        </Type>
        <Type Name="TransformationTheoremTypeTable" Analyze="True">
         <Members>
          <Member Name=".ctor(MathNet.Symbolics.Core.MathIdentifier)" Analyze="True" />
          <Member Name="_default" Analyze="True" />
          <Member Name="_root" Analyze="True" />
          <Member Name="_theorems" Analyze="True" />
          <Member Name="_transformationTypeId" Analyze="True" />
          <Member Name="_tree" Analyze="True" />
          <Member Name="AddTheorem(MathNet.Symbolics.Backend.Theorems.ITransformationTheorem):System.Void" Analyze="True" />
          <Member Name="ContainsTheorem(MathNet.Symbolics.Backend.Theorems.ITransformationTheorem):System.Boolean" Analyze="True" />
          <Member Name="ContainsTheorem(MathNet.Symbolics.Core.MathIdentifier):System.Boolean" Analyze="True" />
          <Member Name="Default" Analyze="True">
           <Accessors>
            <Accessor Name="get_Default():MathNet.Symbolics.Backend.Theorems.ITransformationTheorem" Analyze="True" />
            <Accessor Name="set_Default(MathNet.Symbolics.Backend.Theorems.ITransformationTheorem):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Item[MathNet.Symbolics.Core.MathIdentifier]" Analyze="True">
           <Accessors>
            <Accessor Name="get_Item(MathNet.Symbolics.Core.MathIdentifier):MathNet.Symbolics.Backend.Theorems.ITransformationTheorem" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="LookupBest(MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Port,MathNet.Symbolics.Backend.Patterns.GroupCollection&amp;):MathNet.Symbolics.Backend.Theorems.ITransformationTheorem" Analyze="True" />
          <Member Name="LookupFirst(MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Port,MathNet.Symbolics.Backend.Patterns.GroupCollection&amp;):MathNet.Symbolics.Backend.Theorems.ITransformationTheorem" Analyze="True" />
          <Member Name="MatchAll(MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Port):MathNet.Symbolics.Backend.Patterns.MatchCollection" Analyze="True" />
          <Member Name="MatchBest(MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Port):MathNet.Symbolics.Backend.Patterns.Match" Analyze="True" />
          <Member Name="MatchFirst(MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Port):MathNet.Symbolics.Backend.Patterns.Match" Analyze="True" />
          <Member Name="Root" Analyze="True">
           <Accessors>
            <Accessor Name="get_Root():MathNet.Symbolics.Backend.Patterns.CoalescedTreeNode" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="TransformationTypeId" Analyze="True">
           <Accessors>
            <Accessor Name="get_TransformationTypeId():MathNet.Symbolics.Core.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="TryGetValue(MathNet.Symbolics.Core.MathIdentifier,MathNet.Symbolics.Backend.Theorems.ITransformationTheorem&amp;):System.Boolean" Analyze="True" />
          <Member Name="TryLookupBest(MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Port,MathNet.Symbolics.Backend.Theorems.ITransformationTheorem&amp;,MathNet.Symbolics.Backend.Patterns.GroupCollection&amp;):System.Boolean" Analyze="True" />
          <Member Name="TryLookupFirst(MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Port,MathNet.Symbolics.Backend.Theorems.ITransformationTheorem&amp;,MathNet.Symbolics.Backend.Patterns.GroupCollection&amp;):System.Boolean" Analyze="True" />
          <Member Name="TryMatchBest(MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Port,MathNet.Symbolics.Backend.Patterns.Match&amp;):System.Boolean" Analyze="True" />
          <Member Name="TryMatchFirst(MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Port,MathNet.Symbolics.Backend.Patterns.Match&amp;):System.Boolean" Analyze="True" />
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="MathNet.Symbolics.Backend.Discovery" Analyze="True">
       <Types>
        <Type Name="ArchitectureServerAttribute" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
         </Members>
        </Type>
        <Type Name="EntityImplementationAttribute" Analyze="True">
         <Members>
          <Member Name=".ctor(MathNet.Symbolics.Core.MathIdentifier)" Analyze="True" />
          <Member Name=".ctor(System.String,System.String)" Analyze="True" />
          <Member Name="_entityId" Analyze="True" />
          <Member Name="EntityId" Analyze="True">
           <Accessors>
            <Accessor Name="get_EntityId():MathNet.Symbolics.Core.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="EntityServerAttribute" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
         </Members>
        </Type>
        <Type Name="IArchitectureServer" Analyze="True">
         <Members>
          <Member Name="AppendArchitectures(MathNet.Symbolics.Backend.Containers.ArchitectureTable):System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="IEntityServer" Analyze="True">
         <Members>
          <Member Name="AppendEntities(MathNet.Symbolics.Backend.Containers.EntityTable):System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="IPackageManager" Analyze="True">
         <Members>
          <Member Name="Architectures" Analyze="True">
           <Accessors>
            <Accessor Name="get_Architectures():MathNet.Symbolics.Backend.Discovery.IArchitectureServer" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Domain" Analyze="True">
           <Accessors>
            <Accessor Name="get_Domain():System.String" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Entities" Analyze="True">
           <Accessors>
            <Accessor Name="get_Entities():MathNet.Symbolics.Backend.Discovery.IEntityServer" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Structures" Analyze="True">
           <Accessors>
            <Accessor Name="get_Structures():MathNet.Symbolics.Backend.Discovery.IStructureServer" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Theorems" Analyze="True">
           <Accessors>
            <Accessor Name="get_Theorems():MathNet.Symbolics.Backend.Discovery.ITheoremServer" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="IStructureServer" Analyze="True">
         <Members>
          <Member Name="AppendStructures(MathNet.Symbolics.Backend.ValueConversion.StructureTable):System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="ITheoremServer" Analyze="True">
         <Members>
          <Member Name="AppendTheorems(MathNet.Symbolics.Backend.Containers.TheoremTable):System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="PackageManagerAttribute" Analyze="True">
         <Members>
          <Member Name=".ctor(System.String)" Analyze="True" />
          <Member Name="domain" Analyze="True" />
          <Member Name="Domain" Analyze="True">
           <Accessors>
            <Accessor Name="get_Domain():System.String" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="StructureServerAttribute" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
         </Members>
        </Type>
        <Type Name="TheoremServerAttribute" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="MathNet.Symbolics.Backend.Events" Analyze="True">
       <Types>
        <Type Name="BusEventArgs" Analyze="True">
         <Members>
          <Member Name=".ctor(MathNet.Symbolics.Core.Bus)" Analyze="True" />
          <Member Name="bus" Analyze="True" />
          <Member Name="Bus" Analyze="True">
           <Accessors>
            <Accessor Name="get_Bus():MathNet.Symbolics.Core.Bus" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="BusPortIndexEventArgs" Analyze="True">
         <Members>
          <Member Name=".ctor(MathNet.Symbolics.Core.Bus,MathNet.Symbolics.Core.Port,System.Int32)" Analyze="True" />
          <Member Name="bus" Analyze="True" />
          <Member Name="Bus" Analyze="True">
           <Accessors>
            <Accessor Name="get_Bus():MathNet.Symbolics.Core.Bus" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="index" Analyze="True" />
          <Member Name="Index" Analyze="True">
           <Accessors>
            <Accessor Name="get_Index():System.Int32" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="port" Analyze="True" />
          <Member Name="Port" Analyze="True">
           <Accessors>
            <Accessor Name="get_Port():MathNet.Symbolics.Core.Port" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="IndexedSignalEventArgs" Analyze="True">
         <Members>
          <Member Name=".ctor(MathNet.Symbolics.Core.Signal,System.Int32)" Analyze="True" />
          <Member Name="index" Analyze="True" />
          <Member Name="Index" Analyze="True">
           <Accessors>
            <Accessor Name="get_Index():System.Int32" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="signal" Analyze="True" />
          <Member Name="Signal" Analyze="True">
           <Accessors>
            <Accessor Name="get_Signal():MathNet.Symbolics.Core.Signal" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="PortEventArgs" Analyze="True">
         <Members>
          <Member Name=".ctor(MathNet.Symbolics.Core.Port)" Analyze="True" />
          <Member Name="port" Analyze="True" />
          <Member Name="Port" Analyze="True">
           <Accessors>
            <Accessor Name="get_Port():MathNet.Symbolics.Core.Port" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="SignalEventArgs" Analyze="True">
         <Members>
          <Member Name=".ctor(MathNet.Symbolics.Core.Signal)" Analyze="True" />
          <Member Name="signal" Analyze="True" />
          <Member Name="Signal" Analyze="True">
           <Accessors>
            <Accessor Name="get_Signal():MathNet.Symbolics.Core.Signal" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="SignalPortEventArgs" Analyze="True">
         <Members>
          <Member Name=".ctor(MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Port)" Analyze="True" />
          <Member Name="port" Analyze="True" />
          <Member Name="Port" Analyze="True">
           <Accessors>
            <Accessor Name="get_Port():MathNet.Symbolics.Core.Port" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="signal" Analyze="True" />
          <Member Name="Signal" Analyze="True">
           <Accessors>
            <Accessor Name="get_Signal():MathNet.Symbolics.Core.Signal" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="SignalPortIndexEventArgs" Analyze="True">
         <Members>
          <Member Name=".ctor(MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Port,System.Int32)" Analyze="True" />
          <Member Name="index" Analyze="True" />
          <Member Name="Index" Analyze="True">
           <Accessors>
            <Accessor Name="get_Index():System.Int32" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="port" Analyze="True" />
          <Member Name="Port" Analyze="True">
           <Accessors>
            <Accessor Name="get_Port():MathNet.Symbolics.Core.Port" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="signal" Analyze="True" />
          <Member Name="Signal" Analyze="True">
           <Accessors>
            <Accessor Name="get_Signal():MathNet.Symbolics.Core.Signal" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="SimulationTimeEventArgs" Analyze="True">
         <Members>
          <Member Name=".ctor(System.TimeSpan)" Analyze="True" />
          <Member Name="_timeSpan" Analyze="True" />
          <Member Name="TimeSpan" Analyze="True">
           <Accessors>
            <Accessor Name="get_TimeSpan():System.TimeSpan" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="MathNet.Symbolics.Backend.Exceptions" Analyze="True">
       <Types>
        <Type Name="ArchitectureNotAvailableException" Analyze="True">
         <Members>
          <Member Name=".ctor(MathNet.Symbolics.Core.Port)" Analyze="True" />
          <Member Name=".ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" Analyze="True" />
          <Member Name="GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext):System.Void" Analyze="True" />
          <Member Name="port" Analyze="True" />
          <Member Name="Port" Analyze="True">
           <Accessors>
            <Accessor Name="get_Port():MathNet.Symbolics.Core.Port" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="CommandException" Analyze="True">
         <Members>
          <Member Name=".ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" Analyze="True" />
          <Member Name=".ctor(System.String)" Analyze="True" />
         </Members>
        </Type>
        <Type Name="CyclicSignalsNotSupportedException" Analyze="True">
         <Members>
          <Member Name=".ctor(MathNet.Symbolics.Core.Signal,System.String)" Analyze="True" />
          <Member Name=".ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" Analyze="True" />
          <Member Name="GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext):System.Void" Analyze="True" />
          <Member Name="signal" Analyze="True" />
          <Member Name="Signal" Analyze="True">
           <Accessors>
            <Accessor Name="get_Signal():MathNet.Symbolics.Core.Signal" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="DeserializationException" Analyze="True">
         <Members>
          <Member Name=".ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" Analyze="True" />
          <Member Name=".ctor(System.String)" Analyze="True" />
         </Members>
        </Type>
        <Type Name="DomainNotAvailableException" Analyze="True">
         <Members>
          <Member Name=".ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" Analyze="True" />
          <Member Name=".ctor(System.String)" Analyze="True" />
          <Member Name="domain" Analyze="True" />
          <Member Name="Domain" Analyze="True">
           <Accessors>
            <Accessor Name="get_Domain():System.String" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext):System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="EntityNotAvailableException" Analyze="True">
         <Members>
          <Member Name=".ctor(MathNet.Symbolics.Core.Entity)" Analyze="True" />
          <Member Name=".ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" Analyze="True" />
          <Member Name="entity" Analyze="True" />
          <Member Name="Entity" Analyze="True">
           <Accessors>
            <Accessor Name="get_Entity():MathNet.Symbolics.Core.Entity" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext):System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="EntitySignalCountUnexpectedException" Analyze="True">
         <Members>
          <Member Name=".ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" Analyze="True" />
          <Member Name=".ctor(System.String,System.String)" Analyze="True" />
         </Members>
        </Type>
        <Type Name="EntitySignalMismatchException" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name=".ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" Analyze="True" />
         </Members>
        </Type>
        <Type Name="GenericEntityPortNotInstantiableException" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name=".ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" Analyze="True" />
         </Members>
        </Type>
        <Type Name="IncompatibleStructureException" Analyze="True">
         <Members>
          <Member Name=".ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" Analyze="True" />
          <Member Name=".ctor(System.String,System.String)" Analyze="True" />
          <Member Name="domain" Analyze="True" />
          <Member Name="Domain" Analyze="True">
           <Accessors>
            <Accessor Name="get_Domain():System.String" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext):System.Void" Analyze="True" />
          <Member Name="label" Analyze="True" />
          <Member Name="Label" Analyze="True">
           <Accessors>
            <Accessor Name="get_Label():System.String" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="LabelNotAvailableException" Analyze="True">
         <Members>
          <Member Name=".ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" Analyze="True" />
          <Member Name=".ctor(System.String,System.String)" Analyze="True" />
          <Member Name="domain" Analyze="True" />
          <Member Name="Domain" Analyze="True">
           <Accessors>
            <Accessor Name="get_Domain():System.String" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext):System.Void" Analyze="True" />
          <Member Name="label" Analyze="True" />
          <Member Name="Label" Analyze="True">
           <Accessors>
            <Accessor Name="get_Label():System.String" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="MathNetSymbolicsException" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name=".ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" Analyze="True" />
          <Member Name=".ctor(System.String)" Analyze="True" />
          <Member Name=".ctor(System.String,System.Exception)" Analyze="True" />
         </Members>
        </Type>
        <Type Name="MutualExclusiveStrategyAlreadyActiveException" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name=".ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" Analyze="True" />
         </Members>
        </Type>
        <Type Name="NotFoundException" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name=".ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" Analyze="True" />
          <Member Name="GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext):System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="ParsingException" Analyze="True">
         <Members>
          <Member Name=".ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" Analyze="True" />
          <Member Name=".ctor(System.String)" Analyze="True" />
         </Members>
        </Type>
        <Type Name="StructureNotSupportedException" Analyze="True">
         <Members>
          <Member Name=".ctor(MathNet.Symbolics.Core.ValueStructure)" Analyze="True" />
          <Member Name=".ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" Analyze="True" />
          <Member Name="GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext):System.Void" Analyze="True" />
          <Member Name="structure" Analyze="True" />
          <Member Name="Structure" Analyze="True">
           <Accessors>
            <Accessor Name="get_Structure():MathNet.Symbolics.Core.ValueStructure" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="SymbolNotAvailableException" Analyze="True">
         <Members>
          <Member Name=".ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" Analyze="True" />
          <Member Name=".ctor(System.String)" Analyze="True" />
          <Member Name="GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext):System.Void" Analyze="True" />
          <Member Name="symbol" Analyze="True" />
          <Member Name="Symbol" Analyze="True">
           <Accessors>
            <Accessor Name="get_Symbol():System.String" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="TheoremMismatchException" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name=".ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" Analyze="True" />
          <Member Name="GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext):System.Void" Analyze="True" />
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="MathNet.Symbolics.Backend.Parsing" Analyze="True">
       <Types>
        <Type Name="EntityStack" Analyze="True">
         <Members>
          <Member Name=".ctor(System.Int32,System.Int32)" Analyze="True" />
          <Member Name="count" Analyze="True" />
          <Member Name="Count" Analyze="True">
           <Accessors>
            <Accessor Name="get_Count():System.Int32" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Expand():System.Void" Analyze="True" />
          <Member Name="Init(System.Int32):System.Void" Analyze="True" />
          <Member Name="Item[System.Int32]" Analyze="True">
           <Accessors>
            <Accessor Name="get_Item(System.Int32):MathNet.Symbolics.Core.Entity" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="maxSize" Analyze="True" />
          <Member Name="Peek():MathNet.Symbolics.Core.Entity" Analyze="True" />
          <Member Name="Pop():MathNet.Symbolics.Core.Entity" Analyze="True" />
          <Member Name="PopPeek():MathNet.Symbolics.Core.Entity" Analyze="True" />
          <Member Name="Push(MathNet.Symbolics.Core.Entity):System.Void" Analyze="True" />
          <Member Name="Remove():System.Void" Analyze="True" />
          <Member Name="Reset():System.Void" Analyze="True" />
          <Member Name="Size" Analyze="True">
           <Accessors>
            <Accessor Name="get_Size():System.Int32" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="stack" Analyze="True" />
         </Members>
        </Type>
        <Type Name="Int32Stack" Analyze="True">
         <Members>
          <Member Name=".ctor(System.Int32,System.Int32)" Analyze="True" />
          <Member Name="count" Analyze="True" />
          <Member Name="Count" Analyze="True">
           <Accessors>
            <Accessor Name="get_Count():System.Int32" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Expand():System.Void" Analyze="True" />
          <Member Name="Init(System.Int32):System.Void" Analyze="True" />
          <Member Name="Item[System.Int32]" Analyze="True">
           <Accessors>
            <Accessor Name="get_Item(System.Int32):System.Int32" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="maxSize" Analyze="True" />
          <Member Name="Peek():System.Int32" Analyze="True" />
          <Member Name="Pop():System.Int32" Analyze="True" />
          <Member Name="PopPeek():System.Int32" Analyze="True" />
          <Member Name="Push(System.Int32):System.Void" Analyze="True" />
          <Member Name="Remove():System.Void" Analyze="True" />
          <Member Name="Reset():System.Void" Analyze="True" />
          <Member Name="Size" Analyze="True">
           <Accessors>
            <Accessor Name="get_Size():System.Int32" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="stack" Analyze="True" />
         </Members>
        </Type>
        <Type Name="LexerBuffer" Analyze="True">
         <Members>
          <Member Name=".ctor(System.Int32,System.Int32,System.IO.TextReader)" Analyze="True" />
          <Member Name="Append(System.Char):System.Void" Analyze="True" />
          <Member Name="buffer" Analyze="True" />
          <Member Name="count" Analyze="True" />
          <Member Name="Count" Analyze="True">
           <Accessors>
            <Accessor Name="get_Count():System.Int32" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ElementAt(System.Int32):System.Char" Analyze="True" />
          <Member Name="Expand():System.Void" Analyze="True" />
          <Member Name="FillBufferEof(System.Int32):System.Void" Analyze="True" />
          <Member Name="Init(System.Int32):System.Void" Analyze="True" />
          <Member Name="maxSize" Analyze="True" />
          <Member Name="offset" Analyze="True" />
          <Member Name="reader" Analyze="True" />
          <Member Name="RefillBuffer(System.Int32):System.Void" Analyze="True" />
          <Member Name="RemoveBlock(System.Int32):System.Void" Analyze="True" />
          <Member Name="RemoveFirst():System.Void" Analyze="True" />
          <Member Name="Reset():System.Void" Analyze="True" />
          <Member Name="Reset(System.IO.TextReader):System.Void" Analyze="True" />
          <Member Name="Size" Analyze="True">
           <Accessors>
            <Accessor Name="get_Size():System.Int32" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="sizeLessOne" Analyze="True" />
         </Members>
        </Type>
        <Type Name="LexerMarker" Analyze="True">
         <Members>
          <Member Name=".ctor(System.IO.TextReader)" Analyze="True" />
          <Member Name="buffer" Analyze="True" />
          <Member Name="CommitMark():System.Void" Analyze="True" />
          <Member Name="Consume():System.Void" Analyze="True" />
          <Member Name="consumeOffset" Analyze="True" />
          <Member Name="LookaheadCharacter(System.Int32):System.Char" Analyze="True" />
          <Member Name="LookaheadFistCharacter" Analyze="True">
           <Accessors>
            <Accessor Name="get_LookaheadFistCharacter():System.Char" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Mark():System.Void" Analyze="True" />
          <Member Name="markerCount" Analyze="True" />
          <Member Name="markerOffset" Analyze="True" />
          <Member Name="markers" Analyze="True" />
          <Member Name="Reset():System.Void" Analyze="True" />
          <Member Name="Reset(System.IO.TextReader):System.Void" Analyze="True" />
          <Member Name="RollbackMark():System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="LexerScanner" Analyze="True">
         <Members>
          <Member Name=".ctor(System.IO.TextReader,MathNet.Symbolics.Backend.Context)" Analyze="True" />
          <Member Name="context" Analyze="True" />
          <Member Name="eof" Analyze="True" />
          <Member Name="executorCharacter" Analyze="True" />
          <Member Name="IsBeginTextIdentifierCharacter(System.Char):System.Boolean" Analyze="True" />
          <Member Name="IsClosingLiteralCharacter(System.Char):System.Boolean" Analyze="True" />
          <Member Name="IsClosingPunctuationCharacter(System.Char):System.Boolean" Analyze="True" />
          <Member Name="IsEndOfFileCharacter(System.Char):System.Boolean" Analyze="True" />
          <Member Name="IsEndOfLineCharacter(System.Char):System.Boolean" Analyze="True" />
          <Member Name="IsMarkerCharacter(System.Char):System.Boolean" Analyze="True" />
          <Member Name="IsNumberCharacter(System.Char):System.Boolean" Analyze="True" />
          <Member Name="IsOpeningLiteralCharacter(System.Char):System.Boolean" Analyze="True" />
          <Member Name="IsOpeningPunctuationCharacter(System.Char):System.Boolean" Analyze="True" />
          <Member Name="IsSeparatorExecutorCharacter(System.Char):System.Boolean" Analyze="True" />
          <Member Name="IsSymbolIdentifierCharacter(System.Char):System.Boolean" Analyze="True" />
          <Member Name="IsTextIdentifierCharacter(System.Char):System.Boolean" Analyze="True" />
          <Member Name="IsWhitespaceCharacter(System.Char):System.Boolean" Analyze="True" />
          <Member Name="lexer" Analyze="True" />
          <Member Name="listEncapsulation" Analyze="True" />
          <Member Name="literalEncapsulation" Analyze="True" />
          <Member Name="NextToken():MathNet.Symbolics.Backend.Parsing.LexerToken" Analyze="True" />
          <Member Name="numberFormat" Analyze="True" />
          <Member Name="Reset():System.Void" Analyze="True" />
          <Member Name="Reset(System.IO.TextReader,MathNet.Symbolics.Backend.Context):System.Void" Analyze="True" />
          <Member Name="scalarEncapsulation" Analyze="True" />
          <Member Name="ScanClosingPunctuation():MathNet.Symbolics.Backend.Parsing.LexerToken" Analyze="True" />
          <Member Name="ScanEndOfFile():MathNet.Symbolics.Backend.Parsing.LexerToken" Analyze="True" />
          <Member Name="ScanEndOfLine():MathNet.Symbolics.Backend.Parsing.LexerToken" Analyze="True" />
          <Member Name="ScanIntegerHelper():System.String" Analyze="True" />
          <Member Name="ScanLiteral():MathNet.Symbolics.Backend.Parsing.LexerToken" Analyze="True" />
          <Member Name="ScanMarkers():MathNet.Symbolics.Backend.Parsing.LexerToken" Analyze="True" />
          <Member Name="ScanNumber():MathNet.Symbolics.Backend.Parsing.LexerToken" Analyze="True" />
          <Member Name="ScanOpeningPunctuation():MathNet.Symbolics.Backend.Parsing.LexerToken" Analyze="True" />
          <Member Name="ScanSeparatorExecutor():MathNet.Symbolics.Backend.Parsing.LexerToken" Analyze="True" />
          <Member Name="ScanSkipWhiteSpace():System.Void" Analyze="True" />
          <Member Name="ScanSymbolIdentifier():MathNet.Symbolics.Backend.Parsing.LexerToken" Analyze="True" />
          <Member Name="ScanTextIdentifier():MathNet.Symbolics.Backend.Parsing.LexerToken" Analyze="True" />
          <Member Name="seperatorCharacter" Analyze="True" />
          <Member Name="setEncapsulation" Analyze="True" />
          <Member Name="vectorEncapsulation" Analyze="True" />
         </Members>
        </Type>
        <Type Name="LexerToken" Analyze="True">
         <Members>
          <Member Name=".ctor(System.String)" Analyze="True" />
          <Member Name=".ctor(System.String,MathNet.Symbolics.Backend.Parsing.TokenTypes)" Analyze="True" />
          <Member Name="IsType(MathNet.Symbolics.Backend.Parsing.TokenTypes):System.Boolean" Analyze="True" />
          <Member Name="text" Analyze="True" />
          <Member Name="Text" Analyze="True">
           <Accessors>
            <Accessor Name="get_Text():System.String" Analyze="True" />
            <Accessor Name="set_Text(System.String):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ToString():System.String" Analyze="True" />
          <Member Name="types" Analyze="True" />
          <Member Name="Types" Analyze="True">
           <Accessors>
            <Accessor Name="get_Types():MathNet.Symbolics.Backend.Parsing.TokenTypes" Analyze="True" />
            <Accessor Name="set_Types(MathNet.Symbolics.Backend.Parsing.TokenTypes):System.Void" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="Parser" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="Interpret(System.IO.FileInfo,MathNet.Symbolics.Workplace.MathSystem):System.Void" Analyze="True" />
          <Member Name="Interpret(System.IO.TextReader,MathNet.Symbolics.Workplace.MathSystem):System.Void" Analyze="True" />
          <Member Name="Interpret(System.String,MathNet.Symbolics.Workplace.MathSystem):System.Void" Analyze="True" />
          <Member Name="scanner" Analyze="True" />
         </Members>
        </Type>
        <Type Name="ParserBuffer" Analyze="True">
         <Members>
          <Member Name=".ctor(System.Int32,System.Int32,System.IO.TextReader,MathNet.Symbolics.Backend.Context)" Analyze="True" />
          <Member Name="Append(MathNet.Symbolics.Backend.Parsing.LexerToken):System.Void" Analyze="True" />
          <Member Name="buffer" Analyze="True" />
          <Member Name="count" Analyze="True" />
          <Member Name="Count" Analyze="True">
           <Accessors>
            <Accessor Name="get_Count():System.Int32" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ElementAt(System.Int32):MathNet.Symbolics.Backend.Parsing.LexerToken" Analyze="True" />
          <Member Name="Expand():System.Void" Analyze="True" />
          <Member Name="Init(System.Int32):System.Void" Analyze="True" />
          <Member Name="maxSize" Analyze="True" />
          <Member Name="offset" Analyze="True" />
          <Member Name="RefillBuffer(System.Int32):System.Void" Analyze="True" />
          <Member Name="RemoveBlock(System.Int32):System.Void" Analyze="True" />
          <Member Name="RemoveFirst():System.Void" Analyze="True" />
          <Member Name="Reset():System.Void" Analyze="True" />
          <Member Name="Reset(System.IO.TextReader,MathNet.Symbolics.Backend.Context):System.Void" Analyze="True" />
          <Member Name="scanner" Analyze="True" />
          <Member Name="Size" Analyze="True">
           <Accessors>
            <Accessor Name="get_Size():System.Int32" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="sizeLessOne" Analyze="True" />
         </Members>
        </Type>
        <Type Name="ParserMarker" Analyze="True">
         <Members>
          <Member Name=".ctor(System.IO.TextReader,MathNet.Symbolics.Backend.Context)" Analyze="True" />
          <Member Name="buffer" Analyze="True" />
          <Member Name="CommitMark():System.Void" Analyze="True" />
          <Member Name="Consume():System.Void" Analyze="True" />
          <Member Name="ConsumeGet():MathNet.Symbolics.Backend.Parsing.LexerToken" Analyze="True" />
          <Member Name="consumeOffset" Analyze="True" />
          <Member Name="CurrentTokenNeighbourhood():System.String" Analyze="True" />
          <Member Name="IsEndOfFile" Analyze="True">
           <Accessors>
            <Accessor Name="get_IsEndOfFile():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="LookaheadFistToken" Analyze="True">
           <Accessors>
            <Accessor Name="get_LookaheadFistToken():MathNet.Symbolics.Backend.Parsing.LexerToken" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="LookaheadToken(System.Int32):MathNet.Symbolics.Backend.Parsing.LexerToken" Analyze="True" />
          <Member Name="Mark():System.Void" Analyze="True" />
          <Member Name="markerCount" Analyze="True" />
          <Member Name="markerOffset" Analyze="True" />
          <Member Name="markers" Analyze="True" />
          <Member Name="Match(MathNet.Symbolics.Backend.Parsing.TokenTypes):System.Void" Analyze="True" />
          <Member Name="Match(MathNet.Symbolics.Backend.Parsing.TokenTypes,System.String):System.Void" Analyze="True" />
          <Member Name="Match(System.String):System.Void" Analyze="True" />
          <Member Name="MatchGet(MathNet.Symbolics.Backend.Parsing.TokenTypes):MathNet.Symbolics.Backend.Parsing.LexerToken" Analyze="True" />
          <Member Name="Reset():System.Void" Analyze="True" />
          <Member Name="Reset(System.IO.TextReader,MathNet.Symbolics.Backend.Context):System.Void" Analyze="True" />
          <Member Name="RollbackMark():System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="ParserScanner" Analyze="True">
         <Members>
          <Member Name=".ctor(System.IO.TextReader,MathNet.Symbolics.Workplace.MathSystem)" Analyze="True" />
          <Member Name="AllStatements():System.Void" Analyze="True" />
          <Member Name="context" Analyze="True" />
          <Member Name="IsBeginningEncapsulation(MathNet.Symbolics.Backend.Parsing.LexerToken):System.Boolean" Analyze="True" />
          <Member Name="IsBinary(MathNet.Symbolics.Backend.Parsing.LexerToken):System.Boolean" Analyze="True" />
          <Member Name="IsLeftUnary(MathNet.Symbolics.Backend.Parsing.LexerToken):System.Boolean" Analyze="True" />
          <Member Name="IsPrecedenceLeftFirst(MathNet.Symbolics.Core.Entity,MathNet.Symbolics.Core.Entity):System.Boolean" Analyze="True" />
          <Member Name="IsRightUnary(MathNet.Symbolics.Backend.Parsing.LexerToken):System.Boolean" Analyze="True" />
          <Member Name="NextStatement():System.Void" Analyze="True" />
          <Member Name="Reset():System.Void" Analyze="True" />
          <Member Name="Reset(System.IO.TextReader,MathNet.Symbolics.Workplace.MathSystem):System.Void" Analyze="True" />
          <Member Name="ScanBus():MathNet.Symbolics.Core.Bus" Analyze="True" />
          <Member Name="ScanBusAssociation():MathNet.Symbolics.Backend.Parsing.ParserScanner+BusAssociation" Analyze="True" />
          <Member Name="ScanBusAssociationList():System.Collections.Generic.List`1&lt;MathNet.Symbolics.Backend.Parsing.ParserScanner+BusAssociation&gt;" Analyze="True" />
          <Member Name="ScanBusDeclaration():MathNet.Symbolics.Core.Bus" Analyze="True" />
          <Member Name="ScanBusList():System.Collections.Generic.List`1&lt;MathNet.Symbolics.Core.Bus&gt;" Analyze="True" />
          <Member Name="ScanCommand():System.Void" Analyze="True" />
          <Member Name="ScanDefine():System.Void" Analyze="True" />
          <Member Name="ScanDefineArchitecture():System.Void" Analyze="True" />
          <Member Name="ScanDefineEntity():MathNet.Symbolics.Core.Entity" Analyze="True" />
          <Member Name="ScanEncapsulation():MathNet.Symbolics.Core.Signal" Analyze="True" />
          <Member Name="ScanEntity():MathNet.Symbolics.Core.Entity" Analyze="True" />
          <Member Name="ScanEntity(MathNet.Symbolics.Backend.Parsing.LexerToken,MathNet.Symbolics.Core.InfixNotation,System.Int32):MathNet.Symbolics.Core.Entity" Analyze="True" />
          <Member Name="ScanEntityMathIdentifierOrLabel(System.Boolean):MathNet.Symbolics.Core.MathIdentifier" Analyze="True" />
          <Member Name="ScanEntitySymbol():System.String" Analyze="True" />
          <Member Name="ScanEntitySymbolLiteral():System.String" Analyze="True" />
          <Member Name="ScanFunction():MathNet.Symbolics.Core.Signal" Analyze="True" />
          <Member Name="ScanIdentifierInExpression():MathNet.Symbolics.Core.Signal" Analyze="True" />
          <Member Name="ScanInstantiate():MathNet.Symbolics.Core.Port" Analyze="True" />
          <Member Name="ScanInteger():System.Int64" Analyze="True" />
          <Member Name="ScanIntegerSignal():MathNet.Symbolics.Core.Signal" Analyze="True" />
          <Member Name="ScanLeftUnary():MathNet.Symbolics.Core.Signal" Analyze="True" />
          <Member Name="ScanList():System.Collections.Generic.List`1&lt;MathNet.Symbolics.Core.Signal&gt;" Analyze="True" />
          <Member Name="ScanLiteral():System.String" Analyze="True" />
          <Member Name="ScanLiteralList():System.Collections.Generic.List`1&lt;System.String&gt;" Analyze="True" />
          <Member Name="ScanLiteralSignal():MathNet.Symbolics.Core.Signal" Analyze="True" />
          <Member Name="ScanMathIdentifier():MathNet.Symbolics.Core.MathIdentifier" Analyze="True" />
          <Member Name="ScanOperand():MathNet.Symbolics.Core.Signal" Analyze="True" />
          <Member Name="ScanOperandPart():MathNet.Symbolics.Core.Signal" Analyze="True" />
          <Member Name="ScanParenthesisSignal():MathNet.Symbolics.Core.Signal" Analyze="True" />
          <Member Name="ScanRealSignal():MathNet.Symbolics.Core.Signal" Analyze="True" />
          <Member Name="ScanScalar():System.Collections.Generic.List`1&lt;MathNet.Symbolics.Core.Signal&gt;" Analyze="True" />
          <Member Name="ScanScalarSignal():MathNet.Symbolics.Core.Signal" Analyze="True" />
          <Member Name="ScanSet():System.Collections.Generic.List`1&lt;MathNet.Symbolics.Core.Signal&gt;" Analyze="True" />
          <Member Name="ScanSetSignal():MathNet.Symbolics.Core.Signal" Analyze="True" />
          <Member Name="ScanSignal():MathNet.Symbolics.Core.Signal" Analyze="True" />
          <Member Name="ScanSignalAssignment():MathNet.Symbolics.Core.Signal" Analyze="True" />
          <Member Name="ScanSignalAssociation():MathNet.Symbolics.Backend.Parsing.ParserScanner+SignalAssociation" Analyze="True" />
          <Member Name="ScanSignalAssociationList():System.Collections.Generic.List`1&lt;MathNet.Symbolics.Backend.Parsing.ParserScanner+SignalAssociation&gt;" Analyze="True" />
          <Member Name="ScanSignalDeclaration():MathNet.Symbolics.Core.Signal" Analyze="True" />
          <Member Name="ScanSignalExpression():MathNet.Symbolics.Core.Signal" Analyze="True" />
          <Member Name="ScanSignalExpressionAssociation():MathNet.Symbolics.Backend.Parsing.ParserScanner+SignalAssociation" Analyze="True" />
          <Member Name="ScanSignalExpressionAssociationList():System.Collections.Generic.List`1&lt;MathNet.Symbolics.Backend.Parsing.ParserScanner+SignalAssociation&gt;" Analyze="True" />
          <Member Name="ScanSignalExpressionList():System.Collections.Generic.List`1&lt;MathNet.Symbolics.Core.Signal&gt;" Analyze="True" />
          <Member Name="ScanSignalList():System.Collections.Generic.List`1&lt;MathNet.Symbolics.Core.Signal&gt;" Analyze="True" />
          <Member Name="ScanTextIdentifier():System.String" Analyze="True" />
          <Member Name="ScanTextIdentifierList():System.Collections.Generic.List`1&lt;System.String&gt;" Analyze="True" />
          <Member Name="ScanVector():System.Collections.Generic.List`1&lt;MathNet.Symbolics.Core.Signal&gt;" Analyze="True" />
          <Member Name="ScanVectorSignal():MathNet.Symbolics.Core.Signal" Analyze="True" />
          <Member Name="system" Analyze="True" />
          <Member Name="tokenizer" Analyze="True" />
         </Members>
        </Type>
        <Type Name="ParserScanner+BusAssociation" Analyze="True">
         <Members>
          <Member Name="Association" Analyze="True" />
          <Member Name="Label" Analyze="True" />
         </Members>
        </Type>
        <Type Name="ParserScanner+SignalAssociation" Analyze="True">
         <Members>
          <Member Name="Association" Analyze="True" />
          <Member Name="Label" Analyze="True" />
         </Members>
        </Type>
        <Type Name="SignalStack" Analyze="True">
         <Members>
          <Member Name=".ctor(System.Int32,System.Int32)" Analyze="True" />
          <Member Name="count" Analyze="True" />
          <Member Name="Count" Analyze="True">
           <Accessors>
            <Accessor Name="get_Count():System.Int32" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Expand():System.Void" Analyze="True" />
          <Member Name="Init(System.Int32):System.Void" Analyze="True" />
          <Member Name="Item[System.Int32]" Analyze="True">
           <Accessors>
            <Accessor Name="get_Item(System.Int32):MathNet.Symbolics.Core.Signal" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="maxSize" Analyze="True" />
          <Member Name="Peek():MathNet.Symbolics.Core.Signal" Analyze="True" />
          <Member Name="Pop():MathNet.Symbolics.Core.Signal" Analyze="True" />
          <Member Name="PopPeek():MathNet.Symbolics.Core.Signal" Analyze="True" />
          <Member Name="Push(MathNet.Symbolics.Core.Signal):System.Void" Analyze="True" />
          <Member Name="Remove():System.Void" Analyze="True" />
          <Member Name="Reset():System.Void" Analyze="True" />
          <Member Name="Size" Analyze="True">
           <Accessors>
            <Accessor Name="get_Size():System.Int32" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="stack" Analyze="True" />
         </Members>
        </Type>
        <Type Name="TokenTypes" Analyze="True">
         <Members>
          <Member Name="Assignment" Analyze="True" />
          <Member Name="Association" Analyze="True" />
          <Member Name="BusKeyword" Analyze="True" />
          <Member Name="DefineKeyword" Analyze="True" />
          <Member Name="EndOfFile" Analyze="True" />
          <Member Name="EndOfLine" Analyze="True" />
          <Member Name="Executor" Analyze="True" />
          <Member Name="InstantiateKeyword" Analyze="True" />
          <Member Name="Integer" Analyze="True" />
          <Member Name="Left" Analyze="True" />
          <Member Name="LeftList" Analyze="True" />
          <Member Name="LeftScalar" Analyze="True" />
          <Member Name="LeftSet" Analyze="True" />
          <Member Name="LeftVector" Analyze="True" />
          <Member Name="ListEncapsulation" Analyze="True" />
          <Member Name="Literal" Analyze="True" />
          <Member Name="MathIdentifier" Analyze="True" />
          <Member Name="Real" Analyze="True" />
          <Member Name="Right" Analyze="True" />
          <Member Name="RightList" Analyze="True" />
          <Member Name="RightScalar" Analyze="True" />
          <Member Name="RightSet" Analyze="True" />
          <Member Name="RightVector" Analyze="True" />
          <Member Name="ScalarEncapsulation" Analyze="True" />
          <Member Name="Separator" Analyze="True" />
          <Member Name="SetEncapsulation" Analyze="True" />
          <Member Name="SignalKeyword" Analyze="True" />
          <Member Name="SymbolIdentifier" Analyze="True" />
          <Member Name="System" Analyze="True" />
          <Member Name="SystemSymbolIdentifier" Analyze="True" />
          <Member Name="SystemTextIdentifier" Analyze="True" />
          <Member Name="TextIdentifier" Analyze="True" />
          <Member Name="Unknown" Analyze="True" />
          <Member Name="value__" Analyze="True" />
          <Member Name="VectorEncapsulation" Analyze="True" />
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="MathNet.Symbolics.Backend.Patterns" Analyze="True">
       <Types>
        <Type Name="AlwaysTrueCondition" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="_instance" Analyze="True" />
          <Member Name="CouldMergeToCoalescedTreeNode(MathNet.Symbolics.Backend.Patterns.Condition):System.Boolean" Analyze="True" />
          <Member Name="Equals(MathNet.Symbolics.Backend.Patterns.Condition):System.Boolean" Analyze="True" />
          <Member Name="FulfillsCondition(MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Port):System.Boolean" Analyze="True" />
          <Member Name="Instance" Analyze="True">
           <Accessors>
            <Accessor Name="get_Instance():MathNet.Symbolics.Backend.Patterns.AlwaysTrueCondition" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="MergeToCoalescedTreeNode(MathNet.Symbolics.Backend.Patterns.CoalescedTreeNode,System.Collections.Generic.List`1&lt;MathNet.Symbolics.Backend.Patterns.CoalescedTreeNode&gt;):System.Void" Analyze="True" />
          <Member Name="Score" Analyze="True">
           <Accessors>
            <Accessor Name="get_Score():System.Int32" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="AndCondition" Analyze="True">
         <Members>
          <Member Name=".ctor(MathNet.Symbolics.Backend.Patterns.Condition[])" Analyze="True" />
          <Member Name=".ctor(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Backend.Patterns.Condition&gt;)" Analyze="True" />
          <Member Name="_conditions" Analyze="True" />
          <Member Name="CouldMergeToCoalescedTreeNode(MathNet.Symbolics.Backend.Patterns.Condition):System.Boolean" Analyze="True" />
          <Member Name="Equals(MathNet.Symbolics.Backend.Patterns.Condition):System.Boolean" Analyze="True" />
          <Member Name="FulfillsCondition(MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Port):System.Boolean" Analyze="True" />
          <Member Name="MergeToCoalescedTreeNode(MathNet.Symbolics.Backend.Patterns.CoalescedTreeNode,System.Collections.Generic.List`1&lt;MathNet.Symbolics.Backend.Patterns.CoalescedTreeNode&gt;):System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="ArchitectureCondition" Analyze="True">
         <Members>
          <Member Name=".ctor(System.Predicate`1&lt;MathNet.Symbolics.Core.Architecture&gt;)" Analyze="True" />
          <Member Name="_match" Analyze="True" />
          <Member Name="Equals(MathNet.Symbolics.Backend.Patterns.Condition):System.Boolean" Analyze="True" />
          <Member Name="FulfillsCondition(MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Port):System.Boolean" Analyze="True" />
         </Members>
        </Type>
        <Type Name="CoalescedChildPattern" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="_childAxis" Analyze="True" />
          <Member Name="AddChild(MathNet.Symbolics.Backend.Patterns.CoalescedTreeNode):System.Void" Analyze="True" />
          <Member Name="ChildrenAxis" Analyze="True">
           <Accessors>
            <Accessor Name="get_ChildrenAxis():System.Collections.Generic.List`1&lt;MathNet.Symbolics.Backend.Patterns.CoalescedTreeNode&gt;" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="MatchAll(MathNet.Symbolics.Core.Port,System.Int32):MathNet.Symbolics.Backend.Patterns.MatchCollection" Analyze="True" />
          <Member Name="MatchFirst(MathNet.Symbolics.Core.Port):MathNet.Symbolics.Backend.Patterns.Match" Analyze="True" />
         </Members>
        </Type>
        <Type Name="CoalescedTreeNode" Analyze="True">
         <Members>
          <Member Name=".ctor(MathNet.Symbolics.Backend.Patterns.Condition)" Analyze="True" />
          <Member Name="_condition" Analyze="True" />
          <Member Name="_conditionAxis" Analyze="True" />
          <Member Name="_groupAxis" Analyze="True" />
          <Member Name="_patternAxis" Analyze="True" />
          <Member Name="_subscriptionAxis" Analyze="True" />
          <Member Name="AddGroup(MathNet.Symbolics.Core.MathIdentifier,System.String):System.Void" Analyze="True" />
          <Member Name="Condition" Analyze="True">
           <Accessors>
            <Accessor Name="get_Condition():MathNet.Symbolics.Backend.Patterns.Condition" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ConditionAxis" Analyze="True">
           <Accessors>
            <Accessor Name="get_ConditionAxis():System.Collections.Generic.List`1&lt;MathNet.Symbolics.Backend.Patterns.CoalescedTreeNode&gt;" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="CreateRootTree():System.Collections.Generic.List`1&lt;MathNet.Symbolics.Backend.Patterns.CoalescedTreeNode&gt;" Analyze="True" />
          <Member Name="CreateRootTree(MathNet.Symbolics.Backend.Patterns.CoalescedTreeNode&amp;):System.Collections.Generic.List`1&lt;MathNet.Symbolics.Backend.Patterns.CoalescedTreeNode&gt;" Analyze="True" />
          <Member Name="GroupAxis" Analyze="True">
           <Accessors>
            <Accessor Name="get_GroupAxis():System.Collections.Generic.Dictionary`2&lt;MathNet.Symbolics.Core.MathIdentifier,System.String&gt;" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="MatchAll(MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Port,System.Int32):MathNet.Symbolics.Backend.Patterns.MatchCollection" Analyze="True" />
          <Member Name="MatchFirst(MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Port):MathNet.Symbolics.Backend.Patterns.Match" Analyze="True" />
          <Member Name="PatternAxis" Analyze="True">
           <Accessors>
            <Accessor Name="get_PatternAxis():System.Collections.Generic.List`1&lt;MathNet.Symbolics.Backend.Patterns.CoalescedChildPattern&gt;" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="RemoveGroup(MathNet.Symbolics.Core.MathIdentifier):System.Void" Analyze="True" />
          <Member Name="Subscribe(MathNet.Symbolics.Core.MathIdentifier):System.Void" Analyze="True" />
          <Member Name="SubscriptionAxis" Analyze="True">
           <Accessors>
            <Accessor Name="get_SubscriptionAxis():System.Collections.Generic.List`1&lt;MathNet.Symbolics.Core.MathIdentifier&gt;" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Unsubscribe(MathNet.Symbolics.Core.MathIdentifier):System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="CombinationMode" Analyze="True">
         <Members>
          <Member Name="All" Analyze="True" />
          <Member Name="AtLeastOne" Analyze="True" />
          <Member Name="AtMostOne" Analyze="True" />
          <Member Name="None" Analyze="True" />
          <Member Name="One" Analyze="True" />
          <Member Name="value__" Analyze="True" />
         </Members>
        </Type>
        <Type Name="Condition" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="CouldMergeToCoalescedTree(MathNet.Symbolics.Backend.Patterns.CoalescedTreeNode):System.Boolean" Analyze="True" />
          <Member Name="CouldMergeToCoalescedTreeNode(MathNet.Symbolics.Backend.Patterns.Condition):System.Boolean" Analyze="True" />
          <Member Name="Equals(MathNet.Symbolics.Backend.Patterns.Condition):System.Boolean" Analyze="True" />
          <Member Name="FulfillsCondition(MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Port):System.Boolean" Analyze="True" />
          <Member Name="IteratorEquals(System.Collections.Generic.IEnumerator`1&lt;MathNet.Symbolics.Backend.Patterns.Condition&gt;,System.Collections.Generic.IEnumerator`1&lt;MathNet.Symbolics.Backend.Patterns.Condition&gt;):System.Boolean" Analyze="True" />
          <Member Name="MergeToCoalescedTree():System.Collections.Generic.List`1&lt;MathNet.Symbolics.Backend.Patterns.CoalescedTreeNode&gt;" Analyze="True" />
          <Member Name="MergeToCoalescedTree(System.Collections.Generic.List`1&lt;MathNet.Symbolics.Backend.Patterns.CoalescedTreeNode&gt;):System.Collections.Generic.List`1&lt;MathNet.Symbolics.Backend.Patterns.CoalescedTreeNode&gt;" Analyze="True" />
          <Member Name="MergeToCoalescedTreeNode(MathNet.Symbolics.Backend.Patterns.CoalescedTreeNode,System.Collections.Generic.List`1&lt;MathNet.Symbolics.Backend.Patterns.CoalescedTreeNode&gt;):System.Void" Analyze="True" />
          <Member Name="Score" Analyze="True">
           <Accessors>
            <Accessor Name="get_Score():System.Int32" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="TryGetExistingNode(MathNet.Symbolics.Backend.Patterns.CoalescedTreeNode,MathNet.Symbolics.Backend.Patterns.Condition,MathNet.Symbolics.Backend.Patterns.CoalescedTreeNode&amp;):System.Boolean" Analyze="True" />
         </Members>
        </Type>
        <Type Name="EntityCondition" Analyze="True">
         <Members>
          <Member Name=".ctor(MathNet.Symbolics.Core.MathIdentifier)" Analyze="True" />
          <Member Name=".ctor(System.String,System.String)" Analyze="True" />
          <Member Name="_entityId" Analyze="True" />
          <Member Name="EntityId" Analyze="True">
           <Accessors>
            <Accessor Name="get_EntityId():MathNet.Symbolics.Core.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Equals(MathNet.Symbolics.Backend.Patterns.Condition):System.Boolean" Analyze="True" />
          <Member Name="FulfillsCondition(MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Port):System.Boolean" Analyze="True" />
         </Members>
        </Type>
        <Type Name="Group" Analyze="True">
         <Members>
          <Member Name=".ctor(System.String)" Analyze="True" />
          <Member Name="_label" Analyze="True" />
          <Member Name="AddRange(System.Collections.Generic.IEnumerable`1&lt;MathNet.Numerics.Tuple`2&lt;MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Port&gt;&gt;):System.Void" Analyze="True" />
          <Member Name="Label" Analyze="True">
           <Accessors>
            <Accessor Name="get_Label():System.String" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="GroupCollection" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="Append(MathNet.Symbolics.Backend.Patterns.Group):System.Void" Analyze="True" />
          <Member Name="Append(System.String,MathNet.Numerics.Tuple`2&lt;MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Port&gt;):System.Void" Analyze="True" />
          <Member Name="Append(System.String,System.Collections.Generic.IEnumerable`1&lt;MathNet.Numerics.Tuple`2&lt;MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Port&gt;&gt;):System.Void" Analyze="True" />
          <Member Name="GetKeyForItem(MathNet.Symbolics.Backend.Patterns.Group):System.String" Analyze="True" />
          <Member Name="TryGetValue(System.String,MathNet.Symbolics.Backend.Patterns.Group&amp;):System.Boolean" Analyze="True" />
         </Members>
        </Type>
        <Type Name="InputSignalsPropertyCondition" Analyze="True">
         <Members>
          <Member Name=".ctor(MathNet.Symbolics.Core.MathIdentifier,MathNet.Symbolics.Backend.Patterns.CombinationMode)" Analyze="True" />
          <Member Name="_mode" Analyze="True" />
          <Member Name="_propertyType" Analyze="True" />
          <Member Name="Equals(MathNet.Symbolics.Backend.Patterns.Condition):System.Boolean" Analyze="True" />
          <Member Name="FulfillsCondition(MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Port):System.Boolean" Analyze="True" />
         </Members>
        </Type>
        <Type Name="Match" Analyze="True">
         <Members>
          <Member Name=".ctor(MathNet.Symbolics.Core.MathIdentifier,System.Int32)" Analyze="True" />
          <Member Name="_groups" Analyze="True" />
          <Member Name="_patternId" Analyze="True" />
          <Member Name="_score" Analyze="True" />
          <Member Name="AppendGroup(MathNet.Symbolics.Backend.Patterns.Group):System.Void" Analyze="True" />
          <Member Name="AppendGroup(System.String,MathNet.Numerics.Tuple`2&lt;MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Port&gt;):System.Void" Analyze="True" />
          <Member Name="AppendGroup(System.String,System.Collections.Generic.List`1&lt;MathNet.Numerics.Tuple`2&lt;MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Port&gt;&gt;):System.Void" Analyze="True" />
          <Member Name="GetEnumerator():System.Collections.Generic.IEnumerator`1&lt;MathNet.Symbolics.Backend.Patterns.Group&gt;" Analyze="True" />
          <Member Name="GroupCount" Analyze="True">
           <Accessors>
            <Accessor Name="get_GroupCount():System.Int32" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Groups" Analyze="True">
           <Accessors>
            <Accessor Name="get_Groups():MathNet.Symbolics.Backend.Patterns.GroupCollection" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Item[System.String]" Analyze="True">
           <Accessors>
            <Accessor Name="get_Item(System.String):MathNet.Symbolics.Backend.Patterns.Group" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="MergeWithMatch(MathNet.Symbolics.Backend.Patterns.Match):System.Void" Analyze="True" />
          <Member Name="PatternId" Analyze="True">
           <Accessors>
            <Accessor Name="get_PatternId():MathNet.Symbolics.Core.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Score" Analyze="True">
           <Accessors>
            <Accessor Name="get_Score():System.Int32" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="System.Collections.IEnumerable.GetEnumerator():System.Collections.IEnumerator" Analyze="True" />
         </Members>
        </Type>
        <Type Name="MatchCollection" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="CombineIntersect(System.Collections.Generic.List`1&lt;MathNet.Symbolics.Backend.Patterns.MatchCollection&gt;):MathNet.Symbolics.Backend.Patterns.MatchCollection" Analyze="True" />
          <Member Name="CombineIntersectFirst(System.Collections.Generic.List`1&lt;MathNet.Symbolics.Backend.Patterns.MatchCollection&gt;):MathNet.Symbolics.Backend.Patterns.Match" Analyze="True" />
          <Member Name="CombineUnion(System.Collections.Generic.List`1&lt;MathNet.Symbolics.Backend.Patterns.MatchCollection&gt;):MathNet.Symbolics.Backend.Patterns.MatchCollection" Analyze="True" />
          <Member Name="GetKeyForItem(MathNet.Symbolics.Backend.Patterns.Match):MathNet.Symbolics.Core.MathIdentifier" Analyze="True" />
          <Member Name="TryGetValue(MathNet.Symbolics.Core.MathIdentifier,MathNet.Symbolics.Backend.Patterns.Match&amp;):System.Boolean" Analyze="True" />
         </Members>
        </Type>
        <Type Name="NotCondition" Analyze="True">
         <Members>
          <Member Name=".ctor(MathNet.Symbolics.Backend.Patterns.Condition)" Analyze="True" />
          <Member Name="_condition" Analyze="True" />
          <Member Name="Equals(MathNet.Symbolics.Backend.Patterns.Condition):System.Boolean" Analyze="True" />
          <Member Name="FulfillsCondition(MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Port):System.Boolean" Analyze="True" />
         </Members>
        </Type>
        <Type Name="OrCondition" Analyze="True">
         <Members>
          <Member Name=".ctor(MathNet.Symbolics.Backend.Patterns.Condition[])" Analyze="True" />
          <Member Name=".ctor(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Backend.Patterns.Condition&gt;)" Analyze="True" />
          <Member Name="_conditions" Analyze="True" />
          <Member Name="CouldMergeToCoalescedTreeNode(MathNet.Symbolics.Backend.Patterns.Condition):System.Boolean" Analyze="True" />
          <Member Name="Equals(MathNet.Symbolics.Backend.Patterns.Condition):System.Boolean" Analyze="True" />
          <Member Name="FulfillsCondition(MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Port):System.Boolean" Analyze="True" />
          <Member Name="MergeToCoalescedTreeNode(MathNet.Symbolics.Backend.Patterns.CoalescedTreeNode,System.Collections.Generic.List`1&lt;MathNet.Symbolics.Backend.Patterns.CoalescedTreeNode&gt;):System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="OutputSignalsPropertyCondition" Analyze="True">
         <Members>
          <Member Name=".ctor(MathNet.Symbolics.Core.MathIdentifier,MathNet.Symbolics.Backend.Patterns.CombinationMode)" Analyze="True" />
          <Member Name="_mode" Analyze="True" />
          <Member Name="_propertyType" Analyze="True" />
          <Member Name="Equals(MathNet.Symbolics.Backend.Patterns.Condition):System.Boolean" Analyze="True" />
          <Member Name="FulfillsCondition(MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Port):System.Boolean" Analyze="True" />
         </Members>
        </Type>
        <Type Name="Pattern" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name=".ctor(MathNet.Symbolics.Backend.Patterns.Condition)" Analyze="True" />
          <Member Name="_alwaysTrueInstance" Analyze="True" />
          <Member Name="_condition" Analyze="True" />
          <Member Name="_group" Analyze="True" />
          <Member Name="AlwaysTrueInstance" Analyze="True">
           <Accessors>
            <Accessor Name="get_AlwaysTrueInstance():MathNet.Symbolics.Backend.Patterns.Pattern" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Condition" Analyze="True">
           <Accessors>
            <Accessor Name="get_Condition():MathNet.Symbolics.Backend.Patterns.Condition" Analyze="True" />
            <Accessor Name="set_Condition(MathNet.Symbolics.Backend.Patterns.Condition):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Group" Analyze="True">
           <Accessors>
            <Accessor Name="get_Group():System.String" Analyze="True" />
            <Accessor Name="set_Group(System.String):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Match(MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Port):System.Boolean" Analyze="True" />
          <Member Name="MergeGroupToCoalescedTree(MathNet.Symbolics.Core.MathIdentifier,System.Collections.Generic.List`1&lt;MathNet.Symbolics.Backend.Patterns.CoalescedTreeNode&gt;):System.Void" Analyze="True" />
          <Member Name="MergeToCoalescedTree(MathNet.Symbolics.Core.MathIdentifier,System.Collections.Generic.List`1&lt;MathNet.Symbolics.Backend.Patterns.CoalescedTreeNode&gt;):System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="TreePattern" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name=".ctor(MathNet.Symbolics.Backend.Patterns.Condition)" Analyze="True" />
          <Member Name="_children" Analyze="True" />
          <Member Name="Add(MathNet.Symbolics.Backend.Patterns.Pattern):System.Void" Analyze="True" />
          <Member Name="Match(MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Port):System.Boolean" Analyze="True" />
          <Member Name="MergeToCoalescedTree(MathNet.Symbolics.Core.MathIdentifier,System.Collections.Generic.List`1&lt;MathNet.Symbolics.Backend.Patterns.CoalescedTreeNode&gt;):System.Void" Analyze="True" />
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="MathNet.Symbolics.Backend.Properties" Analyze="True">
       <Types>
        <Type Name="Category" Analyze="True">
         <Members>
          <Member Name=".ctor(MathNet.Symbolics.Core.MathIdentifier)" Analyze="True" />
          <Member Name=".ctor(System.String,System.String)" Analyze="True" />
          <Member Name="AssociatedPropertyIdentifier" Analyze="True">
           <Accessors>
            <Accessor Name="get_AssociatedPropertyIdentifier():MathNet.Symbolics.Core.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Deserialize(MathNet.Symbolics.Backend.Context,System.Xml.XmlReader):MathNet.Symbolics.Backend.Properties.Category" Analyze="True" />
          <Member Name="Equals(MathNet.Symbolics.Backend.Properties.Category):System.Boolean" Analyze="True" />
          <Member Name="EvaluateJointChildMembership(System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Core.Signal&gt;):MathNet.Symbolics.Backend.Properties.ECategoryMembership" Analyze="True" />
          <Member Name="id" Analyze="True" />
          <Member Name="Identifier" Analyze="True">
           <Accessors>
            <Accessor Name="get_Identifier():MathNet.Symbolics.Core.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="InnerSerialize(System.Xml.XmlWriter):System.Void" Analyze="True" />
          <Member Name="IsMember(MathNet.Symbolics.Core.Port):MathNet.Symbolics.Backend.Properties.ECategoryMembership" Analyze="True" />
          <Member Name="IsMember(MathNet.Symbolics.Core.Signal,System.Boolean):MathNet.Symbolics.Backend.Properties.ECategoryMembership" Analyze="True" />
          <Member Name="Serialize(System.Xml.XmlWriter,MathNet.Symbolics.Backend.Properties.Category):System.Void" Analyze="True" />
          <Member Name="TagSignal(MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Backend.Properties.ECategoryMembership,System.Boolean):MathNet.Symbolics.Backend.Properties.CategoryMembershipProperty" Analyze="True" />
          <Member Name="TagSignal(MathNet.Symbolics.Core.Signal,System.Boolean):MathNet.Symbolics.Backend.Properties.CategoryMembershipProperty" Analyze="True" />
          <Member Name="TryGetCachedMembership(MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Backend.Properties.ECategoryMembership&amp;):System.Boolean" Analyze="True" />
         </Members>
        </Type>
        <Type Name="CategoryMembershipProperty" Analyze="True">
         <Members>
          <Member Name=".ctor(MathNet.Symbolics.Backend.Properties.Category,MathNet.Symbolics.Backend.Properties.ECategoryMembership,System.Boolean)" Analyze="True" />
          <Member Name="_category" Analyze="True" />
          <Member Name="_categoryMembership" Analyze="True" />
          <Member Name="_isSticky" Analyze="True" />
          <Member Name="_propertyId" Analyze="True" />
          <Member Name="Category" Analyze="True">
           <Accessors>
            <Accessor Name="get_Category():MathNet.Symbolics.Backend.Properties.Category" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="CategoryMembership" Analyze="True">
           <Accessors>
            <Accessor Name="get_CategoryMembership():MathNet.Symbolics.Backend.Properties.ECategoryMembership" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Equals(MathNet.Symbolics.Backend.Properties.Property):System.Boolean" Analyze="True" />
          <Member Name="InnerDeserialize(MathNet.Symbolics.Backend.Context,System.Xml.XmlReader):MathNet.Symbolics.Backend.Properties.CategoryMembershipProperty" Analyze="True" />
          <Member Name="InnerSerialize(System.Xml.XmlWriter):System.Void" Analyze="True" />
          <Member Name="IsSticky" Analyze="True">
           <Accessors>
            <Accessor Name="get_IsSticky():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="PropertyId" Analyze="True">
           <Accessors>
            <Accessor Name="get_PropertyId():MathNet.Symbolics.Core.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="StillValidAfterDrive(MathNet.Symbolics.Core.Signal):System.Boolean" Analyze="True" />
          <Member Name="StillValidAfterEvent(MathNet.Symbolics.Core.Signal):System.Boolean" Analyze="True" />
          <Member Name="StillValidAfterUndrive(MathNet.Symbolics.Core.Signal):System.Boolean" Analyze="True" />
         </Members>
        </Type>
        <Type Name="ECategoryMembership" Analyze="True">
         <Members>
          <Member Name="Member" Analyze="True" />
          <Member Name="NotMember" Analyze="True" />
          <Member Name="Unknown" Analyze="True" />
          <Member Name="value__" Analyze="True" />
         </Members>
        </Type>
        <Type Name="Property" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="Deserialize(MathNet.Symbolics.Backend.Context,System.Xml.XmlReader):MathNet.Symbolics.Backend.Properties.Property" Analyze="True" />
          <Member Name="Equals(MathNet.Symbolics.Backend.Properties.Property):System.Boolean" Analyze="True" />
          <Member Name="Equals(System.Object):System.Boolean" Analyze="True" />
          <Member Name="EqualsById(MathNet.Symbolics.Backend.Properties.Property):System.Boolean" Analyze="True" />
          <Member Name="EqualsById(MathNet.Symbolics.Core.MathIdentifier):System.Boolean" Analyze="True" />
          <Member Name="InnerSerialize(System.Xml.XmlWriter):System.Void" Analyze="True" />
          <Member Name="PropertyId" Analyze="True">
           <Accessors>
            <Accessor Name="get_PropertyId():MathNet.Symbolics.Core.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Serialize(System.Xml.XmlWriter,MathNet.Symbolics.Backend.Properties.Property):System.Void" Analyze="True" />
          <Member Name="StillValidAfterDrive(MathNet.Symbolics.Core.Signal):System.Boolean" Analyze="True" />
          <Member Name="StillValidAfterEvent(MathNet.Symbolics.Core.Signal):System.Boolean" Analyze="True" />
          <Member Name="StillValidAfterUndrive(MathNet.Symbolics.Core.Signal):System.Boolean" Analyze="True" />
          <Member Name="ToString():System.String" Analyze="True" />
         </Members>
        </Type>
        <Type Name="PropertyBag" Analyze="True">
         <Members>
          <Member Name=".ctor(MathNet.Symbolics.Backend.Context)" Analyze="True" />
          <Member Name="_context" Analyze="True" />
          <Member Name="_properties" Analyze="True" />
          <Member Name="_table" Analyze="True" />
          <Member Name="AddProperty(MathNet.Symbolics.Backend.Properties.Property):System.Void" Analyze="True" />
          <Member Name="AddPropertyRange(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Backend.Properties.Property&gt;):System.Void" Analyze="True" />
          <Member Name="ContainsProperty(MathNet.Symbolics.Core.MathIdentifier):System.Boolean" Analyze="True" />
          <Member Name="Context" Analyze="True">
           <Accessors>
            <Accessor Name="get_Context():MathNet.Symbolics.Backend.Context" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Count" Analyze="True">
           <Accessors>
            <Accessor Name="get_Count():System.Int32" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="GetEnumerator():System.Collections.Generic.IEnumerator`1&lt;MathNet.Symbolics.Backend.Properties.Property&gt;" Analyze="True" />
          <Member Name="Item[System.Int32]" Analyze="True">
           <Accessors>
            <Accessor Name="get_Item(System.Int32):MathNet.Symbolics.Backend.Properties.Property" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="LookupProperty(MathNet.Symbolics.Core.MathIdentifier):MathNet.Symbolics.Backend.Properties.Property" Analyze="True" />
          <Member Name="RemoveAllProperties():System.Void" Analyze="True" />
          <Member Name="RemoveProperty(MathNet.Symbolics.Backend.Properties.Property):System.Void" Analyze="True" />
          <Member Name="RemoveProperty(MathNet.Symbolics.Core.MathIdentifier):System.Void" Analyze="True" />
          <Member Name="System.Collections.IEnumerable.GetEnumerator():System.Collections.IEnumerator" Analyze="True" />
          <Member Name="TryLookupProperty(MathNet.Symbolics.Core.MathIdentifier,MathNet.Symbolics.Backend.Properties.Property&amp;):System.Boolean" Analyze="True" />
          <Member Name="TryLookupProperty(MathNet.Symbolics.Core.MathIdentifier,T&amp;):System.Boolean" Analyze="True" />
          <Member Name="ValidatePropertiesAfterDrive(MathNet.Symbolics.Core.Signal):System.Void" Analyze="True" />
          <Member Name="ValidatePropertiesAfterEvent(MathNet.Symbolics.Core.Signal):System.Void" Analyze="True" />
          <Member Name="ValidatePropertiesAfterUndrive(MathNet.Symbolics.Core.Signal):System.Void" Analyze="True" />
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="MathNet.Symbolics.Backend.Simulation" Analyze="True">
       <Types>
        <Type Name="EventTimeline" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="_timeline" Analyze="True" />
          <Member Name="InsertTime(System.TimeSpan):System.Void" Analyze="True" />
          <Member Name="TryNextEventTime(System.TimeSpan&amp;):System.Boolean" Analyze="True" />
         </Members>
        </Type>
        <Type Name="NotifyNewValue" Analyze="True">
         <Members>
          <Member Name=".ctor(System.Object,System.IntPtr)" Analyze="True" />
          <Member Name="BeginInvoke(System.AsyncCallback,System.Object):System.IAsyncResult" Analyze="True" />
          <Member Name="EndInvoke(System.IAsyncResult):System.Void" Analyze="True" />
          <Member Name="Invoke():System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="Scheduler" Analyze="True">
         <Members>
          <Member Name=".ctor(MathNet.Symbolics.Backend.Context)" Analyze="True" />
          <Member Name="_context" Analyze="True" />
          <Member Name="_deltaEvents" Analyze="True" />
          <Member Name="_eventSignals" Analyze="True" />
          <Member Name="_phase" Analyze="True" />
          <Member Name="_simulationTime" Analyze="True" />
          <Member Name="_timeQueue" Analyze="True" />
          <Member Name="Context" Analyze="True">
           <Accessors>
            <Accessor Name="get_Context():MathNet.Symbolics.Backend.Context" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="CurrentPhase" Analyze="True">
           <Accessors>
            <Accessor Name="get_CurrentPhase():MathNet.Symbolics.Backend.Simulation.SchedulerPhase" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="SimulationTimeProgress" Kind="Event" Analyze="True">
           <Accessors>
            <Accessor Name="add_SimulationTimeProgress(System.EventHandler`1&lt;MathNet.Symbolics.Backend.Events.SimulationTimeEventArgs&gt;):System.Void" Analyze="True" />
            <Accessor Name="remove_SimulationTimeProgress(System.EventHandler`1&lt;MathNet.Symbolics.Backend.Events.SimulationTimeEventArgs&gt;):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="OnSimulationTimeProgress(System.TimeSpan):System.Void" Analyze="True" />
          <Member Name="ResetSimulationTime():System.Void" Analyze="True" />
          <Member Name="RunProcessExecutionPhase():System.Void" Analyze="True" />
          <Member Name="RunSignalAssignmentPhase(System.Boolean):System.TimeSpan" Analyze="True" />
          <Member Name="ScheduleDelayedEvent(MathNet.Symbolics.Backend.Simulation.TimedSignalEventItem):System.Void" Analyze="True" />
          <Member Name="ScheduleDeltaEvent(MathNet.Symbolics.Backend.Simulation.SignalEventItem):System.Void" Analyze="True" />
          <Member Name="SimulateFor(System.Int32):System.TimeSpan" Analyze="True" />
          <Member Name="SimulateFor(System.TimeSpan):System.TimeSpan" Analyze="True" />
          <Member Name="SimulateInstant():System.Boolean" Analyze="True" />
          <Member Name="SimulationTime" Analyze="True">
           <Accessors>
            <Accessor Name="get_SimulationTime():System.TimeSpan" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="SimulationTimeProgress" Analyze="True" />
         </Members>
        </Type>
        <Type Name="SchedulerPhase" Analyze="True">
         <Members>
          <Member Name="Idle" Analyze="True" />
          <Member Name="ProcessExecution" Analyze="True" />
          <Member Name="SignalAssignment" Analyze="True" />
          <Member Name="value__" Analyze="True" />
         </Members>
        </Type>
        <Type Name="SetEventFlag" Analyze="True">
         <Members>
          <Member Name=".ctor(System.Object,System.IntPtr)" Analyze="True" />
          <Member Name="BeginInvoke(System.Boolean,System.AsyncCallback,System.Object):System.IAsyncResult" Analyze="True" />
          <Member Name="EndInvoke(System.IAsyncResult):System.Void" Analyze="True" />
          <Member Name="Invoke(System.Boolean):System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="SetValue" Analyze="True">
         <Members>
          <Member Name=".ctor(System.Object,System.IntPtr)" Analyze="True" />
          <Member Name="BeginInvoke(MathNet.Symbolics.Core.ValueStructure,System.AsyncCallback,System.Object):System.IAsyncResult" Analyze="True" />
          <Member Name="EndInvoke(System.IAsyncResult):System.Boolean" Analyze="True" />
          <Member Name="Invoke(MathNet.Symbolics.Core.ValueStructure):System.Boolean" Analyze="True" />
         </Members>
        </Type>
        <Type Name="SignalDelayedEventTimeline" Analyze="True">
         <Members>
          <Member Name=".ctor(MathNet.Symbolics.Backend.Simulation.Scheduler)" Analyze="True" />
          <Member Name="_scheduler" Analyze="True" />
          <Member Name="_timeline" Analyze="True" />
          <Member Name="InsertDelayedEvent(MathNet.Symbolics.Backend.Simulation.TimedSignalEventItem):System.Void" Analyze="True" />
          <Member Name="RemoveAllAfterIncluding(System.Collections.Generic.LinkedListNode`1&lt;MathNet.Symbolics.Backend.Simulation.TimedSignalEventItem&gt;):System.Void" Analyze="True" />
          <Member Name="scheduler_SimulationTimeProgress(System.Object,MathNet.Symbolics.Backend.Events.SimulationTimeEventArgs):System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="SignalEventItem" Analyze="True">
         <Members>
          <Member Name=".ctor(MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.ValueStructure,MathNet.Symbolics.Backend.Simulation.SetValue,MathNet.Symbolics.Backend.Simulation.SetEventFlag,MathNet.Symbolics.Backend.Simulation.NotifyNewValue)" Analyze="True" />
          <Member Name="_newValue" Analyze="True" />
          <Member Name="_notifyNewValue" Analyze="True" />
          <Member Name="_setEventFlag" Analyze="True" />
          <Member Name="_setValue" Analyze="True" />
          <Member Name="_signal" Analyze="True" />
          <Member Name="NewValue" Analyze="True">
           <Accessors>
            <Accessor Name="get_NewValue():MathNet.Symbolics.Core.ValueStructure" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="NotifyNewValue" Analyze="True">
           <Accessors>
            <Accessor Name="get_NotifyNewValue():MathNet.Symbolics.Backend.Simulation.NotifyNewValue" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="SetEventFlag" Analyze="True">
           <Accessors>
            <Accessor Name="get_SetEventFlag():MathNet.Symbolics.Backend.Simulation.SetEventFlag" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="SetValue" Analyze="True">
           <Accessors>
            <Accessor Name="get_SetValue():MathNet.Symbolics.Backend.Simulation.SetValue" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Signal" Analyze="True">
           <Accessors>
            <Accessor Name="get_Signal():MathNet.Symbolics.Core.Signal" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="TimedSignalEventItem" Analyze="True">
         <Members>
          <Member Name=".ctor(MathNet.Symbolics.Backend.Simulation.SignalEventItem,System.TimeSpan)" Analyze="True" />
          <Member Name="_item" Analyze="True" />
          <Member Name="_timeSpan" Analyze="True" />
          <Member Name="Item" Analyze="True">
           <Accessors>
            <Accessor Name="get_Item():MathNet.Symbolics.Backend.Simulation.SignalEventItem" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="TimeSpan" Analyze="True">
           <Accessors>
            <Accessor Name="get_TimeSpan():System.TimeSpan" Analyze="True" />
            <Accessor Name="set_TimeSpan(System.TimeSpan):System.Void" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="MathNet.Symbolics.Backend.SystemBuilder" Analyze="True">
       <Types>
        <Type Name="BuilderState" Analyze="True">
         <Members>
          <Member Name="Buses" Analyze="True" />
          <Member Name="Idle" Analyze="True" />
          <Member Name="InputSignals" Analyze="True" />
          <Member Name="NamedBuses" Analyze="True" />
          <Member Name="NamedSignals" Analyze="True" />
          <Member Name="OutputSignals" Analyze="True" />
          <Member Name="Ports" Analyze="True" />
          <Member Name="SignalDetails" Analyze="True" />
          <Member Name="Signals" Analyze="True" />
          <Member Name="System" Analyze="True" />
          <Member Name="value__" Analyze="True" />
         </Members>
        </Type>
        <Type Name="BuilderStateMachine" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="_state" Analyze="True" />
          <Member Name="AdvanceTo(MathNet.Symbolics.Backend.SystemBuilder.BuilderState):System.Void" Analyze="True" />
          <Member Name="CanAdvanceTo(MathNet.Symbolics.Backend.SystemBuilder.BuilderState):System.Boolean" Analyze="True" />
          <Member Name="CurrentState" Analyze="True">
           <Accessors>
            <Accessor Name="get_CurrentState():MathNet.Symbolics.Backend.SystemBuilder.BuilderState" Analyze="True" />
            <Accessor Name="set_CurrentState(MathNet.Symbolics.Backend.SystemBuilder.BuilderState):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="IsInsideGroup" Analyze="True">
           <Accessors>
            <Accessor Name="get_IsInsideGroup():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="IsInsideSystem" Analyze="True">
           <Accessors>
            <Accessor Name="get_IsInsideSystem():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="OnAfterAdvance(MathNet.Symbolics.Backend.SystemBuilder.BuilderState,MathNet.Symbolics.Backend.SystemBuilder.BuilderState,System.Boolean,System.Boolean):System.Void" Analyze="True" />
          <Member Name="Reset():System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="ExpressionWriter" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="_busMappings" Analyze="True" />
          <Member Name="_current" Analyze="True" />
          <Member Name="_signalMappings" Analyze="True" />
          <Member Name="_writtenExpressions" Analyze="True" />
          <Member Name="AppendSignalConstraint(System.Guid,MathNet.Symbolics.Backend.SystemBuilder.PropertyPack):System.Void" Analyze="True" />
          <Member Name="AppendSignalProperty(System.Guid,MathNet.Symbolics.Backend.SystemBuilder.PropertyPack):System.Void" Analyze="True" />
          <Member Name="AppendSignalValue(System.Guid,MathNet.Symbolics.Backend.SystemBuilder.StructurePack):System.Void" Analyze="True" />
          <Member Name="AppendSystemInputSignal(System.Guid):System.Void" Analyze="True" />
          <Member Name="AppendSystemNamedBus(System.Guid,System.String):System.Void" Analyze="True" />
          <Member Name="AppendSystemNamedSignal(System.Guid,System.String):System.Void" Analyze="True" />
          <Member Name="AppendSystemOutputSignal(System.Guid):System.Void" Analyze="True" />
          <Member Name="BeginBuildSystem(System.Int32,System.Int32,System.Int32):System.Void" Analyze="True" />
          <Member Name="BuildBus(System.String):System.Guid" Analyze="True" />
          <Member Name="BuildPort(MathNet.Symbolics.Core.MathIdentifier,MathNet.Symbolics.Backend.Containers.InstanceIdSet,MathNet.Symbolics.Backend.Containers.InstanceIdSet,MathNet.Symbolics.Backend.Containers.InstanceIdSet):System.Guid" Analyze="True" />
          <Member Name="BuildSignal(System.String,System.Boolean,System.Boolean):System.Guid" Analyze="True" />
          <Member Name="EndBuildSystem():System.Void" Analyze="True" />
          <Member Name="WrittenExpressions" Analyze="True">
           <Accessors>
            <Accessor Name="get_WrittenExpressions():System.Collections.Generic.Queue`1&lt;System.String&gt;" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="ISystemBuilder" Analyze="True">
         <Members>
          <Member Name="AppendSignalConstraint(System.Guid,MathNet.Symbolics.Backend.SystemBuilder.PropertyPack):System.Void" Analyze="True" />
          <Member Name="AppendSignalProperty(System.Guid,MathNet.Symbolics.Backend.SystemBuilder.PropertyPack):System.Void" Analyze="True" />
          <Member Name="AppendSignalValue(System.Guid,MathNet.Symbolics.Backend.SystemBuilder.StructurePack):System.Void" Analyze="True" />
          <Member Name="AppendSystemInputSignal(System.Guid):System.Void" Analyze="True" />
          <Member Name="AppendSystemNamedBus(System.Guid,System.String):System.Void" Analyze="True" />
          <Member Name="AppendSystemNamedSignal(System.Guid,System.String):System.Void" Analyze="True" />
          <Member Name="AppendSystemOutputSignal(System.Guid):System.Void" Analyze="True" />
          <Member Name="BeginBuildSystem(System.Int32,System.Int32,System.Int32):System.Void" Analyze="True" />
          <Member Name="BuildBus(System.String):System.Guid" Analyze="True" />
          <Member Name="BuildPort(MathNet.Symbolics.Core.MathIdentifier,MathNet.Symbolics.Backend.Containers.InstanceIdSet,MathNet.Symbolics.Backend.Containers.InstanceIdSet,MathNet.Symbolics.Backend.Containers.InstanceIdSet):System.Guid" Analyze="True" />
          <Member Name="BuildSignal(System.String,System.Boolean,System.Boolean):System.Guid" Analyze="True" />
          <Member Name="EndBuildSystem():System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="PropertyPack" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name=".ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" Analyze="True" />
          <Member Name=".ctor(System.String)" Analyze="True" />
          <Member Name="_serializedXmlFragment" Analyze="True" />
          <Member Name="Pack(MathNet.Symbolics.Backend.Properties.Property,System.Collections.Generic.Dictionary`2&lt;System.Guid,System.Guid&gt;,System.Collections.Generic.Dictionary`2&lt;System.Guid,System.Guid&gt;):MathNet.Symbolics.Backend.SystemBuilder.PropertyPack" Analyze="True" />
          <Member Name="Repack(System.String,System.Collections.Generic.Dictionary`2&lt;System.Guid,System.Guid&gt;,System.Collections.Generic.Dictionary`2&lt;System.Guid,System.Guid&gt;):MathNet.Symbolics.Backend.SystemBuilder.PropertyPack" Analyze="True" />
          <Member Name="SerializedXmlFragment" Analyze="True">
           <Accessors>
            <Accessor Name="get_SerializedXmlFragment():System.String" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext):System.Void" Analyze="True" />
          <Member Name="System.Xml.Serialization.IXmlSerializable.GetSchema():System.Xml.Schema.XmlSchema" Analyze="True" />
          <Member Name="System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader):System.Void" Analyze="True" />
          <Member Name="System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter):System.Void" Analyze="True" />
          <Member Name="Unpack(MathNet.Symbolics.Backend.Context,System.Collections.Generic.Dictionary`2&lt;System.Guid,MathNet.Symbolics.Core.Signal&gt;,System.Collections.Generic.Dictionary`2&lt;System.Guid,MathNet.Symbolics.Core.Bus&gt;):MathNet.Symbolics.Backend.Properties.Property" Analyze="True" />
         </Members>
        </Type>
        <Type Name="StructurePack" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name=".ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" Analyze="True" />
          <Member Name=".ctor(System.String)" Analyze="True" />
          <Member Name="_serializedXmlFragment" Analyze="True" />
          <Member Name="Pack(MathNet.Symbolics.Core.ValueStructure,System.Collections.Generic.Dictionary`2&lt;System.Guid,System.Guid&gt;,System.Collections.Generic.Dictionary`2&lt;System.Guid,System.Guid&gt;):MathNet.Symbolics.Backend.SystemBuilder.StructurePack" Analyze="True" />
          <Member Name="Repack(System.String,System.Collections.Generic.Dictionary`2&lt;System.Guid,System.Guid&gt;,System.Collections.Generic.Dictionary`2&lt;System.Guid,System.Guid&gt;):MathNet.Symbolics.Backend.SystemBuilder.StructurePack" Analyze="True" />
          <Member Name="SerializedXmlFragment" Analyze="True">
           <Accessors>
            <Accessor Name="get_SerializedXmlFragment():System.String" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext):System.Void" Analyze="True" />
          <Member Name="System.Xml.Serialization.IXmlSerializable.GetSchema():System.Xml.Schema.XmlSchema" Analyze="True" />
          <Member Name="System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader):System.Void" Analyze="True" />
          <Member Name="System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter):System.Void" Analyze="True" />
          <Member Name="Unpack(MathNet.Symbolics.Backend.Context,System.Collections.Generic.Dictionary`2&lt;System.Guid,MathNet.Symbolics.Core.Signal&gt;,System.Collections.Generic.Dictionary`2&lt;System.Guid,MathNet.Symbolics.Core.Bus&gt;):MathNet.Symbolics.Core.ValueStructure" Analyze="True" />
         </Members>
        </Type>
        <Type Name="SystemReader" Analyze="True">
         <Members>
          <Member Name=".ctor(MathNet.Symbolics.Backend.SystemBuilder.ISystemBuilder)" Analyze="True" />
          <Member Name="_builder" Analyze="True" />
          <Member Name="ReadSystem(MathNet.Symbolics.Workplace.MathSystem):System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="SystemWriter" Analyze="True">
         <Members>
          <Member Name=".ctor(MathNet.Symbolics.Backend.Context)" Analyze="True" />
          <Member Name="_busMappings" Analyze="True" />
          <Member Name="_context" Analyze="True" />
          <Member Name="_signalMappings" Analyze="True" />
          <Member Name="_system" Analyze="True" />
          <Member Name="_writtenSystems" Analyze="True" />
          <Member Name="&lt;MapBuses&gt;b__1(System.Guid):MathNet.Symbolics.Core.Bus" Analyze="True" />
          <Member Name="&lt;MapSignals&gt;b__0(System.Guid):MathNet.Symbolics.Core.Signal" Analyze="True" />
          <Member Name="AppendSignalConstraint(System.Guid,MathNet.Symbolics.Backend.SystemBuilder.PropertyPack):System.Void" Analyze="True" />
          <Member Name="AppendSignalProperty(System.Guid,MathNet.Symbolics.Backend.SystemBuilder.PropertyPack):System.Void" Analyze="True" />
          <Member Name="AppendSignalValue(System.Guid,MathNet.Symbolics.Backend.SystemBuilder.StructurePack):System.Void" Analyze="True" />
          <Member Name="AppendSystemInputSignal(System.Guid):System.Void" Analyze="True" />
          <Member Name="AppendSystemNamedBus(System.Guid,System.String):System.Void" Analyze="True" />
          <Member Name="AppendSystemNamedSignal(System.Guid,System.String):System.Void" Analyze="True" />
          <Member Name="AppendSystemOutputSignal(System.Guid):System.Void" Analyze="True" />
          <Member Name="BeginBuildSystem(System.Int32,System.Int32,System.Int32):System.Void" Analyze="True" />
          <Member Name="BuildBus(System.String):System.Guid" Analyze="True" />
          <Member Name="BuildPort(MathNet.Symbolics.Core.MathIdentifier,MathNet.Symbolics.Backend.Containers.InstanceIdSet,MathNet.Symbolics.Backend.Containers.InstanceIdSet,MathNet.Symbolics.Backend.Containers.InstanceIdSet):System.Guid" Analyze="True" />
          <Member Name="BuildSignal(System.String,System.Boolean,System.Boolean):System.Guid" Analyze="True" />
          <Member Name="Context" Analyze="True">
           <Accessors>
            <Accessor Name="get_Context():MathNet.Symbolics.Backend.Context" Analyze="True" />
            <Accessor Name="set_Context(MathNet.Symbolics.Backend.Context):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="EndBuildSystem():System.Void" Analyze="True" />
          <Member Name="MapBuses(MathNet.Symbolics.Backend.Containers.InstanceIdSet):MathNet.Symbolics.Backend.Containers.BusSet" Analyze="True" />
          <Member Name="MapSignals(MathNet.Symbolics.Backend.Containers.InstanceIdSet):MathNet.Symbolics.Backend.Containers.SignalSet" Analyze="True" />
          <Member Name="WrittenSystems" Analyze="True">
           <Accessors>
            <Accessor Name="get_WrittenSystems():System.Collections.Generic.Queue`1&lt;MathNet.Symbolics.Workplace.MathSystem&gt;" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="XmlSystemReader" Analyze="True">
         <Members>
          <Member Name=".ctor(MathNet.Symbolics.Backend.SystemBuilder.ISystemBuilder)" Analyze="True" />
          <Member Name="_builder" Analyze="True" />
          <Member Name="_fsm" Analyze="True" />
          <Member Name="_reader" Analyze="True" />
          <Member Name="ReadSystems(System.Xml.XmlReader,System.Boolean):System.Void" Analyze="True" />
          <Member Name="ReadToElement():System.Boolean" Analyze="True" />
         </Members>
        </Type>
        <Type Name="XmlSystemReader+StateMachine" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name=".ctor(System.Xml.XmlReader)" Analyze="True" />
          <Member Name="_reader" Analyze="True" />
          <Member Name="Reader" Analyze="True">
           <Accessors>
            <Accessor Name="get_Reader():System.Xml.XmlReader" Analyze="True" />
            <Accessor Name="set_Reader(System.Xml.XmlReader):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ReadNextState():MathNet.Symbolics.Backend.SystemBuilder.BuilderState" Analyze="True" />
         </Members>
        </Type>
        <Type Name="XmlSystemWriter" Analyze="True">
         <Members>
          <Member Name=".ctor(MathNet.Symbolics.Backend.Context,System.Xml.XmlWriter)" Analyze="True" />
          <Member Name="_context" Analyze="True" />
          <Member Name="_fsm" Analyze="True" />
          <Member Name="_writer" Analyze="True" />
          <Member Name="AppendSignalConstraint(System.Guid,MathNet.Symbolics.Backend.SystemBuilder.PropertyPack):System.Void" Analyze="True" />
          <Member Name="AppendSignalProperty(System.Guid,MathNet.Symbolics.Backend.SystemBuilder.PropertyPack):System.Void" Analyze="True" />
          <Member Name="AppendSignalValue(System.Guid,MathNet.Symbolics.Backend.SystemBuilder.StructurePack):System.Void" Analyze="True" />
          <Member Name="AppendSystemInputSignal(System.Guid):System.Void" Analyze="True" />
          <Member Name="AppendSystemNamedBus(System.Guid,System.String):System.Void" Analyze="True" />
          <Member Name="AppendSystemNamedSignal(System.Guid,System.String):System.Void" Analyze="True" />
          <Member Name="AppendSystemOutputSignal(System.Guid):System.Void" Analyze="True" />
          <Member Name="BeginBuildSystem(System.Int32,System.Int32,System.Int32):System.Void" Analyze="True" />
          <Member Name="BuildBus(System.String):System.Guid" Analyze="True" />
          <Member Name="BuildPort(MathNet.Symbolics.Core.MathIdentifier,MathNet.Symbolics.Backend.Containers.InstanceIdSet,MathNet.Symbolics.Backend.Containers.InstanceIdSet,MathNet.Symbolics.Backend.Containers.InstanceIdSet):System.Guid" Analyze="True" />
          <Member Name="BuildSignal(System.String,System.Boolean,System.Boolean):System.Guid" Analyze="True" />
          <Member Name="Context" Analyze="True">
           <Accessors>
            <Accessor Name="get_Context():MathNet.Symbolics.Backend.Context" Analyze="True" />
            <Accessor Name="set_Context(MathNet.Symbolics.Backend.Context):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="EndBuildSystem():System.Void" Analyze="True" />
          <Member Name="State" Analyze="True">
           <Accessors>
            <Accessor Name="get_State():MathNet.Symbolics.Backend.SystemBuilder.BuilderState" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Writer" Analyze="True">
           <Accessors>
            <Accessor Name="get_Writer():System.Xml.XmlWriter" Analyze="True" />
            <Accessor Name="set_Writer(System.Xml.XmlWriter):System.Void" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="XmlSystemWriter+StateMachine" Analyze="True">
         <Members>
          <Member Name=".ctor(System.Xml.XmlWriter)" Analyze="True" />
          <Member Name="_writer" Analyze="True" />
          <Member Name="OnAfterAdvance(MathNet.Symbolics.Backend.SystemBuilder.BuilderState,MathNet.Symbolics.Backend.SystemBuilder.BuilderState,System.Boolean,System.Boolean):System.Void" Analyze="True" />
          <Member Name="Writer" Analyze="True">
           <Accessors>
            <Accessor Name="get_Writer():System.Xml.XmlWriter" Analyze="True" />
            <Accessor Name="set_Writer(System.Xml.XmlWriter):System.Void" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="MathNet.Symbolics.Backend.Templates" Analyze="True">
       <Types>
        <Type Name="BuildProperty" Analyze="True">
         <Members>
          <Member Name=".ctor(System.Object,System.IntPtr)" Analyze="True" />
          <Member Name="BeginInvoke(MathNet.Symbolics.Core.Signal,System.AsyncCallback,System.Object):System.IAsyncResult" Analyze="True" />
          <Member Name="EndInvoke(System.IAsyncResult):System.Void" Analyze="True" />
          <Member Name="Invoke(MathNet.Symbolics.Core.Signal):System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="CompoundArchitecture" Analyze="True">
         <Members>
          <Member Name=".ctor(MathNet.Symbolics.Core.MathIdentifier,MathNet.Symbolics.Core.MathIdentifier,MathNet.Symbolics.Core.Port,MathNet.Symbolics.Workplace.MathSystem)" Analyze="True" />
          <Member Name="CompoundArchitecture_SignalValueChanged(System.Object,MathNet.Symbolics.Backend.Events.SignalEventArgs):System.Void" Analyze="True" />
          <Member Name="inputSignals" Analyze="True" />
          <Member Name="outputSignals" Analyze="True" />
          <Member Name="ReregisterArchitecture(MathNet.Symbolics.Core.Port,MathNet.Symbolics.Core.Port):System.Void" Analyze="True" />
          <Member Name="SupportsPort(MathNet.Symbolics.Core.Port):System.Boolean" Analyze="True" />
          <Member Name="system" Analyze="True" />
          <Member Name="system_OutputValueChanged(System.Object,MathNet.Symbolics.Backend.Events.IndexedSignalEventArgs):System.Void" Analyze="True" />
          <Member Name="UnregisterArchitecture():System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="CompoundArchitectureFactory" Analyze="True">
         <Members>
          <Member Name=".ctor(MathNet.Symbolics.Core.MathIdentifier,MathNet.Symbolics.Core.MathIdentifier,MathNet.Symbolics.Workplace.MathSystem)" Analyze="True" />
          <Member Name=".ctor(MathNet.Symbolics.Core.MathIdentifier,MathNet.Symbolics.Core.MathIdentifier,System.String)" Analyze="True" />
          <Member Name=".ctor(MathNet.Symbolics.Core.MathIdentifier,MathNet.Symbolics.Core.MathIdentifier,System.String,System.Int32,System.Int32,System.Int32)" Analyze="True" />
          <Member Name="_architectureId" Analyze="True" />
          <Member Name="_busCnt" Analyze="True" />
          <Member Name="_entityId" Analyze="True" />
          <Member Name="_inputCnt" Analyze="True" />
          <Member Name="_outputCnt" Analyze="True" />
          <Member Name="_xml" Analyze="True" />
          <Member Name="EntityId" Analyze="True">
           <Accessors>
            <Accessor Name="get_EntityId():MathNet.Symbolics.Core.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="InstantiateToPort(MathNet.Symbolics.Core.Port):MathNet.Symbolics.Core.Architecture" Analyze="True" />
          <Member Name="SupportsPort(MathNet.Symbolics.Core.Port):System.Boolean" Analyze="True" />
         </Members>
        </Type>
        <Type Name="CompoundProcess" Analyze="True">
         <Members>
          <Member Name=".ctor(MathNet.Symbolics.Workplace.MathSystem,System.Int32[],System.Int32[],System.Int32[])" Analyze="True" />
          <Member Name="Action(System.Boolean,MathNet.Symbolics.Core.Signal):System.Void" Analyze="True" />
          <Member Name="buses" Analyze="True" />
          <Member Name="busIndexes" Analyze="True" />
          <Member Name="inputSignalIndexes" Analyze="True" />
          <Member Name="inputSignals" Analyze="True" />
          <Member Name="outputSignalIndexes" Analyze="True" />
          <Member Name="outputSignals" Analyze="True" />
          <Member Name="Register(System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Core.Signal&gt;,System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Core.Signal&gt;,System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Core.Signal&gt;,System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Core.Bus&gt;):System.Void" Analyze="True" />
          <Member Name="system" Analyze="True" />
          <Member Name="system_OutputValueChanged(System.Object,MathNet.Symbolics.Backend.Events.IndexedSignalEventArgs):System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="ConvertFrom`1" Analyze="True">
         <Members>
          <Member Name=".ctor(System.Object,System.IntPtr)" Analyze="True" />
          <Member Name="BeginInvoke(MathNet.Symbolics.Core.ValueStructure,System.AsyncCallback,System.Object):System.IAsyncResult" Analyze="True" />
          <Member Name="EndInvoke(System.IAsyncResult):T" Analyze="True" />
          <Member Name="Invoke(MathNet.Symbolics.Core.ValueStructure):T" Analyze="True" />
         </Members>
        </Type>
        <Type Name="DefaultValue" Analyze="True">
         <Members>
          <Member Name=".ctor(System.Object,System.IntPtr)" Analyze="True" />
          <Member Name="BeginInvoke(System.AsyncCallback,System.Object):System.IAsyncResult" Analyze="True" />
          <Member Name="EndInvoke(System.IAsyncResult):MathNet.Symbolics.Core.ValueStructure" Analyze="True" />
          <Member Name="Invoke():MathNet.Symbolics.Core.ValueStructure" Analyze="True" />
         </Members>
        </Type>
        <Type Name="GenerateInternalSignalCount" Analyze="True">
         <Members>
          <Member Name=".ctor(System.Object,System.IntPtr)" Analyze="True" />
          <Member Name="BeginInvoke(MathNet.Symbolics.Core.Port,System.AsyncCallback,System.Object):System.IAsyncResult" Analyze="True" />
          <Member Name="EndInvoke(System.IAsyncResult):System.Int32" Analyze="True" />
          <Member Name="Invoke(MathNet.Symbolics.Core.Port):System.Int32" Analyze="True" />
         </Members>
        </Type>
        <Type Name="GenerateProcesses" Analyze="True">
         <Members>
          <Member Name=".ctor(System.Object,System.IntPtr)" Analyze="True" />
          <Member Name="BeginInvoke(MathNet.Symbolics.Core.Port,System.AsyncCallback,System.Object):System.IAsyncResult" Analyze="True" />
          <Member Name="EndInvoke(System.IAsyncResult):MathNet.Symbolics.Core.Process[]" Analyze="True" />
          <Member Name="Invoke(MathNet.Symbolics.Core.Port):MathNet.Symbolics.Core.Process[]" Analyze="True" />
         </Members>
        </Type>
        <Type Name="GenericArchitecture" Analyze="True">
         <Members>
          <Member Name=".ctor(MathNet.Symbolics.Core.MathIdentifier,MathNet.Symbolics.Core.MathIdentifier,System.Boolean,MathNet.Symbolics.Core.Port,System.Predicate`1&lt;MathNet.Symbolics.Core.Port&gt;,System.Int32,MathNet.Symbolics.Core.Process[])" Analyze="True" />
          <Member Name="_internalSignals" Analyze="True" />
          <Member Name="_portSupport" Analyze="True" />
          <Member Name="_processes" Analyze="True" />
          <Member Name="ReregisterArchitecture(MathNet.Symbolics.Core.Port,MathNet.Symbolics.Core.Port):System.Void" Analyze="True" />
          <Member Name="SupportsPort(MathNet.Symbolics.Core.Port):System.Boolean" Analyze="True" />
          <Member Name="UnregisterArchitecture():System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="GenericArchitectureFactory" Analyze="True">
         <Members>
          <Member Name=".ctor(MathNet.Symbolics.Core.MathIdentifier)" Analyze="True" />
          <Member Name="_entityId" Analyze="True" />
          <Member Name="_items" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate1" Analyze="True" />
          <Member Name="&lt;AddArchitecture&gt;b__0(MathNet.Symbolics.Core.Port):System.Int32" Analyze="True" />
          <Member Name="AddArchitecture(MathNet.Symbolics.Core.MathIdentifier,System.Boolean,System.Predicate`1&lt;MathNet.Symbolics.Core.Port&gt;,MathNet.Symbolics.Backend.Templates.GenerateProcesses,MathNet.Symbolics.Backend.Templates.GenerateInternalSignalCount):System.Void" Analyze="True" />
          <Member Name="AddArchitecture(MathNet.Symbolics.Core.MathIdentifier,System.Predicate`1&lt;MathNet.Symbolics.Core.Port&gt;,MathNet.Symbolics.Backend.Templates.GenerateProcesses):System.Void" Analyze="True" />
          <Member Name="AddArchitecture(MathNet.Symbolics.Core.MathIdentifier,System.Predicate`1&lt;MathNet.Symbolics.Core.Port&gt;,MathNet.Symbolics.Backend.Templates.GenerateProcesses,MathNet.Symbolics.Backend.Templates.GenerateInternalSignalCount):System.Void" Analyze="True" />
          <Member Name="EntityId" Analyze="True">
           <Accessors>
            <Accessor Name="get_EntityId():MathNet.Symbolics.Core.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="InstantiateToPort(MathNet.Symbolics.Core.Port):MathNet.Symbolics.Core.Architecture" Analyze="True" />
          <Member Name="SupportsPort(MathNet.Symbolics.Core.Port):System.Boolean" Analyze="True" />
         </Members>
        </Type>
        <Type Name="GenericArchitectureFactory+ArchitectureItem" Analyze="True">
         <Members>
          <Member Name=".ctor(MathNet.Symbolics.Core.MathIdentifier,System.Boolean,System.Predicate`1&lt;MathNet.Symbolics.Core.Port&gt;,MathNet.Symbolics.Backend.Templates.GenerateProcesses,MathNet.Symbolics.Backend.Templates.GenerateInternalSignalCount)" Analyze="True" />
          <Member Name="Id" Analyze="True" />
          <Member Name="InternalSignals" Analyze="True" />
          <Member Name="IsMathematicalOperator" Analyze="True" />
          <Member Name="PortSupport" Analyze="True" />
          <Member Name="ProcessGenerator" Analyze="True" />
         </Members>
        </Type>
        <Type Name="GenericFunctionProcess" Analyze="True">
         <Members>
          <Member Name=".ctor(System.Boolean[],System.Boolean[],System.Boolean[],System.Boolean[])" Analyze="True" />
          <Member Name=".ctor(System.Int32,System.Int32,System.Int32)" Analyze="True" />
          <Member Name=".ctor(System.Int32,System.Int32,System.Int32,System.Int32)" Analyze="True" />
          <Member Name="inCount" Analyze="True" />
          <Member Name="InCount" Analyze="True">
           <Accessors>
            <Accessor Name="get_InCount():System.Int32" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="inInput" Analyze="True" />
          <Member Name="inInternal" Analyze="True" />
          <Member Name="inputs" Analyze="True" />
          <Member Name="Inputs" Analyze="True">
           <Accessors>
            <Accessor Name="get_Inputs():MathNet.Symbolics.Core.Signal[]" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="outCount" Analyze="True" />
          <Member Name="OutCount" Analyze="True">
           <Accessors>
            <Accessor Name="get_OutCount():System.Int32" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="outInternal" Analyze="True" />
          <Member Name="outOutput" Analyze="True" />
          <Member Name="outputs" Analyze="True" />
          <Member Name="Outputs" Analyze="True">
           <Accessors>
            <Accessor Name="get_Outputs():MathNet.Symbolics.Core.Signal[]" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="PublishToOutputs(MathNet.Symbolics.Core.ValueStructure):System.Void" Analyze="True" />
          <Member Name="PublishToOutputs(MathNet.Symbolics.Core.ValueStructure,System.TimeSpan):System.Void" Analyze="True" />
          <Member Name="Register(System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Core.Signal&gt;,System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Core.Signal&gt;,System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Core.Signal&gt;,System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Core.Bus&gt;):System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="GenericMathOpArchitecture" Analyze="True">
         <Members>
          <Member Name=".ctor(MathNet.Symbolics.Core.MathIdentifier)" Analyze="True" />
          <Member Name=".ctor(MathNet.Symbolics.Core.MathIdentifier,MathNet.Symbolics.Core.MathIdentifier)" Analyze="True" />
          <Member Name=".ctor(MathNet.Symbolics.Core.MathIdentifier,MathNet.Symbolics.Core.MathIdentifier,MathNet.Symbolics.Core.Port)" Analyze="True" />
          <Member Name=".ctor(MathNet.Symbolics.Core.MathIdentifier,MathNet.Symbolics.Core.Port)" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate4" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate5" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate8" Analyze="True" />
          <Member Name="&lt;BuildTheorems&gt;b__0():MathNet.Symbolics.Backend.Patterns.Pattern" Analyze="True" />
          <Member Name="&lt;BuildTheorems&gt;b__1(MathNet.Symbolics.Core.Architecture):System.Boolean" Analyze="True" />
          <Member Name="&lt;BuildTheorems&gt;b__2(MathNet.Symbolics.Core.Port):MathNet.Symbolics.Backend.Traversing.ManipulationPlan" Analyze="True" />
          <Member Name="BuildTheorems(MathNet.Symbolics.Backend.Context):MathNet.Symbolics.Backend.Theorems.ITheorem[]" Analyze="True" />
          <Member Name="InstantiateToPort(MathNet.Symbolics.Core.Port):MathNet.Symbolics.Core.Architecture" Analyze="True" />
          <Member Name="ReregisterArchitecture(MathNet.Symbolics.Core.Port,MathNet.Symbolics.Core.Port):System.Void" Analyze="True" />
          <Member Name="UnregisterArchitecture():System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="GenericMathOpArchitecture+&lt;&gt;c__DisplayClass6" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="&lt;BuildTheorems&gt;b__3(MathNet.Symbolics.Core.Port,MathNet.Symbolics.Backend.Containers.SignalSet,System.Boolean):System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Core.Signal&gt;" Analyze="True" />
          <Member Name="context" Analyze="True" />
         </Members>
        </Type>
        <Type Name="GenericParallelProcess" Analyze="True">
         <Members>
          <Member Name=".ctor(System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean)" Analyze="True" />
          <Member Name="Action(System.Boolean,MathNet.Symbolics.Core.Signal):System.Void" Analyze="True" />
          <Member Name="count" Analyze="True" />
          <Member Name="firstInput" Analyze="True" />
          <Member Name="firstOutput" Analyze="True" />
          <Member Name="inputIsInternal" Analyze="True" />
          <Member Name="inputs" Analyze="True" />
          <Member Name="outputIsInternal" Analyze="True" />
          <Member Name="outputs" Analyze="True" />
          <Member Name="Process(MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Signal):System.Void" Analyze="True" />
          <Member Name="Register(System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Core.Signal&gt;,System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Core.Signal&gt;,System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Core.Signal&gt;,System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Core.Bus&gt;):System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="GenericPropagationTheorem" Analyze="True">
         <Members>
          <Member Name=".ctor(MathNet.Symbolics.Core.MathIdentifier,MathNet.Symbolics.Core.MathIdentifier,MathNet.Symbolics.Backend.Templates.ImpliesProperty,MathNet.Symbolics.Backend.Templates.BuildProperty)" Analyze="True" />
          <Member Name="buildProperty" Analyze="True" />
          <Member Name="id" Analyze="True" />
          <Member Name="impliesProperty" Analyze="True" />
          <Member Name="PropagatePropertyIfApplicable(MathNet.Symbolics.Core.Signal):System.Boolean" Analyze="True" />
          <Member Name="PropertyTypeId" Analyze="True">
           <Accessors>
            <Accessor Name="get_PropertyTypeId():MathNet.Symbolics.Core.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="providedPropertyId" Analyze="True" />
          <Member Name="TheoremId" Analyze="True">
           <Accessors>
            <Accessor Name="get_TheoremId():MathNet.Symbolics.Core.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="WouldBePropagatedTo(MathNet.Symbolics.Core.Signal):System.Boolean" Analyze="True" />
         </Members>
        </Type>
        <Type Name="GenericSimpleArchitecture" Analyze="True">
         <Members>
          <Member Name=".ctor(MathNet.Symbolics.Core.MathIdentifier,System.Boolean)" Analyze="True" />
          <Member Name=".ctor(MathNet.Symbolics.Core.MathIdentifier,System.Boolean,MathNet.Symbolics.Core.Port,System.Int32)" Analyze="True" />
          <Member Name="_internalSignals" Analyze="True" />
          <Member Name="_sensedSignals" Analyze="True" />
          <Member Name="Action(System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Core.Signal&gt;,System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Core.Signal&gt;,System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Core.Signal&gt;,System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Core.Bus&gt;):System.Void" Analyze="True" />
          <Member Name="InstantiateToPort(MathNet.Symbolics.Core.Port):MathNet.Symbolics.Core.Architecture" Analyze="True" />
          <Member Name="ReregisterArchitecture(MathNet.Symbolics.Core.Port,MathNet.Symbolics.Core.Port):System.Void" Analyze="True" />
          <Member Name="SenseSignal(MathNet.Symbolics.Core.Signal):System.Void" Analyze="True" />
          <Member Name="SenseSignals(System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Core.Signal&gt;,System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Core.Signal&gt;,System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Core.Bus&gt;,System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Core.Signal&gt;):System.Void" Analyze="True" />
          <Member Name="signal_SignalValueChanged(System.Object,System.EventArgs):System.Void" Analyze="True" />
          <Member Name="StopSenseSignal(MathNet.Symbolics.Core.Signal):System.Void" Analyze="True" />
          <Member Name="UnregisterArchitecture():System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="GenericStdFunctionProcess`1" Analyze="True">
         <Members>
          <Member Name=".ctor(MathNet.Symbolics.Backend.Templates.DefaultValue,MathNet.Symbolics.Backend.Templates.ConvertFrom`1&lt;T&gt;,MathNet.Symbolics.Backend.Templates.ProcessAction`1&lt;T&gt;,System.Int32)" Analyze="True" />
          <Member Name=".ctor(MathNet.Symbolics.Backend.Templates.DefaultValue,MathNet.Symbolics.Backend.Templates.ProcessAction`1&lt;T&gt;,MathNet.Symbolics.Backend.Templates.ConvertFrom`1&lt;T&gt;,System.Boolean[],System.Boolean[],System.Boolean[],System.Boolean[])" Analyze="True" />
          <Member Name=".ctor(MathNet.Symbolics.Backend.Templates.DefaultValue,MathNet.Symbolics.Backend.Templates.ProcessAction`1&lt;T&gt;,MathNet.Symbolics.Backend.Templates.ConvertFrom`1&lt;T&gt;,System.Int32,System.Int32,System.Int32)" Analyze="True" />
          <Member Name=".ctor(MathNet.Symbolics.Backend.Templates.DefaultValue,MathNet.Symbolics.Backend.Templates.ProcessAction`1&lt;T&gt;,System.Boolean[],System.Boolean[],System.Boolean[],System.Boolean[])" Analyze="True" />
          <Member Name=".ctor(MathNet.Symbolics.Backend.Templates.DefaultValue,MathNet.Symbolics.Backend.Templates.ProcessAction`1&lt;T&gt;,System.Int32,System.Int32,System.Int32)" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__0(MathNet.Symbolics.Core.ValueStructure):T" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__2(MathNet.Symbolics.Core.ValueStructure):T" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate1" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate3" Analyze="True" />
          <Member Name="Action(System.Boolean,MathNet.Symbolics.Core.Signal):System.Void" Analyze="True" />
          <Member Name="convertFrom" Analyze="True" />
          <Member Name="defaultValue" Analyze="True" />
          <Member Name="processAction" Analyze="True" />
         </Members>
        </Type>
        <Type Name="GenericStdParallelProcess`2" Analyze="True">
         <Members>
          <Member Name=".ctor(MathNet.Symbolics.Backend.Templates.ProcessItem`2&lt;Tin,Tout&gt;,MathNet.Symbolics.Backend.Templates.ConvertFrom`1&lt;Tin&gt;,System.Int32)" Analyze="True" />
          <Member Name=".ctor(MathNet.Symbolics.Backend.Templates.ProcessItem`2&lt;Tin,Tout&gt;,MathNet.Symbolics.Backend.Templates.ConvertFrom`1&lt;Tin&gt;,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean)" Analyze="True" />
          <Member Name=".ctor(MathNet.Symbolics.Backend.Templates.ProcessItem`2&lt;Tin,Tout&gt;,System.Int32)" Analyze="True" />
          <Member Name=".ctor(MathNet.Symbolics.Backend.Templates.ProcessItem`2&lt;Tin,Tout&gt;,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean)" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__0(MathNet.Symbolics.Core.ValueStructure):Tin" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__2(MathNet.Symbolics.Core.ValueStructure):Tin" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate1" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate3" Analyze="True" />
          <Member Name="convertFrom" Analyze="True" />
          <Member Name="Process(MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Signal):System.Void" Analyze="True" />
          <Member Name="processItem" Analyze="True" />
         </Members>
        </Type>
        <Type Name="ImpliesProperty" Analyze="True">
         <Members>
          <Member Name=".ctor(System.Object,System.IntPtr)" Analyze="True" />
          <Member Name="BeginInvoke(MathNet.Symbolics.Core.Signal,System.AsyncCallback,System.Object):System.IAsyncResult" Analyze="True" />
          <Member Name="EndInvoke(System.IAsyncResult):System.Boolean" Analyze="True" />
          <Member Name="Invoke(MathNet.Symbolics.Core.Signal):System.Boolean" Analyze="True" />
         </Members>
        </Type>
        <Type Name="NaryToOneGenericEntity" Analyze="True">
         <Members>
          <Member Name=".ctor(System.String,System.String,System.String)" Analyze="True" />
          <Member Name=".ctor(System.String,System.String,System.String,MathNet.Symbolics.Core.InfixNotation,System.Int32)" Analyze="True" />
          <Member Name="CompileGenericEntity(System.Int32,System.Int32):MathNet.Symbolics.Core.Entity" Analyze="True" />
         </Members>
        </Type>
        <Type Name="NearlySymmetricGenericEntity" Analyze="True">
         <Members>
          <Member Name=".ctor(System.String,System.String,System.String,MathNet.Symbolics.Core.InfixNotation,System.Int32,System.Int32,System.Int32)" Analyze="True" />
          <Member Name=".ctor(System.String,System.String,System.String,MathNet.Symbolics.Core.InfixNotation,System.Int32,System.Int32,System.Int32,System.String[])" Analyze="True" />
          <Member Name=".ctor(System.String,System.String,System.String,System.Int32,System.Int32)" Analyze="True" />
          <Member Name=".ctor(System.String,System.String,System.String,System.Int32,System.Int32,System.String[])" Analyze="True" />
          <Member Name="additionalInputs" Analyze="True" />
          <Member Name="additionalOutputs" Analyze="True" />
          <Member Name="CompileGenericEntity(System.Int32,System.Int32):MathNet.Symbolics.Core.Entity" Analyze="True" />
         </Members>
        </Type>
        <Type Name="ProcessAction`1" Analyze="True">
         <Members>
          <Member Name=".ctor(System.Object,System.IntPtr)" Analyze="True" />
          <Member Name="BeginInvoke(T,T,System.AsyncCallback,System.Object):System.IAsyncResult" Analyze="True" />
          <Member Name="EndInvoke(System.IAsyncResult):T" Analyze="True" />
          <Member Name="Invoke(T,T):T" Analyze="True" />
         </Members>
        </Type>
        <Type Name="ProcessItem`2" Analyze="True">
         <Members>
          <Member Name=".ctor(System.Object,System.IntPtr)" Analyze="True" />
          <Member Name="BeginInvoke(Tin,System.AsyncCallback,System.Object):System.IAsyncResult" Analyze="True" />
          <Member Name="EndInvoke(System.IAsyncResult):Tout" Analyze="True" />
          <Member Name="Invoke(Tin):Tout" Analyze="True" />
         </Members>
        </Type>
        <Type Name="SymmetricGenericEntity" Analyze="True">
         <Members>
          <Member Name=".ctor(System.String,System.String,System.String)" Analyze="True" />
          <Member Name=".ctor(System.String,System.String,System.String,MathNet.Symbolics.Core.InfixNotation,System.Int32)" Analyze="True" />
          <Member Name=".ctor(System.String,System.String,System.String,MathNet.Symbolics.Core.InfixNotation,System.Int32,System.String[])" Analyze="True" />
          <Member Name=".ctor(System.String,System.String,System.String,System.String[])" Analyze="True" />
          <Member Name="CompileGenericEntity(System.Int32,System.Int32):MathNet.Symbolics.Core.Entity" Analyze="True" />
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="MathNet.Symbolics.Backend.Theorems" Analyze="True">
       <Types>
        <Type Name="BasicTransformation" Analyze="True">
         <Members>
          <Member Name=".ctor(MathNet.Symbolics.Core.MathIdentifier,MathNet.Symbolics.Core.MathIdentifier,MathNet.Symbolics.Backend.Theorems.CreatePattern,MathNet.Symbolics.Backend.Traversing.EstimatePlan,MathNet.Symbolics.Backend.Traversing.ManipulatePort)" Analyze="True" />
          <Member Name="_id" Analyze="True" />
          <Member Name="_pattern" Analyze="True" />
          <Member Name="_plan" Analyze="True" />
          <Member Name="_transform" Analyze="True" />
          <Member Name="_transformationTypeId" Analyze="True" />
          <Member Name="CreatePattern():MathNet.Symbolics.Backend.Patterns.Pattern" Analyze="True" />
          <Member Name="EstimatePlan(MathNet.Symbolics.Core.Port,MathNet.Symbolics.Backend.Patterns.GroupCollection):MathNet.Symbolics.Backend.Traversing.ManipulationPlan" Analyze="True" />
          <Member Name="ManipulatePort(MathNet.Symbolics.Core.Port,MathNet.Symbolics.Backend.Containers.SignalSet,System.Boolean,MathNet.Symbolics.Backend.Patterns.GroupCollection):System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Core.Signal&gt;" Analyze="True" />
          <Member Name="ManipulateSignal(MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Signal,System.Boolean):MathNet.Symbolics.Core.Signal" Analyze="True" />
          <Member Name="TheoremId" Analyze="True">
           <Accessors>
            <Accessor Name="get_TheoremId():MathNet.Symbolics.Core.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="TransformationTypeId" Analyze="True">
           <Accessors>
            <Accessor Name="get_TransformationTypeId():MathNet.Symbolics.Core.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="ConfigureTransformation" Analyze="True">
         <Members>
          <Member Name=".ctor(System.Object,System.IntPtr)" Analyze="True" />
          <Member Name="BeginInvoke(MathNet.Symbolics.Backend.Theorems.ITransformationTheorem,System.AsyncCallback,System.Object):System.IAsyncResult" Analyze="True" />
          <Member Name="EndInvoke(System.IAsyncResult):System.Void" Analyze="True" />
          <Member Name="Invoke(MathNet.Symbolics.Backend.Theorems.ITransformationTheorem):System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="CreatePattern" Analyze="True">
         <Members>
          <Member Name=".ctor(System.Object,System.IntPtr)" Analyze="True" />
          <Member Name="BeginInvoke(System.AsyncCallback,System.Object):System.IAsyncResult" Analyze="True" />
          <Member Name="EndInvoke(System.IAsyncResult):MathNet.Symbolics.Backend.Patterns.Pattern" Analyze="True" />
          <Member Name="Invoke():MathNet.Symbolics.Backend.Patterns.Pattern" Analyze="True" />
         </Members>
        </Type>
        <Type Name="IPropagationTheorem" Analyze="True">
         <Members>
          <Member Name="PropagatePropertyIfApplicable(MathNet.Symbolics.Core.Signal):System.Boolean" Analyze="True" />
          <Member Name="PropertyTypeId" Analyze="True">
           <Accessors>
            <Accessor Name="get_PropertyTypeId():MathNet.Symbolics.Core.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="WouldBePropagatedTo(MathNet.Symbolics.Core.Signal):System.Boolean" Analyze="True" />
         </Members>
        </Type>
        <Type Name="ITheorem" Analyze="True">
         <Members>
          <Member Name="TheoremId" Analyze="True">
           <Accessors>
            <Accessor Name="get_TheoremId():MathNet.Symbolics.Core.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="ITransformationTheorem" Analyze="True">
         <Members>
          <Member Name="CreatePattern():MathNet.Symbolics.Backend.Patterns.Pattern" Analyze="True" />
          <Member Name="EstimatePlan(MathNet.Symbolics.Core.Port,MathNet.Symbolics.Backend.Patterns.GroupCollection):MathNet.Symbolics.Backend.Traversing.ManipulationPlan" Analyze="True" />
          <Member Name="ManipulatePort(MathNet.Symbolics.Core.Port,MathNet.Symbolics.Backend.Containers.SignalSet,System.Boolean,MathNet.Symbolics.Backend.Patterns.GroupCollection):System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Core.Signal&gt;" Analyze="True" />
          <Member Name="ManipulateSignal(MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Signal,System.Boolean):MathNet.Symbolics.Core.Signal" Analyze="True" />
          <Member Name="TransformationTypeId" Analyze="True">
           <Accessors>
            <Accessor Name="get_TransformationTypeId():MathNet.Symbolics.Core.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="TransformationManipulationVisitor" Analyze="True">
         <Members>
          <Member Name=".ctor(MathNet.Symbolics.Backend.Containers.TransformationTheoremTypeTable)" Analyze="True" />
          <Member Name=".ctor(MathNet.Symbolics.Backend.Containers.TransformationTheoremTypeTable,MathNet.Symbolics.Backend.Theorems.ConfigureTransformation)" Analyze="True" />
          <Member Name="_configure" Analyze="True" />
          <Member Name="_transformations" Analyze="True" />
          <Member Name="EstimatePlan(MathNet.Symbolics.Core.Port):MathNet.Symbolics.Backend.Traversing.ManipulationPlan" Analyze="True" />
          <Member Name="ManipulatePort(MathNet.Symbolics.Core.Port,MathNet.Symbolics.Backend.Containers.SignalSet,System.Boolean):System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Core.Signal&gt;" Analyze="True" />
          <Member Name="ManipulateSignal(MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Signal,System.Boolean):MathNet.Symbolics.Core.Signal" Analyze="True" />
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="MathNet.Symbolics.Backend.Traversing" Analyze="True">
       <Types>
        <Type Name="AbstractScanVisitor" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="EnterPort(MathNet.Symbolics.Core.Port,MathNet.Symbolics.Core.Signal,System.Boolean,System.Boolean):System.Boolean" Analyze="True" />
          <Member Name="EnterSignal(MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Port,System.Boolean,System.Boolean):System.Boolean" Analyze="True" />
          <Member Name="LeavePort(MathNet.Symbolics.Core.Port,MathNet.Symbolics.Core.Signal,System.Boolean,System.Boolean):System.Boolean" Analyze="True" />
          <Member Name="LeaveSignal(MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Port,System.Boolean,System.Boolean):System.Boolean" Analyze="True" />
          <Member Name="VisitCycle(MathNet.Symbolics.Core.Port,MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Signal):System.Boolean" Analyze="True" />
          <Member Name="VisitLeaf(MathNet.Symbolics.Core.Bus,System.Boolean):System.Boolean" Analyze="True" />
          <Member Name="VisitLeaf(MathNet.Symbolics.Core.Port,System.Boolean):System.Boolean" Analyze="True" />
          <Member Name="VisitLeaf(MathNet.Symbolics.Core.Signal,System.Boolean):System.Boolean" Analyze="True" />
         </Members>
        </Type>
        <Type Name="ActionContinue`1" Analyze="True">
         <Members>
          <Member Name=".ctor(System.Object,System.IntPtr)" Analyze="True" />
          <Member Name="BeginInvoke(T,System.AsyncCallback,System.Object):System.IAsyncResult" Analyze="True" />
          <Member Name="EndInvoke(System.IAsyncResult):System.Boolean" Analyze="True" />
          <Member Name="Invoke(T):System.Boolean" Analyze="True" />
         </Members>
        </Type>
        <Type Name="AllPathsStrategy" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="DoTraverse(MathNet.Symbolics.Core.Port,MathNet.Symbolics.Backend.Traversing.IScanVisitor,System.Boolean):System.Void" Analyze="True" />
          <Member Name="DoTraverse(MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Backend.Traversing.IScanVisitor,System.Boolean):System.Void" Analyze="True" />
          <Member Name="DoTraverse(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Core.Signal&gt;,MathNet.Symbolics.Backend.Traversing.IScanVisitor,System.Boolean):System.Void" Analyze="True" />
          <Member Name="instance" Analyze="True" />
          <Member Name="Instance" Analyze="True">
           <Accessors>
            <Accessor Name="get_Instance():MathNet.Symbolics.Backend.Traversing.AllPathsStrategy" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="TraverseRootPort(System.Collections.Generic.Stack`1&lt;System.Guid&gt;,MathNet.Symbolics.Core.Port,System.Boolean,MathNet.Symbolics.Backend.Traversing.IScanVisitor):System.Void" Analyze="True" />
          <Member Name="TraverseSignal(System.Collections.Generic.Stack`1&lt;System.Guid&gt;,MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Port,System.Boolean,MathNet.Symbolics.Backend.Traversing.IScanVisitor):System.Boolean" Analyze="True" />
         </Members>
        </Type>
        <Type Name="AllPortsStrategy" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="DoTraverse(MathNet.Symbolics.Core.Port,MathNet.Symbolics.Backend.Traversing.IScanVisitor,System.Boolean):System.Void" Analyze="True" />
          <Member Name="DoTraverse(MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Backend.Traversing.IScanVisitor,System.Boolean):System.Void" Analyze="True" />
          <Member Name="DoTraverse(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Core.Signal&gt;,MathNet.Symbolics.Backend.Traversing.IScanVisitor,System.Boolean):System.Void" Analyze="True" />
          <Member Name="instance" Analyze="True" />
          <Member Name="Instance" Analyze="True">
           <Accessors>
            <Accessor Name="get_Instance():MathNet.Symbolics.Backend.Traversing.AllPortsStrategy" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="TraversePort(System.Collections.Generic.List`1&lt;System.Guid&gt;,MathNet.Symbolics.Core.Port,MathNet.Symbolics.Core.Signal,System.Boolean,MathNet.Symbolics.Backend.Traversing.IScanVisitor):System.Boolean" Analyze="True" />
         </Members>
        </Type>
        <Type Name="AllSignalsStrategy" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="DoTraverse(MathNet.Symbolics.Core.Port,MathNet.Symbolics.Backend.Traversing.IScanVisitor,System.Boolean):System.Void" Analyze="True" />
          <Member Name="DoTraverse(MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Backend.Traversing.IScanVisitor,System.Boolean):System.Void" Analyze="True" />
          <Member Name="DoTraverse(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Core.Signal&gt;,MathNet.Symbolics.Backend.Traversing.IScanVisitor,System.Boolean):System.Void" Analyze="True" />
          <Member Name="instance" Analyze="True" />
          <Member Name="Instance" Analyze="True">
           <Accessors>
            <Accessor Name="get_Instance():MathNet.Symbolics.Backend.Traversing.AllSignalsStrategy" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="TraverseSignal(System.Collections.Generic.List`1&lt;System.Guid&gt;,MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Port,System.Boolean,MathNet.Symbolics.Backend.Traversing.IScanVisitor):System.Boolean" Analyze="True" />
         </Members>
        </Type>
        <Type Name="AllSpanningTreeStrategy" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="DoTraverse(MathNet.Symbolics.Core.Port,MathNet.Symbolics.Backend.Traversing.IScanVisitor,System.Boolean):System.Void" Analyze="True" />
          <Member Name="DoTraverse(MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Backend.Traversing.IScanVisitor,System.Boolean):System.Void" Analyze="True" />
          <Member Name="DoTraverse(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Core.Signal&gt;,MathNet.Symbolics.Backend.Traversing.IScanVisitor,System.Boolean):System.Void" Analyze="True" />
          <Member Name="instance" Analyze="True" />
          <Member Name="Instance" Analyze="True">
           <Accessors>
            <Accessor Name="get_Instance():MathNet.Symbolics.Backend.Traversing.AllSpanningTreeStrategy" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="TraversePort(System.Collections.Generic.List`1&lt;System.Guid&gt;,System.Collections.Generic.List`1&lt;System.Guid&gt;,System.Collections.Generic.List`1&lt;System.Guid&gt;,MathNet.Symbolics.Core.Port,MathNet.Symbolics.Core.Signal,System.Boolean,MathNet.Symbolics.Backend.Traversing.IScanVisitor):System.Boolean" Analyze="True" />
          <Member Name="TraverseSignal(System.Collections.Generic.List`1&lt;System.Guid&gt;,System.Collections.Generic.List`1&lt;System.Guid&gt;,System.Collections.Generic.List`1&lt;System.Guid&gt;,MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Port,System.Boolean,MathNet.Symbolics.Backend.Traversing.IScanVisitor):System.Boolean" Analyze="True" />
         </Members>
        </Type>
        <Type Name="AllStrategy" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="DoTraverse(MathNet.Symbolics.Core.Port,MathNet.Symbolics.Backend.Traversing.IScanVisitor,System.Boolean):System.Void" Analyze="True" />
          <Member Name="DoTraverse(MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Backend.Traversing.IScanVisitor,System.Boolean):System.Void" Analyze="True" />
          <Member Name="DoTraverse(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Core.Signal&gt;,MathNet.Symbolics.Backend.Traversing.IScanVisitor,System.Boolean):System.Void" Analyze="True" />
          <Member Name="instance" Analyze="True" />
          <Member Name="Instance" Analyze="True">
           <Accessors>
            <Accessor Name="get_Instance():MathNet.Symbolics.Backend.Traversing.AllStrategy" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="TraversePort(System.Collections.Generic.List`1&lt;System.Guid&gt;,System.Collections.Generic.List`1&lt;System.Guid&gt;,System.Collections.Generic.List`1&lt;System.Guid&gt;,MathNet.Symbolics.Core.Port,MathNet.Symbolics.Core.Signal,System.Boolean,MathNet.Symbolics.Backend.Traversing.IScanVisitor):System.Boolean" Analyze="True" />
          <Member Name="TraverseSignal(System.Collections.Generic.List`1&lt;System.Guid&gt;,System.Collections.Generic.List`1&lt;System.Guid&gt;,System.Collections.Generic.List`1&lt;System.Guid&gt;,MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Port,System.Boolean,MathNet.Symbolics.Backend.Traversing.IScanVisitor):System.Boolean" Analyze="True" />
         </Members>
        </Type>
        <Type Name="BasicManipulationVisitor" Analyze="True">
         <Members>
          <Member Name=".ctor(MathNet.Symbolics.Backend.Traversing.EstimatePlan,MathNet.Symbolics.Backend.Traversing.ManipulatePort,MathNet.Symbolics.Backend.Traversing.ManipulateSignal)" Analyze="True" />
          <Member Name="_plan" Analyze="True" />
          <Member Name="_port" Analyze="True" />
          <Member Name="_signal" Analyze="True" />
          <Member Name="EstimatePlan(MathNet.Symbolics.Core.Port):MathNet.Symbolics.Backend.Traversing.ManipulationPlan" Analyze="True" />
          <Member Name="ManipulatePort(MathNet.Symbolics.Core.Port,MathNet.Symbolics.Backend.Containers.SignalSet,System.Boolean):System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Core.Signal&gt;" Analyze="True" />
          <Member Name="ManipulateSignal(MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Signal,System.Boolean):MathNet.Symbolics.Core.Signal" Analyze="True" />
         </Members>
        </Type>
        <Type Name="BasicScanVisitor" Analyze="True">
         <Members>
          <Member Name=".ctor(MathNet.Symbolics.Backend.Traversing.ProcessSignal,MathNet.Symbolics.Backend.Traversing.ProcessSignal,MathNet.Symbolics.Backend.Traversing.ProcessPort,MathNet.Symbolics.Backend.Traversing.ProcessPort,MathNet.Symbolics.Backend.Traversing.ProcessLeafSignal,MathNet.Symbolics.Backend.Traversing.ProcessLeafPort,MathNet.Symbolics.Backend.Traversing.ProcessLeafBus,MathNet.Symbolics.Backend.Traversing.ProcessCycle)" Analyze="True" />
          <Member Name="_cycle" Analyze="True" />
          <Member Name="_enterPort" Analyze="True" />
          <Member Name="_enterSignal" Analyze="True" />
          <Member Name="_leafBus" Analyze="True" />
          <Member Name="_leafPort" Analyze="True" />
          <Member Name="_leafSignal" Analyze="True" />
          <Member Name="_leavePort" Analyze="True" />
          <Member Name="_leaveSignal" Analyze="True" />
          <Member Name="EnterPort(MathNet.Symbolics.Core.Port,MathNet.Symbolics.Core.Signal,System.Boolean,System.Boolean):System.Boolean" Analyze="True" />
          <Member Name="EnterSignal(MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Port,System.Boolean,System.Boolean):System.Boolean" Analyze="True" />
          <Member Name="LeavePort(MathNet.Symbolics.Core.Port,MathNet.Symbolics.Core.Signal,System.Boolean,System.Boolean):System.Boolean" Analyze="True" />
          <Member Name="LeaveSignal(MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Port,System.Boolean,System.Boolean):System.Boolean" Analyze="True" />
          <Member Name="VisitCycle(MathNet.Symbolics.Core.Port,MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Signal):System.Boolean" Analyze="True" />
          <Member Name="VisitLeaf(MathNet.Symbolics.Core.Bus,System.Boolean):System.Boolean" Analyze="True" />
          <Member Name="VisitLeaf(MathNet.Symbolics.Core.Port,System.Boolean):System.Boolean" Analyze="True" />
          <Member Name="VisitLeaf(MathNet.Symbolics.Core.Signal,System.Boolean):System.Boolean" Analyze="True" />
         </Members>
        </Type>
        <Type Name="CollectVisitor" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="_buses" Analyze="True" />
          <Member Name="_ports" Analyze="True" />
          <Member Name="_signals" Analyze="True" />
          <Member Name="Buses" Analyze="True">
           <Accessors>
            <Accessor Name="get_Buses():MathNet.Symbolics.Backend.Containers.BusSet" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="EnterPort(MathNet.Symbolics.Core.Port,MathNet.Symbolics.Core.Signal,System.Boolean,System.Boolean):System.Boolean" Analyze="True" />
          <Member Name="EnterSignal(MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Port,System.Boolean,System.Boolean):System.Boolean" Analyze="True" />
          <Member Name="Ports" Analyze="True">
           <Accessors>
            <Accessor Name="get_Ports():MathNet.Symbolics.Backend.Containers.PortSet" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Reset():System.Void" Analyze="True" />
          <Member Name="Signals" Analyze="True">
           <Accessors>
            <Accessor Name="get_Signals():MathNet.Symbolics.Backend.Containers.SignalSet" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="VisitLeaf(MathNet.Symbolics.Core.Bus,System.Boolean):System.Boolean" Analyze="True" />
         </Members>
        </Type>
        <Type Name="ConditionalCollectVisitor" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name=".ctor(System.Predicate`1&lt;MathNet.Symbolics.Core.Bus&gt;)" Analyze="True" />
          <Member Name=".ctor(System.Predicate`1&lt;MathNet.Symbolics.Core.Port&gt;)" Analyze="True" />
          <Member Name=".ctor(System.Predicate`1&lt;MathNet.Symbolics.Core.Signal&gt;)" Analyze="True" />
          <Member Name=".ctor(System.Predicate`1&lt;MathNet.Symbolics.Core.Signal&gt;,System.Predicate`1&lt;MathNet.Symbolics.Core.Port&gt;,System.Predicate`1&lt;MathNet.Symbolics.Core.Bus&gt;)" Analyze="True" />
          <Member Name="_buses" Analyze="True" />
          <Member Name="_busMatch" Analyze="True" />
          <Member Name="_portMatch" Analyze="True" />
          <Member Name="_ports" Analyze="True" />
          <Member Name="_signalMatch" Analyze="True" />
          <Member Name="_signals" Analyze="True" />
          <Member Name="Buses" Analyze="True">
           <Accessors>
            <Accessor Name="get_Buses():MathNet.Symbolics.Backend.Containers.BusSet" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="DummyBusPredicate(MathNet.Symbolics.Core.Bus):System.Boolean" Analyze="True" />
          <Member Name="DummyPortPredicate(MathNet.Symbolics.Core.Port):System.Boolean" Analyze="True" />
          <Member Name="DummySignalPredicate(MathNet.Symbolics.Core.Signal):System.Boolean" Analyze="True" />
          <Member Name="EnterPort(MathNet.Symbolics.Core.Port,MathNet.Symbolics.Core.Signal,System.Boolean,System.Boolean):System.Boolean" Analyze="True" />
          <Member Name="EnterSignal(MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Port,System.Boolean,System.Boolean):System.Boolean" Analyze="True" />
          <Member Name="Ports" Analyze="True">
           <Accessors>
            <Accessor Name="get_Ports():MathNet.Symbolics.Backend.Containers.PortSet" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Reset():System.Void" Analyze="True" />
          <Member Name="Signals" Analyze="True">
           <Accessors>
            <Accessor Name="get_Signals():MathNet.Symbolics.Backend.Containers.SignalSet" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="VisitLeaf(MathNet.Symbolics.Core.Bus,System.Boolean):System.Boolean" Analyze="True" />
         </Members>
        </Type>
        <Type Name="EstimatePlan" Analyze="True">
         <Members>
          <Member Name=".ctor(System.Object,System.IntPtr)" Analyze="True" />
          <Member Name="BeginInvoke(MathNet.Symbolics.Core.Port,System.AsyncCallback,System.Object):System.IAsyncResult" Analyze="True" />
          <Member Name="EndInvoke(System.IAsyncResult):MathNet.Symbolics.Backend.Traversing.ManipulationPlan" Analyze="True" />
          <Member Name="Invoke(MathNet.Symbolics.Core.Port):MathNet.Symbolics.Backend.Traversing.ManipulationPlan" Analyze="True" />
         </Members>
        </Type>
        <Type Name="ExistsPortVisitor" Analyze="True">
         <Members>
          <Member Name=".ctor(System.Predicate`1&lt;MathNet.Symbolics.Core.Port&gt;)" Analyze="True" />
          <Member Name="_foundPort" Analyze="True" />
          <Member Name="_foundPortTarget" Analyze="True" />
          <Member Name="_match" Analyze="True" />
          <Member Name="EnterPort(MathNet.Symbolics.Core.Port,MathNet.Symbolics.Core.Signal,System.Boolean,System.Boolean):System.Boolean" Analyze="True" />
          <Member Name="Exists" Analyze="True">
           <Accessors>
            <Accessor Name="get_Exists():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="FoundPort" Analyze="True">
           <Accessors>
            <Accessor Name="get_FoundPort():MathNet.Symbolics.Core.Port" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="FoundPortTarget" Analyze="True">
           <Accessors>
            <Accessor Name="get_FoundPortTarget():MathNet.Symbolics.Core.Signal" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="LeavePort(MathNet.Symbolics.Core.Port,MathNet.Symbolics.Core.Signal,System.Boolean,System.Boolean):System.Boolean" Analyze="True" />
          <Member Name="Reset():System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="ExistsSignalVisitor" Analyze="True">
         <Members>
          <Member Name=".ctor(System.Predicate`1&lt;MathNet.Symbolics.Core.Signal&gt;)" Analyze="True" />
          <Member Name="_foundSignal" Analyze="True" />
          <Member Name="_foundSignalTarget" Analyze="True" />
          <Member Name="_match" Analyze="True" />
          <Member Name="EnterSignal(MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Port,System.Boolean,System.Boolean):System.Boolean" Analyze="True" />
          <Member Name="Exists" Analyze="True">
           <Accessors>
            <Accessor Name="get_Exists():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="FoundSignal" Analyze="True">
           <Accessors>
            <Accessor Name="get_FoundSignal():MathNet.Symbolics.Core.Signal" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="FoundSignalTarget" Analyze="True">
           <Accessors>
            <Accessor Name="get_FoundSignalTarget():MathNet.Symbolics.Core.Port" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="LeaveSignal(MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Port,System.Boolean,System.Boolean):System.Boolean" Analyze="True" />
          <Member Name="Reset():System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="IManipulationVisitor" Analyze="True">
         <Members>
          <Member Name="EstimatePlan(MathNet.Symbolics.Core.Port):MathNet.Symbolics.Backend.Traversing.ManipulationPlan" Analyze="True" />
          <Member Name="ManipulatePort(MathNet.Symbolics.Core.Port,MathNet.Symbolics.Backend.Containers.SignalSet,System.Boolean):System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Core.Signal&gt;" Analyze="True" />
          <Member Name="ManipulateSignal(MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Signal,System.Boolean):MathNet.Symbolics.Core.Signal" Analyze="True" />
         </Members>
        </Type>
        <Type Name="IScanVisitor" Analyze="True">
         <Members>
          <Member Name="EnterPort(MathNet.Symbolics.Core.Port,MathNet.Symbolics.Core.Signal,System.Boolean,System.Boolean):System.Boolean" Analyze="True" />
          <Member Name="EnterSignal(MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Port,System.Boolean,System.Boolean):System.Boolean" Analyze="True" />
          <Member Name="LeavePort(MathNet.Symbolics.Core.Port,MathNet.Symbolics.Core.Signal,System.Boolean,System.Boolean):System.Boolean" Analyze="True" />
          <Member Name="LeaveSignal(MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Port,System.Boolean,System.Boolean):System.Boolean" Analyze="True" />
          <Member Name="VisitCycle(MathNet.Symbolics.Core.Port,MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Signal):System.Boolean" Analyze="True" />
          <Member Name="VisitLeaf(MathNet.Symbolics.Core.Bus,System.Boolean):System.Boolean" Analyze="True" />
          <Member Name="VisitLeaf(MathNet.Symbolics.Core.Port,System.Boolean):System.Boolean" Analyze="True" />
          <Member Name="VisitLeaf(MathNet.Symbolics.Core.Signal,System.Boolean):System.Boolean" Analyze="True" />
         </Members>
        </Type>
        <Type Name="ManipulatePort" Analyze="True">
         <Members>
          <Member Name=".ctor(System.Object,System.IntPtr)" Analyze="True" />
          <Member Name="BeginInvoke(MathNet.Symbolics.Core.Port,MathNet.Symbolics.Backend.Containers.SignalSet,System.Boolean,System.AsyncCallback,System.Object):System.IAsyncResult" Analyze="True" />
          <Member Name="EndInvoke(System.IAsyncResult):System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Core.Signal&gt;" Analyze="True" />
          <Member Name="Invoke(MathNet.Symbolics.Core.Port,MathNet.Symbolics.Backend.Containers.SignalSet,System.Boolean):System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Core.Signal&gt;" Analyze="True" />
         </Members>
        </Type>
        <Type Name="ManipulateSignal" Analyze="True">
         <Members>
          <Member Name=".ctor(System.Object,System.IntPtr)" Analyze="True" />
          <Member Name="BeginInvoke(MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Signal,System.Boolean,System.AsyncCallback,System.Object):System.IAsyncResult" Analyze="True" />
          <Member Name="EndInvoke(System.IAsyncResult):MathNet.Symbolics.Core.Signal" Analyze="True" />
          <Member Name="Invoke(MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Signal,System.Boolean):MathNet.Symbolics.Core.Signal" Analyze="True" />
         </Members>
        </Type>
        <Type Name="ManipulationPlan" Analyze="True">
         <Members>
          <Member Name="AlterIfChildsAltered" Analyze="True" />
          <Member Name="CloneIfChildsAltered" Analyze="True" />
          <Member Name="DoAlter" Analyze="True" />
          <Member Name="DontAlter" Analyze="True" />
          <Member Name="Unknown" Analyze="True" />
          <Member Name="value__" Analyze="True" />
         </Members>
        </Type>
        <Type Name="Manipulator" Analyze="True">
         <Members>
          <Member Name="FixSentinel(MathNet.Symbolics.Core.Signal&amp;,System.Collections.Generic.Dictionary`2&lt;System.Guid,MathNet.Symbolics.Core.Signal&gt;,System.Collections.Generic.Dictionary`2&lt;System.Guid,MathNet.Symbolics.Core.Signal&gt;):System.Boolean" Analyze="True" />
          <Member Name="Manipulate(MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Backend.Traversing.IManipulationVisitor,System.Boolean):MathNet.Symbolics.Core.Signal" Analyze="True" />
          <Member Name="Manipulate(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Core.Signal&gt;,MathNet.Symbolics.Backend.Traversing.IManipulationVisitor,System.Boolean):MathNet.Symbolics.Backend.Containers.SignalSet" Analyze="True" />
         </Members>
        </Type>
        <Type Name="Manipulator+&lt;&gt;c__DisplayClass2" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="&lt;Manipulate&gt;b__0(MathNet.Symbolics.Core.Port):System.Boolean" Analyze="True" />
          <Member Name="&lt;Manipulate&gt;b__1(MathNet.Symbolics.Core.Port):System.Boolean" Analyze="True" />
          <Member Name="plans" Analyze="True" />
          <Member Name="sentinels" Analyze="True" />
          <Member Name="signalReplacements" Analyze="True" />
          <Member Name="visitor" Analyze="True" />
         </Members>
        </Type>
        <Type Name="Manipulator+&lt;&gt;c__DisplayClass6" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="&lt;Manipulate&gt;b__4(MathNet.Symbolics.Core.Port):System.Boolean" Analyze="True" />
          <Member Name="&lt;Manipulate&gt;b__5(MathNet.Symbolics.Core.Port):System.Boolean" Analyze="True" />
          <Member Name="plans" Analyze="True" />
          <Member Name="sentinels" Analyze="True" />
          <Member Name="signalReplacements" Analyze="True" />
          <Member Name="visitor" Analyze="True" />
         </Members>
        </Type>
        <Type Name="Manipulator+ManipulatorPlanExecutor" Analyze="True">
         <Members>
          <Member Name=".ctor(System.Collections.Generic.Dictionary`2&lt;System.Guid,MathNet.Symbolics.Backend.Traversing.ManipulationPlan&gt;,System.Collections.Generic.Dictionary`2&lt;System.Guid,MathNet.Symbolics.Core.Signal&gt;,System.Collections.Generic.Dictionary`2&lt;System.Guid,MathNet.Symbolics.Core.Signal&gt;,MathNet.Symbolics.Backend.Traversing.IManipulationVisitor)" Analyze="True" />
          <Member Name="_plans" Analyze="True" />
          <Member Name="_sentinels" Analyze="True" />
          <Member Name="_signalRep" Analyze="True" />
          <Member Name="_visitor" Analyze="True" />
          <Member Name="BuildManipulatedInputsList(MathNet.Symbolics.Core.Port,System.Boolean&amp;):MathNet.Symbolics.Backend.Containers.SignalSet" Analyze="True" />
          <Member Name="EnterPort(MathNet.Symbolics.Core.Port,MathNet.Symbolics.Core.Signal,System.Boolean,System.Boolean):System.Boolean" Analyze="True" />
          <Member Name="EnterSignal(MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Port,System.Boolean,System.Boolean):System.Boolean" Analyze="True" />
          <Member Name="LeavePort(MathNet.Symbolics.Core.Port,MathNet.Symbolics.Core.Signal,System.Boolean,System.Boolean):System.Boolean" Analyze="True" />
          <Member Name="LeaveSignal(MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Port,System.Boolean,System.Boolean):System.Boolean" Analyze="True" />
          <Member Name="VisitCycle(MathNet.Symbolics.Core.Port,MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Signal):System.Boolean" Analyze="True" />
         </Members>
        </Type>
        <Type Name="Manipulator+ManipulatorPlanReducer" Analyze="True">
         <Members>
          <Member Name=".ctor(System.Collections.Generic.Dictionary`2&lt;System.Guid,MathNet.Symbolics.Backend.Traversing.ManipulationPlan&gt;,System.Boolean)" Analyze="True" />
          <Member Name="_ignoreHold" Analyze="True" />
          <Member Name="_plans" Analyze="True" />
          <Member Name="&lt;VisitCycle&gt;b__8(MathNet.Symbolics.Core.Port):System.Boolean" Analyze="True" />
          <Member Name="EnterPort(MathNet.Symbolics.Core.Port,MathNet.Symbolics.Core.Signal,System.Boolean,System.Boolean):System.Boolean" Analyze="True" />
          <Member Name="LeavePort(MathNet.Symbolics.Core.Port,MathNet.Symbolics.Core.Signal,System.Boolean,System.Boolean):System.Boolean" Analyze="True" />
          <Member Name="VisitCycle(MathNet.Symbolics.Core.Port,MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Signal):System.Boolean" Analyze="True" />
          <Member Name="VisitLeaf(MathNet.Symbolics.Core.Port,System.Boolean):System.Boolean" Analyze="True" />
         </Members>
        </Type>
        <Type Name="PortActionVisitor" Analyze="True">
         <Members>
          <Member Name=".ctor(MathNet.Symbolics.Backend.Traversing.ActionContinue`1&lt;MathNet.Symbolics.Core.Port&gt;)" Analyze="True" />
          <Member Name="_action" Analyze="True" />
          <Member Name="EnterPort(MathNet.Symbolics.Core.Port,MathNet.Symbolics.Core.Signal,System.Boolean,System.Boolean):System.Boolean" Analyze="True" />
         </Members>
        </Type>
        <Type Name="PortConditionalActionVisitor" Analyze="True">
         <Members>
          <Member Name=".ctor(MathNet.Symbolics.Backend.Traversing.ActionContinue`1&lt;MathNet.Symbolics.Core.Port&gt;,System.Predicate`1&lt;MathNet.Symbolics.Core.Port&gt;)" Analyze="True" />
          <Member Name="_action" Analyze="True" />
          <Member Name="_match" Analyze="True" />
          <Member Name="EnterPort(MathNet.Symbolics.Core.Port,MathNet.Symbolics.Core.Signal,System.Boolean,System.Boolean):System.Boolean" Analyze="True" />
         </Members>
        </Type>
        <Type Name="PortPathCollectVisitor" Analyze="True">
         <Members>
          <Member Name=".ctor(MathNet.Symbolics.Core.Port)" Analyze="True" />
          <Member Name="_currentPath" Analyze="True" />
          <Member Name="_paths" Analyze="True" />
          <Member Name="_source" Analyze="True" />
          <Member Name="EnterPort(MathNet.Symbolics.Core.Port,MathNet.Symbolics.Core.Signal,System.Boolean,System.Boolean):System.Boolean" Analyze="True" />
          <Member Name="LeavePort(MathNet.Symbolics.Core.Port,MathNet.Symbolics.Core.Signal,System.Boolean,System.Boolean):System.Boolean" Analyze="True" />
          <Member Name="Paths" Analyze="True">
           <Accessors>
            <Accessor Name="get_Paths():System.Collections.Generic.List`1&lt;System.Collections.Generic.List`1&lt;MathNet.Symbolics.Core.Port&gt;&gt;" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Reset(MathNet.Symbolics.Core.Port):System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="ProcessCycle" Analyze="True">
         <Members>
          <Member Name=".ctor(System.Object,System.IntPtr)" Analyze="True" />
          <Member Name="BeginInvoke(MathNet.Symbolics.Core.Port,MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Signal,System.AsyncCallback,System.Object):System.IAsyncResult" Analyze="True" />
          <Member Name="EndInvoke(System.IAsyncResult):System.Boolean" Analyze="True" />
          <Member Name="Invoke(MathNet.Symbolics.Core.Port,MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Signal):System.Boolean" Analyze="True" />
         </Members>
        </Type>
        <Type Name="ProcessLeafBus" Analyze="True">
         <Members>
          <Member Name=".ctor(System.Object,System.IntPtr)" Analyze="True" />
          <Member Name="BeginInvoke(MathNet.Symbolics.Core.Bus,System.Boolean,System.AsyncCallback,System.Object):System.IAsyncResult" Analyze="True" />
          <Member Name="EndInvoke(System.IAsyncResult):System.Boolean" Analyze="True" />
          <Member Name="Invoke(MathNet.Symbolics.Core.Bus,System.Boolean):System.Boolean" Analyze="True" />
         </Members>
        </Type>
        <Type Name="ProcessLeafPort" Analyze="True">
         <Members>
          <Member Name=".ctor(System.Object,System.IntPtr)" Analyze="True" />
          <Member Name="BeginInvoke(MathNet.Symbolics.Core.Port,System.Boolean,System.AsyncCallback,System.Object):System.IAsyncResult" Analyze="True" />
          <Member Name="EndInvoke(System.IAsyncResult):System.Boolean" Analyze="True" />
          <Member Name="Invoke(MathNet.Symbolics.Core.Port,System.Boolean):System.Boolean" Analyze="True" />
         </Members>
        </Type>
        <Type Name="ProcessLeafSignal" Analyze="True">
         <Members>
          <Member Name=".ctor(System.Object,System.IntPtr)" Analyze="True" />
          <Member Name="BeginInvoke(MathNet.Symbolics.Core.Signal,System.Boolean,System.AsyncCallback,System.Object):System.IAsyncResult" Analyze="True" />
          <Member Name="EndInvoke(System.IAsyncResult):System.Boolean" Analyze="True" />
          <Member Name="Invoke(MathNet.Symbolics.Core.Signal,System.Boolean):System.Boolean" Analyze="True" />
         </Members>
        </Type>
        <Type Name="ProcessPort" Analyze="True">
         <Members>
          <Member Name=".ctor(System.Object,System.IntPtr)" Analyze="True" />
          <Member Name="BeginInvoke(MathNet.Symbolics.Core.Port,MathNet.Symbolics.Core.Signal,System.Boolean,System.Boolean,System.AsyncCallback,System.Object):System.IAsyncResult" Analyze="True" />
          <Member Name="EndInvoke(System.IAsyncResult):System.Boolean" Analyze="True" />
          <Member Name="Invoke(MathNet.Symbolics.Core.Port,MathNet.Symbolics.Core.Signal,System.Boolean,System.Boolean):System.Boolean" Analyze="True" />
         </Members>
        </Type>
        <Type Name="ProcessSignal" Analyze="True">
         <Members>
          <Member Name=".ctor(System.Object,System.IntPtr)" Analyze="True" />
          <Member Name="BeginInvoke(MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Port,System.Boolean,System.Boolean,System.AsyncCallback,System.Object):System.IAsyncResult" Analyze="True" />
          <Member Name="EndInvoke(System.IAsyncResult):System.Boolean" Analyze="True" />
          <Member Name="Invoke(MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Port,System.Boolean,System.Boolean):System.Boolean" Analyze="True" />
         </Members>
        </Type>
        <Type Name="ScanStrategy" Analyze="True">
         <Members>
          <Member Name=".ctor(MathNet.Symbolics.Backend.Traversing.ScanStrategy+ConcurrencyMode)" Analyze="True" />
          <Member Name="_activeScans" Analyze="True" />
          <Member Name="_concurrency" Analyze="True" />
          <Member Name="_nextInstance" Analyze="True" />
          <Member Name="Clone():MathNet.Symbolics.Backend.Traversing.ScanStrategy" Analyze="True" />
          <Member Name="Concurrency" Analyze="True">
           <Accessors>
            <Accessor Name="get_Concurrency():MathNet.Symbolics.Backend.Traversing.ScanStrategy+ConcurrencyMode" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="DoTraverse(MathNet.Symbolics.Core.Port,MathNet.Symbolics.Backend.Traversing.IScanVisitor,System.Boolean):System.Void" Analyze="True" />
          <Member Name="DoTraverse(MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Backend.Traversing.IScanVisitor,System.Boolean):System.Void" Analyze="True" />
          <Member Name="DoTraverse(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Core.Signal&gt;,MathNet.Symbolics.Backend.Traversing.IScanVisitor,System.Boolean):System.Void" Analyze="True" />
          <Member Name="IsActive" Analyze="True">
           <Accessors>
            <Accessor Name="get_IsActive():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ProvideExecutableInstance():MathNet.Symbolics.Backend.Traversing.ScanStrategy" Analyze="True" />
          <Member Name="ReuseStrategy():System.Void" Analyze="True" />
          <Member Name="Traverse(MathNet.Symbolics.Core.Port,MathNet.Symbolics.Backend.Traversing.IScanVisitor,System.Boolean):System.Void" Analyze="True" />
          <Member Name="Traverse(MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Backend.Traversing.IScanVisitor,System.Boolean):System.Void" Analyze="True" />
          <Member Name="Traverse(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Core.Signal&gt;,MathNet.Symbolics.Backend.Traversing.IScanVisitor,System.Boolean):System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="ScanStrategy+ConcurrencyMode" Analyze="True">
         <Members>
          <Member Name="MutualExclusive" Analyze="True" />
          <Member Name="ParallelStateful" Analyze="True" />
          <Member Name="ParallelStateless" Analyze="True" />
          <Member Name="value__" Analyze="True" />
         </Members>
        </Type>
        <Type Name="SignalActionVisitor" Analyze="True">
         <Members>
          <Member Name=".ctor(MathNet.Symbolics.Backend.Traversing.ActionContinue`1&lt;MathNet.Symbolics.Core.Signal&gt;)" Analyze="True" />
          <Member Name="_action" Analyze="True" />
          <Member Name="EnterSignal(MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Port,System.Boolean,System.Boolean):System.Boolean" Analyze="True" />
         </Members>
        </Type>
        <Type Name="SignalConditionalActionVisitor" Analyze="True">
         <Members>
          <Member Name=".ctor(MathNet.Symbolics.Backend.Traversing.ActionContinue`1&lt;MathNet.Symbolics.Core.Signal&gt;,System.Predicate`1&lt;MathNet.Symbolics.Core.Signal&gt;)" Analyze="True" />
          <Member Name="_action" Analyze="True" />
          <Member Name="_match" Analyze="True" />
          <Member Name="EnterSignal(MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Port,System.Boolean,System.Boolean):System.Boolean" Analyze="True" />
         </Members>
        </Type>
        <Type Name="SignalPathCollectVisitor" Analyze="True">
         <Members>
          <Member Name=".ctor(MathNet.Symbolics.Core.Signal)" Analyze="True" />
          <Member Name="_currentPath" Analyze="True" />
          <Member Name="_paths" Analyze="True" />
          <Member Name="_source" Analyze="True" />
          <Member Name="EnterSignal(MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Port,System.Boolean,System.Boolean):System.Boolean" Analyze="True" />
          <Member Name="LeaveSignal(MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Port,System.Boolean,System.Boolean):System.Boolean" Analyze="True" />
          <Member Name="Paths" Analyze="True">
           <Accessors>
            <Accessor Name="get_Paths():System.Collections.Generic.List`1&lt;System.Collections.Generic.List`1&lt;MathNet.Symbolics.Core.Signal&gt;&gt;" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Reset(MathNet.Symbolics.Core.Signal):System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="TrueForAllPortsVisitor" Analyze="True">
         <Members>
          <Member Name=".ctor(System.Predicate`1&lt;MathNet.Symbolics.Core.Port&gt;)" Analyze="True" />
          <Member Name="_failedPort" Analyze="True" />
          <Member Name="_failedPortTarget" Analyze="True" />
          <Member Name="_match" Analyze="True" />
          <Member Name="EnterPort(MathNet.Symbolics.Core.Port,MathNet.Symbolics.Core.Signal,System.Boolean,System.Boolean):System.Boolean" Analyze="True" />
          <Member Name="FailedPort" Analyze="True">
           <Accessors>
            <Accessor Name="get_FailedPort():MathNet.Symbolics.Core.Port" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="FailedPortTarget" Analyze="True">
           <Accessors>
            <Accessor Name="get_FailedPortTarget():MathNet.Symbolics.Core.Signal" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="LeavePort(MathNet.Symbolics.Core.Port,MathNet.Symbolics.Core.Signal,System.Boolean,System.Boolean):System.Boolean" Analyze="True" />
          <Member Name="Reset():System.Void" Analyze="True" />
          <Member Name="TrueForAll" Analyze="True">
           <Accessors>
            <Accessor Name="get_TrueForAll():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="TrueForAllSignalsVisitor" Analyze="True">
         <Members>
          <Member Name=".ctor(System.Predicate`1&lt;MathNet.Symbolics.Core.Signal&gt;)" Analyze="True" />
          <Member Name="_failedSignal" Analyze="True" />
          <Member Name="_failedSignalTarget" Analyze="True" />
          <Member Name="_match" Analyze="True" />
          <Member Name="EnterSignal(MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Port,System.Boolean,System.Boolean):System.Boolean" Analyze="True" />
          <Member Name="FailedSignal" Analyze="True">
           <Accessors>
            <Accessor Name="get_FailedSignal():MathNet.Symbolics.Core.Signal" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="FailedSignalTarget" Analyze="True">
           <Accessors>
            <Accessor Name="get_FailedSignalTarget():MathNet.Symbolics.Core.Port" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="LeaveSignal(MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Port,System.Boolean,System.Boolean):System.Boolean" Analyze="True" />
          <Member Name="Reset():System.Void" Analyze="True" />
          <Member Name="TrueForAll" Analyze="True">
           <Accessors>
            <Accessor Name="get_TrueForAll():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="MathNet.Symbolics.Backend.ValueConversion" Analyze="True">
       <Types>
        <Type Name="ConversionRouter" Analyze="True">
         <Members>
          <Member Name=".ctor(MathNet.Symbolics.Core.MathIdentifier)" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate4" Analyze="True" />
          <Member Name="&lt;BuildConverterFrom&gt;b__3(MathNet.Symbolics.Core.ValueStructure):MathNet.Symbolics.Core.ValueStructure" Analyze="True" />
          <Member Name="AddSourceNeighbor(MathNet.Symbolics.Backend.ValueConversion.ConversionRouter,System.Boolean,System.Converter`2&lt;MathNet.Symbolics.Core.ValueStructure,MathNet.Symbolics.Core.ValueStructure&gt;):System.Void" Analyze="True" />
          <Member Name="AddTargetNeighbor(MathNet.Symbolics.Backend.ValueConversion.ConversionRouter):System.Void" Analyze="True" />
          <Member Name="BroadcastDistanceVector():System.Void" Analyze="True" />
          <Member Name="BroadcastDistanceVector(MathNet.Symbolics.Backend.ValueConversion.ConversionRouter):System.Void" Analyze="True" />
          <Member Name="BuildConverterFrom(MathNet.Symbolics.Core.MathIdentifier):System.Converter`2&lt;MathNet.Symbolics.Core.ValueStructure,MathNet.Symbolics.Core.ValueStructure&gt;" Analyze="True" />
          <Member Name="CanConvertFrom(MathNet.Symbolics.Core.MathIdentifier,System.Boolean):System.Boolean" Analyze="True" />
          <Member Name="CanConvertLosslessFrom(MathNet.Symbolics.Core.ValueStructure):System.Boolean" Analyze="True" />
          <Member Name="CanConvertLossyFrom(MathNet.Symbolics.Core.ValueStructure):System.Boolean" Analyze="True" />
          <Member Name="ConvertFrom(MathNet.Symbolics.Core.ValueStructure):MathNet.Symbolics.Core.ValueStructure" Analyze="True" />
          <Member Name="losslessNeighbors" Analyze="True" />
          <Member Name="lossyNeighbors" Analyze="True" />
          <Member Name="Propose(MathNet.Symbolics.Backend.ValueConversion.ConversionRouter+ConversionDistance,MathNet.Symbolics.Backend.ValueConversion.ConversionRouter):System.Boolean" Analyze="True" />
          <Member Name="Propose(System.Collections.Generic.Dictionary`2&lt;MathNet.Symbolics.Core.MathIdentifier,MathNet.Symbolics.Backend.ValueConversion.ConversionRouter+ConversionDistance&gt;,MathNet.Symbolics.Backend.ValueConversion.ConversionRouter):System.Void" Analyze="True" />
          <Member Name="structureId" Analyze="True" />
          <Member Name="StructureIdentifier" Analyze="True">
           <Accessors>
            <Accessor Name="get_StructureIdentifier():MathNet.Symbolics.Core.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="targetNeighbors" Analyze="True" />
          <Member Name="ToString():System.String" Analyze="True" />
          <Member Name="TryConvertFrom(MathNet.Symbolics.Core.ValueStructure,MathNet.Symbolics.Core.ValueStructure&amp;):System.Boolean" Analyze="True" />
          <Member Name="vector" Analyze="True" />
         </Members>
        </Type>
        <Type Name="ConversionRouter+&lt;&gt;c__DisplayClass1" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="&lt;Propose&gt;b__0(MathNet.Symbolics.Core.ValueStructure):MathNet.Symbolics.Core.ValueStructure" Analyze="True" />
          <Member Name="distanceC" Analyze="True" />
          <Member Name="localC" Analyze="True" />
         </Members>
        </Type>
        <Type Name="ConversionRouter+ConversionDistance" Analyze="True">
         <Members>
          <Member Name=".ctor(MathNet.Symbolics.Core.MathIdentifier,System.Int32,System.Boolean,MathNet.Symbolics.Backend.ValueConversion.ConversionRouter,System.Converter`2&lt;MathNet.Symbolics.Core.ValueStructure,MathNet.Symbolics.Core.ValueStructure&gt;)" Analyze="True" />
          <Member Name="CanConvertFrom" Analyze="True" />
          <Member Name="Convert" Analyze="True" />
          <Member Name="Cost" Analyze="True" />
          <Member Name="Lossless" Analyze="True" />
          <Member Name="NextHop" Analyze="True" />
         </Members>
        </Type>
        <Type Name="ConversionRouter+ConversionRoute" Analyze="True">
         <Members>
          <Member Name=".ctor(MathNet.Symbolics.Core.MathIdentifier,System.Converter`2&lt;MathNet.Symbolics.Core.ValueStructure,MathNet.Symbolics.Core.ValueStructure&gt;)" Analyze="True" />
          <Member Name="CanConvertFrom" Analyze="True" />
          <Member Name="Convert" Analyze="True" />
         </Members>
        </Type>
        <Type Name="StructureTable" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="_table" Analyze="True" />
          <Member Name="AddStructure(MathNet.Symbolics.Core.MathIdentifier,MathNet.Symbolics.Backend.ValueConversion.ConversionRouter,System.Type):System.Void" Analyze="True" />
          <Member Name="LookupRouter(MathNet.Symbolics.Core.MathIdentifier):MathNet.Symbolics.Backend.ValueConversion.ConversionRouter" Analyze="True" />
          <Member Name="LookupRouter(MathNet.Symbolics.Core.ValueStructure):MathNet.Symbolics.Backend.ValueConversion.ConversionRouter" Analyze="True" />
          <Member Name="ToString():System.String" Analyze="True" />
         </Members>
        </Type>
        <Type Name="StructureTable+StructureType" Analyze="True">
         <Members>
          <Member Name=".ctor(MathNet.Symbolics.Core.MathIdentifier,MathNet.Symbolics.Backend.ValueConversion.ConversionRouter,System.Type)" Analyze="True" />
          <Member Name="Identifier" Analyze="True" />
          <Member Name="Router" Analyze="True" />
          <Member Name="Type" Analyze="True" />
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="MathNet.Symbolics.Core" Analyze="True">
       <Types>
        <Type Name="Architecture" Analyze="True">
         <Members>
          <Member Name=".ctor(MathNet.Symbolics.Core.MathIdentifier,MathNet.Symbolics.Core.MathIdentifier,System.Boolean)" Analyze="True" />
          <Member Name="_entityId" Analyze="True" />
          <Member Name="_id" Analyze="True" />
          <Member Name="_isInstance" Analyze="True" />
          <Member Name="_isMathematicalOperator" Analyze="True" />
          <Member Name="_port" Analyze="True" />
          <Member Name="EntityId" Analyze="True">
           <Accessors>
            <Accessor Name="get_EntityId():MathNet.Symbolics.Core.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ExecuteMathematicalOperator():MathNet.Symbolics.Backend.Containers.ISignalSet" Analyze="True" />
          <Member Name="Identifier" Analyze="True">
           <Accessors>
            <Accessor Name="get_Identifier():MathNet.Symbolics.Core.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="IsInstance" Analyze="True">
           <Accessors>
            <Accessor Name="get_IsInstance():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="IsMathematicalOperator" Analyze="True">
           <Accessors>
            <Accessor Name="get_IsMathematicalOperator():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Port" Analyze="True">
           <Accessors>
            <Accessor Name="get_Port():MathNet.Symbolics.Core.Port" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="RebindToPortIfSupported(MathNet.Symbolics.Core.Port):System.Boolean" Analyze="True" />
          <Member Name="ReregisterArchitecture(MathNet.Symbolics.Core.Port,MathNet.Symbolics.Core.Port):System.Void" Analyze="True" />
          <Member Name="SetPort(MathNet.Symbolics.Core.Port):System.Void" Analyze="True" />
          <Member Name="SupportsPort(MathNet.Symbolics.Core.Port):System.Boolean" Analyze="True" />
          <Member Name="ToString():System.String" Analyze="True" />
          <Member Name="UnregisterArchitecture():System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="Bus" Analyze="True">
         <Members>
          <Member Name=".ctor(MathNet.Symbolics.Backend.Context)" Analyze="True" />
          <Member Name="_context" Analyze="True" />
          <Member Name="_iid" Analyze="True" />
          <Member Name="_label" Analyze="True" />
          <Member Name="AcceptSystemBuilderAfter(MathNet.Symbolics.Backend.SystemBuilder.ISystemBuilder,System.Collections.Generic.Dictionary`2&lt;System.Guid,System.Guid&gt;,System.Collections.Generic.Dictionary`2&lt;System.Guid,System.Guid&gt;):System.Void" Analyze="True" />
          <Member Name="AcceptSystemBuilderBefore(MathNet.Symbolics.Backend.SystemBuilder.ISystemBuilder):System.Guid" Analyze="True" />
          <Member Name="Context" Analyze="True">
           <Accessors>
            <Accessor Name="get_Context():MathNet.Symbolics.Backend.Context" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Equals(MathNet.Symbolics.Core.Bus):System.Boolean" Analyze="True" />
          <Member Name="Equals(System.Object):System.Boolean" Analyze="True" />
          <Member Name="GetHashCode():System.Int32" Analyze="True" />
          <Member Name="InstanceId" Analyze="True">
           <Accessors>
            <Accessor Name="get_InstanceId():System.Guid" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Label" Analyze="True">
           <Accessors>
            <Accessor Name="get_Label():System.String" Analyze="True" />
            <Accessor Name="set_Label(System.String):System.Void" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="Entity" Analyze="True">
         <Members>
          <Member Name=".ctor(System.String,MathNet.Symbolics.Core.MathIdentifier,MathNet.Symbolics.Core.InfixNotation,System.Int32,System.Boolean)" Analyze="True" />
          <Member Name=".ctor(System.String,MathNet.Symbolics.Core.MathIdentifier,MathNet.Symbolics.Core.InfixNotation,System.Int32,System.Boolean,System.String[])" Analyze="True" />
          <Member Name=".ctor(System.String,MathNet.Symbolics.Core.MathIdentifier,MathNet.Symbolics.Core.InfixNotation,System.Int32,System.String[],System.String[])" Analyze="True" />
          <Member Name=".ctor(System.String,MathNet.Symbolics.Core.MathIdentifier,MathNet.Symbolics.Core.InfixNotation,System.Int32,System.String[],System.String[],System.String[])" Analyze="True" />
          <Member Name=".ctor(System.String,System.String,System.String,MathNet.Symbolics.Core.InfixNotation,System.Int32,System.Boolean)" Analyze="True" />
          <Member Name=".ctor(System.String,System.String,System.String,MathNet.Symbolics.Core.InfixNotation,System.Int32,System.Boolean,System.String[])" Analyze="True" />
          <Member Name=".ctor(System.String,System.String,System.String,MathNet.Symbolics.Core.InfixNotation,System.Int32,System.String[],System.String[])" Analyze="True" />
          <Member Name=".ctor(System.String,System.String,System.String,MathNet.Symbolics.Core.InfixNotation,System.Int32,System.String[],System.String[],System.String[])" Analyze="True" />
          <Member Name="_busLabels" Analyze="True" />
          <Member Name="_id" Analyze="True" />
          <Member Name="_inputSignalLabels" Analyze="True" />
          <Member Name="_isGeneric" Analyze="True" />
          <Member Name="_notation" Analyze="True" />
          <Member Name="_outputSignalLabels" Analyze="True" />
          <Member Name="_precedenceGroup" Analyze="True" />
          <Member Name="_symbol" Analyze="True" />
          <Member Name="Buses" Analyze="True">
           <Accessors>
            <Accessor Name="get_Buses():System.String[]" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="CompileGenericEntity(System.Int32,System.Int32):MathNet.Symbolics.Core.Entity" Analyze="True" />
          <Member Name="EntityId" Analyze="True">
           <Accessors>
            <Accessor Name="get_EntityId():MathNet.Symbolics.Core.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Equals(MathNet.Symbolics.Core.Entity):System.Boolean" Analyze="True" />
          <Member Name="Equals(System.Object):System.Boolean" Analyze="True" />
          <Member Name="EqualsById(MathNet.Symbolics.Core.Entity):System.Boolean" Analyze="True" />
          <Member Name="EqualsById(MathNet.Symbolics.Core.MathIdentifier):System.Boolean" Analyze="True" />
          <Member Name="GetHashCode():System.Int32" Analyze="True" />
          <Member Name="InputSignals" Analyze="True">
           <Accessors>
            <Accessor Name="get_InputSignals():System.String[]" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="InstantiatePort(MathNet.Symbolics.Backend.Context,MathNet.Symbolics.Core.Signal[]):MathNet.Symbolics.Core.Port" Analyze="True" />
          <Member Name="InstantiatePort(MathNet.Symbolics.Backend.Context,System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Core.Signal&gt;):MathNet.Symbolics.Core.Port" Analyze="True" />
          <Member Name="InstantiatePort(MathNet.Symbolics.Backend.Context,System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Core.Signal&gt;,System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Core.Signal&gt;):MathNet.Symbolics.Core.Port" Analyze="True" />
          <Member Name="InstantiatePort(MathNet.Symbolics.Backend.Context,System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Core.Signal&gt;,System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Core.Signal&gt;,System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Core.Bus&gt;):MathNet.Symbolics.Core.Port" Analyze="True" />
          <Member Name="InstantiateUnboundPort(MathNet.Symbolics.Backend.Context):MathNet.Symbolics.Core.Port" Analyze="True" />
          <Member Name="IsGeneric" Analyze="True">
           <Accessors>
            <Accessor Name="get_IsGeneric():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Notation" Analyze="True">
           <Accessors>
            <Accessor Name="get_Notation():MathNet.Symbolics.Core.InfixNotation" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="OutputSignals" Analyze="True">
           <Accessors>
            <Accessor Name="get_OutputSignals():System.String[]" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="PrecedenceGroup" Analyze="True">
           <Accessors>
            <Accessor Name="get_PrecedenceGroup():System.Int32" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Symbol" Analyze="True">
           <Accessors>
            <Accessor Name="get_Symbol():System.String" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ToString():System.String" Analyze="True" />
         </Members>
        </Type>
        <Type Name="IArchitectureFactory" Analyze="True">
         <Members>
          <Member Name="EntityId" Analyze="True">
           <Accessors>
            <Accessor Name="get_EntityId():MathNet.Symbolics.Core.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="InstantiateToPort(MathNet.Symbolics.Core.Port):MathNet.Symbolics.Core.Architecture" Analyze="True" />
          <Member Name="SupportsPort(MathNet.Symbolics.Core.Port):System.Boolean" Analyze="True" />
         </Members>
        </Type>
        <Type Name="InfixNotation" Analyze="True">
         <Members>
          <Member Name="LeftAssociativeInnerOperator" Analyze="True" />
          <Member Name="None" Analyze="True" />
          <Member Name="PostOperator" Analyze="True" />
          <Member Name="PreOperator" Analyze="True" />
          <Member Name="RightAssociativeInnerOperator" Analyze="True" />
          <Member Name="value__" Analyze="True" />
         </Members>
        </Type>
        <Type Name="MathIdentifier" Analyze="True">
         <Members>
          <Member Name=".ctor(System.String,System.String)" Analyze="True" />
          <Member Name="CompareTo(MathNet.Symbolics.Core.MathIdentifier):System.Int32" Analyze="True" />
          <Member Name="DerivePostfix(System.String):MathNet.Symbolics.Core.MathIdentifier" Analyze="True" />
          <Member Name="DerivePrefix(System.String):MathNet.Symbolics.Core.MathIdentifier" Analyze="True" />
          <Member Name="domain" Analyze="True" />
          <Member Name="Domain" Analyze="True">
           <Accessors>
            <Accessor Name="get_Domain():System.String" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Equals(MathNet.Symbolics.Core.MathIdentifier):System.Boolean" Analyze="True" />
          <Member Name="Equals(System.Object):System.Boolean" Analyze="True" />
          <Member Name="Equals(System.String,System.String):System.Boolean" Analyze="True" />
          <Member Name="GetHashCode():System.Int32" Analyze="True" />
          <Member Name="label" Analyze="True" />
          <Member Name="Label" Analyze="True">
           <Accessors>
            <Accessor Name="get_Label():System.String" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="op_Equality(MathNet.Symbolics.Core.MathIdentifier,MathNet.Symbolics.Core.MathIdentifier):System.Boolean" Analyze="True" />
          <Member Name="op_Inequality(MathNet.Symbolics.Core.MathIdentifier,MathNet.Symbolics.Core.MathIdentifier):System.Boolean" Analyze="True" />
          <Member Name="Parse(System.String):MathNet.Symbolics.Core.MathIdentifier" Analyze="True" />
          <Member Name="ToString():System.String" Analyze="True" />
         </Members>
        </Type>
        <Type Name="Port" Analyze="True">
         <Members>
          <Member Name=".ctor(MathNet.Symbolics.Backend.Context,MathNet.Symbolics.Core.Entity)" Analyze="True" />
          <Member Name=".ctor(MathNet.Symbolics.Backend.Context,MathNet.Symbolics.Core.Entity,System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Core.Signal&gt;)" Analyze="True" />
          <Member Name="_busSet" Analyze="True" />
          <Member Name="_completelyConnected" Analyze="True" />
          <Member Name="_context" Analyze="True" />
          <Member Name="_currentArchitecture" Analyze="True" />
          <Member Name="_entity" Analyze="True" />
          <Member Name="_iid" Analyze="True" />
          <Member Name="_inputSignalSet" Analyze="True" />
          <Member Name="_outputSignalSet" Analyze="True" />
          <Member Name="_tag" Analyze="True" />
          <Member Name="AcceptSystemBuilder(MathNet.Symbolics.Backend.SystemBuilder.ISystemBuilder,System.Collections.Generic.Dictionary`2&lt;System.Guid,System.Guid&gt;,System.Collections.Generic.Dictionary`2&lt;System.Guid,System.Guid&gt;):System.Guid" Analyze="True" />
          <Member Name="AddBusBinding(System.Int32,MathNet.Symbolics.Core.Bus):System.Void" Analyze="True" />
          <Member Name="AddInputSignalBinding(System.Int32,MathNet.Symbolics.Core.Signal):System.Void" Analyze="True" />
          <Member Name="AddOutputSignalBinding(System.Int32,MathNet.Symbolics.Core.Signal):System.Void" Analyze="True" />
          <Member Name="BindBuses(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Core.Bus&gt;):System.Void" Analyze="True" />
          <Member Name="BindInputSignals(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Core.Signal&gt;):System.Void" Analyze="True" />
          <Member Name="BusCount" Analyze="True">
           <Accessors>
            <Accessor Name="get_BusCount():System.Int32" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Buses" Analyze="True">
           <Accessors>
            <Accessor Name="get_Buses():MathNet.Symbolics.Backend.Containers.ReadOnlyBusSet" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="CloneWithNewInputs(System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Core.Signal&gt;):MathNet.Symbolics.Core.Port" Analyze="True" />
          <Member Name="Context" Analyze="True">
           <Accessors>
            <Accessor Name="get_Context():MathNet.Symbolics.Backend.Context" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="CurrentArchitecture" Analyze="True">
           <Accessors>
            <Accessor Name="get_CurrentArchitecture():MathNet.Symbolics.Core.Architecture" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="DependsOn(MathNet.Symbolics.Core.MathIdentifier):System.Boolean" Analyze="True" />
          <Member Name="DependsOn(MathNet.Symbolics.Core.Port):System.Boolean" Analyze="True" />
          <Member Name="DependsOn(MathNet.Symbolics.Core.Signal):System.Boolean" Analyze="True" />
          <Member Name="DeTag(System.Int32):System.Void" Analyze="True" />
          <Member Name="EnsureArchitectureLink():System.Boolean" Analyze="True" />
          <Member Name="Entity" Analyze="True">
           <Accessors>
            <Accessor Name="get_Entity():MathNet.Symbolics.Core.Entity" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Equals(MathNet.Symbolics.Core.Port):System.Boolean" Analyze="True" />
          <Member Name="Equals(System.Object):System.Boolean" Analyze="True" />
          <Member Name="GetHashCode():System.Int32" Analyze="True" />
          <Member Name="HasArchitectureLink" Analyze="True">
           <Accessors>
            <Accessor Name="get_HasArchitectureLink():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="IndexOfOutputSignal(MathNet.Symbolics.Core.Signal):System.Int32" Analyze="True" />
          <Member Name="InputSignalCount" Analyze="True">
           <Accessors>
            <Accessor Name="get_InputSignalCount():System.Int32" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="InputSignals" Analyze="True">
           <Accessors>
            <Accessor Name="get_InputSignals():MathNet.Symbolics.Backend.Containers.ReadOnlySignalSet" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="InstanceId" Analyze="True">
           <Accessors>
            <Accessor Name="get_InstanceId():System.Guid" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="IsCompletelyConnected" Analyze="True">
           <Accessors>
            <Accessor Name="get_IsCompletelyConnected():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Item[System.Int32]" Analyze="True">
           <Accessors>
            <Accessor Name="get_Item(System.Int32):MathNet.Symbolics.Core.Signal" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="LookupAndLinkNewArchitecture():System.Boolean" Analyze="True" />
          <Member Name="MapBuses(MathNet.Symbolics.Backend.Containers.BusSet,System.Collections.Generic.Dictionary`2&lt;System.Guid,System.Guid&gt;):MathNet.Symbolics.Backend.Containers.InstanceIdSet" Analyze="True" />
          <Member Name="MapSignals(MathNet.Symbolics.Backend.Containers.SignalSet,System.Collections.Generic.Dictionary`2&lt;System.Guid,System.Guid&gt;):MathNet.Symbolics.Backend.Containers.InstanceIdSet" Analyze="True" />
          <Member Name="OutputSignalCount" Analyze="True">
           <Accessors>
            <Accessor Name="get_OutputSignalCount():System.Int32" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="OutputSignals" Analyze="True">
           <Accessors>
            <Accessor Name="get_OutputSignals():MathNet.Symbolics.Backend.Containers.ReadOnlySignalSet" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Port_SignalValueChanged(System.Object,System.EventArgs):System.Void" Analyze="True" />
          <Member Name="RemoveAllBindings():System.Void" Analyze="True" />
          <Member Name="RemoveBusBinding(System.Int32):System.Void" Analyze="True" />
          <Member Name="RemoveInputSignalBinding(System.Int32):System.Void" Analyze="True" />
          <Member Name="RemoveLinkedArchitecture():System.Void" Analyze="True" />
          <Member Name="RemoveOutputSignalBinding(System.Int32):System.Void" Analyze="True" />
          <Member Name="ReplaceBusBinding(System.Int32,MathNet.Symbolics.Core.Bus):System.Void" Analyze="True" />
          <Member Name="ReplaceInputSignalBinding(System.Int32,MathNet.Symbolics.Core.Signal):System.Void" Analyze="True" />
          <Member Name="ReplaceOutputSignalBinding(System.Int32,MathNet.Symbolics.Core.Signal):System.Void" Analyze="True" />
          <Member Name="TagWasTagged(System.Int32):System.Boolean" Analyze="True" />
          <Member Name="ToString():System.String" Analyze="True" />
          <Member Name="UpdateIsCompletelyConnected():System.Boolean" Analyze="True" />
         </Members>
        </Type>
        <Type Name="Port+&lt;&gt;c__DisplayClass1" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="&lt;DependsOn&gt;b__0(MathNet.Symbolics.Core.Port):System.Boolean" Analyze="True" />
          <Member Name="portEntity" Analyze="True" />
         </Members>
        </Type>
        <Type Name="Port+&lt;&gt;c__DisplayClass4" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="&lt;MapSignals&gt;b__3(MathNet.Symbolics.Core.Signal):System.Guid" Analyze="True" />
          <Member Name="signalMappings" Analyze="True" />
         </Members>
        </Type>
        <Type Name="Port+&lt;&gt;c__DisplayClass7" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="&lt;MapBuses&gt;b__6(MathNet.Symbolics.Core.Bus):System.Guid" Analyze="True" />
          <Member Name="busMappings" Analyze="True" />
         </Members>
        </Type>
        <Type Name="Process" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="Action(System.Boolean,MathNet.Symbolics.Core.Signal):System.Void" Analyze="True" />
          <Member Name="Continue():System.Void" Analyze="True" />
          <Member Name="ForceUpdate():System.Void" Analyze="True" />
          <Member Name="Pause():System.Void" Analyze="True" />
          <Member Name="paused" Analyze="True" />
          <Member Name="Paused" Analyze="True">
           <Accessors>
            <Accessor Name="get_Paused():System.Boolean" Analyze="True" />
            <Accessor Name="set_Paused(System.Boolean):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Register(System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Core.Signal&gt;,System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Core.Signal&gt;,System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Core.Signal&gt;,System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Core.Bus&gt;):System.Void" Analyze="True" />
          <Member Name="SenseSignal(MathNet.Symbolics.Core.Signal):System.Void" Analyze="True" />
          <Member Name="sensitiveSignals" Analyze="True" />
          <Member Name="signal_SignalValueChanged(System.Object,MathNet.Symbolics.Backend.Events.SignalEventArgs):System.Void" Analyze="True" />
          <Member Name="StopSenseSignal(MathNet.Symbolics.Core.Signal):System.Void" Analyze="True" />
          <Member Name="Unregister():System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="Signal" Analyze="True">
         <Members>
          <Member Name=".ctor(MathNet.Symbolics.Backend.Context)" Analyze="True" />
          <Member Name=".ctor(MathNet.Symbolics.Backend.Context,MathNet.Symbolics.Core.ValueStructure)" Analyze="True" />
          <Member Name="_constraints" Analyze="True" />
          <Member Name="_context" Analyze="True" />
          <Member Name="_cycleCount" Analyze="True" />
          <Member Name="_drivenByPort" Analyze="True" />
          <Member Name="_eventQueue" Analyze="True" />
          <Member Name="_hasEvent" Analyze="True" />
          <Member Name="_hold" Analyze="True" />
          <Member Name="_iid" Analyze="True" />
          <Member Name="_isSourceSignal" Analyze="True" />
          <Member Name="_label" Analyze="True" />
          <Member Name="_notifyNewValue" Analyze="True" />
          <Member Name="_presentStructure" Analyze="True" />
          <Member Name="_properties" Analyze="True" />
          <Member Name="_setEventFlag" Analyze="True" />
          <Member Name="_setValue" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__0(MathNet.Symbolics.Core.ValueStructure):System.Boolean" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__1(System.Boolean):System.Void" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__2():System.Void" Analyze="True" />
          <Member Name="AcceptSystemBuilderAfter(MathNet.Symbolics.Backend.SystemBuilder.ISystemBuilder,System.Collections.Generic.Dictionary`2&lt;System.Guid,System.Guid&gt;,System.Collections.Generic.Dictionary`2&lt;System.Guid,System.Guid&gt;):System.Void" Analyze="True" />
          <Member Name="AcceptSystemBuilderBefore(MathNet.Symbolics.Backend.SystemBuilder.ISystemBuilder):System.Guid" Analyze="True" />
          <Member Name="AddConstraint(MathNet.Symbolics.Backend.Properties.Property):System.Void" Analyze="True" />
          <Member Name="AddCycles(MathNet.Symbolics.Core.Signal,System.Int32):System.Int32" Analyze="True" />
          <Member Name="AskForProperty(MathNet.Symbolics.Core.MathIdentifier):System.Boolean" Analyze="True" />
          <Member Name="AskForProperty(System.String,System.String):System.Boolean" Analyze="True" />
          <Member Name="BehavesAsBeingDriven(System.Boolean):System.Boolean" Analyze="True" />
          <Member Name="BehavesAsSourceSignal" Analyze="True">
           <Accessors>
            <Accessor Name="get_BehavesAsSourceSignal():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="BuilderAppendConstraint(MathNet.Symbolics.Backend.Properties.Property):System.Void" Analyze="True" />
          <Member Name="BuilderAppendProperty(MathNet.Symbolics.Backend.Properties.Property):System.Void" Analyze="True" />
          <Member Name="BuilderSetValue(MathNet.Symbolics.Core.ValueStructure):System.Void" Analyze="True" />
          <Member Name="Constraints" Analyze="True">
           <Accessors>
            <Accessor Name="get_Constraints():MathNet.Symbolics.Backend.Properties.PropertyBag" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Context" Analyze="True">
           <Accessors>
            <Accessor Name="get_Context():MathNet.Symbolics.Backend.Context" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Cycles" Analyze="True">
           <Accessors>
            <Accessor Name="get_Cycles():System.Int32" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="DependsOn(MathNet.Symbolics.Core.MathIdentifier):System.Boolean" Analyze="True" />
          <Member Name="DependsOn(MathNet.Symbolics.Core.Port):System.Boolean" Analyze="True" />
          <Member Name="DependsOn(MathNet.Symbolics.Core.Signal):System.Boolean" Analyze="True" />
          <Member Name="DrivenByPort" Analyze="True">
           <Accessors>
            <Accessor Name="get_DrivenByPort():MathNet.Symbolics.Core.Port" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="DriveSignal(MathNet.Symbolics.Core.Port,System.Int32):System.Void" Analyze="True" />
          <Member Name="SignalValueChanged" Kind="Event" Analyze="True">
           <Accessors>
            <Accessor Name="add_SignalValueChanged(System.EventHandler`1&lt;MathNet.Symbolics.Backend.Events.SignalEventArgs&gt;):System.Void" Analyze="True" />
            <Accessor Name="remove_SignalValueChanged(System.EventHandler`1&lt;MathNet.Symbolics.Backend.Events.SignalEventArgs&gt;):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Equals(MathNet.Symbolics.Core.Signal):System.Boolean" Analyze="True" />
          <Member Name="Equals(System.Object):System.Boolean" Analyze="True" />
          <Member Name="EventQueue" Analyze="True">
           <Accessors>
            <Accessor Name="get_EventQueue():MathNet.Symbolics.Backend.Simulation.SignalDelayedEventTimeline" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="GetHashCode():System.Int32" Analyze="True" />
          <Member Name="HasEvent" Analyze="True">
           <Accessors>
            <Accessor Name="get_HasEvent():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="HasProperty(MathNet.Symbolics.Core.MathIdentifier):System.Boolean" Analyze="True" />
          <Member Name="Hold" Analyze="True">
           <Accessors>
            <Accessor Name="get_Hold():System.Boolean" Analyze="True" />
            <Accessor Name="set_Hold(System.Boolean):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="InstanceId" Analyze="True">
           <Accessors>
            <Accessor Name="get_InstanceId():System.Guid" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="IsCyclic" Analyze="True">
           <Accessors>
            <Accessor Name="get_IsCyclic():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="IsDriven" Analyze="True">
           <Accessors>
            <Accessor Name="get_IsDriven():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="IsDrivenByPortEntity(MathNet.Symbolics.Core.MathIdentifier):System.Boolean" Analyze="True" />
          <Member Name="IsDrivenByPortEntity(System.String,System.String):System.Boolean" Analyze="True" />
          <Member Name="IsSourceSignal" Analyze="True">
           <Accessors>
            <Accessor Name="get_IsSourceSignal():System.Boolean" Analyze="True" />
            <Accessor Name="set_IsSourceSignal(System.Boolean):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Label" Analyze="True">
           <Accessors>
            <Accessor Name="get_Label():System.String" Analyze="True" />
            <Accessor Name="set_Label(System.String):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="op_Addition(MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Signal):MathNet.Symbolics.Core.Signal" Analyze="True" />
          <Member Name="op_Division(MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Signal):MathNet.Symbolics.Core.Signal" Analyze="True" />
          <Member Name="op_Multiply(MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Signal):MathNet.Symbolics.Core.Signal" Analyze="True" />
          <Member Name="op_Subtraction(MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Signal):MathNet.Symbolics.Core.Signal" Analyze="True" />
          <Member Name="op_UnaryNegation(MathNet.Symbolics.Core.Signal):MathNet.Symbolics.Core.Signal" Analyze="True" />
          <Member Name="op_UnaryPlus(MathNet.Symbolics.Core.Signal):MathNet.Symbolics.Core.Signal" Analyze="True" />
          <Member Name="PostNewValue(MathNet.Symbolics.Core.ValueStructure):System.Void" Analyze="True" />
          <Member Name="PostNewValue(MathNet.Symbolics.Core.ValueStructure,System.TimeSpan):System.Void" Analyze="True" />
          <Member Name="Properties" Analyze="True">
           <Accessors>
            <Accessor Name="get_Properties():MathNet.Symbolics.Backend.Properties.PropertyBag" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="RemoveAllConstraints():System.Void" Analyze="True" />
          <Member Name="RemoveCycles(MathNet.Symbolics.Core.Signal,System.Int32):System.Int32" Analyze="True" />
          <Member Name="SignalValueChanged" Analyze="True" />
          <Member Name="ToString():System.String" Analyze="True" />
          <Member Name="UndriveSignal(System.Int32):System.Void" Analyze="True" />
          <Member Name="Value" Analyze="True">
           <Accessors>
            <Accessor Name="get_Value():MathNet.Symbolics.Core.ValueStructure" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="Signal+&lt;&gt;c__DisplayClass7" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="&lt;DependsOn&gt;b__6(MathNet.Symbolics.Core.Port):System.Boolean" Analyze="True" />
          <Member Name="portEntity" Analyze="True" />
         </Members>
        </Type>
        <Type Name="ValueStructure" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="Deserialize(MathNet.Symbolics.Backend.Context,System.Xml.XmlReader):MathNet.Symbolics.Core.ValueStructure" Analyze="True" />
          <Member Name="Equals(MathNet.Symbolics.Core.ValueStructure):System.Boolean" Analyze="True" />
          <Member Name="Equals(System.Object):System.Boolean" Analyze="True" />
          <Member Name="EqualsById(MathNet.Symbolics.Core.MathIdentifier):System.Boolean" Analyze="True" />
          <Member Name="EqualsById(MathNet.Symbolics.Core.ValueStructure):System.Boolean" Analyze="True" />
          <Member Name="InnerSerialize(System.Xml.XmlWriter):System.Void" Analyze="True" />
          <Member Name="Serialize(System.Xml.XmlWriter,MathNet.Symbolics.Core.ValueStructure):System.Void" Analyze="True" />
          <Member Name="StructureId" Analyze="True">
           <Accessors>
            <Accessor Name="get_StructureId():MathNet.Symbolics.Core.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ToString():System.String" Analyze="True" />
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="MathNet.Symbolics.Properties" Analyze="True">
       <Types>
        <Type Name="Resources" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="Culture" Analyze="True">
           <Accessors>
            <Accessor Name="get_Culture():System.Globalization.CultureInfo" Analyze="True" />
            <Accessor Name="set_Culture(System.Globalization.CultureInfo):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ex_CyclicSignalsNotSupportes" Analyze="True">
           <Accessors>
            <Accessor Name="get_ex_CyclicSignalsNotSupportes():System.String" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ex_Deserialize_Failed_GenericEntity" Analyze="True">
           <Accessors>
            <Accessor Name="get_ex_Deserialize_Failed_GenericEntity():System.String" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ex_Deserialize_Failed_UnexpectedPosition" Analyze="True">
           <Accessors>
            <Accessor Name="get_ex_Deserialize_Failed_UnexpectedPosition():System.String" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ex_Deserialize_Failed_UnsupportedCategory" Analyze="True">
           <Accessors>
            <Accessor Name="get_ex_Deserialize_Failed_UnsupportedCategory():System.String" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ex_Deserialize_Failed_UnsupportedStructure" Analyze="True">
           <Accessors>
            <Accessor Name="get_ex_Deserialize_Failed_UnsupportedStructure():System.String" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ex_Entity_Unexpected_SignalCount" Analyze="True">
           <Accessors>
            <Accessor Name="get_ex_Entity_Unexpected_SignalCount():System.String" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ex_NotAvailable_Architecture" Analyze="True">
           <Accessors>
            <Accessor Name="get_ex_NotAvailable_Architecture():System.String" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ex_NotAvailable_Domain" Analyze="True">
           <Accessors>
            <Accessor Name="get_ex_NotAvailable_Domain():System.String" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ex_NotAvailable_Entity" Analyze="True">
           <Accessors>
            <Accessor Name="get_ex_NotAvailable_Entity():System.String" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ex_NotFound" Analyze="True">
           <Accessors>
            <Accessor Name="get_ex_NotFound():System.String" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ex_NotImplementedYet" Analyze="True">
           <Accessors>
            <Accessor Name="get_ex_NotImplementedYet():System.String" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ex_Parsing_Failed_TokenMismatch" Analyze="True">
           <Accessors>
            <Accessor Name="get_ex_Parsing_Failed_TokenMismatch():System.String" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ex_Parsing_Failed_TokenMismatchEx" Analyze="True">
           <Accessors>
            <Accessor Name="get_ex_Parsing_Failed_TokenMismatchEx():System.String" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ex_Theorem_Mismatch" Analyze="True">
           <Accessors>
            <Accessor Name="get_ex_Theorem_Mismatch():System.String" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ex_Traversing_Failed_ReserveMutex" Analyze="True">
           <Accessors>
            <Accessor Name="get_ex_Traversing_Failed_ReserveMutex():System.String" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="resourceCulture" Analyze="True" />
          <Member Name="resourceMan" Analyze="True" />
          <Member Name="ResourceManager" Analyze="True">
           <Accessors>
            <Accessor Name="get_ResourceManager():System.Resources.ResourceManager" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="MathNet.Symbolics.StdPackage" Analyze="True">
       <Types>
        <Type Name="AlgebraicExpressionCategory" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="_instance" Analyze="True" />
          <Member Name="InnerDeserialize(MathNet.Symbolics.Backend.Context,System.Xml.XmlReader):MathNet.Symbolics.StdPackage.AlgebraicExpressionCategory" Analyze="True" />
          <Member Name="InnerSerialize(System.Xml.XmlWriter):System.Void" Analyze="True" />
          <Member Name="Instance" Analyze="True">
           <Accessors>
            <Accessor Name="get_Instance():MathNet.Symbolics.StdPackage.AlgebraicExpressionCategory" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="IsAlgebraicExpressionMember(MathNet.Symbolics.Core.Port):System.Boolean" Analyze="True" />
          <Member Name="IsMember(MathNet.Symbolics.Core.Port):MathNet.Symbolics.Backend.Properties.ECategoryMembership" Analyze="True" />
          <Member Name="IsMember(MathNet.Symbolics.Core.Signal,System.Boolean):MathNet.Symbolics.Backend.Properties.ECategoryMembership" Analyze="True" />
          <Member Name="IsNotAlgebraicExpressionMember(MathNet.Symbolics.Core.Port):System.Boolean" Analyze="True" />
         </Members>
        </Type>
        <Type Name="AlgebraicStructureCategory" Analyze="True">
         <Members>
          <Member Name=".ctor(MathNet.Symbolics.StdPackage.EAlgebraicStructure,MathNet.Symbolics.Core.Entity)" Analyze="True" />
          <Member Name=".ctor(MathNet.Symbolics.StdPackage.EAlgebraicStructure,MathNet.Symbolics.Core.Entity,MathNet.Symbolics.Core.Entity)" Analyze="True" />
          <Member Name="_additiveEntity" Analyze="True" />
          <Member Name="_multiplicativeEntity" Analyze="True" />
          <Member Name="_structure" Analyze="True" />
          <Member Name="AdditiveEntity" Analyze="True">
           <Accessors>
            <Accessor Name="get_AdditiveEntity():MathNet.Symbolics.Core.Entity" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Equals(MathNet.Symbolics.Backend.Properties.Category):System.Boolean" Analyze="True" />
          <Member Name="InnerDeserialize(MathNet.Symbolics.Backend.Context,System.Xml.XmlReader):MathNet.Symbolics.StdPackage.AlgebraicStructureCategory" Analyze="True" />
          <Member Name="InnerSerialize(System.Xml.XmlWriter):System.Void" Analyze="True" />
          <Member Name="IsMember(MathNet.Symbolics.Core.Port):MathNet.Symbolics.Backend.Properties.ECategoryMembership" Analyze="True" />
          <Member Name="IsMember(MathNet.Symbolics.Core.Signal,System.Boolean):MathNet.Symbolics.Backend.Properties.ECategoryMembership" Analyze="True" />
          <Member Name="MultiplicativeEntity" Analyze="True">
           <Accessors>
            <Accessor Name="get_MultiplicativeEntity():MathNet.Symbolics.Core.Entity" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Structure" Analyze="True">
           <Accessors>
            <Accessor Name="get_Structure():MathNet.Symbolics.StdPackage.EAlgebraicStructure" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="EAlgebraicStructure" Analyze="True">
         <Members>
          <Member Name="AbelianGroup" Analyze="True" />
          <Member Name="AbelianMonoid" Analyze="True" />
          <Member Name="AbelianSemigroup" Analyze="True" />
          <Member Name="AdditiveAssociative" Analyze="True" />
          <Member Name="AdditiveClose" Analyze="True" />
          <Member Name="AdditiveCommutative" Analyze="True" />
          <Member Name="AdditiveIdentityElement" Analyze="True" />
          <Member Name="AdditiveInverseElement" Analyze="True" />
          <Member Name="BooleanAlgebra" Analyze="True" />
          <Member Name="CommutativeRing" Analyze="True" />
          <Member Name="CommutativeRingWithUnity" Analyze="True" />
          <Member Name="CommutativeSemiring" Analyze="True" />
          <Member Name="Complement" Analyze="True" />
          <Member Name="DistributiveAdditiveOverMultiplicative" Analyze="True" />
          <Member Name="DistributiveMultiplicativeOverAdditive" Analyze="True" />
          <Member Name="Field" Analyze="True" />
          <Member Name="Group" Analyze="True" />
          <Member Name="Monoid" Analyze="True" />
          <Member Name="MultiplicativeAssociative" Analyze="True" />
          <Member Name="MultiplicativeClose" Analyze="True" />
          <Member Name="MultiplicativeCommutative" Analyze="True" />
          <Member Name="MultiplicativeIdentityElement" Analyze="True" />
          <Member Name="MultiplicativeInverseElement" Analyze="True" />
          <Member Name="Ring" Analyze="True" />
          <Member Name="RingWithUnity" Analyze="True" />
          <Member Name="Semigroup" Analyze="True" />
          <Member Name="Semiring" Analyze="True" />
          <Member Name="SkewField" Analyze="True" />
          <Member Name="value__" Analyze="True" />
         </Members>
        </Type>
        <Type Name="IAlgebraicAbelianGroup`1" Analyze="True" />
        <Type Name="IAlgebraicAdditiveClose`1" Analyze="True">
         <Members>
          <Member Name="Add(T):T" Analyze="True" />
         </Members>
        </Type>
        <Type Name="IAlgebraicCommutativeRingWithUnity`1" Analyze="True" />
        <Type Name="IAlgebraicField`1" Analyze="True" />
        <Type Name="IAlgebraicGroup`1" Analyze="True">
         <Members>
          <Member Name="Negate():T" Analyze="True" />
          <Member Name="Subtract(T):T" Analyze="True" />
         </Members>
        </Type>
        <Type Name="IAlgebraicMonoid" Analyze="True">
         <Members>
          <Member Name="AdditiveIdentity" Analyze="True">
           <Accessors>
            <Accessor Name="get_AdditiveIdentity():MathNet.Symbolics.Core.ValueStructure" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="IsAdditiveIdentity" Analyze="True">
           <Accessors>
            <Accessor Name="get_IsAdditiveIdentity():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="IAlgebraicMonoid`1" Analyze="True" />
        <Type Name="IAlgebraicMultiplicativeClose`1" Analyze="True">
         <Members>
          <Member Name="Multiply(T):T" Analyze="True" />
         </Members>
        </Type>
        <Type Name="IAlgebraicRingWithUnity" Analyze="True">
         <Members>
          <Member Name="IsMultiplicativeIdentity" Analyze="True">
           <Accessors>
            <Accessor Name="get_IsMultiplicativeIdentity():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="MultiplicativeIdentity" Analyze="True">
           <Accessors>
            <Accessor Name="get_MultiplicativeIdentity():MathNet.Symbolics.Core.ValueStructure" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="IAlgebraicRingWithUnity`1" Analyze="True" />
        <Type Name="IAlgebraicSkewField`1" Analyze="True">
         <Members>
          <Member Name="Divide(T):T" Analyze="True" />
          <Member Name="Invert():T" Analyze="True" />
         </Members>
        </Type>
        <Type Name="IAlgebraicVectorSpace`2" Analyze="True">
         <Members>
          <Member Name="Scale(TScalar):TElement" Analyze="True" />
         </Members>
        </Type>
        <Type Name="Std" Analyze="True">
         <Members>
          <Member Name="AutoSimplify(MathNet.Symbolics.Backend.Context,MathNet.Symbolics.Core.Signal):MathNet.Symbolics.Core.Signal" Analyze="True" />
          <Member Name="AutoSimplify(MathNet.Symbolics.Backend.Context,System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Core.Signal&gt;):MathNet.Symbolics.Backend.Containers.SignalSet" Analyze="True" />
          <Member Name="Cosecant(MathNet.Symbolics.Backend.Context,MathNet.Symbolics.Core.Signal):MathNet.Symbolics.Core.Signal" Analyze="True" />
          <Member Name="Cosecant(MathNet.Symbolics.Backend.Context,System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Core.Signal&gt;):MathNet.Symbolics.Backend.Containers.ReadOnlySignalSet" Analyze="True" />
          <Member Name="Cosine(MathNet.Symbolics.Backend.Context,MathNet.Symbolics.Core.Signal):MathNet.Symbolics.Core.Signal" Analyze="True" />
          <Member Name="Cosine(MathNet.Symbolics.Backend.Context,System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Core.Signal&gt;):MathNet.Symbolics.Backend.Containers.ReadOnlySignalSet" Analyze="True" />
          <Member Name="Cotangent(MathNet.Symbolics.Backend.Context,MathNet.Symbolics.Core.Signal):MathNet.Symbolics.Core.Signal" Analyze="True" />
          <Member Name="Cotangent(MathNet.Symbolics.Backend.Context,System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Core.Signal&gt;):MathNet.Symbolics.Backend.Containers.ReadOnlySignalSet" Analyze="True" />
          <Member Name="Denominator(MathNet.Symbolics.Core.Signal):MathNet.Symbolics.Core.Signal" Analyze="True" />
          <Member Name="Derive(MathNet.Symbolics.Backend.Context,MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Signal):MathNet.Symbolics.Core.Signal" Analyze="True" />
          <Member Name="Derive(MathNet.Symbolics.Backend.Context,System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Core.Signal&gt;,MathNet.Symbolics.Core.Signal):MathNet.Symbolics.Backend.Containers.SignalSet" Analyze="True" />
          <Member Name="IsAdditiveIdentity(MathNet.Symbolics.Core.Signal):System.Boolean" Analyze="True" />
          <Member Name="IsAlwaysInteger(MathNet.Symbolics.Core.Signal):System.Boolean" Analyze="True" />
          <Member Name="IsAlwaysNonnegativeInteger(MathNet.Symbolics.Core.Signal):System.Boolean" Analyze="True" />
          <Member Name="IsAlwaysPositiveInteger(MathNet.Symbolics.Core.Signal):System.Boolean" Analyze="True" />
          <Member Name="IsAlwaysRational(MathNet.Symbolics.Core.Signal):System.Boolean" Analyze="True" />
          <Member Name="IsAlwaysReal(MathNet.Symbolics.Core.Signal):System.Boolean" Analyze="True" />
          <Member Name="IsConstant(MathNet.Symbolics.Core.Signal):System.Boolean" Analyze="True" />
          <Member Name="IsConstantAdditiveIdentity(MathNet.Symbolics.Core.Signal):System.Boolean" Analyze="True" />
          <Member Name="IsConstantMultiplicativeIdentity(MathNet.Symbolics.Core.Signal):System.Boolean" Analyze="True" />
          <Member Name="IsConstantUndefined(MathNet.Symbolics.Core.Signal):System.Boolean" Analyze="True" />
          <Member Name="IsMonomial(MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Signal):System.Boolean" Analyze="True" />
          <Member Name="IsMonomial(MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Signal[]):System.Boolean" Analyze="True" />
          <Member Name="IsMonomialFactor(MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Signal[]):System.Boolean" Analyze="True" />
          <Member Name="IsMultiplicativeIdentity(MathNet.Symbolics.Core.Signal):System.Boolean" Analyze="True" />
          <Member Name="IsPolynomial(MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Signal):System.Boolean" Analyze="True" />
          <Member Name="IsPolynomial(MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Signal[]):System.Boolean" Analyze="True" />
          <Member Name="IsRational(MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Signal):System.Boolean" Analyze="True" />
          <Member Name="IsUndefined(MathNet.Symbolics.Core.Signal):System.Boolean" Analyze="True" />
          <Member Name="MonomialCoefficient(MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.ValueStructure&amp;):MathNet.Symbolics.Core.Signal" Analyze="True" />
          <Member Name="MonomialDegree(MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Signal):MathNet.Symbolics.Core.ValueStructure" Analyze="True" />
          <Member Name="MonomialDegree(MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Signal[]):MathNet.Symbolics.Core.ValueStructure" Analyze="True" />
          <Member Name="Numerator(MathNet.Symbolics.Core.Signal):MathNet.Symbolics.Core.Signal" Analyze="True" />
          <Member Name="PolynomialCoefficient(MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Signal,System.Int32):MathNet.Symbolics.Core.Signal" Analyze="True" />
          <Member Name="PolynomialCoefficients(MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Signal):MathNet.Symbolics.Core.Signal[]" Analyze="True" />
          <Member Name="PolynomialDegree(MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Signal):MathNet.Symbolics.Core.ValueStructure" Analyze="True" />
          <Member Name="PolynomialDegree(MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Signal[]):MathNet.Symbolics.Core.ValueStructure" Analyze="True" />
          <Member Name="PolynomialHeight(MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Signal):MathNet.Symbolics.Core.ValueStructure" Analyze="True" />
          <Member Name="PolynomialLeadingCoefficient(MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Signal):MathNet.Symbolics.Core.Signal" Analyze="True" />
          <Member Name="PolynomialTotalDegree(MathNet.Symbolics.Core.Signal):MathNet.Symbolics.Core.ValueStructure" Analyze="True" />
          <Member Name="PolynomialVariables(MathNet.Symbolics.Core.Signal):MathNet.Symbolics.Core.Signal[]" Analyze="True" />
          <Member Name="Secant(MathNet.Symbolics.Backend.Context,MathNet.Symbolics.Core.Signal):MathNet.Symbolics.Core.Signal" Analyze="True" />
          <Member Name="Secant(MathNet.Symbolics.Backend.Context,System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Core.Signal&gt;):MathNet.Symbolics.Backend.Containers.ReadOnlySignalSet" Analyze="True" />
          <Member Name="SeparateFactors(MathNet.Symbolics.Backend.Context,MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Signal):MathNet.Symbolics.Core.Signal[]" Analyze="True" />
          <Member Name="Sine(MathNet.Symbolics.Backend.Context,MathNet.Symbolics.Core.Signal):MathNet.Symbolics.Core.Signal" Analyze="True" />
          <Member Name="Sine(MathNet.Symbolics.Backend.Context,System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Core.Signal&gt;):MathNet.Symbolics.Backend.Containers.ReadOnlySignalSet" Analyze="True" />
          <Member Name="Tangent(MathNet.Symbolics.Backend.Context,MathNet.Symbolics.Core.Signal):MathNet.Symbolics.Core.Signal" Analyze="True" />
          <Member Name="Tangent(MathNet.Symbolics.Backend.Context,System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Core.Signal&gt;):MathNet.Symbolics.Backend.Containers.ReadOnlySignalSet" Analyze="True" />
          <Member Name="TrigonometricSubstitute(MathNet.Symbolics.Core.Signal):MathNet.Symbolics.Core.Signal" Analyze="True" />
          <Member Name="TrigonometricSubstitute(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Core.Signal&gt;,MathNet.Symbolics.Backend.Context):MathNet.Symbolics.Backend.Containers.SignalSet" Analyze="True" />
         </Members>
        </Type>
        <Type Name="Std+&lt;&gt;c__DisplayClass1" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="&lt;IsPolynomial&gt;b__0(MathNet.Symbolics.Core.Signal):System.Boolean" Analyze="True" />
          <Member Name="variable" Analyze="True" />
         </Members>
        </Type>
        <Type Name="Std+&lt;&gt;c__DisplayClass4" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="&lt;IsMonomial&gt;b__3(MathNet.Symbolics.Core.Signal):System.Boolean" Analyze="True" />
          <Member Name="generalizedVariables" Analyze="True" />
         </Members>
        </Type>
        <Type Name="Std+&lt;&gt;c__DisplayClass7" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="&lt;IsPolynomial&gt;b__6(MathNet.Symbolics.Core.Signal):System.Boolean" Analyze="True" />
          <Member Name="generalizedVariables" Analyze="True" />
         </Members>
        </Type>
        <Type Name="Std+&lt;&gt;c__DisplayClassa" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="&lt;Derive&gt;b__9(MathNet.Symbolics.Backend.Theorems.ITransformationTheorem):System.Void" Analyze="True" />
          <Member Name="variable" Analyze="True" />
         </Members>
        </Type>
        <Type Name="Std+&lt;&gt;c__DisplayClassd" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="&lt;Derive&gt;b__c(MathNet.Symbolics.Backend.Theorems.ITransformationTheorem):System.Void" Analyze="True" />
          <Member Name="variable" Analyze="True" />
         </Members>
        </Type>
        <Type Name="StdPackageManager" Analyze="True">
         <Members>
          <Member Name=".ctor(MathNet.Symbolics.Backend.Context)" Analyze="True" />
          <Member Name="AppendArchitectures(MathNet.Symbolics.Backend.Containers.ArchitectureTable):System.Void" Analyze="True" />
          <Member Name="AppendEntities(MathNet.Symbolics.Backend.Containers.EntityTable):System.Void" Analyze="True" />
          <Member Name="AppendStructures(MathNet.Symbolics.Backend.ValueConversion.StructureTable):System.Void" Analyze="True" />
          <Member Name="AppendTheorems(MathNet.Symbolics.Backend.Containers.TheoremTable):System.Void" Analyze="True" />
          <Member Name="Architectures" Analyze="True">
           <Accessors>
            <Accessor Name="get_Architectures():MathNet.Symbolics.Backend.Discovery.IArchitectureServer" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="context" Analyze="True" />
          <Member Name="Context" Analyze="True">
           <Accessors>
            <Accessor Name="get_Context():MathNet.Symbolics.Backend.Context" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Domain" Analyze="True">
           <Accessors>
            <Accessor Name="get_Domain():System.String" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Entities" Analyze="True">
           <Accessors>
            <Accessor Name="get_Entities():MathNet.Symbolics.Backend.Discovery.IEntityServer" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Structures" Analyze="True">
           <Accessors>
            <Accessor Name="get_Structures():MathNet.Symbolics.Backend.Discovery.IStructureServer" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Theorems" Analyze="True">
           <Accessors>
            <Accessor Name="get_Theorems():MathNet.Symbolics.Backend.Discovery.ITheoremServer" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="MathNet.Symbolics.StdPackage.Algebra" Analyze="True">
       <Types>
        <Type Name="AutoSimplifyArchitecture" Analyze="True">
         <Members>
          <Member Name=".cctor()" Analyze="True" />
          <Member Name=".ctor()" Analyze="True" />
          <Member Name=".ctor(MathNet.Symbolics.Core.Port)" Analyze="True" />
          <Member Name="_entityId" Analyze="True" />
          <Member Name="EntityIdentifier" Analyze="True">
           <Accessors>
            <Accessor Name="get_EntityIdentifier():MathNet.Symbolics.Core.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ExecuteMathematicalOperator():MathNet.Symbolics.Backend.Containers.ISignalSet" Analyze="True" />
          <Member Name="InstantiateToPort(MathNet.Symbolics.Core.Port):MathNet.Symbolics.Core.Architecture" Analyze="True" />
          <Member Name="SupportsPort(MathNet.Symbolics.Core.Port):System.Boolean" Analyze="True" />
         </Members>
        </Type>
        <Type Name="AutoSimplifyTransformation" Analyze="True">
         <Members>
          <Member Name=".cctor()" Analyze="True" />
          <Member Name=".ctor(MathNet.Symbolics.Core.MathIdentifier,MathNet.Symbolics.Backend.Theorems.CreatePattern,MathNet.Symbolics.Backend.Traversing.EstimatePlan,MathNet.Symbolics.Backend.Traversing.ManipulatePort)" Analyze="True" />
          <Member Name=".ctor(MathNet.Symbolics.Core.MathIdentifier,MathNet.Symbolics.Backend.Traversing.EstimatePlan,MathNet.Symbolics.Backend.Traversing.ManipulatePort)" Analyze="True" />
          <Member Name="_id" Analyze="True" />
          <Member Name="_pattern" Analyze="True" />
          <Member Name="_plan" Analyze="True" />
          <Member Name="_simplify" Analyze="True" />
          <Member Name="_transformationTypeId" Analyze="True" />
          <Member Name="CreatePattern():MathNet.Symbolics.Backend.Patterns.Pattern" Analyze="True" />
          <Member Name="EstimatePlan(MathNet.Symbolics.Core.Port,MathNet.Symbolics.Backend.Patterns.GroupCollection):MathNet.Symbolics.Backend.Traversing.ManipulationPlan" Analyze="True" />
          <Member Name="ManipulatePort(MathNet.Symbolics.Core.Port,MathNet.Symbolics.Backend.Containers.SignalSet,System.Boolean,MathNet.Symbolics.Backend.Patterns.GroupCollection):System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Core.Signal&gt;" Analyze="True" />
          <Member Name="ManipulateSignal(MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Signal,System.Boolean):MathNet.Symbolics.Core.Signal" Analyze="True" />
          <Member Name="TheoremId" Analyze="True">
           <Accessors>
            <Accessor Name="get_TheoremId():MathNet.Symbolics.Core.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="TransformationTypeId" Analyze="True">
           <Accessors>
            <Accessor Name="get_TransformationTypeId():MathNet.Symbolics.Core.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="TransformationTypeIdentifier" Analyze="True">
           <Accessors>
            <Accessor Name="get_TransformationTypeIdentifier():MathNet.Symbolics.Core.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="AutoSimplifyTransformation+&lt;&gt;c__DisplayClass2" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__0():MathNet.Symbolics.Backend.Patterns.Pattern" Analyze="True" />
          <Member Name="supportedEntityId" Analyze="True" />
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="MathNet.Symbolics.StdPackage.Analysis" Analyze="True">
       <Types>
        <Type Name="AlgebraicDerivativeArchitecture" Analyze="True">
         <Members>
          <Member Name=".cctor()" Analyze="True" />
          <Member Name=".ctor()" Analyze="True" />
          <Member Name=".ctor(MathNet.Symbolics.Core.Port)" Analyze="True" />
          <Member Name="_entityId" Analyze="True" />
          <Member Name="EntityIdentifier" Analyze="True">
           <Accessors>
            <Accessor Name="get_EntityIdentifier():MathNet.Symbolics.Core.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ExecuteMathematicalOperator():MathNet.Symbolics.Backend.Containers.ISignalSet" Analyze="True" />
          <Member Name="InstantiateToPort(MathNet.Symbolics.Core.Port):MathNet.Symbolics.Core.Architecture" Analyze="True" />
          <Member Name="SupportsPort(MathNet.Symbolics.Core.Port):System.Boolean" Analyze="True" />
         </Members>
        </Type>
        <Type Name="DerivativeTransformation" Analyze="True">
         <Members>
          <Member Name=".cctor()" Analyze="True" />
          <Member Name=".ctor(MathNet.Symbolics.Core.MathIdentifier,MathNet.Symbolics.Core.MathIdentifier,MathNet.Symbolics.StdPackage.Analysis.EstimateDerivePlan,MathNet.Symbolics.StdPackage.Analysis.Derive)" Analyze="True" />
          <Member Name=".ctor(MathNet.Symbolics.Core.MathIdentifier,MathNet.Symbolics.StdPackage.Analysis.Derive)" Analyze="True" />
          <Member Name=".ctor(MathNet.Symbolics.Core.MathIdentifier,MathNet.Symbolics.StdPackage.Analysis.EstimateDerivePlan,MathNet.Symbolics.StdPackage.Analysis.Derive)" Analyze="True" />
          <Member Name="_derive" Analyze="True" />
          <Member Name="_id" Analyze="True" />
          <Member Name="_plan" Analyze="True" />
          <Member Name="_supportedEntityId" Analyze="True" />
          <Member Name="_transformationTypeId" Analyze="True" />
          <Member Name="_variable" Analyze="True" />
          <Member Name="CreatePattern():MathNet.Symbolics.Backend.Patterns.Pattern" Analyze="True" />
          <Member Name="DefaultEstimate(MathNet.Symbolics.Core.Port,MathNet.Symbolics.Core.Signal):MathNet.Symbolics.Backend.Traversing.ManipulationPlan" Analyze="True" />
          <Member Name="EstimatePlan(MathNet.Symbolics.Core.Port,MathNet.Symbolics.Backend.Patterns.GroupCollection):MathNet.Symbolics.Backend.Traversing.ManipulationPlan" Analyze="True" />
          <Member Name="ManipulatePort(MathNet.Symbolics.Core.Port,MathNet.Symbolics.Backend.Containers.SignalSet,System.Boolean,MathNet.Symbolics.Backend.Patterns.GroupCollection):System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Core.Signal&gt;" Analyze="True" />
          <Member Name="ManipulateSignal(MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Signal,System.Boolean):MathNet.Symbolics.Core.Signal" Analyze="True" />
          <Member Name="TheoremId" Analyze="True">
           <Accessors>
            <Accessor Name="get_TheoremId():MathNet.Symbolics.Core.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="TransformationTypeId" Analyze="True">
           <Accessors>
            <Accessor Name="get_TransformationTypeId():MathNet.Symbolics.Core.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="TransformationTypeIdentifier" Analyze="True">
           <Accessors>
            <Accessor Name="get_TransformationTypeIdentifier():MathNet.Symbolics.Core.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Variable" Analyze="True">
           <Accessors>
            <Accessor Name="get_Variable():MathNet.Symbolics.Core.Signal" Analyze="True" />
            <Accessor Name="set_Variable(MathNet.Symbolics.Core.Signal):System.Void" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="Derive" Analyze="True">
         <Members>
          <Member Name=".ctor(System.Object,System.IntPtr)" Analyze="True" />
          <Member Name="BeginInvoke(MathNet.Symbolics.Core.Port,MathNet.Symbolics.Backend.Containers.SignalSet,MathNet.Symbolics.Core.Signal,System.Boolean,System.AsyncCallback,System.Object):System.IAsyncResult" Analyze="True" />
          <Member Name="EndInvoke(System.IAsyncResult):System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Core.Signal&gt;" Analyze="True" />
          <Member Name="Invoke(MathNet.Symbolics.Core.Port,MathNet.Symbolics.Backend.Containers.SignalSet,MathNet.Symbolics.Core.Signal,System.Boolean):System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Core.Signal&gt;" Analyze="True" />
         </Members>
        </Type>
        <Type Name="EstimateDerivePlan" Analyze="True">
         <Members>
          <Member Name=".ctor(System.Object,System.IntPtr)" Analyze="True" />
          <Member Name="BeginInvoke(MathNet.Symbolics.Core.Port,MathNet.Symbolics.Core.Signal,System.AsyncCallback,System.Object):System.IAsyncResult" Analyze="True" />
          <Member Name="EndInvoke(System.IAsyncResult):MathNet.Symbolics.Backend.Traversing.ManipulationPlan" Analyze="True" />
          <Member Name="Invoke(MathNet.Symbolics.Core.Port,MathNet.Symbolics.Core.Signal):MathNet.Symbolics.Backend.Traversing.ManipulationPlan" Analyze="True" />
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="MathNet.Symbolics.StdPackage.Arithmetics" Analyze="True">
       <Types>
        <Type Name="AbsoluteArchitectures" Analyze="True">
         <Members>
          <Member Name=".cctor()" Analyze="True" />
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="_entityId" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__0(MathNet.Symbolics.Core.Port):MathNet.Symbolics.Core.Process[]" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__1(MathNet.Symbolics.StdPackage.Structures.IntegerValue):MathNet.Symbolics.StdPackage.Structures.IntegerValue" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__2(MathNet.Symbolics.Core.Port):MathNet.Symbolics.Core.Process[]" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__3(MathNet.Symbolics.StdPackage.Structures.RationalValue):MathNet.Symbolics.StdPackage.Structures.RationalValue" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__4(MathNet.Symbolics.Core.Port):MathNet.Symbolics.Core.Process[]" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__5(MathNet.Symbolics.StdPackage.Structures.RealValue):MathNet.Symbolics.StdPackage.Structures.RealValue" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__6(MathNet.Symbolics.Core.Port):MathNet.Symbolics.Core.Process[]" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate7" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate8" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate9" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegatea" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegateb" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegatec" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegated" Analyze="True" />
          <Member Name="BuildTheorems(MathNet.Symbolics.Backend.Context):MathNet.Symbolics.Backend.Theorems.ITheorem[]" Analyze="True" />
          <Member Name="EntityIdentifier" Analyze="True">
           <Accessors>
            <Accessor Name="get_EntityIdentifier():MathNet.Symbolics.Core.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="AdditionArchitectures" Analyze="True">
         <Members>
          <Member Name=".cctor()" Analyze="True" />
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="_entityId" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate1" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate5" Analyze="True" />
          <Member Name="&lt;BuildTheorems&gt;b__3(MathNet.Symbolics.Core.Port):MathNet.Symbolics.Backend.Traversing.ManipulationPlan" Analyze="True" />
          <Member Name="&lt;InstantiateToPort&gt;b__0():MathNet.Symbolics.Core.ValueStructure" Analyze="True" />
          <Member Name="BuildTheorems(MathNet.Symbolics.Backend.Context):MathNet.Symbolics.Backend.Theorems.ITheorem[]" Analyze="True" />
          <Member Name="EntityId" Analyze="True">
           <Accessors>
            <Accessor Name="get_EntityId():MathNet.Symbolics.Core.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="EntityIdentifier" Analyze="True">
           <Accessors>
            <Accessor Name="get_EntityIdentifier():MathNet.Symbolics.Core.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="InstantiateToPort(MathNet.Symbolics.Core.Port):MathNet.Symbolics.Core.Architecture" Analyze="True" />
          <Member Name="IsVector(MathNet.Symbolics.Core.Port):System.Boolean" Analyze="True" />
          <Member Name="SimplifySummands(MathNet.Symbolics.Backend.Containers.SignalSet):System.Boolean" Analyze="True" />
          <Member Name="SupportsPort(MathNet.Symbolics.Core.Port):System.Boolean" Analyze="True" />
         </Members>
        </Type>
        <Type Name="AdditionArchitectures+&lt;&gt;c__DisplayClass6" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="&lt;BuildTheorems&gt;b__2(MathNet.Symbolics.Core.Port,MathNet.Symbolics.Backend.Containers.SignalSet,MathNet.Symbolics.Core.Signal,System.Boolean):System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Core.Signal&gt;" Analyze="True" />
          <Member Name="&lt;BuildTheorems&gt;b__4(MathNet.Symbolics.Core.Port,MathNet.Symbolics.Backend.Containers.SignalSet,System.Boolean):System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Core.Signal&gt;" Analyze="True" />
          <Member Name="context" Analyze="True" />
         </Members>
        </Type>
        <Type Name="DivisionArchitectures" Analyze="True">
         <Members>
          <Member Name=".cctor()" Analyze="True" />
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="_entityId" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__0(MathNet.Symbolics.Core.Port):MathNet.Symbolics.Core.Process[]" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__1(MathNet.Symbolics.Core.Port):MathNet.Symbolics.Core.Process[]" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__2(MathNet.Symbolics.Core.Port):MathNet.Symbolics.Core.Process[]" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__3(MathNet.Symbolics.Core.Port):MathNet.Symbolics.Core.Process[]" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__4():MathNet.Symbolics.Core.ValueStructure" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate5" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate6" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate7" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate8" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate9" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegated" Analyze="True" />
          <Member Name="&lt;BuildTheorems&gt;b__b(MathNet.Symbolics.Core.Port):MathNet.Symbolics.Backend.Traversing.ManipulationPlan" Analyze="True" />
          <Member Name="BuildTheorems(MathNet.Symbolics.Backend.Context):MathNet.Symbolics.Backend.Theorems.ITheorem[]" Analyze="True" />
          <Member Name="EntityIdentifier" Analyze="True">
           <Accessors>
            <Accessor Name="get_EntityIdentifier():MathNet.Symbolics.Core.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="SimplifyFactors(MathNet.Symbolics.Backend.Containers.SignalSet):System.Boolean" Analyze="True" />
         </Members>
        </Type>
        <Type Name="DivisionArchitectures+&lt;&gt;c__DisplayClasse" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="&lt;BuildTheorems&gt;b__a(MathNet.Symbolics.Core.Port,MathNet.Symbolics.Backend.Containers.SignalSet,MathNet.Symbolics.Core.Signal,System.Boolean):System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Core.Signal&gt;" Analyze="True" />
          <Member Name="&lt;BuildTheorems&gt;b__c(MathNet.Symbolics.Core.Port,MathNet.Symbolics.Backend.Containers.SignalSet,System.Boolean):System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Core.Signal&gt;" Analyze="True" />
          <Member Name="context" Analyze="True" />
         </Members>
        </Type>
        <Type Name="ExponentialArchitectures" Analyze="True">
         <Members>
          <Member Name=".cctor()" Analyze="True" />
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="_entityId" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__0(MathNet.Symbolics.Core.Port):MathNet.Symbolics.Core.Process[]" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__1(MathNet.Symbolics.StdPackage.Structures.RealValue):MathNet.Symbolics.StdPackage.Structures.RealValue" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__2(MathNet.Symbolics.Core.Port):MathNet.Symbolics.Core.Process[]" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate3" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate4" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate5" Analyze="True" />
          <Member Name="BuildTheorems(MathNet.Symbolics.Backend.Context):MathNet.Symbolics.Backend.Theorems.ITheorem[]" Analyze="True" />
          <Member Name="EntityIdentifier" Analyze="True">
           <Accessors>
            <Accessor Name="get_EntityIdentifier():MathNet.Symbolics.Core.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="ExponentialArchitectures+&lt;&gt;c__DisplayClass7" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="&lt;BuildTheorems&gt;b__6(MathNet.Symbolics.Core.Port,MathNet.Symbolics.Backend.Containers.SignalSet,MathNet.Symbolics.Core.Signal,System.Boolean):System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Core.Signal&gt;" Analyze="True" />
          <Member Name="context" Analyze="True" />
         </Members>
        </Type>
        <Type Name="InvertArchitectures" Analyze="True">
         <Members>
          <Member Name=".cctor()" Analyze="True" />
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="_entityId" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__0(MathNet.Symbolics.Core.Port):MathNet.Symbolics.Core.Process[]" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__1(MathNet.Symbolics.StdPackage.Structures.IntegerValue):MathNet.Symbolics.StdPackage.Structures.RationalValue" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__2(MathNet.Symbolics.Core.Port):MathNet.Symbolics.Core.Process[]" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__3(MathNet.Symbolics.StdPackage.Structures.RationalValue):MathNet.Symbolics.StdPackage.Structures.RationalValue" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__4(MathNet.Symbolics.Core.Port):MathNet.Symbolics.Core.Process[]" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__5(MathNet.Symbolics.StdPackage.Structures.RealValue):MathNet.Symbolics.StdPackage.Structures.RealValue" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__6(MathNet.Symbolics.Core.Port):MathNet.Symbolics.Core.Process[]" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate7" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate8" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate9" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegatea" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegateb" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegatec" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegated" Analyze="True" />
          <Member Name="BuildTheorems(MathNet.Symbolics.Backend.Context):MathNet.Symbolics.Backend.Theorems.ITheorem[]" Analyze="True" />
          <Member Name="EntityIdentifier" Analyze="True">
           <Accessors>
            <Accessor Name="get_EntityIdentifier():MathNet.Symbolics.Core.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="InvertArchitectures+&lt;&gt;c__DisplayClassf" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="&lt;BuildTheorems&gt;b__e(MathNet.Symbolics.Core.Port,MathNet.Symbolics.Backend.Containers.SignalSet,MathNet.Symbolics.Core.Signal,System.Boolean):System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Core.Signal&gt;" Analyze="True" />
          <Member Name="context" Analyze="True" />
         </Members>
        </Type>
        <Type Name="MultiplicationArchitectures" Analyze="True">
         <Members>
          <Member Name=".cctor()" Analyze="True" />
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="_entityId" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__0(MathNet.Symbolics.Core.Port):MathNet.Symbolics.Core.Process[]" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__1(MathNet.Symbolics.Core.Port):MathNet.Symbolics.Core.Process[]" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__2(MathNet.Symbolics.Core.Port):MathNet.Symbolics.Core.Process[]" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__3(MathNet.Symbolics.Core.Port):MathNet.Symbolics.Core.Process[]" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__4():MathNet.Symbolics.Core.ValueStructure" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate5" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate6" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate7" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate8" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate9" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegated" Analyze="True" />
          <Member Name="&lt;BuildTheorems&gt;b__b(MathNet.Symbolics.Core.Port):MathNet.Symbolics.Backend.Traversing.ManipulationPlan" Analyze="True" />
          <Member Name="BuildTheorems(MathNet.Symbolics.Backend.Context):MathNet.Symbolics.Backend.Theorems.ITheorem[]" Analyze="True" />
          <Member Name="EntityIdentifier" Analyze="True">
           <Accessors>
            <Accessor Name="get_EntityIdentifier():MathNet.Symbolics.Core.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="SimplifyFactors(MathNet.Symbolics.Backend.Containers.SignalSet):System.Boolean" Analyze="True" />
         </Members>
        </Type>
        <Type Name="MultiplicationArchitectures+&lt;&gt;c__DisplayClasse" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="&lt;BuildTheorems&gt;b__a(MathNet.Symbolics.Core.Port,MathNet.Symbolics.Backend.Containers.SignalSet,MathNet.Symbolics.Core.Signal,System.Boolean):System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Core.Signal&gt;" Analyze="True" />
          <Member Name="&lt;BuildTheorems&gt;b__c(MathNet.Symbolics.Core.Port,MathNet.Symbolics.Backend.Containers.SignalSet,System.Boolean):System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Core.Signal&gt;" Analyze="True" />
          <Member Name="context" Analyze="True" />
         </Members>
        </Type>
        <Type Name="NaturalLogarithmArchitectures" Analyze="True">
         <Members>
          <Member Name=".cctor()" Analyze="True" />
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="_entityId" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__0(MathNet.Symbolics.Core.Port):MathNet.Symbolics.Core.Process[]" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__1(MathNet.Symbolics.StdPackage.Structures.RealValue):MathNet.Symbolics.StdPackage.Structures.RealValue" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__2(MathNet.Symbolics.Core.Port):MathNet.Symbolics.Core.Process[]" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate3" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate4" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate5" Analyze="True" />
          <Member Name="BuildTheorems(MathNet.Symbolics.Backend.Context):MathNet.Symbolics.Backend.Theorems.ITheorem[]" Analyze="True" />
          <Member Name="EntityIdentifier" Analyze="True">
           <Accessors>
            <Accessor Name="get_EntityIdentifier():MathNet.Symbolics.Core.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="NaturalLogarithmArchitectures+&lt;&gt;c__DisplayClass7" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="&lt;BuildTheorems&gt;b__6(MathNet.Symbolics.Core.Port,MathNet.Symbolics.Backend.Containers.SignalSet,MathNet.Symbolics.Core.Signal,System.Boolean):System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Core.Signal&gt;" Analyze="True" />
          <Member Name="context" Analyze="True" />
         </Members>
        </Type>
        <Type Name="NegateArchitectures" Analyze="True">
         <Members>
          <Member Name=".cctor()" Analyze="True" />
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="_entityId" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__0(MathNet.Symbolics.Core.Port):MathNet.Symbolics.Core.Process[]" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__1(MathNet.Symbolics.StdPackage.Structures.IntegerValue):MathNet.Symbolics.StdPackage.Structures.IntegerValue" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__2(MathNet.Symbolics.Core.Port):MathNet.Symbolics.Core.Process[]" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__3(MathNet.Symbolics.StdPackage.Structures.RationalValue):MathNet.Symbolics.StdPackage.Structures.RationalValue" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__4(MathNet.Symbolics.Core.Port):MathNet.Symbolics.Core.Process[]" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__5(MathNet.Symbolics.StdPackage.Structures.RealValue):MathNet.Symbolics.StdPackage.Structures.RealValue" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__6(MathNet.Symbolics.Core.Port):MathNet.Symbolics.Core.Process[]" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate7" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate8" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate9" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegatea" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegateb" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegatec" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegated" Analyze="True" />
          <Member Name="BuildTheorems(MathNet.Symbolics.Backend.Context):MathNet.Symbolics.Backend.Theorems.ITheorem[]" Analyze="True" />
          <Member Name="EntityIdentifier" Analyze="True">
           <Accessors>
            <Accessor Name="get_EntityIdentifier():MathNet.Symbolics.Core.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="NegateArchitectures+&lt;&gt;c__DisplayClassf" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="&lt;BuildTheorems&gt;b__e(MathNet.Symbolics.Core.Port,MathNet.Symbolics.Backend.Containers.SignalSet,MathNet.Symbolics.Core.Signal,System.Boolean):System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Core.Signal&gt;" Analyze="True" />
          <Member Name="context" Analyze="True" />
         </Members>
        </Type>
        <Type Name="PowerArchitectures" Analyze="True">
         <Members>
          <Member Name=".cctor()" Analyze="True" />
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="_entityId" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__0(MathNet.Symbolics.Core.Port):MathNet.Symbolics.Core.Process[]" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__1():MathNet.Symbolics.Core.ValueStructure" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__2(MathNet.Symbolics.StdPackage.Structures.IntegerValue,MathNet.Symbolics.StdPackage.Structures.IntegerValue):MathNet.Symbolics.StdPackage.Structures.IntegerValue" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__3(MathNet.Symbolics.Core.Port):System.Boolean" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__4(MathNet.Symbolics.Core.Port):MathNet.Symbolics.Core.Process[]" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__5():MathNet.Symbolics.Core.ValueStructure" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__6(MathNet.Symbolics.StdPackage.Structures.RationalValue,MathNet.Symbolics.StdPackage.Structures.RationalValue):MathNet.Symbolics.StdPackage.Structures.RationalValue" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__7(MathNet.Symbolics.Core.Port):MathNet.Symbolics.Core.Process[]" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__8():MathNet.Symbolics.Core.ValueStructure" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__9(MathNet.Symbolics.StdPackage.Structures.RealValue,MathNet.Symbolics.StdPackage.Structures.RealValue):MathNet.Symbolics.StdPackage.Structures.RealValue" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__a(MathNet.Symbolics.Core.Port):MathNet.Symbolics.Core.Process[]" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__b():MathNet.Symbolics.Core.ValueStructure" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate10" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate11" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate12" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate13" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate14" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate15" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate16" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate17" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate1a" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate1b" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegatec" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegated" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegatee" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegatef" Analyze="True" />
          <Member Name="&lt;BuildTheorems&gt;b__18(MathNet.Symbolics.Core.Port):MathNet.Symbolics.Backend.Traversing.ManipulationPlan" Analyze="True" />
          <Member Name="&lt;BuildTheorems&gt;b__19(MathNet.Symbolics.Core.Port,MathNet.Symbolics.Backend.Containers.SignalSet,System.Boolean):System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Core.Signal&gt;" Analyze="True" />
          <Member Name="BuildTheorems(MathNet.Symbolics.Backend.Context):MathNet.Symbolics.Backend.Theorems.ITheorem[]" Analyze="True" />
          <Member Name="EntityIdentifier" Analyze="True">
           <Accessors>
            <Accessor Name="get_EntityIdentifier():MathNet.Symbolics.Core.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="SelfBuildingExample" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name=".ctor(MathNet.Symbolics.Core.Port)" Analyze="True" />
          <Member Name="InstantiateToPort(MathNet.Symbolics.Core.Port):MathNet.Symbolics.Core.Architecture" Analyze="True" />
          <Member Name="ReregisterArchitecture(MathNet.Symbolics.Core.Port,MathNet.Symbolics.Core.Port):System.Void" Analyze="True" />
          <Member Name="SupportsPort(MathNet.Symbolics.Core.Port):System.Boolean" Analyze="True" />
          <Member Name="UnregisterArchitecture():System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="SquareArchitectures" Analyze="True">
         <Members>
          <Member Name=".cctor()" Analyze="True" />
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="_entityId" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__0(MathNet.Symbolics.Core.Port):MathNet.Symbolics.Core.Process[]" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__1(MathNet.Symbolics.StdPackage.Structures.IntegerValue):MathNet.Symbolics.StdPackage.Structures.IntegerValue" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__2(MathNet.Symbolics.Core.Port):MathNet.Symbolics.Core.Process[]" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__3(MathNet.Symbolics.StdPackage.Structures.RationalValue):MathNet.Symbolics.StdPackage.Structures.RationalValue" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__4(MathNet.Symbolics.Core.Port):MathNet.Symbolics.Core.Process[]" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__5(MathNet.Symbolics.StdPackage.Structures.RealValue):MathNet.Symbolics.StdPackage.Structures.RealValue" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__6(MathNet.Symbolics.Core.Port):MathNet.Symbolics.Core.Process[]" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate7" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate8" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate9" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegatea" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegateb" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegatec" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegated" Analyze="True" />
          <Member Name="BuildTheorems(MathNet.Symbolics.Backend.Context):MathNet.Symbolics.Backend.Theorems.ITheorem[]" Analyze="True" />
          <Member Name="EntityIdentifier" Analyze="True">
           <Accessors>
            <Accessor Name="get_EntityIdentifier():MathNet.Symbolics.Core.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="SquareArchitectures+&lt;&gt;c__DisplayClassf" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="&lt;BuildTheorems&gt;b__e(MathNet.Symbolics.Core.Port,MathNet.Symbolics.Backend.Containers.SignalSet,MathNet.Symbolics.Core.Signal,System.Boolean):System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Core.Signal&gt;" Analyze="True" />
          <Member Name="context" Analyze="True" />
         </Members>
        </Type>
        <Type Name="SubtractionArchitectures" Analyze="True">
         <Members>
          <Member Name=".cctor()" Analyze="True" />
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="_entityId" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__0(MathNet.Symbolics.Core.Port):MathNet.Symbolics.Core.Process[]" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__1(MathNet.Symbolics.Core.Port):MathNet.Symbolics.Core.Process[]" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__2(MathNet.Symbolics.Core.Port):MathNet.Symbolics.Core.Process[]" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__3(MathNet.Symbolics.Core.Port):MathNet.Symbolics.Core.Process[]" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__4():MathNet.Symbolics.Core.ValueStructure" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate5" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate6" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate7" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate8" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate9" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegated" Analyze="True" />
          <Member Name="&lt;BuildTheorems&gt;b__b(MathNet.Symbolics.Core.Port):MathNet.Symbolics.Backend.Traversing.ManipulationPlan" Analyze="True" />
          <Member Name="BuildTheorems(MathNet.Symbolics.Backend.Context):MathNet.Symbolics.Backend.Theorems.ITheorem[]" Analyze="True" />
          <Member Name="EntityIdentifier" Analyze="True">
           <Accessors>
            <Accessor Name="get_EntityIdentifier():MathNet.Symbolics.Core.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="SimplifySummands(MathNet.Symbolics.Backend.Containers.SignalSet):System.Boolean" Analyze="True" />
         </Members>
        </Type>
        <Type Name="SubtractionArchitectures+&lt;&gt;c__DisplayClasse" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="&lt;BuildTheorems&gt;b__a(MathNet.Symbolics.Core.Port,MathNet.Symbolics.Backend.Containers.SignalSet,MathNet.Symbolics.Core.Signal,System.Boolean):System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Core.Signal&gt;" Analyze="True" />
          <Member Name="&lt;BuildTheorems&gt;b__c(MathNet.Symbolics.Core.Port,MathNet.Symbolics.Backend.Containers.SignalSet,System.Boolean):System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Core.Signal&gt;" Analyze="True" />
          <Member Name="context" Analyze="True" />
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="MathNet.Symbolics.StdPackage.Flow" Analyze="True">
       <Types>
        <Type Name="ClockArchitecture" Analyze="True">
         <Members>
          <Member Name=".cctor()" Analyze="True" />
          <Member Name=".ctor()" Analyze="True" />
          <Member Name=".ctor(MathNet.Symbolics.Core.Port)" Analyze="True" />
          <Member Name="_entityId" Analyze="True" />
          <Member Name="Action(System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Core.Signal&gt;,System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Core.Signal&gt;,System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Core.Signal&gt;,System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Core.Bus&gt;):System.Void" Analyze="True" />
          <Member Name="EntityIdentifier" Analyze="True">
           <Accessors>
            <Accessor Name="get_EntityIdentifier():MathNet.Symbolics.Core.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="InstantiateToPort(MathNet.Symbolics.Core.Port):MathNet.Symbolics.Core.Architecture" Analyze="True" />
          <Member Name="periods" Analyze="True" />
          <Member Name="PostDelayedClock(System.Int32,MathNet.Symbolics.Core.Signal):System.Void" Analyze="True" />
          <Member Name="SenseSignals(System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Core.Signal&gt;,System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Core.Signal&gt;,System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Core.Bus&gt;,System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Core.Signal&gt;):System.Void" Analyze="True" />
          <Member Name="SupportsPort(MathNet.Symbolics.Core.Port):System.Boolean" Analyze="True" />
          <Member Name="UpdatePeriods(System.Int32,MathNet.Symbolics.Core.Signal):System.Boolean" Analyze="True" />
         </Members>
        </Type>
        <Type Name="SyncArchitecture" Analyze="True">
         <Members>
          <Member Name=".cctor()" Analyze="True" />
          <Member Name=".ctor()" Analyze="True" />
          <Member Name=".ctor(MathNet.Symbolics.Core.Port)" Analyze="True" />
          <Member Name="_entityId" Analyze="True" />
          <Member Name="EntityIdentifier" Analyze="True">
           <Accessors>
            <Accessor Name="get_EntityIdentifier():MathNet.Symbolics.Core.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="InstantiateToPort(MathNet.Symbolics.Core.Port):MathNet.Symbolics.Core.Architecture" Analyze="True" />
          <Member Name="ReregisterArchitecture(MathNet.Symbolics.Core.Port,MathNet.Symbolics.Core.Port):System.Void" Analyze="True" />
          <Member Name="SupportsPort(MathNet.Symbolics.Core.Port):System.Boolean" Analyze="True" />
          <Member Name="SyncArchitecture_SignalValueChanged(System.Object,System.EventArgs):System.Void" Analyze="True" />
          <Member Name="UnregisterArchitecture():System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="SystemPipeline" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
         </Members>
        </Type>
        <Type Name="TransportArchitecture" Analyze="True">
         <Members>
          <Member Name=".cctor()" Analyze="True" />
          <Member Name=".ctor()" Analyze="True" />
          <Member Name=".ctor(MathNet.Symbolics.Core.Port)" Analyze="True" />
          <Member Name="_entityId" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate3" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate4" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate5" Analyze="True" />
          <Member Name="&lt;BuildTheorems&gt;b__0(MathNet.Symbolics.Core.Port,MathNet.Symbolics.Backend.Containers.SignalSet,MathNet.Symbolics.Core.Signal,System.Boolean):System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Core.Signal&gt;" Analyze="True" />
          <Member Name="&lt;BuildTheorems&gt;b__1(MathNet.Symbolics.Core.Port):MathNet.Symbolics.Backend.Traversing.ManipulationPlan" Analyze="True" />
          <Member Name="&lt;BuildTheorems&gt;b__2(MathNet.Symbolics.Core.Port,MathNet.Symbolics.Backend.Containers.SignalSet,System.Boolean):System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Core.Signal&gt;" Analyze="True" />
          <Member Name="Action(System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Core.Signal&gt;,System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Core.Signal&gt;,System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Core.Signal&gt;,System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Core.Bus&gt;):System.Void" Analyze="True" />
          <Member Name="BuildTheorems(MathNet.Symbolics.Backend.Context):MathNet.Symbolics.Backend.Theorems.ITheorem[]" Analyze="True" />
          <Member Name="EntityIdentifier" Analyze="True">
           <Accessors>
            <Accessor Name="get_EntityIdentifier():MathNet.Symbolics.Core.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="InstantiateToPort(MathNet.Symbolics.Core.Port):MathNet.Symbolics.Core.Architecture" Analyze="True" />
          <Member Name="SenseSignals(System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Core.Signal&gt;,System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Core.Signal&gt;,System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Core.Bus&gt;,System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Core.Signal&gt;):System.Void" Analyze="True" />
          <Member Name="SupportsPort(MathNet.Symbolics.Core.Port):System.Boolean" Analyze="True" />
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="MathNet.Symbolics.StdPackage.Logic" Analyze="True">
       <Types>
        <Type Name="AndArchitectures" Analyze="True">
         <Members>
          <Member Name=".cctor()" Analyze="True" />
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="_entityId" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__0(MathNet.Symbolics.Core.Port):MathNet.Symbolics.Core.Process[]" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate1" Analyze="True" />
          <Member Name="EntityIdentifier" Analyze="True">
           <Accessors>
            <Accessor Name="get_EntityIdentifier():MathNet.Symbolics.Core.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="NandArchitectures" Analyze="True">
         <Members>
          <Member Name=".cctor()" Analyze="True" />
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="_entityId" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__0(MathNet.Symbolics.Core.Port):MathNet.Symbolics.Core.Process[]" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate1" Analyze="True" />
          <Member Name="EntityIdentifier" Analyze="True">
           <Accessors>
            <Accessor Name="get_EntityIdentifier():MathNet.Symbolics.Core.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="NorArchitectures" Analyze="True">
         <Members>
          <Member Name=".cctor()" Analyze="True" />
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="_entityId" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__0(MathNet.Symbolics.Core.Port):MathNet.Symbolics.Core.Process[]" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate1" Analyze="True" />
          <Member Name="EntityIdentifier" Analyze="True">
           <Accessors>
            <Accessor Name="get_EntityIdentifier():MathNet.Symbolics.Core.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="NotArchitectures" Analyze="True">
         <Members>
          <Member Name=".cctor()" Analyze="True" />
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="_entityId" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__0(MathNet.Symbolics.Core.Port):MathNet.Symbolics.Core.Process[]" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate1" Analyze="True" />
          <Member Name="EntityIdentifier" Analyze="True">
           <Accessors>
            <Accessor Name="get_EntityIdentifier():MathNet.Symbolics.Core.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="OrArchitectures" Analyze="True">
         <Members>
          <Member Name=".cctor()" Analyze="True" />
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="_entityId" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__0(MathNet.Symbolics.Core.Port):MathNet.Symbolics.Core.Process[]" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate1" Analyze="True" />
          <Member Name="EntityIdentifier" Analyze="True">
           <Accessors>
            <Accessor Name="get_EntityIdentifier():MathNet.Symbolics.Core.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="XnorArchitectures" Analyze="True">
         <Members>
          <Member Name=".cctor()" Analyze="True" />
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="_entityId" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__0(MathNet.Symbolics.Core.Port):MathNet.Symbolics.Core.Process[]" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate1" Analyze="True" />
          <Member Name="EntityIdentifier" Analyze="True">
           <Accessors>
            <Accessor Name="get_EntityIdentifier():MathNet.Symbolics.Core.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="XorArchitectures" Analyze="True">
         <Members>
          <Member Name=".cctor()" Analyze="True" />
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="_entityId" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__0(MathNet.Symbolics.Core.Port):MathNet.Symbolics.Core.Process[]" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate1" Analyze="True" />
          <Member Name="EntityIdentifier" Analyze="True">
           <Accessors>
            <Accessor Name="get_EntityIdentifier():MathNet.Symbolics.Core.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="MathNet.Symbolics.StdPackage.Properties" Analyze="True">
       <Types>
        <Type Name="ConstantSignalProperty" Analyze="True">
         <Members>
          <Member Name=".cctor()" Analyze="True" />
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="_instance" Analyze="True" />
          <Member Name="_propertyId" Analyze="True" />
          <Member Name="Equals(MathNet.Symbolics.Backend.Properties.Property):System.Boolean" Analyze="True" />
          <Member Name="InnerDeserialize(MathNet.Symbolics.Backend.Context,System.Xml.XmlReader):MathNet.Symbolics.StdPackage.Properties.ConstantSignalProperty" Analyze="True" />
          <Member Name="InnerSerialize(System.Xml.XmlWriter):System.Void" Analyze="True" />
          <Member Name="Instance" Analyze="True">
           <Accessors>
            <Accessor Name="get_Instance():MathNet.Symbolics.StdPackage.Properties.ConstantSignalProperty" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="PropertyId" Analyze="True">
           <Accessors>
            <Accessor Name="get_PropertyId():MathNet.Symbolics.Core.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="PropertyIdentifier" Analyze="True">
           <Accessors>
            <Accessor Name="get_PropertyIdentifier():MathNet.Symbolics.Core.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="StillValidAfterDrive(MathNet.Symbolics.Core.Signal):System.Boolean" Analyze="True" />
          <Member Name="StillValidAfterEvent(MathNet.Symbolics.Core.Signal):System.Boolean" Analyze="True" />
          <Member Name="StillValidAfterUndrive(MathNet.Symbolics.Core.Signal):System.Boolean" Analyze="True" />
         </Members>
        </Type>
        <Type Name="IntegerSetProperty" Analyze="True">
         <Members>
          <Member Name=".cctor()" Analyze="True" />
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="_instance" Analyze="True" />
          <Member Name="_propertyId" Analyze="True" />
          <Member Name="Equals(MathNet.Symbolics.Backend.Properties.Property):System.Boolean" Analyze="True" />
          <Member Name="InnerDeserialize(MathNet.Symbolics.Backend.Context,System.Xml.XmlReader):MathNet.Symbolics.StdPackage.Properties.IntegerSetProperty" Analyze="True" />
          <Member Name="InnerSerialize(System.Xml.XmlWriter):System.Void" Analyze="True" />
          <Member Name="Instance" Analyze="True">
           <Accessors>
            <Accessor Name="get_Instance():MathNet.Symbolics.StdPackage.Properties.IntegerSetProperty" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="PropertyId" Analyze="True">
           <Accessors>
            <Accessor Name="get_PropertyId():MathNet.Symbolics.Core.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="PropertyIdentifier" Analyze="True">
           <Accessors>
            <Accessor Name="get_PropertyIdentifier():MathNet.Symbolics.Core.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="StillValidAfterDrive(MathNet.Symbolics.Core.Signal):System.Boolean" Analyze="True" />
          <Member Name="StillValidAfterEvent(MathNet.Symbolics.Core.Signal):System.Boolean" Analyze="True" />
          <Member Name="StillValidAfterUndrive(MathNet.Symbolics.Core.Signal):System.Boolean" Analyze="True" />
         </Members>
        </Type>
        <Type Name="PositiveIntegerSetProperty" Analyze="True">
         <Members>
          <Member Name=".cctor()" Analyze="True" />
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="_instance" Analyze="True" />
          <Member Name="_propertyId" Analyze="True" />
          <Member Name="Equals(MathNet.Symbolics.Backend.Properties.Property):System.Boolean" Analyze="True" />
          <Member Name="InnerDeserialize(MathNet.Symbolics.Backend.Context,System.Xml.XmlReader):MathNet.Symbolics.StdPackage.Properties.PositiveIntegerSetProperty" Analyze="True" />
          <Member Name="InnerSerialize(System.Xml.XmlWriter):System.Void" Analyze="True" />
          <Member Name="Instance" Analyze="True">
           <Accessors>
            <Accessor Name="get_Instance():MathNet.Symbolics.StdPackage.Properties.PositiveIntegerSetProperty" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="PropertyId" Analyze="True">
           <Accessors>
            <Accessor Name="get_PropertyId():MathNet.Symbolics.Core.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="PropertyIdentifier" Analyze="True">
           <Accessors>
            <Accessor Name="get_PropertyIdentifier():MathNet.Symbolics.Core.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="StillValidAfterDrive(MathNet.Symbolics.Core.Signal):System.Boolean" Analyze="True" />
          <Member Name="StillValidAfterEvent(MathNet.Symbolics.Core.Signal):System.Boolean" Analyze="True" />
          <Member Name="StillValidAfterUndrive(MathNet.Symbolics.Core.Signal):System.Boolean" Analyze="True" />
         </Members>
        </Type>
        <Type Name="RationalSetProperty" Analyze="True">
         <Members>
          <Member Name=".cctor()" Analyze="True" />
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="_instance" Analyze="True" />
          <Member Name="_propertyId" Analyze="True" />
          <Member Name="Equals(MathNet.Symbolics.Backend.Properties.Property):System.Boolean" Analyze="True" />
          <Member Name="InnerDeserialize(MathNet.Symbolics.Backend.Context,System.Xml.XmlReader):MathNet.Symbolics.StdPackage.Properties.RationalSetProperty" Analyze="True" />
          <Member Name="InnerSerialize(System.Xml.XmlWriter):System.Void" Analyze="True" />
          <Member Name="Instance" Analyze="True">
           <Accessors>
            <Accessor Name="get_Instance():MathNet.Symbolics.StdPackage.Properties.RationalSetProperty" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="PropertyId" Analyze="True">
           <Accessors>
            <Accessor Name="get_PropertyId():MathNet.Symbolics.Core.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="PropertyIdentifier" Analyze="True">
           <Accessors>
            <Accessor Name="get_PropertyIdentifier():MathNet.Symbolics.Core.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="StillValidAfterDrive(MathNet.Symbolics.Core.Signal):System.Boolean" Analyze="True" />
          <Member Name="StillValidAfterEvent(MathNet.Symbolics.Core.Signal):System.Boolean" Analyze="True" />
          <Member Name="StillValidAfterUndrive(MathNet.Symbolics.Core.Signal):System.Boolean" Analyze="True" />
         </Members>
        </Type>
        <Type Name="RealSetProperty" Analyze="True">
         <Members>
          <Member Name=".cctor()" Analyze="True" />
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="_instance" Analyze="True" />
          <Member Name="_propertyId" Analyze="True" />
          <Member Name="Equals(MathNet.Symbolics.Backend.Properties.Property):System.Boolean" Analyze="True" />
          <Member Name="InnerDeserialize(MathNet.Symbolics.Backend.Context,System.Xml.XmlReader):MathNet.Symbolics.StdPackage.Properties.RealSetProperty" Analyze="True" />
          <Member Name="InnerSerialize(System.Xml.XmlWriter):System.Void" Analyze="True" />
          <Member Name="Instance" Analyze="True">
           <Accessors>
            <Accessor Name="get_Instance():MathNet.Symbolics.StdPackage.Properties.RealSetProperty" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="PropertyId" Analyze="True">
           <Accessors>
            <Accessor Name="get_PropertyId():MathNet.Symbolics.Core.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="PropertyIdentifier" Analyze="True">
           <Accessors>
            <Accessor Name="get_PropertyIdentifier():MathNet.Symbolics.Core.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="StillValidAfterDrive(MathNet.Symbolics.Core.Signal):System.Boolean" Analyze="True" />
          <Member Name="StillValidAfterEvent(MathNet.Symbolics.Core.Signal):System.Boolean" Analyze="True" />
          <Member Name="StillValidAfterUndrive(MathNet.Symbolics.Core.Signal):System.Boolean" Analyze="True" />
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="MathNet.Symbolics.StdPackage.Structures" Analyze="True">
       <Types>
        <Type Name="ComplexInfinitySymbol" Analyze="True">
         <Members>
          <Member Name=".cctor()" Analyze="True" />
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="_instance" Analyze="True" />
          <Member Name="_router" Analyze="True" />
          <Member Name="_structureId" Analyze="True" />
          <Member Name="CompareTo(MathNet.Symbolics.StdPackage.Structures.ComplexInfinitySymbol):System.Int32" Analyze="True" />
          <Member Name="Constant(MathNet.Symbolics.Backend.Context):MathNet.Symbolics.Core.Signal" Analyze="True" />
          <Member Name="Converter" Analyze="True">
           <Accessors>
            <Accessor Name="get_Converter():MathNet.Symbolics.Backend.ValueConversion.ConversionRouter" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ConvertFrom(MathNet.Symbolics.Core.ValueStructure):MathNet.Symbolics.StdPackage.Structures.ComplexInfinitySymbol" Analyze="True" />
          <Member Name="Equals(MathNet.Symbolics.Core.ValueStructure):System.Boolean" Analyze="True" />
          <Member Name="Equals(MathNet.Symbolics.StdPackage.Structures.ComplexInfinitySymbol):System.Boolean" Analyze="True" />
          <Member Name="InnerDeserialize(MathNet.Symbolics.Backend.Context,System.Xml.XmlReader):MathNet.Symbolics.StdPackage.Structures.ComplexInfinitySymbol" Analyze="True" />
          <Member Name="InnerSerialize(System.Xml.XmlWriter):System.Void" Analyze="True" />
          <Member Name="Instance" Analyze="True">
           <Accessors>
            <Accessor Name="get_Instance():MathNet.Symbolics.StdPackage.Structures.ComplexInfinitySymbol" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="LocalConvertFrom(MathNet.Symbolics.Core.ValueStructure):MathNet.Symbolics.Core.ValueStructure" Analyze="True" />
          <Member Name="PublishConversionRouteNeighbors(MathNet.Symbolics.Backend.ValueConversion.StructureTable):System.Void" Analyze="True" />
          <Member Name="StructureId" Analyze="True">
           <Accessors>
            <Accessor Name="get_StructureId():MathNet.Symbolics.Core.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="StructureIdentifier" Analyze="True">
           <Accessors>
            <Accessor Name="get_StructureIdentifier():MathNet.Symbolics.Core.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="ComplexValue" Analyze="True">
         <Members>
          <Member Name=".cctor()" Analyze="True" />
          <Member Name=".ctor()" Analyze="True" />
          <Member Name=".ctor(MathNet.Numerics.Complex)" Analyze="True" />
          <Member Name=".ctor(MathNet.Symbolics.StdPackage.Structures.IntegerValue)" Analyze="True" />
          <Member Name=".ctor(MathNet.Symbolics.StdPackage.Structures.RationalValue)" Analyze="True" />
          <Member Name=".ctor(MathNet.Symbolics.StdPackage.Structures.RealValue)" Analyze="True" />
          <Member Name=".ctor(MathNet.Symbolics.StdPackage.Structures.RealValue,MathNet.Symbolics.StdPackage.Structures.RealValue)" Analyze="True" />
          <Member Name=".ctor(System.Double)" Analyze="True" />
          <Member Name=".ctor(System.Double,System.Double)" Analyze="True" />
          <Member Name="_dataValue" Analyze="True" />
          <Member Name="_router" Analyze="True" />
          <Member Name="_structureId" Analyze="True" />
          <Member Name="Absolute():MathNet.Symbolics.StdPackage.Structures.RealValue" Analyze="True" />
          <Member Name="Absolute(MathNet.Symbolics.StdPackage.Structures.ComplexValue):MathNet.Symbolics.StdPackage.Structures.RealValue" Analyze="True" />
          <Member Name="Add(MathNet.Symbolics.StdPackage.Structures.ComplexValue):MathNet.Symbolics.StdPackage.Structures.ComplexValue" Analyze="True" />
          <Member Name="Add(MathNet.Symbolics.StdPackage.Structures.ComplexValue,MathNet.Symbolics.StdPackage.Structures.ComplexValue):MathNet.Symbolics.StdPackage.Structures.ComplexValue" Analyze="True" />
          <Member Name="AdditiveIdentity" Analyze="True">
           <Accessors>
            <Accessor Name="get_AdditiveIdentity():MathNet.Symbolics.StdPackage.Structures.ComplexValue" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Argument" Analyze="True">
           <Accessors>
            <Accessor Name="get_Argument():System.Double" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="CompareTo(MathNet.Symbolics.StdPackage.Structures.ComplexValue):System.Int32" Analyze="True" />
          <Member Name="Conjugate():MathNet.Symbolics.StdPackage.Structures.ComplexValue" Analyze="True" />
          <Member Name="Conjugate(MathNet.Symbolics.StdPackage.Structures.ComplexValue):MathNet.Symbolics.StdPackage.Structures.ComplexValue" Analyze="True" />
          <Member Name="Constant(MathNet.Symbolics.Backend.Context,MathNet.Numerics.Complex):MathNet.Symbolics.Core.Signal" Analyze="True" />
          <Member Name="Constant(MathNet.Symbolics.Backend.Context,MathNet.Numerics.Complex,System.String):MathNet.Symbolics.Core.Signal" Analyze="True" />
          <Member Name="Converter" Analyze="True">
           <Accessors>
            <Accessor Name="get_Converter():MathNet.Symbolics.Backend.ValueConversion.ConversionRouter" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ConvertFrom(MathNet.Symbolics.Core.ValueStructure):MathNet.Symbolics.StdPackage.Structures.ComplexValue" Analyze="True" />
          <Member Name="ConvertFrom(MathNet.Symbolics.StdPackage.Structures.IntegerValue):MathNet.Symbolics.StdPackage.Structures.ComplexValue" Analyze="True" />
          <Member Name="ConvertFrom(MathNet.Symbolics.StdPackage.Structures.RationalValue):MathNet.Symbolics.StdPackage.Structures.ComplexValue" Analyze="True" />
          <Member Name="ConvertFrom(MathNet.Symbolics.StdPackage.Structures.RealValue):MathNet.Symbolics.StdPackage.Structures.ComplexValue" Analyze="True" />
          <Member Name="Cosecant():MathNet.Symbolics.StdPackage.Structures.ComplexValue" Analyze="True" />
          <Member Name="Cosine():MathNet.Symbolics.StdPackage.Structures.ComplexValue" Analyze="True" />
          <Member Name="Cotangent():MathNet.Symbolics.StdPackage.Structures.ComplexValue" Analyze="True" />
          <Member Name="Divide(MathNet.Symbolics.StdPackage.Structures.ComplexValue):MathNet.Symbolics.StdPackage.Structures.ComplexValue" Analyze="True" />
          <Member Name="Divide(MathNet.Symbolics.StdPackage.Structures.ComplexValue,MathNet.Symbolics.StdPackage.Structures.ComplexValue):MathNet.Symbolics.StdPackage.Structures.ComplexValue" Analyze="True" />
          <Member Name="Equals(MathNet.Symbolics.Core.ValueStructure):System.Boolean" Analyze="True" />
          <Member Name="Equals(MathNet.Symbolics.StdPackage.Structures.ComplexValue):System.Boolean" Analyze="True" />
          <Member Name="Equals(MathNet.Symbolics.StdPackage.Structures.IntegerValue):System.Boolean" Analyze="True" />
          <Member Name="Equals(MathNet.Symbolics.StdPackage.Structures.RationalValue):System.Boolean" Analyze="True" />
          <Member Name="Equals(MathNet.Symbolics.StdPackage.Structures.RealValue):System.Boolean" Analyze="True" />
          <Member Name="Exponential():MathNet.Symbolics.StdPackage.Structures.ComplexValue" Analyze="True" />
          <Member Name="Exponential(MathNet.Symbolics.StdPackage.Structures.ComplexValue):MathNet.Symbolics.StdPackage.Structures.ComplexValue" Analyze="True" />
          <Member Name="GetHashCode():System.Int32" Analyze="True" />
          <Member Name="HyperbolicCosecant():MathNet.Symbolics.StdPackage.Structures.ComplexValue" Analyze="True" />
          <Member Name="HyperbolicCosine():MathNet.Symbolics.StdPackage.Structures.ComplexValue" Analyze="True" />
          <Member Name="HyperbolicCotangent():MathNet.Symbolics.StdPackage.Structures.ComplexValue" Analyze="True" />
          <Member Name="HyperbolicSecant():MathNet.Symbolics.StdPackage.Structures.ComplexValue" Analyze="True" />
          <Member Name="HyperbolicSine():MathNet.Symbolics.StdPackage.Structures.ComplexValue" Analyze="True" />
          <Member Name="HyperbolicTangent():MathNet.Symbolics.StdPackage.Structures.ComplexValue" Analyze="True" />
          <Member Name="I" Analyze="True">
           <Accessors>
            <Accessor Name="get_I():MathNet.Symbolics.StdPackage.Structures.ComplexValue" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ImaginaryValue" Analyze="True">
           <Accessors>
            <Accessor Name="get_ImaginaryValue():System.Double" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="InnerDeserialize(MathNet.Symbolics.Backend.Context,System.Xml.XmlReader):MathNet.Symbolics.StdPackage.Structures.ComplexValue" Analyze="True" />
          <Member Name="InnerSerialize(System.Xml.XmlWriter):System.Void" Analyze="True" />
          <Member Name="InverseCosecant():MathNet.Symbolics.StdPackage.Structures.ComplexValue" Analyze="True" />
          <Member Name="InverseCosine():MathNet.Symbolics.StdPackage.Structures.ComplexValue" Analyze="True" />
          <Member Name="InverseCotangent():MathNet.Symbolics.StdPackage.Structures.ComplexValue" Analyze="True" />
          <Member Name="InverseHyperbolicCosecant():MathNet.Symbolics.StdPackage.Structures.ComplexValue" Analyze="True" />
          <Member Name="InverseHyperbolicCosine():MathNet.Symbolics.StdPackage.Structures.ComplexValue" Analyze="True" />
          <Member Name="InverseHyperbolicCotangent():MathNet.Symbolics.StdPackage.Structures.ComplexValue" Analyze="True" />
          <Member Name="InverseHyperbolicSecant():MathNet.Symbolics.StdPackage.Structures.ComplexValue" Analyze="True" />
          <Member Name="InverseHyperbolicSine():MathNet.Symbolics.StdPackage.Structures.ComplexValue" Analyze="True" />
          <Member Name="InverseHyperbolicTangent():MathNet.Symbolics.StdPackage.Structures.ComplexValue" Analyze="True" />
          <Member Name="InverseSecant():MathNet.Symbolics.StdPackage.Structures.ComplexValue" Analyze="True" />
          <Member Name="InverseSine():MathNet.Symbolics.StdPackage.Structures.ComplexValue" Analyze="True" />
          <Member Name="InverseTangent():MathNet.Symbolics.StdPackage.Structures.ComplexValue" Analyze="True" />
          <Member Name="Invert():MathNet.Symbolics.StdPackage.Structures.ComplexValue" Analyze="True" />
          <Member Name="Invert(MathNet.Symbolics.StdPackage.Structures.ComplexValue):MathNet.Symbolics.StdPackage.Structures.ComplexValue" Analyze="True" />
          <Member Name="IsAdditiveIdentity" Analyze="True">
           <Accessors>
            <Accessor Name="get_IsAdditiveIdentity():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="IsMultiplicativeIdentity" Analyze="True">
           <Accessors>
            <Accessor Name="get_IsMultiplicativeIdentity():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="IsReal" Analyze="True">
           <Accessors>
            <Accessor Name="get_IsReal():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="IsZero" Analyze="True">
           <Accessors>
            <Accessor Name="get_IsZero():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="LocalConvertFrom(MathNet.Symbolics.Core.ValueStructure):MathNet.Symbolics.Core.ValueStructure" Analyze="True" />
          <Member Name="LocalConvertToStdReal(MathNet.Symbolics.Core.ValueStructure):MathNet.Symbolics.Core.ValueStructure" Analyze="True" />
          <Member Name="MathNet.Symbolics.StdPackage.IAlgebraicMonoid.AdditiveIdentity" Analyze="True">
           <Accessors>
            <Accessor Name="MathNet.Symbolics.StdPackage.IAlgebraicMonoid.get_AdditiveIdentity():MathNet.Symbolics.Core.ValueStructure" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="MathNet.Symbolics.StdPackage.IAlgebraicRingWithUnity.MultiplicativeIdentity" Analyze="True">
           <Accessors>
            <Accessor Name="MathNet.Symbolics.StdPackage.IAlgebraicRingWithUnity.get_MultiplicativeIdentity():MathNet.Symbolics.Core.ValueStructure" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Modulus" Analyze="True">
           <Accessors>
            <Accessor Name="get_Modulus():System.Double" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ModulusSquared" Analyze="True">
           <Accessors>
            <Accessor Name="get_ModulusSquared():System.Double" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="MultiplicativeIdentity" Analyze="True">
           <Accessors>
            <Accessor Name="get_MultiplicativeIdentity():MathNet.Symbolics.StdPackage.Structures.ComplexValue" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Multiply(MathNet.Symbolics.StdPackage.Structures.ComplexValue):MathNet.Symbolics.StdPackage.Structures.ComplexValue" Analyze="True" />
          <Member Name="Multiply(MathNet.Symbolics.StdPackage.Structures.ComplexValue,MathNet.Symbolics.StdPackage.Structures.ComplexValue):MathNet.Symbolics.StdPackage.Structures.ComplexValue" Analyze="True" />
          <Member Name="NaturalLogarithm():MathNet.Symbolics.StdPackage.Structures.ComplexValue" Analyze="True" />
          <Member Name="NaturalLogarithm(MathNet.Symbolics.StdPackage.Structures.ComplexValue):MathNet.Symbolics.StdPackage.Structures.ComplexValue" Analyze="True" />
          <Member Name="Negate():MathNet.Symbolics.StdPackage.Structures.ComplexValue" Analyze="True" />
          <Member Name="Negate(MathNet.Symbolics.StdPackage.Structures.ComplexValue):MathNet.Symbolics.StdPackage.Structures.ComplexValue" Analyze="True" />
          <Member Name="One" Analyze="True">
           <Accessors>
            <Accessor Name="get_One():MathNet.Symbolics.StdPackage.Structures.ComplexValue" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="op_Explicit(MathNet.Symbolics.StdPackage.Structures.IntegerValue):MathNet.Symbolics.StdPackage.Structures.ComplexValue" Analyze="True" />
          <Member Name="op_Explicit(MathNet.Symbolics.StdPackage.Structures.RationalValue):MathNet.Symbolics.StdPackage.Structures.ComplexValue" Analyze="True" />
          <Member Name="op_Explicit(MathNet.Symbolics.StdPackage.Structures.RealValue):MathNet.Symbolics.StdPackage.Structures.ComplexValue" Analyze="True" />
          <Member Name="Power(MathNet.Symbolics.StdPackage.Structures.ComplexValue):MathNet.Symbolics.StdPackage.Structures.ComplexValue" Analyze="True" />
          <Member Name="Power(MathNet.Symbolics.StdPackage.Structures.ComplexValue,MathNet.Symbolics.StdPackage.Structures.ComplexValue):MathNet.Symbolics.StdPackage.Structures.ComplexValue" Analyze="True" />
          <Member Name="PublishConversionRouteNeighbors(MathNet.Symbolics.Backend.ValueConversion.StructureTable):System.Void" Analyze="True" />
          <Member Name="RealValue" Analyze="True">
           <Accessors>
            <Accessor Name="get_RealValue():System.Double" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Root(MathNet.Symbolics.StdPackage.Structures.ComplexValue):MathNet.Symbolics.StdPackage.Structures.ComplexValue" Analyze="True" />
          <Member Name="Root(MathNet.Symbolics.StdPackage.Structures.ComplexValue,MathNet.Symbolics.StdPackage.Structures.ComplexValue):MathNet.Symbolics.StdPackage.Structures.ComplexValue" Analyze="True" />
          <Member Name="Scale(MathNet.Symbolics.StdPackage.Structures.ComplexValue):MathNet.Symbolics.StdPackage.Structures.ComplexValue" Analyze="True" />
          <Member Name="Secant():MathNet.Symbolics.StdPackage.Structures.ComplexValue" Analyze="True" />
          <Member Name="Sine():MathNet.Symbolics.StdPackage.Structures.ComplexValue" Analyze="True" />
          <Member Name="Square():MathNet.Symbolics.StdPackage.Structures.ComplexValue" Analyze="True" />
          <Member Name="Square(MathNet.Symbolics.StdPackage.Structures.ComplexValue):MathNet.Symbolics.StdPackage.Structures.ComplexValue" Analyze="True" />
          <Member Name="SquareRoot():MathNet.Symbolics.StdPackage.Structures.ComplexValue" Analyze="True" />
          <Member Name="SquareRoot(MathNet.Symbolics.StdPackage.Structures.ComplexValue):MathNet.Symbolics.StdPackage.Structures.ComplexValue" Analyze="True" />
          <Member Name="StructureId" Analyze="True">
           <Accessors>
            <Accessor Name="get_StructureId():MathNet.Symbolics.Core.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="StructureIdentifier" Analyze="True">
           <Accessors>
            <Accessor Name="get_StructureIdentifier():MathNet.Symbolics.Core.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Subtract(MathNet.Symbolics.StdPackage.Structures.ComplexValue):MathNet.Symbolics.StdPackage.Structures.ComplexValue" Analyze="True" />
          <Member Name="Subtract(MathNet.Symbolics.StdPackage.Structures.ComplexValue,MathNet.Symbolics.StdPackage.Structures.ComplexValue):MathNet.Symbolics.StdPackage.Structures.ComplexValue" Analyze="True" />
          <Member Name="Tangent():MathNet.Symbolics.StdPackage.Structures.ComplexValue" Analyze="True" />
          <Member Name="ToString():System.String" Analyze="True" />
          <Member Name="Value" Analyze="True">
           <Accessors>
            <Accessor Name="get_Value():MathNet.Numerics.Complex" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Zero" Analyze="True">
           <Accessors>
            <Accessor Name="get_Zero():MathNet.Symbolics.StdPackage.Structures.ComplexValue" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="ComplexValueCategory" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="_instance" Analyze="True" />
          <Member Name="InnerDeserialize(MathNet.Symbolics.Backend.Context,System.Xml.XmlReader):MathNet.Symbolics.StdPackage.Structures.ComplexValueCategory" Analyze="True" />
          <Member Name="InnerSerialize(System.Xml.XmlWriter):System.Void" Analyze="True" />
          <Member Name="Instance" Analyze="True">
           <Accessors>
            <Accessor Name="get_Instance():MathNet.Symbolics.StdPackage.Structures.ComplexValueCategory" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="IsComplexValueMember(MathNet.Symbolics.Core.Port):System.Boolean" Analyze="True" />
          <Member Name="IsMember(MathNet.Symbolics.Core.Port):MathNet.Symbolics.Backend.Properties.ECategoryMembership" Analyze="True" />
          <Member Name="IsMember(MathNet.Symbolics.Core.Signal,System.Boolean):MathNet.Symbolics.Backend.Properties.ECategoryMembership" Analyze="True" />
          <Member Name="IsNotRealValueMember(MathNet.Symbolics.Core.Port):System.Boolean" Analyze="True" />
         </Members>
        </Type>
        <Type Name="ELogicIeee1164" Analyze="True">
         <Members>
          <Member Name="DoNotCare" Analyze="True" />
          <Member Name="ForcingOne" Analyze="True" />
          <Member Name="ForcingUnknown" Analyze="True" />
          <Member Name="ForcingZero" Analyze="True" />
          <Member Name="HighImpedance" Analyze="True" />
          <Member Name="Uninitialized" Analyze="True" />
          <Member Name="value__" Analyze="True" />
          <Member Name="WeakOne" Analyze="True" />
          <Member Name="WeakUnknown" Analyze="True" />
          <Member Name="WeakZero" Analyze="True" />
         </Members>
        </Type>
        <Type Name="ELogicX01" Analyze="True">
         <Members>
          <Member Name="False" Analyze="True" />
          <Member Name="True" Analyze="True" />
          <Member Name="Unknown" Analyze="True" />
          <Member Name="value__" Analyze="True" />
         </Members>
        </Type>
        <Type Name="IntegerValue" Analyze="True">
         <Members>
          <Member Name=".cctor()" Analyze="True" />
          <Member Name=".ctor()" Analyze="True" />
          <Member Name=".ctor(System.Int64)" Analyze="True" />
          <Member Name="_dataValue" Analyze="True" />
          <Member Name="_router" Analyze="True" />
          <Member Name="_structureId" Analyze="True" />
          <Member Name="Absolute():MathNet.Symbolics.StdPackage.Structures.IntegerValue" Analyze="True" />
          <Member Name="Add(MathNet.Symbolics.StdPackage.Structures.IntegerValue):MathNet.Symbolics.StdPackage.Structures.IntegerValue" Analyze="True" />
          <Member Name="AdditiveIdentity" Analyze="True">
           <Accessors>
            <Accessor Name="get_AdditiveIdentity():MathNet.Symbolics.StdPackage.Structures.IntegerValue" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="CompareTo(MathNet.Symbolics.StdPackage.Structures.IntegerValue):System.Int32" Analyze="True" />
          <Member Name="Constant(MathNet.Symbolics.Backend.Context,System.Int64):MathNet.Symbolics.Core.Signal" Analyze="True" />
          <Member Name="ConstantAdditiveIdentity(MathNet.Symbolics.Backend.Context):MathNet.Symbolics.Core.Signal" Analyze="True" />
          <Member Name="ConstantMinusOne(MathNet.Symbolics.Backend.Context):MathNet.Symbolics.Core.Signal" Analyze="True" />
          <Member Name="ConstantMultiplicativeIdentity(MathNet.Symbolics.Backend.Context):MathNet.Symbolics.Core.Signal" Analyze="True" />
          <Member Name="ConstantOne(MathNet.Symbolics.Backend.Context):MathNet.Symbolics.Core.Signal" Analyze="True" />
          <Member Name="ConstantTwo(MathNet.Symbolics.Backend.Context):MathNet.Symbolics.Core.Signal" Analyze="True" />
          <Member Name="ConstantZero(MathNet.Symbolics.Backend.Context):MathNet.Symbolics.Core.Signal" Analyze="True" />
          <Member Name="Converter" Analyze="True">
           <Accessors>
            <Accessor Name="get_Converter():MathNet.Symbolics.Backend.ValueConversion.ConversionRouter" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ConvertFrom(MathNet.Symbolics.Core.ValueStructure):MathNet.Symbolics.StdPackage.Structures.IntegerValue" Analyze="True" />
          <Member Name="Divide(MathNet.Symbolics.StdPackage.Structures.IntegerValue):MathNet.Symbolics.StdPackage.Structures.RationalValue" Analyze="True" />
          <Member Name="Equals(MathNet.Symbolics.Core.ValueStructure):System.Boolean" Analyze="True" />
          <Member Name="Equals(MathNet.Symbolics.StdPackage.Structures.IntegerValue):System.Boolean" Analyze="True" />
          <Member Name="GetHashCode():System.Int32" Analyze="True" />
          <Member Name="InnerDeserialize(MathNet.Symbolics.Backend.Context,System.Xml.XmlReader):MathNet.Symbolics.StdPackage.Structures.IntegerValue" Analyze="True" />
          <Member Name="InnerSerialize(System.Xml.XmlWriter):System.Void" Analyze="True" />
          <Member Name="Invert():MathNet.Symbolics.StdPackage.Structures.RationalValue" Analyze="True" />
          <Member Name="IsAdditiveIdentity" Analyze="True">
           <Accessors>
            <Accessor Name="get_IsAdditiveIdentity():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="IsMultiplicativeIdentity" Analyze="True">
           <Accessors>
            <Accessor Name="get_IsMultiplicativeIdentity():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="MathNet.Symbolics.StdPackage.IAlgebraicMonoid.AdditiveIdentity" Analyze="True">
           <Accessors>
            <Accessor Name="MathNet.Symbolics.StdPackage.IAlgebraicMonoid.get_AdditiveIdentity():MathNet.Symbolics.Core.ValueStructure" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="MathNet.Symbolics.StdPackage.IAlgebraicRingWithUnity.MultiplicativeIdentity" Analyze="True">
           <Accessors>
            <Accessor Name="MathNet.Symbolics.StdPackage.IAlgebraicRingWithUnity.get_MultiplicativeIdentity():MathNet.Symbolics.Core.ValueStructure" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Max(MathNet.Symbolics.StdPackage.Structures.IntegerValue):MathNet.Symbolics.StdPackage.Structures.IntegerValue" Analyze="True" />
          <Member Name="Min(MathNet.Symbolics.StdPackage.Structures.IntegerValue):MathNet.Symbolics.StdPackage.Structures.IntegerValue" Analyze="True" />
          <Member Name="MultiplicativeIdentity" Analyze="True">
           <Accessors>
            <Accessor Name="get_MultiplicativeIdentity():MathNet.Symbolics.StdPackage.Structures.IntegerValue" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Multiply(MathNet.Symbolics.StdPackage.Structures.IntegerValue):MathNet.Symbolics.StdPackage.Structures.IntegerValue" Analyze="True" />
          <Member Name="Negate():MathNet.Symbolics.StdPackage.Structures.IntegerValue" Analyze="True" />
          <Member Name="One" Analyze="True">
           <Accessors>
            <Accessor Name="get_One():MathNet.Symbolics.StdPackage.Structures.IntegerValue" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="op_GreaterThan(MathNet.Symbolics.StdPackage.Structures.IntegerValue,MathNet.Symbolics.StdPackage.Structures.IntegerValue):System.Boolean" Analyze="True" />
          <Member Name="op_LessThan(MathNet.Symbolics.StdPackage.Structures.IntegerValue,MathNet.Symbolics.StdPackage.Structures.IntegerValue):System.Boolean" Analyze="True" />
          <Member Name="ParseConstant(MathNet.Symbolics.Backend.Context,System.String):MathNet.Symbolics.Core.Signal" Analyze="True" />
          <Member Name="Power(MathNet.Symbolics.StdPackage.Structures.IntegerValue):MathNet.Symbolics.StdPackage.Structures.IntegerValue" Analyze="True" />
          <Member Name="PublishConversionRouteNeighbors(MathNet.Symbolics.Backend.ValueConversion.StructureTable):System.Void" Analyze="True" />
          <Member Name="StructureId" Analyze="True">
           <Accessors>
            <Accessor Name="get_StructureId():MathNet.Symbolics.Core.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="StructureIdentifier" Analyze="True">
           <Accessors>
            <Accessor Name="get_StructureIdentifier():MathNet.Symbolics.Core.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Subtract(MathNet.Symbolics.StdPackage.Structures.IntegerValue):MathNet.Symbolics.StdPackage.Structures.IntegerValue" Analyze="True" />
          <Member Name="ToDouble():System.Double" Analyze="True" />
          <Member Name="ToString():System.String" Analyze="True" />
          <Member Name="Value" Analyze="True">
           <Accessors>
            <Accessor Name="get_Value():System.Int64" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Zero" Analyze="True">
           <Accessors>
            <Accessor Name="get_Zero():MathNet.Symbolics.StdPackage.Structures.IntegerValue" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="IntegerValue+AddProcess" Analyze="True">
         <Members>
          <Member Name=".ctor(System.Boolean[],System.Boolean[],System.Boolean[],System.Boolean[])" Analyze="True" />
          <Member Name=".ctor(System.Int32,System.Int32,System.Int32)" Analyze="True" />
          <Member Name="Action(System.Boolean,MathNet.Symbolics.Core.Signal):System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="IntegerValue+DivideProcess" Analyze="True">
         <Members>
          <Member Name=".ctor(System.Boolean[],System.Boolean[],System.Boolean[],System.Boolean[])" Analyze="True" />
          <Member Name=".ctor(System.Int32,System.Int32,System.Int32)" Analyze="True" />
          <Member Name="Action(System.Boolean,MathNet.Symbolics.Core.Signal):System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="IntegerValue+MultiplyProcess" Analyze="True">
         <Members>
          <Member Name=".ctor(System.Boolean[],System.Boolean[],System.Boolean[],System.Boolean[])" Analyze="True" />
          <Member Name=".ctor(System.Int32,System.Int32,System.Int32)" Analyze="True" />
          <Member Name="Action(System.Boolean,MathNet.Symbolics.Core.Signal):System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="IntegerValue+SubtractProcess" Analyze="True">
         <Members>
          <Member Name=".ctor(System.Boolean[],System.Boolean[],System.Boolean[],System.Boolean[])" Analyze="True" />
          <Member Name=".ctor(System.Int32,System.Int32,System.Int32)" Analyze="True" />
          <Member Name="Action(System.Boolean,MathNet.Symbolics.Core.Signal):System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="IntegerValueCategory" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="_instance" Analyze="True" />
          <Member Name="InnerDeserialize(MathNet.Symbolics.Backend.Context,System.Xml.XmlReader):MathNet.Symbolics.StdPackage.Structures.IntegerValueCategory" Analyze="True" />
          <Member Name="InnerSerialize(System.Xml.XmlWriter):System.Void" Analyze="True" />
          <Member Name="Instance" Analyze="True">
           <Accessors>
            <Accessor Name="get_Instance():MathNet.Symbolics.StdPackage.Structures.IntegerValueCategory" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="IsIntegerValueMember(MathNet.Symbolics.Core.Port):System.Boolean" Analyze="True" />
          <Member Name="IsMember(MathNet.Symbolics.Core.Port):MathNet.Symbolics.Backend.Properties.ECategoryMembership" Analyze="True" />
          <Member Name="IsMember(MathNet.Symbolics.Core.Signal,System.Boolean):MathNet.Symbolics.Backend.Properties.ECategoryMembership" Analyze="True" />
          <Member Name="IsNotIntegerValueMember(MathNet.Symbolics.Core.Port):System.Boolean" Analyze="True" />
         </Members>
        </Type>
        <Type Name="LiteralValue" Analyze="True">
         <Members>
          <Member Name=".cctor()" Analyze="True" />
          <Member Name=".ctor()" Analyze="True" />
          <Member Name=".ctor(System.String)" Analyze="True" />
          <Member Name="_dataValue" Analyze="True" />
          <Member Name="_router" Analyze="True" />
          <Member Name="_structureId" Analyze="True" />
          <Member Name="CompareTo(MathNet.Symbolics.StdPackage.Structures.LiteralValue):System.Int32" Analyze="True" />
          <Member Name="Concatenate(MathNet.Symbolics.StdPackage.Structures.LiteralValue):MathNet.Symbolics.StdPackage.Structures.LiteralValue" Analyze="True" />
          <Member Name="Constant(MathNet.Symbolics.Backend.Context,System.String):MathNet.Symbolics.Core.Signal" Analyze="True" />
          <Member Name="ConstantEmpty(MathNet.Symbolics.Backend.Context):MathNet.Symbolics.Core.Signal" Analyze="True" />
          <Member Name="Converter" Analyze="True">
           <Accessors>
            <Accessor Name="get_Converter():MathNet.Symbolics.Backend.ValueConversion.ConversionRouter" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ConvertFrom(MathNet.Symbolics.Core.ValueStructure):MathNet.Symbolics.StdPackage.Structures.LiteralValue" Analyze="True" />
          <Member Name="Empty" Analyze="True">
           <Accessors>
            <Accessor Name="get_Empty():MathNet.Symbolics.StdPackage.Structures.LiteralValue" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Equals(MathNet.Symbolics.Core.ValueStructure):System.Boolean" Analyze="True" />
          <Member Name="Equals(MathNet.Symbolics.StdPackage.Structures.LiteralValue):System.Boolean" Analyze="True" />
          <Member Name="GetHashCode():System.Int32" Analyze="True" />
          <Member Name="InnerDeserialize(MathNet.Symbolics.Backend.Context,System.Xml.XmlReader):MathNet.Symbolics.StdPackage.Structures.LiteralValue" Analyze="True" />
          <Member Name="InnerSerialize(System.Xml.XmlWriter):System.Void" Analyze="True" />
          <Member Name="LocalConvertFrom(MathNet.Symbolics.Core.ValueStructure):MathNet.Symbolics.Core.ValueStructure" Analyze="True" />
          <Member Name="ParseConstant(MathNet.Symbolics.Backend.Context,System.String):MathNet.Symbolics.Core.Signal" Analyze="True" />
          <Member Name="PublishConversionRouteNeighbors(MathNet.Symbolics.Backend.ValueConversion.StructureTable):System.Void" Analyze="True" />
          <Member Name="StructureId" Analyze="True">
           <Accessors>
            <Accessor Name="get_StructureId():MathNet.Symbolics.Core.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="StructureIdentifier" Analyze="True">
           <Accessors>
            <Accessor Name="get_StructureIdentifier():MathNet.Symbolics.Core.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ToString():System.String" Analyze="True" />
          <Member Name="Value" Analyze="True">
           <Accessors>
            <Accessor Name="get_Value():System.String" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="LogicValue" Analyze="True">
         <Members>
          <Member Name=".cctor()" Analyze="True" />
          <Member Name=".ctor()" Analyze="True" />
          <Member Name=".ctor(MathNet.Symbolics.StdPackage.Structures.ELogicX01)" Analyze="True" />
          <Member Name="_dataValue" Analyze="True" />
          <Member Name="_router" Analyze="True" />
          <Member Name="_structureId" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate12" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate13" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate16" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate17" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate1a" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate1b" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate1e" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate1f" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate2" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate22" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate23" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate26" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate27" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate2a" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate2b" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate2e" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate2f" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate3" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate31" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate6" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate7" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegatea" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegateb" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegatee" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegatef" Analyze="True" />
          <Member Name="&lt;CreateAndProcess&gt;b__0():MathNet.Symbolics.Core.ValueStructure" Analyze="True" />
          <Member Name="&lt;CreateAndProcess&gt;b__1(MathNet.Symbolics.StdPackage.Structures.LogicValue,MathNet.Symbolics.StdPackage.Structures.LogicValue):MathNet.Symbolics.StdPackage.Structures.LogicValue" Analyze="True" />
          <Member Name="&lt;CreateAndProcess&gt;b__4():MathNet.Symbolics.Core.ValueStructure" Analyze="True" />
          <Member Name="&lt;CreateAndProcess&gt;b__5(MathNet.Symbolics.StdPackage.Structures.LogicValue,MathNet.Symbolics.StdPackage.Structures.LogicValue):MathNet.Symbolics.StdPackage.Structures.LogicValue" Analyze="True" />
          <Member Name="&lt;CreateNandProcess&gt;b__8():MathNet.Symbolics.Core.ValueStructure" Analyze="True" />
          <Member Name="&lt;CreateNandProcess&gt;b__9(MathNet.Symbolics.StdPackage.Structures.LogicValue,MathNet.Symbolics.StdPackage.Structures.LogicValue):MathNet.Symbolics.StdPackage.Structures.LogicValue" Analyze="True" />
          <Member Name="&lt;CreateNandProcess&gt;b__c():MathNet.Symbolics.Core.ValueStructure" Analyze="True" />
          <Member Name="&lt;CreateNandProcess&gt;b__d(MathNet.Symbolics.StdPackage.Structures.LogicValue,MathNet.Symbolics.StdPackage.Structures.LogicValue):MathNet.Symbolics.StdPackage.Structures.LogicValue" Analyze="True" />
          <Member Name="&lt;CreateNorProcess&gt;b__18():MathNet.Symbolics.Core.ValueStructure" Analyze="True" />
          <Member Name="&lt;CreateNorProcess&gt;b__19(MathNet.Symbolics.StdPackage.Structures.LogicValue,MathNet.Symbolics.StdPackage.Structures.LogicValue):MathNet.Symbolics.StdPackage.Structures.LogicValue" Analyze="True" />
          <Member Name="&lt;CreateNorProcess&gt;b__1c():MathNet.Symbolics.Core.ValueStructure" Analyze="True" />
          <Member Name="&lt;CreateNorProcess&gt;b__1d(MathNet.Symbolics.StdPackage.Structures.LogicValue,MathNet.Symbolics.StdPackage.Structures.LogicValue):MathNet.Symbolics.StdPackage.Structures.LogicValue" Analyze="True" />
          <Member Name="&lt;CreateNotProcess&gt;b__30(MathNet.Symbolics.StdPackage.Structures.LogicValue):MathNet.Symbolics.StdPackage.Structures.LogicValue" Analyze="True" />
          <Member Name="&lt;CreateOrProcess&gt;b__10():MathNet.Symbolics.Core.ValueStructure" Analyze="True" />
          <Member Name="&lt;CreateOrProcess&gt;b__11(MathNet.Symbolics.StdPackage.Structures.LogicValue,MathNet.Symbolics.StdPackage.Structures.LogicValue):MathNet.Symbolics.StdPackage.Structures.LogicValue" Analyze="True" />
          <Member Name="&lt;CreateOrProcess&gt;b__14():MathNet.Symbolics.Core.ValueStructure" Analyze="True" />
          <Member Name="&lt;CreateOrProcess&gt;b__15(MathNet.Symbolics.StdPackage.Structures.LogicValue,MathNet.Symbolics.StdPackage.Structures.LogicValue):MathNet.Symbolics.StdPackage.Structures.LogicValue" Analyze="True" />
          <Member Name="&lt;CreateXnorProcess&gt;b__28():MathNet.Symbolics.Core.ValueStructure" Analyze="True" />
          <Member Name="&lt;CreateXnorProcess&gt;b__29(MathNet.Symbolics.StdPackage.Structures.LogicValue,MathNet.Symbolics.StdPackage.Structures.LogicValue):MathNet.Symbolics.StdPackage.Structures.LogicValue" Analyze="True" />
          <Member Name="&lt;CreateXnorProcess&gt;b__2c():MathNet.Symbolics.Core.ValueStructure" Analyze="True" />
          <Member Name="&lt;CreateXnorProcess&gt;b__2d(MathNet.Symbolics.StdPackage.Structures.LogicValue,MathNet.Symbolics.StdPackage.Structures.LogicValue):MathNet.Symbolics.StdPackage.Structures.LogicValue" Analyze="True" />
          <Member Name="&lt;CreateXorProcess&gt;b__20():MathNet.Symbolics.Core.ValueStructure" Analyze="True" />
          <Member Name="&lt;CreateXorProcess&gt;b__21(MathNet.Symbolics.StdPackage.Structures.LogicValue,MathNet.Symbolics.StdPackage.Structures.LogicValue):MathNet.Symbolics.StdPackage.Structures.LogicValue" Analyze="True" />
          <Member Name="&lt;CreateXorProcess&gt;b__24():MathNet.Symbolics.Core.ValueStructure" Analyze="True" />
          <Member Name="&lt;CreateXorProcess&gt;b__25(MathNet.Symbolics.StdPackage.Structures.LogicValue,MathNet.Symbolics.StdPackage.Structures.LogicValue):MathNet.Symbolics.StdPackage.Structures.LogicValue" Analyze="True" />
          <Member Name="Add(MathNet.Symbolics.StdPackage.Structures.LogicValue):MathNet.Symbolics.StdPackage.Structures.LogicValue" Analyze="True" />
          <Member Name="AdditiveIdentity" Analyze="True">
           <Accessors>
            <Accessor Name="get_AdditiveIdentity():MathNet.Symbolics.StdPackage.Structures.LogicValue" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="And(MathNet.Symbolics.StdPackage.Structures.LogicValue):MathNet.Symbolics.StdPackage.Structures.LogicValue" Analyze="True" />
          <Member Name="CompareTo(MathNet.Symbolics.StdPackage.Structures.LogicValue):System.Int32" Analyze="True" />
          <Member Name="Converter" Analyze="True">
           <Accessors>
            <Accessor Name="get_Converter():MathNet.Symbolics.Backend.ValueConversion.ConversionRouter" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ConvertFrom(MathNet.Symbolics.Core.ValueStructure):MathNet.Symbolics.StdPackage.Structures.LogicValue" Analyze="True" />
          <Member Name="CreateAndProcess(System.Boolean[],System.Boolean[],System.Boolean[],System.Boolean[]):MathNet.Symbolics.Core.Process" Analyze="True" />
          <Member Name="CreateAndProcess(System.Int32,System.Int32,System.Int32):MathNet.Symbolics.Core.Process" Analyze="True" />
          <Member Name="CreateNandProcess(System.Boolean[],System.Boolean[],System.Boolean[],System.Boolean[]):MathNet.Symbolics.Core.Process" Analyze="True" />
          <Member Name="CreateNandProcess(System.Int32,System.Int32,System.Int32):MathNet.Symbolics.Core.Process" Analyze="True" />
          <Member Name="CreateNorProcess(System.Boolean[],System.Boolean[],System.Boolean[],System.Boolean[]):MathNet.Symbolics.Core.Process" Analyze="True" />
          <Member Name="CreateNorProcess(System.Int32,System.Int32,System.Int32):MathNet.Symbolics.Core.Process" Analyze="True" />
          <Member Name="CreateNotProcess(System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean):MathNet.Symbolics.Core.Process" Analyze="True" />
          <Member Name="CreateOrProcess(System.Boolean[],System.Boolean[],System.Boolean[],System.Boolean[]):MathNet.Symbolics.Core.Process" Analyze="True" />
          <Member Name="CreateOrProcess(System.Int32,System.Int32,System.Int32):MathNet.Symbolics.Core.Process" Analyze="True" />
          <Member Name="CreateXnorProcess(System.Boolean[],System.Boolean[],System.Boolean[],System.Boolean[]):MathNet.Symbolics.Core.Process" Analyze="True" />
          <Member Name="CreateXnorProcess(System.Int32,System.Int32,System.Int32):MathNet.Symbolics.Core.Process" Analyze="True" />
          <Member Name="CreateXorProcess(System.Boolean[],System.Boolean[],System.Boolean[],System.Boolean[]):MathNet.Symbolics.Core.Process" Analyze="True" />
          <Member Name="CreateXorProcess(System.Int32,System.Int32,System.Int32):MathNet.Symbolics.Core.Process" Analyze="True" />
          <Member Name="Equals(MathNet.Symbolics.Core.ValueStructure):System.Boolean" Analyze="True" />
          <Member Name="Equals(MathNet.Symbolics.StdPackage.Structures.LogicValue):System.Boolean" Analyze="True" />
          <Member Name="False" Analyze="True">
           <Accessors>
            <Accessor Name="get_False():MathNet.Symbolics.StdPackage.Structures.LogicValue" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="GetHashCode():System.Int32" Analyze="True" />
          <Member Name="InnerDeserialize(MathNet.Symbolics.Backend.Context,System.Xml.XmlReader):MathNet.Symbolics.StdPackage.Structures.LogicValue" Analyze="True" />
          <Member Name="InnerSerialize(System.Xml.XmlWriter):System.Void" Analyze="True" />
          <Member Name="IsAdditiveIdentity" Analyze="True">
           <Accessors>
            <Accessor Name="get_IsAdditiveIdentity():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="IsMultiplicativeIdentity" Analyze="True">
           <Accessors>
            <Accessor Name="get_IsMultiplicativeIdentity():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="LocalConvertFrom(MathNet.Symbolics.Core.ValueStructure):MathNet.Symbolics.Core.ValueStructure" Analyze="True" />
          <Member Name="logicFalse" Analyze="True" />
          <Member Name="logicTrue" Analyze="True" />
          <Member Name="logicUnknown" Analyze="True" />
          <Member Name="MathNet.Symbolics.StdPackage.IAlgebraicMonoid.AdditiveIdentity" Analyze="True">
           <Accessors>
            <Accessor Name="MathNet.Symbolics.StdPackage.IAlgebraicMonoid.get_AdditiveIdentity():MathNet.Symbolics.Core.ValueStructure" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="MathNet.Symbolics.StdPackage.IAlgebraicRingWithUnity.MultiplicativeIdentity" Analyze="True">
           <Accessors>
            <Accessor Name="MathNet.Symbolics.StdPackage.IAlgebraicRingWithUnity.get_MultiplicativeIdentity():MathNet.Symbolics.Core.ValueStructure" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="MultiplicativeIdentity" Analyze="True">
           <Accessors>
            <Accessor Name="get_MultiplicativeIdentity():MathNet.Symbolics.StdPackage.Structures.LogicValue" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Multiply(MathNet.Symbolics.StdPackage.Structures.LogicValue):MathNet.Symbolics.StdPackage.Structures.LogicValue" Analyze="True" />
          <Member Name="Nand(MathNet.Symbolics.StdPackage.Structures.LogicValue):MathNet.Symbolics.StdPackage.Structures.LogicValue" Analyze="True" />
          <Member Name="Nor(MathNet.Symbolics.StdPackage.Structures.LogicValue):MathNet.Symbolics.StdPackage.Structures.LogicValue" Analyze="True" />
          <Member Name="Not():MathNet.Symbolics.StdPackage.Structures.LogicValue" Analyze="True" />
          <Member Name="One" Analyze="True">
           <Accessors>
            <Accessor Name="get_One():MathNet.Symbolics.StdPackage.Structures.LogicValue" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Or(MathNet.Symbolics.StdPackage.Structures.LogicValue):MathNet.Symbolics.StdPackage.Structures.LogicValue" Analyze="True" />
          <Member Name="PublishConversionRouteNeighbors(MathNet.Symbolics.Backend.ValueConversion.StructureTable):System.Void" Analyze="True" />
          <Member Name="StructureId" Analyze="True">
           <Accessors>
            <Accessor Name="get_StructureId():MathNet.Symbolics.Core.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="StructureIdentifier" Analyze="True">
           <Accessors>
            <Accessor Name="get_StructureIdentifier():MathNet.Symbolics.Core.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ToString():System.String" Analyze="True" />
          <Member Name="True" Analyze="True">
           <Accessors>
            <Accessor Name="get_True():MathNet.Symbolics.StdPackage.Structures.LogicValue" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Unknown" Analyze="True">
           <Accessors>
            <Accessor Name="get_Unknown():MathNet.Symbolics.StdPackage.Structures.LogicValue" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Value" Analyze="True">
           <Accessors>
            <Accessor Name="get_Value():MathNet.Symbolics.StdPackage.Structures.ELogicX01" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Xnor(MathNet.Symbolics.StdPackage.Structures.LogicValue):MathNet.Symbolics.StdPackage.Structures.LogicValue" Analyze="True" />
          <Member Name="Xor(MathNet.Symbolics.StdPackage.Structures.LogicValue):MathNet.Symbolics.StdPackage.Structures.LogicValue" Analyze="True" />
          <Member Name="Zero" Analyze="True">
           <Accessors>
            <Accessor Name="get_Zero():MathNet.Symbolics.StdPackage.Structures.LogicValue" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="LogicValueCategory" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="_instance" Analyze="True" />
          <Member Name="InnerDeserialize(MathNet.Symbolics.Backend.Context,System.Xml.XmlReader):MathNet.Symbolics.StdPackage.Structures.LogicValueCategory" Analyze="True" />
          <Member Name="InnerSerialize(System.Xml.XmlWriter):System.Void" Analyze="True" />
          <Member Name="Instance" Analyze="True">
           <Accessors>
            <Accessor Name="get_Instance():MathNet.Symbolics.StdPackage.Structures.LogicValueCategory" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="IsLogicValueMember(MathNet.Symbolics.Core.Port):System.Boolean" Analyze="True" />
          <Member Name="IsMember(MathNet.Symbolics.Core.Port):MathNet.Symbolics.Backend.Properties.ECategoryMembership" Analyze="True" />
          <Member Name="IsMember(MathNet.Symbolics.Core.Signal,System.Boolean):MathNet.Symbolics.Backend.Properties.ECategoryMembership" Analyze="True" />
          <Member Name="IsNotLogicValueMember(MathNet.Symbolics.Core.Port):System.Boolean" Analyze="True" />
         </Members>
        </Type>
        <Type Name="NegativeInfinitySymbol" Analyze="True">
         <Members>
          <Member Name=".cctor()" Analyze="True" />
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="_instance" Analyze="True" />
          <Member Name="_router" Analyze="True" />
          <Member Name="_structureId" Analyze="True" />
          <Member Name="CompareTo(MathNet.Symbolics.StdPackage.Structures.NegativeInfinitySymbol):System.Int32" Analyze="True" />
          <Member Name="Constant(MathNet.Symbolics.Backend.Context):MathNet.Symbolics.Core.Signal" Analyze="True" />
          <Member Name="Converter" Analyze="True">
           <Accessors>
            <Accessor Name="get_Converter():MathNet.Symbolics.Backend.ValueConversion.ConversionRouter" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ConvertFrom(MathNet.Symbolics.Core.ValueStructure):MathNet.Symbolics.StdPackage.Structures.NegativeInfinitySymbol" Analyze="True" />
          <Member Name="Equals(MathNet.Symbolics.Core.ValueStructure):System.Boolean" Analyze="True" />
          <Member Name="Equals(MathNet.Symbolics.StdPackage.Structures.NegativeInfinitySymbol):System.Boolean" Analyze="True" />
          <Member Name="InnerDeserialize(MathNet.Symbolics.Backend.Context,System.Xml.XmlReader):MathNet.Symbolics.StdPackage.Structures.NegativeInfinitySymbol" Analyze="True" />
          <Member Name="InnerSerialize(System.Xml.XmlWriter):System.Void" Analyze="True" />
          <Member Name="Instance" Analyze="True">
           <Accessors>
            <Accessor Name="get_Instance():MathNet.Symbolics.StdPackage.Structures.NegativeInfinitySymbol" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="PublishConversionRouteNeighbors(MathNet.Symbolics.Backend.ValueConversion.StructureTable):System.Void" Analyze="True" />
          <Member Name="StructureId" Analyze="True">
           <Accessors>
            <Accessor Name="get_StructureId():MathNet.Symbolics.Core.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="StructureIdentifier" Analyze="True">
           <Accessors>
            <Accessor Name="get_StructureIdentifier():MathNet.Symbolics.Core.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="PositiveInfinitySymbol" Analyze="True">
         <Members>
          <Member Name=".cctor()" Analyze="True" />
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="_instance" Analyze="True" />
          <Member Name="_router" Analyze="True" />
          <Member Name="_structureId" Analyze="True" />
          <Member Name="CompareTo(MathNet.Symbolics.StdPackage.Structures.PositiveInfinitySymbol):System.Int32" Analyze="True" />
          <Member Name="Constant(MathNet.Symbolics.Backend.Context):MathNet.Symbolics.Core.Signal" Analyze="True" />
          <Member Name="Converter" Analyze="True">
           <Accessors>
            <Accessor Name="get_Converter():MathNet.Symbolics.Backend.ValueConversion.ConversionRouter" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ConvertFrom(MathNet.Symbolics.Core.ValueStructure):MathNet.Symbolics.StdPackage.Structures.PositiveInfinitySymbol" Analyze="True" />
          <Member Name="Equals(MathNet.Symbolics.Core.ValueStructure):System.Boolean" Analyze="True" />
          <Member Name="Equals(MathNet.Symbolics.StdPackage.Structures.PositiveInfinitySymbol):System.Boolean" Analyze="True" />
          <Member Name="InnerDeserialize(MathNet.Symbolics.Backend.Context,System.Xml.XmlReader):MathNet.Symbolics.StdPackage.Structures.PositiveInfinitySymbol" Analyze="True" />
          <Member Name="InnerSerialize(System.Xml.XmlWriter):System.Void" Analyze="True" />
          <Member Name="Instance" Analyze="True">
           <Accessors>
            <Accessor Name="get_Instance():MathNet.Symbolics.StdPackage.Structures.PositiveInfinitySymbol" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="PublishConversionRouteNeighbors(MathNet.Symbolics.Backend.ValueConversion.StructureTable):System.Void" Analyze="True" />
          <Member Name="StructureId" Analyze="True">
           <Accessors>
            <Accessor Name="get_StructureId():MathNet.Symbolics.Core.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="StructureIdentifier" Analyze="True">
           <Accessors>
            <Accessor Name="get_StructureIdentifier():MathNet.Symbolics.Core.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="RationalValue" Analyze="True">
         <Members>
          <Member Name=".cctor()" Analyze="True" />
          <Member Name=".ctor()" Analyze="True" />
          <Member Name=".ctor(MathNet.Symbolics.StdPackage.Structures.IntegerValue)" Analyze="True" />
          <Member Name=".ctor(System.Int64,System.Int64)" Analyze="True" />
          <Member Name="_denominatorValue" Analyze="True" />
          <Member Name="_numeratorValue" Analyze="True" />
          <Member Name="_router" Analyze="True" />
          <Member Name="_structureId" Analyze="True" />
          <Member Name="Absolute():MathNet.Symbolics.StdPackage.Structures.RationalValue" Analyze="True" />
          <Member Name="Add(MathNet.Symbolics.StdPackage.Structures.RationalValue):MathNet.Symbolics.StdPackage.Structures.RationalValue" Analyze="True" />
          <Member Name="AdditiveIdentity" Analyze="True">
           <Accessors>
            <Accessor Name="get_AdditiveIdentity():MathNet.Symbolics.StdPackage.Structures.RationalValue" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="CompareTo(MathNet.Symbolics.StdPackage.Structures.RationalValue):System.Int32" Analyze="True" />
          <Member Name="Constant(MathNet.Symbolics.Backend.Context,System.Int64,System.Int64):MathNet.Symbolics.Core.Signal" Analyze="True" />
          <Member Name="ConstantHalf(MathNet.Symbolics.Backend.Context):MathNet.Symbolics.Core.Signal" Analyze="True" />
          <Member Name="Converter" Analyze="True">
           <Accessors>
            <Accessor Name="get_Converter():MathNet.Symbolics.Backend.ValueConversion.ConversionRouter" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ConvertFrom(MathNet.Symbolics.Core.ValueStructure):MathNet.Symbolics.StdPackage.Structures.RationalValue" Analyze="True" />
          <Member Name="ConvertFrom(MathNet.Symbolics.StdPackage.Structures.IntegerValue):MathNet.Symbolics.StdPackage.Structures.RationalValue" Analyze="True" />
          <Member Name="Denominator" Analyze="True">
           <Accessors>
            <Accessor Name="get_Denominator():MathNet.Symbolics.StdPackage.Structures.IntegerValue" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="DenominatorValue" Analyze="True">
           <Accessors>
            <Accessor Name="get_DenominatorValue():System.Int64" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Divide(MathNet.Symbolics.StdPackage.Structures.IntegerValue):MathNet.Symbolics.StdPackage.Structures.RationalValue" Analyze="True" />
          <Member Name="Divide(MathNet.Symbolics.StdPackage.Structures.RationalValue):MathNet.Symbolics.StdPackage.Structures.RationalValue" Analyze="True" />
          <Member Name="Equals(MathNet.Symbolics.Core.ValueStructure):System.Boolean" Analyze="True" />
          <Member Name="Equals(MathNet.Symbolics.StdPackage.Structures.IntegerValue):System.Boolean" Analyze="True" />
          <Member Name="Equals(MathNet.Symbolics.StdPackage.Structures.RationalValue):System.Boolean" Analyze="True" />
          <Member Name="Gcd(System.Int64,System.Int64):System.Int64" Analyze="True" />
          <Member Name="GetHashCode():System.Int32" Analyze="True" />
          <Member Name="Half" Analyze="True">
           <Accessors>
            <Accessor Name="get_Half():MathNet.Symbolics.StdPackage.Structures.RationalValue" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="InnerDeserialize(MathNet.Symbolics.Backend.Context,System.Xml.XmlReader):MathNet.Symbolics.StdPackage.Structures.RationalValue" Analyze="True" />
          <Member Name="InnerSerialize(System.Xml.XmlWriter):System.Void" Analyze="True" />
          <Member Name="Invert():MathNet.Symbolics.StdPackage.Structures.RationalValue" Analyze="True" />
          <Member Name="IsAdditiveIdentity" Analyze="True">
           <Accessors>
            <Accessor Name="get_IsAdditiveIdentity():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="IsInteger" Analyze="True">
           <Accessors>
            <Accessor Name="get_IsInteger():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="IsMultiplicativeIdentity" Analyze="True">
           <Accessors>
            <Accessor Name="get_IsMultiplicativeIdentity():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="IsUnitFraction" Analyze="True">
           <Accessors>
            <Accessor Name="get_IsUnitFraction():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="LocalConvertFrom(MathNet.Symbolics.Core.ValueStructure):MathNet.Symbolics.Core.ValueStructure" Analyze="True" />
          <Member Name="LocalConvertToStdInteger(MathNet.Symbolics.Core.ValueStructure):MathNet.Symbolics.Core.ValueStructure" Analyze="True" />
          <Member Name="MathNet.Symbolics.StdPackage.IAlgebraicMonoid.AdditiveIdentity" Analyze="True">
           <Accessors>
            <Accessor Name="MathNet.Symbolics.StdPackage.IAlgebraicMonoid.get_AdditiveIdentity():MathNet.Symbolics.Core.ValueStructure" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="MathNet.Symbolics.StdPackage.IAlgebraicRingWithUnity.MultiplicativeIdentity" Analyze="True">
           <Accessors>
            <Accessor Name="MathNet.Symbolics.StdPackage.IAlgebraicRingWithUnity.get_MultiplicativeIdentity():MathNet.Symbolics.Core.ValueStructure" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="MultiplicativeIdentity" Analyze="True">
           <Accessors>
            <Accessor Name="get_MultiplicativeIdentity():MathNet.Symbolics.StdPackage.Structures.RationalValue" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Multiply(MathNet.Symbolics.StdPackage.Structures.IntegerValue):MathNet.Symbolics.StdPackage.Structures.RationalValue" Analyze="True" />
          <Member Name="Multiply(MathNet.Symbolics.StdPackage.Structures.RationalValue):MathNet.Symbolics.StdPackage.Structures.RationalValue" Analyze="True" />
          <Member Name="Negate():MathNet.Symbolics.StdPackage.Structures.RationalValue" Analyze="True" />
          <Member Name="Numerator" Analyze="True">
           <Accessors>
            <Accessor Name="get_Numerator():MathNet.Symbolics.StdPackage.Structures.IntegerValue" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="NumeratorValue" Analyze="True">
           <Accessors>
            <Accessor Name="get_NumeratorValue():System.Int64" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="One" Analyze="True">
           <Accessors>
            <Accessor Name="get_One():MathNet.Symbolics.StdPackage.Structures.RationalValue" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="op_Explicit(MathNet.Symbolics.StdPackage.Structures.IntegerValue):MathNet.Symbolics.StdPackage.Structures.RationalValue" Analyze="True" />
          <Member Name="op_GreaterThan(MathNet.Symbolics.StdPackage.Structures.RationalValue,MathNet.Symbolics.StdPackage.Structures.RationalValue):System.Boolean" Analyze="True" />
          <Member Name="op_LessThan(MathNet.Symbolics.StdPackage.Structures.RationalValue,MathNet.Symbolics.StdPackage.Structures.RationalValue):System.Boolean" Analyze="True" />
          <Member Name="Power(MathNet.Symbolics.StdPackage.Structures.IntegerValue):MathNet.Symbolics.StdPackage.Structures.RationalValue" Analyze="True" />
          <Member Name="Power(MathNet.Symbolics.StdPackage.Structures.RationalValue):MathNet.Symbolics.StdPackage.Structures.RealValue" Analyze="True" />
          <Member Name="PublishConversionRouteNeighbors(MathNet.Symbolics.Backend.ValueConversion.StructureTable):System.Void" Analyze="True" />
          <Member Name="ReverseTangent():MathNet.Symbolics.StdPackage.Structures.RealValue" Analyze="True" />
          <Member Name="Scale(MathNet.Symbolics.StdPackage.Structures.RationalValue):MathNet.Symbolics.StdPackage.Structures.RationalValue" Analyze="True" />
          <Member Name="StructureId" Analyze="True">
           <Accessors>
            <Accessor Name="get_StructureId():MathNet.Symbolics.Core.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="StructureIdentifier" Analyze="True">
           <Accessors>
            <Accessor Name="get_StructureIdentifier():MathNet.Symbolics.Core.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Subtract(MathNet.Symbolics.StdPackage.Structures.RationalValue):MathNet.Symbolics.StdPackage.Structures.RationalValue" Analyze="True" />
          <Member Name="ToDouble():System.Double" Analyze="True" />
          <Member Name="ToString():System.String" Analyze="True" />
          <Member Name="Zero" Analyze="True">
           <Accessors>
            <Accessor Name="get_Zero():MathNet.Symbolics.StdPackage.Structures.RationalValue" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="RationalValue+AddProcess" Analyze="True">
         <Members>
          <Member Name=".ctor(System.Boolean[],System.Boolean[],System.Boolean[],System.Boolean[])" Analyze="True" />
          <Member Name=".ctor(System.Int32,System.Int32,System.Int32)" Analyze="True" />
          <Member Name="Action(System.Boolean,MathNet.Symbolics.Core.Signal):System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="RationalValue+DivideProcess" Analyze="True">
         <Members>
          <Member Name=".ctor(System.Boolean[],System.Boolean[],System.Boolean[],System.Boolean[])" Analyze="True" />
          <Member Name=".ctor(System.Int32,System.Int32,System.Int32)" Analyze="True" />
          <Member Name="Action(System.Boolean,MathNet.Symbolics.Core.Signal):System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="RationalValue+MultiplyProcess" Analyze="True">
         <Members>
          <Member Name=".ctor(System.Boolean[],System.Boolean[],System.Boolean[],System.Boolean[])" Analyze="True" />
          <Member Name=".ctor(System.Int32,System.Int32,System.Int32)" Analyze="True" />
          <Member Name="Action(System.Boolean,MathNet.Symbolics.Core.Signal):System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="RationalValue+SubtractProcess" Analyze="True">
         <Members>
          <Member Name=".ctor(System.Boolean[],System.Boolean[],System.Boolean[],System.Boolean[])" Analyze="True" />
          <Member Name=".ctor(System.Int32,System.Int32,System.Int32)" Analyze="True" />
          <Member Name="Action(System.Boolean,MathNet.Symbolics.Core.Signal):System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="RationalValueCategory" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="_instance" Analyze="True" />
          <Member Name="InnerDeserialize(MathNet.Symbolics.Backend.Context,System.Xml.XmlReader):MathNet.Symbolics.StdPackage.Structures.RationalValueCategory" Analyze="True" />
          <Member Name="InnerSerialize(System.Xml.XmlWriter):System.Void" Analyze="True" />
          <Member Name="Instance" Analyze="True">
           <Accessors>
            <Accessor Name="get_Instance():MathNet.Symbolics.StdPackage.Structures.RationalValueCategory" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="IsMember(MathNet.Symbolics.Core.Port):MathNet.Symbolics.Backend.Properties.ECategoryMembership" Analyze="True" />
          <Member Name="IsMember(MathNet.Symbolics.Core.Signal,System.Boolean):MathNet.Symbolics.Backend.Properties.ECategoryMembership" Analyze="True" />
          <Member Name="IsNotRationalValueMember(MathNet.Symbolics.Core.Port):System.Boolean" Analyze="True" />
          <Member Name="IsRationalValueMember(MathNet.Symbolics.Core.Port):System.Boolean" Analyze="True" />
         </Members>
        </Type>
        <Type Name="RealValue" Analyze="True">
         <Members>
          <Member Name=".cctor()" Analyze="True" />
          <Member Name=".ctor()" Analyze="True" />
          <Member Name=".ctor(MathNet.Symbolics.StdPackage.Structures.IntegerValue)" Analyze="True" />
          <Member Name=".ctor(MathNet.Symbolics.StdPackage.Structures.RationalValue)" Analyze="True" />
          <Member Name=".ctor(System.Double)" Analyze="True" />
          <Member Name="_dataValue" Analyze="True" />
          <Member Name="_router" Analyze="True" />
          <Member Name="_structureId" Analyze="True" />
          <Member Name="Absolute():MathNet.Symbolics.StdPackage.Structures.RealValue" Analyze="True" />
          <Member Name="Add(MathNet.Symbolics.StdPackage.Structures.RealValue):MathNet.Symbolics.StdPackage.Structures.RealValue" Analyze="True" />
          <Member Name="AdditiveIdentity" Analyze="True">
           <Accessors>
            <Accessor Name="get_AdditiveIdentity():MathNet.Symbolics.StdPackage.Structures.RealValue" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="CompareTo(MathNet.Symbolics.StdPackage.Structures.RealValue):System.Int32" Analyze="True" />
          <Member Name="Constant(MathNet.Symbolics.Backend.Context,System.Double):MathNet.Symbolics.Core.Signal" Analyze="True" />
          <Member Name="Constant(MathNet.Symbolics.Backend.Context,System.Double,System.String):MathNet.Symbolics.Core.Signal" Analyze="True" />
          <Member Name="ConstantE(MathNet.Symbolics.Backend.Context):MathNet.Symbolics.Core.Signal" Analyze="True" />
          <Member Name="ConstantPI(MathNet.Symbolics.Backend.Context):MathNet.Symbolics.Core.Signal" Analyze="True" />
          <Member Name="Converter" Analyze="True">
           <Accessors>
            <Accessor Name="get_Converter():MathNet.Symbolics.Backend.ValueConversion.ConversionRouter" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ConvertFrom(MathNet.Symbolics.Core.ValueStructure):MathNet.Symbolics.StdPackage.Structures.RealValue" Analyze="True" />
          <Member Name="ConvertFrom(MathNet.Symbolics.StdPackage.Structures.IntegerValue):MathNet.Symbolics.StdPackage.Structures.RealValue" Analyze="True" />
          <Member Name="ConvertFrom(MathNet.Symbolics.StdPackage.Structures.RationalValue):MathNet.Symbolics.StdPackage.Structures.RealValue" Analyze="True" />
          <Member Name="Cosecant():MathNet.Symbolics.StdPackage.Structures.RealValue" Analyze="True" />
          <Member Name="Cosine():MathNet.Symbolics.StdPackage.Structures.RealValue" Analyze="True" />
          <Member Name="Cotangent():MathNet.Symbolics.StdPackage.Structures.RealValue" Analyze="True" />
          <Member Name="Divide(MathNet.Symbolics.StdPackage.Structures.RealValue):MathNet.Symbolics.StdPackage.Structures.RealValue" Analyze="True" />
          <Member Name="E" Analyze="True">
           <Accessors>
            <Accessor Name="get_E():MathNet.Symbolics.StdPackage.Structures.RealValue" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Equals(MathNet.Symbolics.Core.ValueStructure):System.Boolean" Analyze="True" />
          <Member Name="Equals(MathNet.Symbolics.StdPackage.Structures.IntegerValue):System.Boolean" Analyze="True" />
          <Member Name="Equals(MathNet.Symbolics.StdPackage.Structures.RationalValue):System.Boolean" Analyze="True" />
          <Member Name="Equals(MathNet.Symbolics.StdPackage.Structures.RealValue):System.Boolean" Analyze="True" />
          <Member Name="Exponential():MathNet.Symbolics.StdPackage.Structures.RealValue" Analyze="True" />
          <Member Name="GetHashCode():System.Int32" Analyze="True" />
          <Member Name="HyperbolicCosecant():MathNet.Symbolics.StdPackage.Structures.RealValue" Analyze="True" />
          <Member Name="HyperbolicCosine():MathNet.Symbolics.StdPackage.Structures.RealValue" Analyze="True" />
          <Member Name="HyperbolicCotangent():MathNet.Symbolics.StdPackage.Structures.RealValue" Analyze="True" />
          <Member Name="HyperbolicSecant():MathNet.Symbolics.StdPackage.Structures.RealValue" Analyze="True" />
          <Member Name="HyperbolicSine():MathNet.Symbolics.StdPackage.Structures.RealValue" Analyze="True" />
          <Member Name="HyperbolicTangent():MathNet.Symbolics.StdPackage.Structures.RealValue" Analyze="True" />
          <Member Name="InnerDeserialize(MathNet.Symbolics.Backend.Context,System.Xml.XmlReader):MathNet.Symbolics.StdPackage.Structures.RealValue" Analyze="True" />
          <Member Name="InnerSerialize(System.Xml.XmlWriter):System.Void" Analyze="True" />
          <Member Name="InverseCosecant():MathNet.Symbolics.StdPackage.Structures.RealValue" Analyze="True" />
          <Member Name="InverseCosine():MathNet.Symbolics.StdPackage.Structures.RealValue" Analyze="True" />
          <Member Name="InverseCotangent():MathNet.Symbolics.StdPackage.Structures.RealValue" Analyze="True" />
          <Member Name="InverseHyperbolicCosecant():MathNet.Symbolics.StdPackage.Structures.RealValue" Analyze="True" />
          <Member Name="InverseHyperbolicCosine():MathNet.Symbolics.StdPackage.Structures.RealValue" Analyze="True" />
          <Member Name="InverseHyperbolicCotangent():MathNet.Symbolics.StdPackage.Structures.RealValue" Analyze="True" />
          <Member Name="InverseHyperbolicSecant():MathNet.Symbolics.StdPackage.Structures.RealValue" Analyze="True" />
          <Member Name="InverseHyperbolicSine():MathNet.Symbolics.StdPackage.Structures.RealValue" Analyze="True" />
          <Member Name="InverseHyperbolicTangent():MathNet.Symbolics.StdPackage.Structures.RealValue" Analyze="True" />
          <Member Name="InverseSecant():MathNet.Symbolics.StdPackage.Structures.RealValue" Analyze="True" />
          <Member Name="InverseSine():MathNet.Symbolics.StdPackage.Structures.RealValue" Analyze="True" />
          <Member Name="InverseTangent():MathNet.Symbolics.StdPackage.Structures.RealValue" Analyze="True" />
          <Member Name="Invert():MathNet.Symbolics.StdPackage.Structures.RealValue" Analyze="True" />
          <Member Name="IsAdditiveIdentity" Analyze="True">
           <Accessors>
            <Accessor Name="get_IsAdditiveIdentity():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="IsMultiplicativeIdentity" Analyze="True">
           <Accessors>
            <Accessor Name="get_IsMultiplicativeIdentity():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="LocalConvertFrom(MathNet.Symbolics.Core.ValueStructure):MathNet.Symbolics.Core.ValueStructure" Analyze="True" />
          <Member Name="LocalConvertToStdInteger(MathNet.Symbolics.Core.ValueStructure):MathNet.Symbolics.Core.ValueStructure" Analyze="True" />
          <Member Name="MathNet.Symbolics.StdPackage.IAlgebraicMonoid.AdditiveIdentity" Analyze="True">
           <Accessors>
            <Accessor Name="MathNet.Symbolics.StdPackage.IAlgebraicMonoid.get_AdditiveIdentity():MathNet.Symbolics.Core.ValueStructure" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="MathNet.Symbolics.StdPackage.IAlgebraicRingWithUnity.MultiplicativeIdentity" Analyze="True">
           <Accessors>
            <Accessor Name="MathNet.Symbolics.StdPackage.IAlgebraicRingWithUnity.get_MultiplicativeIdentity():MathNet.Symbolics.Core.ValueStructure" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="MultiplicativeIdentity" Analyze="True">
           <Accessors>
            <Accessor Name="get_MultiplicativeIdentity():MathNet.Symbolics.StdPackage.Structures.RealValue" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Multiply(MathNet.Symbolics.StdPackage.Structures.RealValue):MathNet.Symbolics.StdPackage.Structures.RealValue" Analyze="True" />
          <Member Name="NaturalLogarithm():MathNet.Symbolics.StdPackage.Structures.RealValue" Analyze="True" />
          <Member Name="Negate():MathNet.Symbolics.StdPackage.Structures.RealValue" Analyze="True" />
          <Member Name="One" Analyze="True">
           <Accessors>
            <Accessor Name="get_One():MathNet.Symbolics.StdPackage.Structures.RealValue" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="op_Explicit(MathNet.Symbolics.StdPackage.Structures.IntegerValue):MathNet.Symbolics.StdPackage.Structures.RealValue" Analyze="True" />
          <Member Name="op_Explicit(MathNet.Symbolics.StdPackage.Structures.RationalValue):MathNet.Symbolics.StdPackage.Structures.RealValue" Analyze="True" />
          <Member Name="ParseConstant(MathNet.Symbolics.Backend.Context,System.String):MathNet.Symbolics.Core.Signal" Analyze="True" />
          <Member Name="PI" Analyze="True">
           <Accessors>
            <Accessor Name="get_PI():MathNet.Symbolics.StdPackage.Structures.RealValue" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Power(MathNet.Symbolics.StdPackage.Structures.RealValue):MathNet.Symbolics.StdPackage.Structures.RealValue" Analyze="True" />
          <Member Name="PublishConversionRouteNeighbors(MathNet.Symbolics.Backend.ValueConversion.StructureTable):System.Void" Analyze="True" />
          <Member Name="Root(MathNet.Symbolics.StdPackage.Structures.RealValue):MathNet.Symbolics.StdPackage.Structures.RealValue" Analyze="True" />
          <Member Name="Scale(MathNet.Symbolics.StdPackage.Structures.RealValue):MathNet.Symbolics.StdPackage.Structures.RealValue" Analyze="True" />
          <Member Name="Secant():MathNet.Symbolics.StdPackage.Structures.RealValue" Analyze="True" />
          <Member Name="Sine():MathNet.Symbolics.StdPackage.Structures.RealValue" Analyze="True" />
          <Member Name="Square():MathNet.Symbolics.StdPackage.Structures.RealValue" Analyze="True" />
          <Member Name="SquareRoot():MathNet.Symbolics.StdPackage.Structures.RealValue" Analyze="True" />
          <Member Name="StructureId" Analyze="True">
           <Accessors>
            <Accessor Name="get_StructureId():MathNet.Symbolics.Core.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="StructureIdentifier" Analyze="True">
           <Accessors>
            <Accessor Name="get_StructureIdentifier():MathNet.Symbolics.Core.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Subtract(MathNet.Symbolics.StdPackage.Structures.RealValue):MathNet.Symbolics.StdPackage.Structures.RealValue" Analyze="True" />
          <Member Name="Tangent():MathNet.Symbolics.StdPackage.Structures.RealValue" Analyze="True" />
          <Member Name="ToString():System.String" Analyze="True" />
          <Member Name="Value" Analyze="True">
           <Accessors>
            <Accessor Name="get_Value():System.Double" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Zero" Analyze="True">
           <Accessors>
            <Accessor Name="get_Zero():MathNet.Symbolics.StdPackage.Structures.RealValue" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="RealValue+AddProcess" Analyze="True">
         <Members>
          <Member Name=".ctor(System.Boolean[],System.Boolean[],System.Boolean[],System.Boolean[])" Analyze="True" />
          <Member Name=".ctor(System.Int32,System.Int32,System.Int32)" Analyze="True" />
          <Member Name="Action(System.Boolean,MathNet.Symbolics.Core.Signal):System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="RealValue+DivideProcess" Analyze="True">
         <Members>
          <Member Name=".ctor(System.Boolean[],System.Boolean[],System.Boolean[],System.Boolean[])" Analyze="True" />
          <Member Name=".ctor(System.Int32,System.Int32,System.Int32)" Analyze="True" />
          <Member Name="Action(System.Boolean,MathNet.Symbolics.Core.Signal):System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="RealValue+MultiplyProcess" Analyze="True">
         <Members>
          <Member Name=".ctor(System.Boolean[],System.Boolean[],System.Boolean[],System.Boolean[])" Analyze="True" />
          <Member Name=".ctor(System.Int32,System.Int32,System.Int32)" Analyze="True" />
          <Member Name="Action(System.Boolean,MathNet.Symbolics.Core.Signal):System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="RealValue+SubtractProcess" Analyze="True">
         <Members>
          <Member Name=".ctor(System.Boolean[],System.Boolean[],System.Boolean[],System.Boolean[])" Analyze="True" />
          <Member Name=".ctor(System.Int32,System.Int32,System.Int32)" Analyze="True" />
          <Member Name="Action(System.Boolean,MathNet.Symbolics.Core.Signal):System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="RealValueCategory" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="_instance" Analyze="True" />
          <Member Name="InnerDeserialize(MathNet.Symbolics.Backend.Context,System.Xml.XmlReader):MathNet.Symbolics.StdPackage.Structures.RealValueCategory" Analyze="True" />
          <Member Name="InnerSerialize(System.Xml.XmlWriter):System.Void" Analyze="True" />
          <Member Name="Instance" Analyze="True">
           <Accessors>
            <Accessor Name="get_Instance():MathNet.Symbolics.StdPackage.Structures.RealValueCategory" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="IsMember(MathNet.Symbolics.Core.Port):MathNet.Symbolics.Backend.Properties.ECategoryMembership" Analyze="True" />
          <Member Name="IsMember(MathNet.Symbolics.Core.Signal,System.Boolean):MathNet.Symbolics.Backend.Properties.ECategoryMembership" Analyze="True" />
          <Member Name="IsNotRealValueMember(MathNet.Symbolics.Core.Port):System.Boolean" Analyze="True" />
          <Member Name="IsRealValueMember(MathNet.Symbolics.Core.Port):System.Boolean" Analyze="True" />
         </Members>
        </Type>
        <Type Name="ToggleValue" Analyze="True">
         <Members>
          <Member Name=".cctor()" Analyze="True" />
          <Member Name=".ctor(System.Boolean)" Analyze="True" />
          <Member Name="_dataValue" Analyze="True" />
          <Member Name="_router" Analyze="True" />
          <Member Name="_structureId" Analyze="True" />
          <Member Name="_toggleA" Analyze="True" />
          <Member Name="_toggleB" Analyze="True" />
          <Member Name="CompareTo(MathNet.Symbolics.StdPackage.Structures.ToggleValue):System.Int32" Analyze="True" />
          <Member Name="Converter" Analyze="True">
           <Accessors>
            <Accessor Name="get_Converter():MathNet.Symbolics.Backend.ValueConversion.ConversionRouter" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ConvertFrom(MathNet.Symbolics.Core.ValueStructure):MathNet.Symbolics.StdPackage.Structures.ToggleValue" Analyze="True" />
          <Member Name="Equals(MathNet.Symbolics.Core.ValueStructure):System.Boolean" Analyze="True" />
          <Member Name="Equals(MathNet.Symbolics.StdPackage.Structures.ToggleValue):System.Boolean" Analyze="True" />
          <Member Name="GetHashCode():System.Int32" Analyze="True" />
          <Member Name="InitialToggle" Analyze="True">
           <Accessors>
            <Accessor Name="get_InitialToggle():MathNet.Symbolics.StdPackage.Structures.ToggleValue" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="InnerDeserialize(MathNet.Symbolics.Backend.Context,System.Xml.XmlReader):MathNet.Symbolics.StdPackage.Structures.ToggleValue" Analyze="True" />
          <Member Name="InnerSerialize(System.Xml.XmlWriter):System.Void" Analyze="True" />
          <Member Name="LocalConvertFrom(MathNet.Symbolics.Core.ValueStructure):MathNet.Symbolics.Core.ValueStructure" Analyze="True" />
          <Member Name="PublishConversionRouteNeighbors(MathNet.Symbolics.Backend.ValueConversion.StructureTable):System.Void" Analyze="True" />
          <Member Name="StructureId" Analyze="True">
           <Accessors>
            <Accessor Name="get_StructureId():MathNet.Symbolics.Core.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="StructureIdentifier" Analyze="True">
           <Accessors>
            <Accessor Name="get_StructureIdentifier():MathNet.Symbolics.Core.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Toggle():MathNet.Symbolics.StdPackage.Structures.ToggleValue" Analyze="True" />
          <Member Name="ToString():System.String" Analyze="True" />
         </Members>
        </Type>
        <Type Name="UndefinedSymbol" Analyze="True">
         <Members>
          <Member Name=".cctor()" Analyze="True" />
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="_instance" Analyze="True" />
          <Member Name="_router" Analyze="True" />
          <Member Name="_structureId" Analyze="True" />
          <Member Name="CompareTo(MathNet.Symbolics.StdPackage.Structures.UndefinedSymbol):System.Int32" Analyze="True" />
          <Member Name="Constant(MathNet.Symbolics.Backend.Context):MathNet.Symbolics.Core.Signal" Analyze="True" />
          <Member Name="Converter" Analyze="True">
           <Accessors>
            <Accessor Name="get_Converter():MathNet.Symbolics.Backend.ValueConversion.ConversionRouter" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ConvertFrom(MathNet.Symbolics.Core.ValueStructure):MathNet.Symbolics.StdPackage.Structures.UndefinedSymbol" Analyze="True" />
          <Member Name="Equals(MathNet.Symbolics.Core.ValueStructure):System.Boolean" Analyze="True" />
          <Member Name="Equals(MathNet.Symbolics.StdPackage.Structures.UndefinedSymbol):System.Boolean" Analyze="True" />
          <Member Name="InnerDeserialize(MathNet.Symbolics.Backend.Context,System.Xml.XmlReader):MathNet.Symbolics.StdPackage.Structures.UndefinedSymbol" Analyze="True" />
          <Member Name="InnerSerialize(System.Xml.XmlWriter):System.Void" Analyze="True" />
          <Member Name="Instance" Analyze="True">
           <Accessors>
            <Accessor Name="get_Instance():MathNet.Symbolics.StdPackage.Structures.UndefinedSymbol" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="PublishConversionRouteNeighbors(MathNet.Symbolics.Backend.ValueConversion.StructureTable):System.Void" Analyze="True" />
          <Member Name="StructureId" Analyze="True">
           <Accessors>
            <Accessor Name="get_StructureId():MathNet.Symbolics.Core.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="StructureIdentifier" Analyze="True">
           <Accessors>
            <Accessor Name="get_StructureIdentifier():MathNet.Symbolics.Core.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="VectorValue`1" Analyze="True">
         <Members>
          <Member Name=".cctor()" Analyze="True" />
          <Member Name=".ctor()" Analyze="True" />
          <Member Name=".ctor(System.Collections.Generic.IList`1&lt;TScalar&gt;)" Analyze="True" />
          <Member Name=".ctor(TScalar[])" Analyze="True" />
          <Member Name="_dataValue" Analyze="True" />
          <Member Name="_router" Analyze="True" />
          <Member Name="_structureId" Analyze="True" />
          <Member Name="Add(MathNet.Symbolics.StdPackage.Structures.VectorValue`1&lt;TScalar&gt;):MathNet.Symbolics.StdPackage.Structures.VectorValue`1&lt;TScalar&gt;" Analyze="True" />
          <Member Name="Add(MathNet.Symbolics.StdPackage.Structures.VectorValue`1&lt;TScalar&gt;,MathNet.Symbolics.StdPackage.Structures.VectorValue`1&lt;TScalar&gt;):MathNet.Symbolics.StdPackage.Structures.VectorValue`1&lt;TScalar&gt;" Analyze="True" />
          <Member Name="AdditiveIdentity" Analyze="True">
           <Accessors>
            <Accessor Name="get_AdditiveIdentity():MathNet.Symbolics.StdPackage.Structures.VectorValue`1&lt;TScalar&gt;" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Constant(MathNet.Symbolics.Backend.Context,TScalar[]):MathNet.Symbolics.Core.Signal" Analyze="True" />
          <Member Name="Constant(MathNet.Symbolics.Backend.Context,TScalar[],System.String):MathNet.Symbolics.Core.Signal" Analyze="True" />
          <Member Name="Converter" Analyze="True">
           <Accessors>
            <Accessor Name="get_Converter():MathNet.Symbolics.Backend.ValueConversion.ConversionRouter" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ConvertFrom(MathNet.Symbolics.Core.ValueStructure):MathNet.Symbolics.StdPackage.Structures.VectorValue`1&lt;TScalar&gt;" Analyze="True" />
          <Member Name="Count" Analyze="True">
           <Accessors>
            <Accessor Name="get_Count():System.Int32" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Equals(MathNet.Symbolics.Core.ValueStructure):System.Boolean" Analyze="True" />
          <Member Name="Equals(MathNet.Symbolics.StdPackage.Structures.VectorValue`1&lt;TScalar&gt;):System.Boolean" Analyze="True" />
          <Member Name="GetHashCode():System.Int32" Analyze="True" />
          <Member Name="InnerDeserialize(MathNet.Symbolics.Backend.Context,System.Xml.XmlReader):MathNet.Symbolics.StdPackage.Structures.VectorValue`1&lt;TScalar&gt;" Analyze="True" />
          <Member Name="InnerSerialize(System.Xml.XmlWriter):System.Void" Analyze="True" />
          <Member Name="IsAdditiveIdentity" Analyze="True">
           <Accessors>
            <Accessor Name="get_IsAdditiveIdentity():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Item[System.Int32]" Analyze="True">
           <Accessors>
            <Accessor Name="get_Item(System.Int32):TScalar" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="MathNet.Symbolics.StdPackage.IAlgebraicMonoid.AdditiveIdentity" Analyze="True">
           <Accessors>
            <Accessor Name="MathNet.Symbolics.StdPackage.IAlgebraicMonoid.get_AdditiveIdentity():MathNet.Symbolics.Core.ValueStructure" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Negate():MathNet.Symbolics.StdPackage.Structures.VectorValue`1&lt;TScalar&gt;" Analyze="True" />
          <Member Name="Negate(MathNet.Symbolics.StdPackage.Structures.VectorValue`1&lt;TScalar&gt;):MathNet.Symbolics.StdPackage.Structures.VectorValue`1&lt;TScalar&gt;" Analyze="True" />
          <Member Name="PublishConversionRouteNeighbors(MathNet.Symbolics.Backend.ValueConversion.StructureTable):System.Void" Analyze="True" />
          <Member Name="Scale(TScalar):MathNet.Symbolics.StdPackage.Structures.VectorValue`1&lt;TScalar&gt;" Analyze="True" />
          <Member Name="StructureId" Analyze="True">
           <Accessors>
            <Accessor Name="get_StructureId():MathNet.Symbolics.Core.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="StructureIdentifier" Analyze="True">
           <Accessors>
            <Accessor Name="get_StructureIdentifier():MathNet.Symbolics.Core.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Subtract(MathNet.Symbolics.StdPackage.Structures.VectorValue`1&lt;TScalar&gt;):MathNet.Symbolics.StdPackage.Structures.VectorValue`1&lt;TScalar&gt;" Analyze="True" />
          <Member Name="Subtract(MathNet.Symbolics.StdPackage.Structures.VectorValue`1&lt;TScalar&gt;,MathNet.Symbolics.StdPackage.Structures.VectorValue`1&lt;TScalar&gt;):MathNet.Symbolics.StdPackage.Structures.VectorValue`1&lt;TScalar&gt;" Analyze="True" />
          <Member Name="ToString():System.String" Analyze="True" />
          <Member Name="Value" Analyze="True">
           <Accessors>
            <Accessor Name="get_Value():TScalar[]" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Zero" Analyze="True">
           <Accessors>
            <Accessor Name="get_Zero():MathNet.Symbolics.StdPackage.Structures.VectorValue`1&lt;TScalar&gt;" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="MathNet.Symbolics.StdPackage.TimeCurves" Analyze="True">
       <Types>
        <Type Name="Curve" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
         </Members>
        </Type>
        <Type Name="Curve+CurveSegment" Analyze="True">
         <Members>
          <Member Name=".ctor(MathNet.Symbolics.StdPackage.TimeCurves.Curve,System.TimeSpan,MathNet.Symbolics.Core.ValueStructure)" Analyze="True" />
          <Member Name="Begin" Analyze="True" />
          <Member Name="Offset" Analyze="True" />
          <Member Name="Segment" Analyze="True" />
         </Members>
        </Type>
        <Type Name="CurveSegment`1" Analyze="True">
         <Members>
          <Member Name=".ctor(System.TimeSpan,T,T)" Analyze="True" />
          <Member Name="_slopePerSecond" Analyze="True" />
          <Member Name="_timeOffset" Analyze="True" />
          <Member Name="_valueOffset" Analyze="True" />
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="MathNet.Symbolics.StdPackage.Trigonometry" Analyze="True">
       <Types>
        <Type Name="CosecantArchitectures" Analyze="True">
         <Members>
          <Member Name=".cctor()" Analyze="True" />
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="_entityId" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__0(MathNet.Symbolics.Core.Port):MathNet.Symbolics.Core.Process[]" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__1(MathNet.Symbolics.StdPackage.Structures.RealValue):MathNet.Symbolics.StdPackage.Structures.RealValue" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__2(MathNet.Symbolics.Core.Port):MathNet.Symbolics.Core.Process[]" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__3(MathNet.Symbolics.StdPackage.Structures.ComplexValue):MathNet.Symbolics.StdPackage.Structures.ComplexValue" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate4" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate5" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate6" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate7" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegatec" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegated" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegatee" Analyze="True" />
          <Member Name="&lt;BuildTheorems&gt;b__9():MathNet.Symbolics.Backend.Patterns.Pattern" Analyze="True" />
          <Member Name="&lt;BuildTheorems&gt;b__a(MathNet.Symbolics.Core.Port):MathNet.Symbolics.Backend.Traversing.ManipulationPlan" Analyze="True" />
          <Member Name="&lt;BuildTheorems&gt;b__b(MathNet.Symbolics.Core.Port,MathNet.Symbolics.Backend.Containers.SignalSet,System.Boolean):System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Core.Signal&gt;" Analyze="True" />
          <Member Name="BuildTheorems(MathNet.Symbolics.Backend.Context):MathNet.Symbolics.Backend.Theorems.ITheorem[]" Analyze="True" />
          <Member Name="EntityIdentifier" Analyze="True">
           <Accessors>
            <Accessor Name="get_EntityIdentifier():MathNet.Symbolics.Core.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="CosecantArchitectures+&lt;&gt;c__DisplayClassf" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="&lt;BuildTheorems&gt;b__8(MathNet.Symbolics.Core.Port,MathNet.Symbolics.Backend.Containers.SignalSet,MathNet.Symbolics.Core.Signal,System.Boolean):System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Core.Signal&gt;" Analyze="True" />
          <Member Name="context" Analyze="True" />
         </Members>
        </Type>
        <Type Name="CosineArchitectures" Analyze="True">
         <Members>
          <Member Name=".cctor()" Analyze="True" />
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="_entityId" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__0(MathNet.Symbolics.Core.Port):MathNet.Symbolics.Core.Process[]" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__1(MathNet.Symbolics.StdPackage.Structures.RealValue):MathNet.Symbolics.StdPackage.Structures.RealValue" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__2(MathNet.Symbolics.Core.Port):MathNet.Symbolics.Core.Process[]" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__3(MathNet.Symbolics.StdPackage.Structures.ComplexValue):MathNet.Symbolics.StdPackage.Structures.ComplexValue" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate4" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate5" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate6" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate7" Analyze="True" />
          <Member Name="BuildTheorems(MathNet.Symbolics.Backend.Context):MathNet.Symbolics.Backend.Theorems.ITheorem[]" Analyze="True" />
          <Member Name="EntityIdentifier" Analyze="True">
           <Accessors>
            <Accessor Name="get_EntityIdentifier():MathNet.Symbolics.Core.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="CosineArchitectures+&lt;&gt;c__DisplayClass9" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="&lt;BuildTheorems&gt;b__8(MathNet.Symbolics.Core.Port,MathNet.Symbolics.Backend.Containers.SignalSet,MathNet.Symbolics.Core.Signal,System.Boolean):System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Core.Signal&gt;" Analyze="True" />
          <Member Name="context" Analyze="True" />
         </Members>
        </Type>
        <Type Name="CotangentArchitectures" Analyze="True">
         <Members>
          <Member Name=".cctor()" Analyze="True" />
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="_entityId" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__0(MathNet.Symbolics.Core.Port):MathNet.Symbolics.Core.Process[]" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__1(MathNet.Symbolics.StdPackage.Structures.RealValue):MathNet.Symbolics.StdPackage.Structures.RealValue" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__2(MathNet.Symbolics.Core.Port):MathNet.Symbolics.Core.Process[]" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__3(MathNet.Symbolics.StdPackage.Structures.ComplexValue):MathNet.Symbolics.StdPackage.Structures.ComplexValue" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate4" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate5" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate6" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate7" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegatec" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegated" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegatee" Analyze="True" />
          <Member Name="&lt;BuildTheorems&gt;b__9():MathNet.Symbolics.Backend.Patterns.Pattern" Analyze="True" />
          <Member Name="&lt;BuildTheorems&gt;b__a(MathNet.Symbolics.Core.Port):MathNet.Symbolics.Backend.Traversing.ManipulationPlan" Analyze="True" />
          <Member Name="&lt;BuildTheorems&gt;b__b(MathNet.Symbolics.Core.Port,MathNet.Symbolics.Backend.Containers.SignalSet,System.Boolean):System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Core.Signal&gt;" Analyze="True" />
          <Member Name="BuildTheorems(MathNet.Symbolics.Backend.Context):MathNet.Symbolics.Backend.Theorems.ITheorem[]" Analyze="True" />
          <Member Name="EntityIdentifier" Analyze="True">
           <Accessors>
            <Accessor Name="get_EntityIdentifier():MathNet.Symbolics.Core.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="CotangentArchitectures+&lt;&gt;c__DisplayClassf" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="&lt;BuildTheorems&gt;b__8(MathNet.Symbolics.Core.Port,MathNet.Symbolics.Backend.Containers.SignalSet,MathNet.Symbolics.Core.Signal,System.Boolean):System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Core.Signal&gt;" Analyze="True" />
          <Member Name="context" Analyze="True" />
         </Members>
        </Type>
        <Type Name="HyperbolicCosecantArchitectures" Analyze="True">
         <Members>
          <Member Name=".cctor()" Analyze="True" />
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="_entityId" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__0(MathNet.Symbolics.Core.Port):MathNet.Symbolics.Core.Process[]" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__1(MathNet.Symbolics.StdPackage.Structures.RealValue):MathNet.Symbolics.StdPackage.Structures.RealValue" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__2(MathNet.Symbolics.Core.Port):MathNet.Symbolics.Core.Process[]" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__3(MathNet.Symbolics.StdPackage.Structures.ComplexValue):MathNet.Symbolics.StdPackage.Structures.ComplexValue" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate4" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate5" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate6" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate7" Analyze="True" />
          <Member Name="BuildTheorems(MathNet.Symbolics.Backend.Context):MathNet.Symbolics.Backend.Theorems.ITheorem[]" Analyze="True" />
          <Member Name="EntityIdentifier" Analyze="True">
           <Accessors>
            <Accessor Name="get_EntityIdentifier():MathNet.Symbolics.Core.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="HyperbolicCosineArchitectures" Analyze="True">
         <Members>
          <Member Name=".cctor()" Analyze="True" />
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="_entityId" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__0(MathNet.Symbolics.Core.Port):MathNet.Symbolics.Core.Process[]" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__1(MathNet.Symbolics.StdPackage.Structures.RealValue):MathNet.Symbolics.StdPackage.Structures.RealValue" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__2(MathNet.Symbolics.Core.Port):MathNet.Symbolics.Core.Process[]" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__3(MathNet.Symbolics.StdPackage.Structures.ComplexValue):MathNet.Symbolics.StdPackage.Structures.ComplexValue" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate4" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate5" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate6" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate7" Analyze="True" />
          <Member Name="BuildTheorems(MathNet.Symbolics.Backend.Context):MathNet.Symbolics.Backend.Theorems.ITheorem[]" Analyze="True" />
          <Member Name="EntityIdentifier" Analyze="True">
           <Accessors>
            <Accessor Name="get_EntityIdentifier():MathNet.Symbolics.Core.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="HyperbolicCotangentArchitectures" Analyze="True">
         <Members>
          <Member Name=".cctor()" Analyze="True" />
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="_entityId" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__0(MathNet.Symbolics.Core.Port):MathNet.Symbolics.Core.Process[]" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__1(MathNet.Symbolics.StdPackage.Structures.RealValue):MathNet.Symbolics.StdPackage.Structures.RealValue" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__2(MathNet.Symbolics.Core.Port):MathNet.Symbolics.Core.Process[]" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__3(MathNet.Symbolics.StdPackage.Structures.ComplexValue):MathNet.Symbolics.StdPackage.Structures.ComplexValue" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate4" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate5" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate6" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate7" Analyze="True" />
          <Member Name="BuildTheorems(MathNet.Symbolics.Backend.Context):MathNet.Symbolics.Backend.Theorems.ITheorem[]" Analyze="True" />
          <Member Name="EntityIdentifier" Analyze="True">
           <Accessors>
            <Accessor Name="get_EntityIdentifier():MathNet.Symbolics.Core.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="HyperbolicSecantArchitectures" Analyze="True">
         <Members>
          <Member Name=".cctor()" Analyze="True" />
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="_entityId" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__0(MathNet.Symbolics.Core.Port):MathNet.Symbolics.Core.Process[]" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__1(MathNet.Symbolics.StdPackage.Structures.RealValue):MathNet.Symbolics.StdPackage.Structures.RealValue" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__2(MathNet.Symbolics.Core.Port):MathNet.Symbolics.Core.Process[]" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__3(MathNet.Symbolics.StdPackage.Structures.ComplexValue):MathNet.Symbolics.StdPackage.Structures.ComplexValue" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate4" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate5" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate6" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate7" Analyze="True" />
          <Member Name="BuildTheorems(MathNet.Symbolics.Backend.Context):MathNet.Symbolics.Backend.Theorems.ITheorem[]" Analyze="True" />
          <Member Name="EntityIdentifier" Analyze="True">
           <Accessors>
            <Accessor Name="get_EntityIdentifier():MathNet.Symbolics.Core.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="HyperbolicSineArchitectures" Analyze="True">
         <Members>
          <Member Name=".cctor()" Analyze="True" />
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="_entityId" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__0(MathNet.Symbolics.Core.Port):MathNet.Symbolics.Core.Process[]" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__1(MathNet.Symbolics.StdPackage.Structures.RealValue):MathNet.Symbolics.StdPackage.Structures.RealValue" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__2(MathNet.Symbolics.Core.Port):MathNet.Symbolics.Core.Process[]" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__3(MathNet.Symbolics.StdPackage.Structures.ComplexValue):MathNet.Symbolics.StdPackage.Structures.ComplexValue" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate4" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate5" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate6" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate7" Analyze="True" />
          <Member Name="BuildTheorems(MathNet.Symbolics.Backend.Context):MathNet.Symbolics.Backend.Theorems.ITheorem[]" Analyze="True" />
          <Member Name="EntityIdentifier" Analyze="True">
           <Accessors>
            <Accessor Name="get_EntityIdentifier():MathNet.Symbolics.Core.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="HyperbolicTangentArchitectures" Analyze="True">
         <Members>
          <Member Name=".cctor()" Analyze="True" />
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="_entityId" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__0(MathNet.Symbolics.Core.Port):MathNet.Symbolics.Core.Process[]" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__1(MathNet.Symbolics.StdPackage.Structures.RealValue):MathNet.Symbolics.StdPackage.Structures.RealValue" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__2(MathNet.Symbolics.Core.Port):MathNet.Symbolics.Core.Process[]" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__3(MathNet.Symbolics.StdPackage.Structures.ComplexValue):MathNet.Symbolics.StdPackage.Structures.ComplexValue" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate4" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate5" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate6" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate7" Analyze="True" />
          <Member Name="BuildTheorems(MathNet.Symbolics.Backend.Context):MathNet.Symbolics.Backend.Theorems.ITheorem[]" Analyze="True" />
          <Member Name="EntityIdentifier" Analyze="True">
           <Accessors>
            <Accessor Name="get_EntityIdentifier():MathNet.Symbolics.Core.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="SecantArchitectures" Analyze="True">
         <Members>
          <Member Name=".cctor()" Analyze="True" />
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="_entityId" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__0(MathNet.Symbolics.Core.Port):MathNet.Symbolics.Core.Process[]" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__1(MathNet.Symbolics.StdPackage.Structures.RealValue):MathNet.Symbolics.StdPackage.Structures.RealValue" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__2(MathNet.Symbolics.Core.Port):MathNet.Symbolics.Core.Process[]" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__3(MathNet.Symbolics.StdPackage.Structures.ComplexValue):MathNet.Symbolics.StdPackage.Structures.ComplexValue" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate4" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate5" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate6" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate7" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegatec" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegated" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegatee" Analyze="True" />
          <Member Name="&lt;BuildTheorems&gt;b__9():MathNet.Symbolics.Backend.Patterns.Pattern" Analyze="True" />
          <Member Name="&lt;BuildTheorems&gt;b__a(MathNet.Symbolics.Core.Port):MathNet.Symbolics.Backend.Traversing.ManipulationPlan" Analyze="True" />
          <Member Name="&lt;BuildTheorems&gt;b__b(MathNet.Symbolics.Core.Port,MathNet.Symbolics.Backend.Containers.SignalSet,System.Boolean):System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Core.Signal&gt;" Analyze="True" />
          <Member Name="BuildTheorems(MathNet.Symbolics.Backend.Context):MathNet.Symbolics.Backend.Theorems.ITheorem[]" Analyze="True" />
          <Member Name="EntityIdentifier" Analyze="True">
           <Accessors>
            <Accessor Name="get_EntityIdentifier():MathNet.Symbolics.Core.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="SecantArchitectures+&lt;&gt;c__DisplayClassf" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="&lt;BuildTheorems&gt;b__8(MathNet.Symbolics.Core.Port,MathNet.Symbolics.Backend.Containers.SignalSet,MathNet.Symbolics.Core.Signal,System.Boolean):System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Core.Signal&gt;" Analyze="True" />
          <Member Name="context" Analyze="True" />
         </Members>
        </Type>
        <Type Name="SineArchitectures" Analyze="True">
         <Members>
          <Member Name=".cctor()" Analyze="True" />
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="_entityId" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__0(MathNet.Symbolics.Core.Port):MathNet.Symbolics.Core.Process[]" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__1(MathNet.Symbolics.StdPackage.Structures.RealValue):MathNet.Symbolics.StdPackage.Structures.RealValue" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__2(MathNet.Symbolics.Core.Port):MathNet.Symbolics.Core.Process[]" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__3(MathNet.Symbolics.StdPackage.Structures.ComplexValue):MathNet.Symbolics.StdPackage.Structures.ComplexValue" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate4" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate5" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate6" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate7" Analyze="True" />
          <Member Name="BuildTheorems(MathNet.Symbolics.Backend.Context):MathNet.Symbolics.Backend.Theorems.ITheorem[]" Analyze="True" />
          <Member Name="EntityIdentifier" Analyze="True">
           <Accessors>
            <Accessor Name="get_EntityIdentifier():MathNet.Symbolics.Core.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="SineArchitectures+&lt;&gt;c__DisplayClass9" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="&lt;BuildTheorems&gt;b__8(MathNet.Symbolics.Core.Port,MathNet.Symbolics.Backend.Containers.SignalSet,MathNet.Symbolics.Core.Signal,System.Boolean):System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Core.Signal&gt;" Analyze="True" />
          <Member Name="context" Analyze="True" />
         </Members>
        </Type>
        <Type Name="TangentArchitectures" Analyze="True">
         <Members>
          <Member Name=".cctor()" Analyze="True" />
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="_entityId" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__0(MathNet.Symbolics.Core.Port):MathNet.Symbolics.Core.Process[]" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__1(MathNet.Symbolics.StdPackage.Structures.RealValue):MathNet.Symbolics.StdPackage.Structures.RealValue" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__2(MathNet.Symbolics.Core.Port):MathNet.Symbolics.Core.Process[]" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__3(MathNet.Symbolics.StdPackage.Structures.ComplexValue):MathNet.Symbolics.StdPackage.Structures.ComplexValue" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate4" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate5" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate6" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate7" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegatec" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegated" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegatee" Analyze="True" />
          <Member Name="&lt;BuildTheorems&gt;b__9():MathNet.Symbolics.Backend.Patterns.Pattern" Analyze="True" />
          <Member Name="&lt;BuildTheorems&gt;b__a(MathNet.Symbolics.Core.Port):MathNet.Symbolics.Backend.Traversing.ManipulationPlan" Analyze="True" />
          <Member Name="&lt;BuildTheorems&gt;b__b(MathNet.Symbolics.Core.Port,MathNet.Symbolics.Backend.Containers.SignalSet,System.Boolean):System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Core.Signal&gt;" Analyze="True" />
          <Member Name="BuildTheorems(MathNet.Symbolics.Backend.Context):MathNet.Symbolics.Backend.Theorems.ITheorem[]" Analyze="True" />
          <Member Name="EntityIdentifier" Analyze="True">
           <Accessors>
            <Accessor Name="get_EntityIdentifier():MathNet.Symbolics.Core.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="TangentArchitectures+&lt;&gt;c__DisplayClassf" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="&lt;BuildTheorems&gt;b__8(MathNet.Symbolics.Core.Port,MathNet.Symbolics.Backend.Containers.SignalSet,MathNet.Symbolics.Core.Signal,System.Boolean):System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Core.Signal&gt;" Analyze="True" />
          <Member Name="context" Analyze="True" />
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="MathNet.Symbolics.Workplace" Analyze="True">
       <Types>
        <Type Name="Builder" Analyze="True">
         <Members>
          <Member Name=".ctor(MathNet.Symbolics.Backend.Context)" Analyze="True" />
          <Member Name="Absolute(MathNet.Symbolics.Core.Signal):MathNet.Symbolics.Core.Signal" Analyze="True" />
          <Member Name="Absolute(MathNet.Symbolics.Core.Signal[]):MathNet.Symbolics.Backend.Containers.ReadOnlySignalSet" Analyze="True" />
          <Member Name="Absolute(System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Core.Signal&gt;):MathNet.Symbolics.Backend.Containers.ReadOnlySignalSet" Analyze="True" />
          <Member Name="Add(MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Signal):MathNet.Symbolics.Core.Signal" Analyze="True" />
          <Member Name="Add(MathNet.Symbolics.Core.Signal[]):MathNet.Symbolics.Core.Signal" Analyze="True" />
          <Member Name="Add(System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Core.Signal&gt;):MathNet.Symbolics.Core.Signal" Analyze="True" />
          <Member Name="AddSimplified(MathNet.Symbolics.Backend.Containers.ReadOnlySignalSet):MathNet.Symbolics.Core.Signal" Analyze="True" />
          <Member Name="AddSimplified(MathNet.Symbolics.Backend.Containers.SignalSet):MathNet.Symbolics.Core.Signal" Analyze="True" />
          <Member Name="AddSimplified(MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Signal[]):MathNet.Symbolics.Core.Signal" Analyze="True" />
          <Member Name="AddSimplified(MathNet.Symbolics.Core.Signal[]):MathNet.Symbolics.Core.Signal" Analyze="True" />
          <Member Name="AddSimplified(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Core.Signal&gt;):MathNet.Symbolics.Core.Signal" Analyze="True" />
          <Member Name="context" Analyze="True" />
          <Member Name="Context" Analyze="True">
           <Accessors>
            <Accessor Name="get_Context():MathNet.Symbolics.Backend.Context" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Derive(MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Signal):MathNet.Symbolics.Core.Signal" Analyze="True" />
          <Member Name="Derive(MathNet.Symbolics.Core.Signal[]):MathNet.Symbolics.Core.Signal" Analyze="True" />
          <Member Name="Derive(System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Core.Signal&gt;):MathNet.Symbolics.Core.Signal" Analyze="True" />
          <Member Name="Divide(MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Signal):MathNet.Symbolics.Core.Signal" Analyze="True" />
          <Member Name="Divide(MathNet.Symbolics.Core.Signal[]):MathNet.Symbolics.Core.Signal" Analyze="True" />
          <Member Name="Divide(System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Core.Signal&gt;):MathNet.Symbolics.Core.Signal" Analyze="True" />
          <Member Name="DivideSimplified(MathNet.Symbolics.Backend.Containers.ReadOnlySignalSet):MathNet.Symbolics.Core.Signal" Analyze="True" />
          <Member Name="DivideSimplified(MathNet.Symbolics.Backend.Containers.SignalSet):MathNet.Symbolics.Core.Signal" Analyze="True" />
          <Member Name="DivideSimplified(MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Signal[]):MathNet.Symbolics.Core.Signal" Analyze="True" />
          <Member Name="DivideSimplified(MathNet.Symbolics.Core.Signal[]):MathNet.Symbolics.Core.Signal" Analyze="True" />
          <Member Name="DivideSimplified(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Core.Signal&gt;):MathNet.Symbolics.Core.Signal" Analyze="True" />
          <Member Name="EncapsulateAsList(MathNet.Symbolics.Core.Signal[]):MathNet.Symbolics.Core.Signal" Analyze="True" />
          <Member Name="EncapsulateAsList(System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Core.Signal&gt;):MathNet.Symbolics.Core.Signal" Analyze="True" />
          <Member Name="EncapsulateAsScalar(MathNet.Symbolics.Core.Signal[]):MathNet.Symbolics.Core.Signal" Analyze="True" />
          <Member Name="EncapsulateAsScalar(System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Core.Signal&gt;):MathNet.Symbolics.Core.Signal" Analyze="True" />
          <Member Name="EncapsulateAsSet(MathNet.Symbolics.Core.Signal[]):MathNet.Symbolics.Core.Signal" Analyze="True" />
          <Member Name="EncapsulateAsSet(System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Core.Signal&gt;):MathNet.Symbolics.Core.Signal" Analyze="True" />
          <Member Name="EncapsulateAsVector(MathNet.Symbolics.Core.Signal[]):MathNet.Symbolics.Core.Signal" Analyze="True" />
          <Member Name="EncapsulateAsVector(System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Core.Signal&gt;):MathNet.Symbolics.Core.Signal" Analyze="True" />
          <Member Name="Exponential(MathNet.Symbolics.Core.Signal):MathNet.Symbolics.Core.Signal" Analyze="True" />
          <Member Name="Factorial(MathNet.Symbolics.Core.Signal):MathNet.Symbolics.Core.Signal" Analyze="True" />
          <Member Name="Function(MathNet.Symbolics.Core.Entity,MathNet.Symbolics.Core.Signal):MathNet.Symbolics.Core.Signal" Analyze="True" />
          <Member Name="Function(MathNet.Symbolics.Core.Entity,MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Signal):MathNet.Symbolics.Core.Signal" Analyze="True" />
          <Member Name="Function(MathNet.Symbolics.Core.Entity,MathNet.Symbolics.Core.Signal[]):MathNet.Symbolics.Core.Signal" Analyze="True" />
          <Member Name="Function(MathNet.Symbolics.Core.Entity,System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Core.Signal&gt;):MathNet.Symbolics.Core.Signal" Analyze="True" />
          <Member Name="Function(MathNet.Symbolics.Core.MathIdentifier,MathNet.Symbolics.Core.Signal):MathNet.Symbolics.Core.Signal" Analyze="True" />
          <Member Name="Function(MathNet.Symbolics.Core.MathIdentifier,MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Signal):MathNet.Symbolics.Core.Signal" Analyze="True" />
          <Member Name="Function(MathNet.Symbolics.Core.MathIdentifier,MathNet.Symbolics.Core.Signal[]):MathNet.Symbolics.Core.Signal" Analyze="True" />
          <Member Name="Function(MathNet.Symbolics.Core.MathIdentifier,System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Core.Signal&gt;):MathNet.Symbolics.Core.Signal" Analyze="True" />
          <Member Name="Function(System.String,MathNet.Symbolics.Core.InfixNotation,MathNet.Symbolics.Core.Signal):MathNet.Symbolics.Core.Signal" Analyze="True" />
          <Member Name="Function(System.String,MathNet.Symbolics.Core.InfixNotation,MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Signal):MathNet.Symbolics.Core.Signal" Analyze="True" />
          <Member Name="Function(System.String,MathNet.Symbolics.Core.InfixNotation,MathNet.Symbolics.Core.Signal[]):MathNet.Symbolics.Core.Signal" Analyze="True" />
          <Member Name="Function(System.String,MathNet.Symbolics.Core.InfixNotation,System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Core.Signal&gt;):MathNet.Symbolics.Core.Signal" Analyze="True" />
          <Member Name="Function(System.String,MathNet.Symbolics.Core.Signal):MathNet.Symbolics.Core.Signal" Analyze="True" />
          <Member Name="Function(System.String,MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Signal):MathNet.Symbolics.Core.Signal" Analyze="True" />
          <Member Name="Function(System.String,MathNet.Symbolics.Core.Signal[]):MathNet.Symbolics.Core.Signal" Analyze="True" />
          <Member Name="Function(System.String,System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Core.Signal&gt;):MathNet.Symbolics.Core.Signal" Analyze="True" />
          <Member Name="Functions(MathNet.Symbolics.Core.Entity,MathNet.Symbolics.Core.Signal):MathNet.Symbolics.Backend.Containers.ReadOnlySignalSet" Analyze="True" />
          <Member Name="Functions(MathNet.Symbolics.Core.Entity,MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Signal):MathNet.Symbolics.Backend.Containers.ReadOnlySignalSet" Analyze="True" />
          <Member Name="Functions(MathNet.Symbolics.Core.Entity,MathNet.Symbolics.Core.Signal[]):MathNet.Symbolics.Backend.Containers.ReadOnlySignalSet" Analyze="True" />
          <Member Name="Functions(MathNet.Symbolics.Core.Entity,System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Core.Signal&gt;):MathNet.Symbolics.Backend.Containers.ReadOnlySignalSet" Analyze="True" />
          <Member Name="Functions(MathNet.Symbolics.Core.MathIdentifier,MathNet.Symbolics.Core.Signal):MathNet.Symbolics.Backend.Containers.ReadOnlySignalSet" Analyze="True" />
          <Member Name="Functions(MathNet.Symbolics.Core.MathIdentifier,MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Signal):MathNet.Symbolics.Backend.Containers.ReadOnlySignalSet" Analyze="True" />
          <Member Name="Functions(MathNet.Symbolics.Core.MathIdentifier,MathNet.Symbolics.Core.Signal[]):MathNet.Symbolics.Backend.Containers.ReadOnlySignalSet" Analyze="True" />
          <Member Name="Functions(MathNet.Symbolics.Core.MathIdentifier,System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Core.Signal&gt;):MathNet.Symbolics.Backend.Containers.ReadOnlySignalSet" Analyze="True" />
          <Member Name="Functions(System.String,MathNet.Symbolics.Core.InfixNotation,MathNet.Symbolics.Core.Signal):MathNet.Symbolics.Backend.Containers.ReadOnlySignalSet" Analyze="True" />
          <Member Name="Functions(System.String,MathNet.Symbolics.Core.InfixNotation,MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Signal):MathNet.Symbolics.Backend.Containers.ReadOnlySignalSet" Analyze="True" />
          <Member Name="Functions(System.String,MathNet.Symbolics.Core.InfixNotation,MathNet.Symbolics.Core.Signal[]):MathNet.Symbolics.Backend.Containers.ReadOnlySignalSet" Analyze="True" />
          <Member Name="Functions(System.String,MathNet.Symbolics.Core.InfixNotation,System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Core.Signal&gt;):MathNet.Symbolics.Backend.Containers.ReadOnlySignalSet" Analyze="True" />
          <Member Name="Functions(System.String,MathNet.Symbolics.Core.Signal):MathNet.Symbolics.Backend.Containers.ReadOnlySignalSet" Analyze="True" />
          <Member Name="Functions(System.String,MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Signal):MathNet.Symbolics.Backend.Containers.ReadOnlySignalSet" Analyze="True" />
          <Member Name="Functions(System.String,MathNet.Symbolics.Core.Signal[]):MathNet.Symbolics.Backend.Containers.ReadOnlySignalSet" Analyze="True" />
          <Member Name="Functions(System.String,System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Core.Signal&gt;):MathNet.Symbolics.Backend.Containers.ReadOnlySignalSet" Analyze="True" />
          <Member Name="Invert(MathNet.Symbolics.Core.Signal):MathNet.Symbolics.Core.Signal" Analyze="True" />
          <Member Name="Invert(MathNet.Symbolics.Core.Signal[]):MathNet.Symbolics.Backend.Containers.ReadOnlySignalSet" Analyze="True" />
          <Member Name="Invert(System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Core.Signal&gt;):MathNet.Symbolics.Backend.Containers.ReadOnlySignalSet" Analyze="True" />
          <Member Name="MapSignals(MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Signal):MathNet.Symbolics.Core.Port" Analyze="True" />
          <Member Name="MapSignalsSynchronized(MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Signal):MathNet.Symbolics.Core.Port" Analyze="True" />
          <Member Name="Multiply(MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Signal):MathNet.Symbolics.Core.Signal" Analyze="True" />
          <Member Name="Multiply(MathNet.Symbolics.Core.Signal[]):MathNet.Symbolics.Core.Signal" Analyze="True" />
          <Member Name="Multiply(System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Core.Signal&gt;):MathNet.Symbolics.Core.Signal" Analyze="True" />
          <Member Name="MultiplySimplified(MathNet.Symbolics.Backend.Containers.ReadOnlySignalSet):MathNet.Symbolics.Core.Signal" Analyze="True" />
          <Member Name="MultiplySimplified(MathNet.Symbolics.Backend.Containers.SignalSet):MathNet.Symbolics.Core.Signal" Analyze="True" />
          <Member Name="MultiplySimplified(MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Signal[]):MathNet.Symbolics.Core.Signal" Analyze="True" />
          <Member Name="MultiplySimplified(MathNet.Symbolics.Core.Signal[]):MathNet.Symbolics.Core.Signal" Analyze="True" />
          <Member Name="MultiplySimplified(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Core.Signal&gt;):MathNet.Symbolics.Core.Signal" Analyze="True" />
          <Member Name="NaturalLogarithm(MathNet.Symbolics.Core.Signal):MathNet.Symbolics.Core.Signal" Analyze="True" />
          <Member Name="Negate(MathNet.Symbolics.Core.Signal):MathNet.Symbolics.Core.Signal" Analyze="True" />
          <Member Name="Negate(MathNet.Symbolics.Core.Signal[]):MathNet.Symbolics.Backend.Containers.ReadOnlySignalSet" Analyze="True" />
          <Member Name="Negate(System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Core.Signal&gt;):MathNet.Symbolics.Backend.Containers.ReadOnlySignalSet" Analyze="True" />
          <Member Name="Power(MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Signal):MathNet.Symbolics.Core.Signal" Analyze="True" />
          <Member Name="Power(MathNet.Symbolics.Core.Signal[]):MathNet.Symbolics.Core.Signal" Analyze="True" />
          <Member Name="Power(System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Core.Signal&gt;):MathNet.Symbolics.Core.Signal" Analyze="True" />
          <Member Name="Square(MathNet.Symbolics.Core.Signal):MathNet.Symbolics.Core.Signal" Analyze="True" />
          <Member Name="Square(MathNet.Symbolics.Core.Signal[]):MathNet.Symbolics.Backend.Containers.ReadOnlySignalSet" Analyze="True" />
          <Member Name="Square(System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Core.Signal&gt;):MathNet.Symbolics.Backend.Containers.ReadOnlySignalSet" Analyze="True" />
          <Member Name="Subtract(MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Signal):MathNet.Symbolics.Core.Signal" Analyze="True" />
          <Member Name="Subtract(MathNet.Symbolics.Core.Signal[]):MathNet.Symbolics.Core.Signal" Analyze="True" />
          <Member Name="Subtract(System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Core.Signal&gt;):MathNet.Symbolics.Core.Signal" Analyze="True" />
          <Member Name="SubtractSimplified(MathNet.Symbolics.Backend.Containers.ReadOnlySignalSet):MathNet.Symbolics.Core.Signal" Analyze="True" />
          <Member Name="SubtractSimplified(MathNet.Symbolics.Backend.Containers.SignalSet):MathNet.Symbolics.Core.Signal" Analyze="True" />
          <Member Name="SubtractSimplified(MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Signal[]):MathNet.Symbolics.Core.Signal" Analyze="True" />
          <Member Name="SubtractSimplified(MathNet.Symbolics.Core.Signal[]):MathNet.Symbolics.Core.Signal" Analyze="True" />
          <Member Name="SubtractSimplified(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Core.Signal&gt;):MathNet.Symbolics.Core.Signal" Analyze="True" />
          <Member Name="Synchronize(MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Signal):MathNet.Symbolics.Core.Signal" Analyze="True" />
         </Members>
        </Type>
        <Type Name="MathFunction" Analyze="True">
         <Members>
          <Member Name=".ctor(MathNet.Symbolics.Backend.Context,MathNet.Symbolics.Core.Entity)" Analyze="True" />
          <Member Name=".ctor(MathNet.Symbolics.Backend.Context,MathNet.Symbolics.Core.Entity,MathNet.Symbolics.Workplace.MathSystem)" Analyze="True" />
          <Member Name=".ctor(MathNet.Symbolics.Backend.Context,MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Signal[])" Analyze="True" />
          <Member Name=".ctor(MathNet.Symbolics.Backend.Context,MathNet.Symbolics.Workplace.MathSystem)" Analyze="True" />
          <Member Name="Apply(MathNet.Symbolics.Core.Signal[]):MathNet.Symbolics.Backend.Containers.ReadOnlySignalSet" Analyze="True" />
          <Member Name="BuildEntity():MathNet.Symbolics.Core.Entity" Analyze="True" />
          <Member Name="BuildSystem():MathNet.Symbolics.Workplace.MathSystem" Analyze="True" />
          <Member Name="context" Analyze="True" />
          <Member Name="entity" Analyze="True" />
          <Member Name="Entity" Analyze="True">
           <Accessors>
            <Accessor Name="get_Entity():MathNet.Symbolics.Core.Entity" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Evaluate(MathNet.Symbolics.Core.ValueStructure[]):MathNet.Symbolics.Core.ValueStructure[]" Analyze="True" />
          <Member Name="Evaluate(System.Double[]):System.Double[]" Analyze="True" />
          <Member Name="HasEntity" Analyze="True">
           <Accessors>
            <Accessor Name="get_HasEntity():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="HasSystem" Analyze="True">
           <Accessors>
            <Accessor Name="get_HasSystem():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="system" Analyze="True" />
          <Member Name="System" Analyze="True">
           <Accessors>
            <Accessor Name="get_System():MathNet.Symbolics.Workplace.MathSystem" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="MathSystem" Analyze="True">
         <Members>
          <Member Name=".ctor(MathNet.Symbolics.Backend.Context)" Analyze="True" />
          <Member Name="_allBuses" Analyze="True" />
          <Member Name="_allPorts" Analyze="True" />
          <Member Name="_allSignals" Analyze="True" />
          <Member Name="_context" Analyze="True" />
          <Member Name="_iid" Analyze="True" />
          <Member Name="_inputs" Analyze="True" />
          <Member Name="_mediator" Analyze="True" />
          <Member Name="_namedBuses" Analyze="True" />
          <Member Name="_namedSignals" Analyze="True" />
          <Member Name="_outputs" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate1" Analyze="True" />
          <Member Name="&lt;GetAllLeafSignals&gt;b__0(MathNet.Symbolics.Core.Signal):System.Boolean" Analyze="True" />
          <Member Name="AcceptSystemBuilder(MathNet.Symbolics.Backend.SystemBuilder.ISystemBuilder):System.Void" Analyze="True" />
          <Member Name="AddBus(MathNet.Symbolics.Core.Bus):System.Void" Analyze="True" />
          <Member Name="AddBusRange(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Core.Bus&gt;):System.Void" Analyze="True" />
          <Member Name="AddNamedBus(System.String,MathNet.Symbolics.Core.Bus):System.Void" Analyze="True" />
          <Member Name="AddNamedSignal(System.String,MathNet.Symbolics.Core.Signal):MathNet.Symbolics.Core.Signal" Analyze="True" />
          <Member Name="AddNamedSignal(System.String,MathNet.Symbolics.Core.ValueStructure):MathNet.Symbolics.Core.Signal" Analyze="True" />
          <Member Name="AddPort(MathNet.Symbolics.Core.Port):System.Void" Analyze="True" />
          <Member Name="AddPortTree(MathNet.Symbolics.Core.Port,System.Boolean,System.Boolean):System.Void" Analyze="True" />
          <Member Name="AddSignal(MathNet.Symbolics.Core.Signal):System.Void" Analyze="True" />
          <Member Name="AddSignalRange(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Core.Signal&gt;):System.Void" Analyze="True" />
          <Member Name="AddSignalTree(MathNet.Symbolics.Core.Signal,System.Boolean,System.Boolean):System.Void" Analyze="True" />
          <Member Name="AddSignalTree(MathNet.Symbolics.Core.Signal,System.Collections.Generic.ICollection`1&lt;MathNet.Symbolics.Core.Signal&gt;,System.Boolean,System.Boolean):System.Void" Analyze="True" />
          <Member Name="AddSignalTreeRange(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Core.Signal&gt;,System.Boolean,System.Boolean):System.Void" Analyze="True" />
          <Member Name="AddSignalTreeRange(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Core.Signal&gt;,System.Collections.Generic.ICollection`1&lt;MathNet.Symbolics.Core.Signal&gt;,System.Boolean,System.Boolean):System.Void" Analyze="True" />
          <Member Name="BuildArchitectureFactory(MathNet.Symbolics.Core.MathIdentifier,MathNet.Symbolics.Core.MathIdentifier):MathNet.Symbolics.Core.IArchitectureFactory" Analyze="True" />
          <Member Name="BuildArchitectureFactory(System.String,MathNet.Symbolics.Core.MathIdentifier,MathNet.Symbolics.Core.MathIdentifier):MathNet.Symbolics.Core.IArchitectureFactory" Analyze="True" />
          <Member Name="BuildArchitectureFactory(System.String,MathNet.Symbolics.Core.MathIdentifier,MathNet.Symbolics.Core.MathIdentifier,System.Int32,System.Int32,System.Int32):MathNet.Symbolics.Core.IArchitectureFactory" Analyze="True" />
          <Member Name="BuildEntity(MathNet.Symbolics.Core.MathIdentifier,System.String):MathNet.Symbolics.Core.Entity" Analyze="True" />
          <Member Name="BuildEntity(MathNet.Symbolics.Core.MathIdentifier,System.String,MathNet.Symbolics.Core.InfixNotation,System.Int32):MathNet.Symbolics.Core.Entity" Analyze="True" />
          <Member Name="BusCount" Analyze="True">
           <Accessors>
            <Accessor Name="get_BusCount():System.Int32" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Clone():MathNet.Symbolics.Workplace.MathSystem" Analyze="True" />
          <Member Name="ContainsBus(MathNet.Symbolics.Core.Bus):System.Boolean" Analyze="True" />
          <Member Name="ContainsNamedBus(System.String):System.Boolean" Analyze="True" />
          <Member Name="ContainsNamedSignal(System.String):System.Boolean" Analyze="True" />
          <Member Name="ContainsPort(MathNet.Symbolics.Core.Port):System.Boolean" Analyze="True" />
          <Member Name="ContainsSignal(MathNet.Symbolics.Core.Signal):System.Boolean" Analyze="True" />
          <Member Name="Context" Analyze="True">
           <Accessors>
            <Accessor Name="get_Context():MathNet.Symbolics.Backend.Context" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="CreateNamedBus(System.String):MathNet.Symbolics.Core.Bus" Analyze="True" />
          <Member Name="CreateNamedSignal(System.String):MathNet.Symbolics.Core.Signal" Analyze="True" />
          <Member Name="OutputValueChanged" Kind="Event" Analyze="True">
           <Accessors>
            <Accessor Name="add_OutputValueChanged(System.EventHandler`1&lt;MathNet.Symbolics.Backend.Events.IndexedSignalEventArgs&gt;):System.Void" Analyze="True" />
            <Accessor Name="remove_OutputValueChanged(System.EventHandler`1&lt;MathNet.Symbolics.Backend.Events.IndexedSignalEventArgs&gt;):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Evaluate(MathNet.Symbolics.Core.ValueStructure[]):MathNet.Symbolics.Core.ValueStructure[]" Analyze="True" />
          <Member Name="Evaluate(System.Double[]):System.Double[]" Analyze="True" />
          <Member Name="GetAllBuses():MathNet.Symbolics.Backend.Containers.ReadOnlyBusSet" Analyze="True" />
          <Member Name="GetAllInputs():MathNet.Symbolics.Backend.Containers.ReadOnlySignalSet" Analyze="True" />
          <Member Name="GetAllLeafSignals():MathNet.Symbolics.Backend.Containers.ReadOnlySignalSet" Analyze="True" />
          <Member Name="GetAllOutputs():MathNet.Symbolics.Backend.Containers.ReadOnlySignalSet" Analyze="True" />
          <Member Name="GetAllPorts():MathNet.Symbolics.Backend.Containers.ReadOnlyPortSet" Analyze="True" />
          <Member Name="GetAllSignals():MathNet.Symbolics.Backend.Containers.ReadOnlySignalSet" Analyze="True" />
          <Member Name="GetBus(System.Int32):MathNet.Symbolics.Core.Bus" Analyze="True" />
          <Member Name="GetInput(System.Int32):MathNet.Symbolics.Core.Signal" Analyze="True" />
          <Member Name="GetOutput(System.Int32):MathNet.Symbolics.Core.Signal" Analyze="True" />
          <Member Name="GetPort(System.Int32):MathNet.Symbolics.Core.Port" Analyze="True" />
          <Member Name="GetSignal(System.Int32):MathNet.Symbolics.Core.Signal" Analyze="True" />
          <Member Name="HasMediator" Analyze="True">
           <Accessors>
            <Accessor Name="get_HasMediator():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="InputCount" Analyze="True">
           <Accessors>
            <Accessor Name="get_InputCount():System.Int32" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="InstanceId" Analyze="True">
           <Accessors>
            <Accessor Name="get_InstanceId():System.Guid" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="InternalAddBus(MathNet.Symbolics.Core.Bus):System.Void" Analyze="True" />
          <Member Name="InternalAddInput(MathNet.Symbolics.Core.Signal):System.Void" Analyze="True" />
          <Member Name="InternalAddOutput(MathNet.Symbolics.Core.Signal):System.Void" Analyze="True" />
          <Member Name="InternalAddPort(MathNet.Symbolics.Core.Port):System.Void" Analyze="True" />
          <Member Name="InternalAddSignal(MathNet.Symbolics.Core.Signal):System.Void" Analyze="True" />
          <Member Name="InternalRemoveBus(MathNet.Symbolics.Core.Bus):System.Void" Analyze="True" />
          <Member Name="InternalRemoveInput(MathNet.Symbolics.Core.Signal):System.Void" Analyze="True" />
          <Member Name="InternalRemoveOutput(MathNet.Symbolics.Core.Signal):System.Void" Analyze="True" />
          <Member Name="InternalRemovePort(MathNet.Symbolics.Core.Port):System.Void" Analyze="True" />
          <Member Name="InternalRemoveSignal(MathNet.Symbolics.Core.Signal):System.Void" Analyze="True" />
          <Member Name="LookupNamedBus(System.String):MathNet.Symbolics.Core.Bus" Analyze="True" />
          <Member Name="LookupNamedSignal(System.String):MathNet.Symbolics.Core.Signal" Analyze="True" />
          <Member Name="Mediator" Analyze="True">
           <Accessors>
            <Accessor Name="get_Mediator():MathNet.Symbolics.Backend.Channels.Mediator" Analyze="True" />
            <Accessor Name="set_Mediator(MathNet.Symbolics.Backend.Channels.Mediator):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="OutputCount" Analyze="True">
           <Accessors>
            <Accessor Name="get_OutputCount():System.Int32" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="OutputValueChanged" Analyze="True" />
          <Member Name="PortCount" Analyze="True">
           <Accessors>
            <Accessor Name="get_PortCount():System.Int32" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="PromoteAsInput(MathNet.Symbolics.Core.Signal):System.Int32" Analyze="True" />
          <Member Name="PromoteAsOutput(MathNet.Symbolics.Core.Signal):System.Int32" Analyze="True" />
          <Member Name="PublishToLibrary(MathNet.Symbolics.Core.MathIdentifier,MathNet.Symbolics.Core.MathIdentifier):System.Void" Analyze="True" />
          <Member Name="PublishToLibrary(System.String,MathNet.Symbolics.Backend.Library,MathNet.Symbolics.Core.MathIdentifier,MathNet.Symbolics.Core.MathIdentifier):System.Void" Analyze="True" />
          <Member Name="PublishToLibrary(System.String,MathNet.Symbolics.Backend.Library,System.String,System.String):MathNet.Symbolics.Core.Entity" Analyze="True" />
          <Member Name="PublishToLibrary(System.String,MathNet.Symbolics.Backend.Library,System.String,System.String,System.String,System.String):MathNet.Symbolics.Core.Entity" Analyze="True" />
          <Member Name="PublishToLibrary(System.String,System.String):MathNet.Symbolics.Core.Entity" Analyze="True" />
          <Member Name="PublishToLibrary(System.String,System.String,System.String,System.String):MathNet.Symbolics.Core.Entity" Analyze="True" />
          <Member Name="PublishToLibraryAnonymous():MathNet.Symbolics.Core.Entity" Analyze="True" />
          <Member Name="PublishToLibraryAnonymous(System.String,MathNet.Symbolics.Backend.Library):MathNet.Symbolics.Core.Entity" Analyze="True" />
          <Member Name="PushInputValue(System.Int32,MathNet.Symbolics.Core.ValueStructure):System.Void" Analyze="True" />
          <Member Name="PushInputValue(System.Int32,MathNet.Symbolics.Core.ValueStructure,System.TimeSpan):System.Void" Analyze="True" />
          <Member Name="PushInputValueRange(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Core.Signal&gt;):System.Void" Analyze="True" />
          <Member Name="PushInputValueRange(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Core.Signal&gt;,System.TimeSpan):System.Void" Analyze="True" />
          <Member Name="PushInputValueRange(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Core.ValueStructure&gt;):System.Void" Analyze="True" />
          <Member Name="PushInputValueRange(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Core.ValueStructure&gt;,System.TimeSpan):System.Void" Analyze="True" />
          <Member Name="ReadXml(System.IO.FileInfo,MathNet.Symbolics.Backend.Context):MathNet.Symbolics.Workplace.MathSystem" Analyze="True" />
          <Member Name="ReadXml(System.String,MathNet.Symbolics.Backend.Context):MathNet.Symbolics.Workplace.MathSystem" Analyze="True" />
          <Member Name="ReadXml(System.Xml.XmlReader,MathNet.Symbolics.Backend.Context):MathNet.Symbolics.Workplace.MathSystem" Analyze="True" />
          <Member Name="ReadXmlEntity(System.IO.FileInfo,MathNet.Symbolics.Core.MathIdentifier,System.String):MathNet.Symbolics.Core.Entity" Analyze="True" />
          <Member Name="ReadXmlEntity(System.IO.FileInfo,MathNet.Symbolics.Core.MathIdentifier,System.String,MathNet.Symbolics.Core.InfixNotation,System.Int32):MathNet.Symbolics.Core.Entity" Analyze="True" />
          <Member Name="ReadXmlEntity(System.String,MathNet.Symbolics.Core.MathIdentifier,System.String):MathNet.Symbolics.Core.Entity" Analyze="True" />
          <Member Name="ReadXmlEntity(System.String,MathNet.Symbolics.Core.MathIdentifier,System.String,MathNet.Symbolics.Core.InfixNotation,System.Int32):MathNet.Symbolics.Core.Entity" Analyze="True" />
          <Member Name="ReadXmlEntity(System.Xml.XmlReader,MathNet.Symbolics.Core.MathIdentifier,System.String):MathNet.Symbolics.Core.Entity" Analyze="True" />
          <Member Name="ReadXmlEntity(System.Xml.XmlReader,MathNet.Symbolics.Core.MathIdentifier,System.String,MathNet.Symbolics.Core.InfixNotation,System.Int32):MathNet.Symbolics.Core.Entity" Analyze="True" />
          <Member Name="RegisterOutputSignal(MathNet.Symbolics.Core.Signal):System.Void" Analyze="True" />
          <Member Name="RemoveBus(MathNet.Symbolics.Core.Bus):System.Void" Analyze="True" />
          <Member Name="RemoveNamedBus(System.String):System.Void" Analyze="True" />
          <Member Name="RemoveNamedSignal(System.String):System.Void" Analyze="True" />
          <Member Name="RemovePort(MathNet.Symbolics.Core.Port,System.Boolean):System.Void" Analyze="True" />
          <Member Name="RemoveSignal(MathNet.Symbolics.Core.Signal,System.Boolean):System.Void" Analyze="True" />
          <Member Name="RemoveUnusedObjects():System.Boolean" Analyze="True" />
          <Member Name="s_SignalValueChanged(System.Object,MathNet.Symbolics.Backend.Events.SignalEventArgs):System.Void" Analyze="True" />
          <Member Name="SignalCount" Analyze="True">
           <Accessors>
            <Accessor Name="get_SignalCount():System.Int32" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="TryLookupNamedBus(System.String,MathNet.Symbolics.Core.Bus&amp;):System.Boolean" Analyze="True" />
          <Member Name="TryLookupNamedSignal(System.String,MathNet.Symbolics.Core.Signal&amp;):System.Boolean" Analyze="True" />
          <Member Name="UnpromoteAsInput(MathNet.Symbolics.Core.Signal):System.Void" Analyze="True" />
          <Member Name="UnpromoteAsOutput(MathNet.Symbolics.Core.Signal):System.Void" Analyze="True" />
          <Member Name="UnregisterOutputSignal(MathNet.Symbolics.Core.Signal):System.Void" Analyze="True" />
          <Member Name="WriteXml(System.Boolean):System.String" Analyze="True" />
          <Member Name="WriteXml(System.IO.FileInfo):System.Void" Analyze="True" />
          <Member Name="WriteXml(System.Xml.XmlWriter):System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="MathSystem+&lt;&gt;c__DisplayClass3" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="&lt;&gt;4__this" Analyze="True" />
          <Member Name="&lt;AddSignalTree&gt;b__2(MathNet.Symbolics.Core.Signal):System.Boolean" Analyze="True" />
          <Member Name="autoAddInputs" Analyze="True" />
         </Members>
        </Type>
        <Type Name="MathSystem+&lt;&gt;c__DisplayClass6" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="&lt;&gt;4__this" Analyze="True" />
          <Member Name="&lt;AddSignalTree&gt;b__5(MathNet.Symbolics.Core.Signal):System.Boolean" Analyze="True" />
          <Member Name="autoAddInputs" Analyze="True" />
          <Member Name="border" Analyze="True" />
         </Members>
        </Type>
        <Type Name="Project" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name=".ctor(MathNet.Symbolics.Backend.Context)" Analyze="True" />
          <Member Name="_context" Analyze="True" />
          <Member Name="_currentSystem" Analyze="True" />
          <Member Name="_keepTrack" Analyze="True" />
          <Member Name="_localObservers" Analyze="True" />
          <Member Name="_namedSystems" Analyze="True" />
          <Member Name="_parser" Analyze="True" />
          <Member Name="AddSystem():MathNet.Symbolics.Workplace.MathSystem" Analyze="True" />
          <Member Name="AttachLocalObserver(MathNet.Symbolics.Backend.Channels.ISystemObserver):System.Void" Analyze="True" />
          <Member Name="Builder" Analyze="True">
           <Accessors>
            <Accessor Name="get_Builder():MathNet.Symbolics.Workplace.Builder" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Context" Analyze="True">
           <Accessors>
            <Accessor Name="get_Context():MathNet.Symbolics.Backend.Context" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="context_OnBusAttachedToPort(System.Object,MathNet.Symbolics.Backend.Events.BusPortIndexEventArgs):System.Void" Analyze="True" />
          <Member Name="context_OnBusNoLongerAttachedToPort(System.Object,MathNet.Symbolics.Backend.Events.BusPortIndexEventArgs):System.Void" Analyze="True" />
          <Member Name="context_OnNewBusConstructed(System.Object,MathNet.Symbolics.Backend.Events.BusEventArgs):System.Void" Analyze="True" />
          <Member Name="context_OnNewPortConstructed(System.Object,MathNet.Symbolics.Backend.Events.PortEventArgs):System.Void" Analyze="True" />
          <Member Name="context_OnNewSignalConstructed(System.Object,MathNet.Symbolics.Backend.Events.SignalEventArgs):System.Void" Analyze="True" />
          <Member Name="context_OnSignalDrivenByPort(System.Object,MathNet.Symbolics.Backend.Events.SignalPortIndexEventArgs):System.Void" Analyze="True" />
          <Member Name="context_OnSignalDrivesPort(System.Object,MathNet.Symbolics.Backend.Events.SignalPortIndexEventArgs):System.Void" Analyze="True" />
          <Member Name="context_OnSignalNoLongerDrivenByPort(System.Object,MathNet.Symbolics.Backend.Events.SignalPortIndexEventArgs):System.Void" Analyze="True" />
          <Member Name="context_OnSignalNoLongerDrivesPort(System.Object,MathNet.Symbolics.Backend.Events.SignalPortIndexEventArgs):System.Void" Analyze="True" />
          <Member Name="CurrentSystem" Analyze="True">
           <Accessors>
            <Accessor Name="get_CurrentSystem():MathNet.Symbolics.Workplace.MathSystem" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="DetachLocalObserver(MathNet.Symbolics.Backend.Channels.ISystemObserver):System.Void" Analyze="True" />
          <Member Name="SystemLoaded" Kind="Event" Analyze="True">
           <Accessors>
            <Accessor Name="add_SystemLoaded(System.EventHandler):System.Void" Analyze="True" />
            <Accessor Name="remove_SystemLoaded(System.EventHandler):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ImportSystem(MathNet.Symbolics.Workplace.MathSystem):System.Void" Analyze="True" />
          <Member Name="Interpret(System.IO.FileInfo):System.Void" Analyze="True" />
          <Member Name="Interpret(System.IO.TextReader):System.Void" Analyze="True" />
          <Member Name="Interpret(System.String):System.Void" Analyze="True" />
          <Member Name="KeepTrack" Analyze="True">
           <Accessors>
            <Accessor Name="get_KeepTrack():System.Boolean" Analyze="True" />
            <Accessor Name="set_KeepTrack(System.Boolean):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="LoadPackage(MathNet.Symbolics.Backend.Discovery.IPackageManager):System.Void" Analyze="True" />
          <Member Name="LoadPackage(System.Reflection.Assembly):System.Void" Analyze="True" />
          <Member Name="LoadSystem(MathNet.Symbolics.Workplace.MathSystem):System.Void" Analyze="True" />
          <Member Name="LoadSystem(System.Guid):System.Void" Analyze="True" />
          <Member Name="LoadSystem(System.Int32):System.Void" Analyze="True" />
          <Member Name="Parser" Analyze="True">
           <Accessors>
            <Accessor Name="get_Parser():MathNet.Symbolics.Backend.Parsing.Parser" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="PostCommand(MathNet.Symbolics.Backend.Channels.ICommand):System.Void" Analyze="True" />
          <Member Name="SimulateFor(System.Int32):System.TimeSpan" Analyze="True" />
          <Member Name="SimulateFor(System.TimeSpan):System.TimeSpan" Analyze="True" />
          <Member Name="SimulateInstant():System.Boolean" Analyze="True" />
          <Member Name="SystemLoaded" Analyze="True" />
          <Member Name="Systems" Analyze="True">
           <Accessors>
            <Accessor Name="get_Systems():System.Collections.Generic.Dictionary`2&lt;System.Guid,MathNet.Symbolics.Workplace.MathSystem&gt;" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="UnloadSystem():System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="Scanner" Analyze="True">
         <Members>
          <Member Name="CreateSubstituteVisitor(MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Signal):MathNet.Symbolics.Backend.Traversing.IManipulationVisitor" Analyze="True" />
          <Member Name="ExistsPort(MathNet.Symbolics.Core.Port,System.Predicate`1&lt;MathNet.Symbolics.Core.Port&gt;,System.Boolean):System.Boolean" Analyze="True" />
          <Member Name="ExistsPort(MathNet.Symbolics.Core.Port,System.Predicate`1&lt;MathNet.Symbolics.Core.Port&gt;,System.Boolean,MathNet.Symbolics.Core.Port&amp;,MathNet.Symbolics.Core.Signal&amp;):System.Boolean" Analyze="True" />
          <Member Name="ExistsPort(MathNet.Symbolics.Core.Signal,System.Predicate`1&lt;MathNet.Symbolics.Core.Port&gt;,System.Boolean):System.Boolean" Analyze="True" />
          <Member Name="ExistsPort(MathNet.Symbolics.Core.Signal,System.Predicate`1&lt;MathNet.Symbolics.Core.Port&gt;,System.Boolean,MathNet.Symbolics.Core.Port&amp;,MathNet.Symbolics.Core.Signal&amp;):System.Boolean" Analyze="True" />
          <Member Name="ExistsPort(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Core.Signal&gt;,System.Predicate`1&lt;MathNet.Symbolics.Core.Port&gt;,System.Boolean):System.Boolean" Analyze="True" />
          <Member Name="ExistsPort(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Core.Signal&gt;,System.Predicate`1&lt;MathNet.Symbolics.Core.Port&gt;,System.Boolean,MathNet.Symbolics.Core.Port&amp;,MathNet.Symbolics.Core.Signal&amp;):System.Boolean" Analyze="True" />
          <Member Name="ExistsSignal(MathNet.Symbolics.Core.Port,System.Predicate`1&lt;MathNet.Symbolics.Core.Signal&gt;,System.Boolean):System.Boolean" Analyze="True" />
          <Member Name="ExistsSignal(MathNet.Symbolics.Core.Port,System.Predicate`1&lt;MathNet.Symbolics.Core.Signal&gt;,System.Boolean,MathNet.Symbolics.Core.Signal&amp;,MathNet.Symbolics.Core.Port&amp;):System.Boolean" Analyze="True" />
          <Member Name="ExistsSignal(MathNet.Symbolics.Core.Signal,System.Predicate`1&lt;MathNet.Symbolics.Core.Signal&gt;,System.Boolean):System.Boolean" Analyze="True" />
          <Member Name="ExistsSignal(MathNet.Symbolics.Core.Signal,System.Predicate`1&lt;MathNet.Symbolics.Core.Signal&gt;,System.Boolean,MathNet.Symbolics.Core.Signal&amp;,MathNet.Symbolics.Core.Port&amp;):System.Boolean" Analyze="True" />
          <Member Name="ExistsSignal(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Core.Signal&gt;,System.Predicate`1&lt;MathNet.Symbolics.Core.Signal&gt;,System.Boolean):System.Boolean" Analyze="True" />
          <Member Name="ExistsSignal(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Core.Signal&gt;,System.Predicate`1&lt;MathNet.Symbolics.Core.Signal&gt;,System.Boolean,MathNet.Symbolics.Core.Signal&amp;,MathNet.Symbolics.Core.Port&amp;):System.Boolean" Analyze="True" />
          <Member Name="FindAll(MathNet.Symbolics.Core.Port,System.Boolean,MathNet.Symbolics.Backend.Containers.SignalSet&amp;,MathNet.Symbolics.Backend.Containers.PortSet&amp;):System.Void" Analyze="True" />
          <Member Name="FindAll(MathNet.Symbolics.Core.Signal,System.Boolean,MathNet.Symbolics.Backend.Containers.SignalSet&amp;,MathNet.Symbolics.Backend.Containers.PortSet&amp;):System.Void" Analyze="True" />
          <Member Name="FindAll(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Core.Signal&gt;,System.Boolean,MathNet.Symbolics.Backend.Containers.SignalSet&amp;,MathNet.Symbolics.Backend.Containers.PortSet&amp;):System.Void" Analyze="True" />
          <Member Name="FindAllPortPathsFrom(MathNet.Symbolics.Core.Port,MathNet.Symbolics.Core.Port,System.Boolean):System.Collections.Generic.List`1&lt;System.Collections.Generic.List`1&lt;MathNet.Symbolics.Core.Port&gt;&gt;" Analyze="True" />
          <Member Name="FindAllPortPathsFrom(MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Port,System.Boolean):System.Collections.Generic.List`1&lt;System.Collections.Generic.List`1&lt;MathNet.Symbolics.Core.Port&gt;&gt;" Analyze="True" />
          <Member Name="FindAllPortPathsFrom(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Core.Signal&gt;,MathNet.Symbolics.Core.Port,System.Boolean):System.Collections.Generic.List`1&lt;System.Collections.Generic.List`1&lt;MathNet.Symbolics.Core.Port&gt;&gt;" Analyze="True" />
          <Member Name="FindAllPorts(MathNet.Symbolics.Core.Port,System.Boolean):MathNet.Symbolics.Backend.Containers.PortSet" Analyze="True" />
          <Member Name="FindAllPorts(MathNet.Symbolics.Core.Port,System.Predicate`1&lt;MathNet.Symbolics.Core.Port&gt;,System.Boolean):MathNet.Symbolics.Backend.Containers.PortSet" Analyze="True" />
          <Member Name="FindAllPorts(MathNet.Symbolics.Core.Signal,System.Boolean):MathNet.Symbolics.Backend.Containers.PortSet" Analyze="True" />
          <Member Name="FindAllPorts(MathNet.Symbolics.Core.Signal,System.Predicate`1&lt;MathNet.Symbolics.Core.Port&gt;,System.Boolean):MathNet.Symbolics.Backend.Containers.PortSet" Analyze="True" />
          <Member Name="FindAllPorts(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Core.Signal&gt;,System.Boolean):MathNet.Symbolics.Backend.Containers.PortSet" Analyze="True" />
          <Member Name="FindAllPorts(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Core.Signal&gt;,System.Predicate`1&lt;MathNet.Symbolics.Core.Port&gt;,System.Boolean):MathNet.Symbolics.Backend.Containers.PortSet" Analyze="True" />
          <Member Name="FindAllSignalPathsFrom(MathNet.Symbolics.Core.Port,MathNet.Symbolics.Core.Signal,System.Boolean):System.Collections.Generic.List`1&lt;System.Collections.Generic.List`1&lt;MathNet.Symbolics.Core.Signal&gt;&gt;" Analyze="True" />
          <Member Name="FindAllSignalPathsFrom(MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Signal,System.Boolean):System.Collections.Generic.List`1&lt;System.Collections.Generic.List`1&lt;MathNet.Symbolics.Core.Signal&gt;&gt;" Analyze="True" />
          <Member Name="FindAllSignalPathsFrom(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Core.Signal&gt;,MathNet.Symbolics.Core.Signal,System.Boolean):System.Collections.Generic.List`1&lt;System.Collections.Generic.List`1&lt;MathNet.Symbolics.Core.Signal&gt;&gt;" Analyze="True" />
          <Member Name="FindAllSignals(MathNet.Symbolics.Core.Port,System.Boolean):MathNet.Symbolics.Backend.Containers.SignalSet" Analyze="True" />
          <Member Name="FindAllSignals(MathNet.Symbolics.Core.Port,System.Predicate`1&lt;MathNet.Symbolics.Core.Signal&gt;,System.Boolean):MathNet.Symbolics.Backend.Containers.SignalSet" Analyze="True" />
          <Member Name="FindAllSignals(MathNet.Symbolics.Core.Signal,System.Boolean):MathNet.Symbolics.Backend.Containers.SignalSet" Analyze="True" />
          <Member Name="FindAllSignals(MathNet.Symbolics.Core.Signal,System.Predicate`1&lt;MathNet.Symbolics.Core.Signal&gt;,System.Boolean):MathNet.Symbolics.Backend.Containers.SignalSet" Analyze="True" />
          <Member Name="FindAllSignals(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Core.Signal&gt;,System.Boolean):MathNet.Symbolics.Backend.Containers.SignalSet" Analyze="True" />
          <Member Name="FindAllSignals(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Core.Signal&gt;,System.Predicate`1&lt;MathNet.Symbolics.Core.Signal&gt;,System.Boolean):MathNet.Symbolics.Backend.Containers.SignalSet" Analyze="True" />
          <Member Name="FindPort(MathNet.Symbolics.Core.Port,System.Predicate`1&lt;MathNet.Symbolics.Core.Port&gt;,System.Boolean):MathNet.Symbolics.Core.Port" Analyze="True" />
          <Member Name="FindPort(MathNet.Symbolics.Core.Signal,System.Predicate`1&lt;MathNet.Symbolics.Core.Port&gt;,System.Boolean):MathNet.Symbolics.Core.Port" Analyze="True" />
          <Member Name="FindPort(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Core.Signal&gt;,System.Predicate`1&lt;MathNet.Symbolics.Core.Port&gt;,System.Boolean):MathNet.Symbolics.Core.Port" Analyze="True" />
          <Member Name="FindSignal(MathNet.Symbolics.Core.Port,System.Predicate`1&lt;MathNet.Symbolics.Core.Signal&gt;,System.Boolean):MathNet.Symbolics.Core.Signal" Analyze="True" />
          <Member Name="FindSignal(MathNet.Symbolics.Core.Signal,System.Predicate`1&lt;MathNet.Symbolics.Core.Signal&gt;,System.Boolean):MathNet.Symbolics.Core.Signal" Analyze="True" />
          <Member Name="FindSignal(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Core.Signal&gt;,System.Predicate`1&lt;MathNet.Symbolics.Core.Signal&gt;,System.Boolean):MathNet.Symbolics.Core.Signal" Analyze="True" />
          <Member Name="ForEachPort(MathNet.Symbolics.Core.Port,MathNet.Symbolics.Backend.Traversing.ActionContinue`1&lt;MathNet.Symbolics.Core.Port&gt;,System.Boolean):System.Void" Analyze="True" />
          <Member Name="ForEachPort(MathNet.Symbolics.Core.Port,System.Predicate`1&lt;MathNet.Symbolics.Core.Port&gt;,MathNet.Symbolics.Backend.Traversing.ActionContinue`1&lt;MathNet.Symbolics.Core.Port&gt;,System.Boolean):System.Void" Analyze="True" />
          <Member Name="ForEachPort(MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Backend.Traversing.ActionContinue`1&lt;MathNet.Symbolics.Core.Port&gt;,System.Boolean):System.Void" Analyze="True" />
          <Member Name="ForEachPort(MathNet.Symbolics.Core.Signal,System.Predicate`1&lt;MathNet.Symbolics.Core.Port&gt;,MathNet.Symbolics.Backend.Traversing.ActionContinue`1&lt;MathNet.Symbolics.Core.Port&gt;,System.Boolean):System.Void" Analyze="True" />
          <Member Name="ForEachPort(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Core.Signal&gt;,MathNet.Symbolics.Backend.Traversing.ActionContinue`1&lt;MathNet.Symbolics.Core.Port&gt;,System.Boolean):System.Void" Analyze="True" />
          <Member Name="ForEachPort(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Core.Signal&gt;,System.Predicate`1&lt;MathNet.Symbolics.Core.Port&gt;,MathNet.Symbolics.Backend.Traversing.ActionContinue`1&lt;MathNet.Symbolics.Core.Port&gt;,System.Boolean):System.Void" Analyze="True" />
          <Member Name="ForEachSignal(MathNet.Symbolics.Core.Port,MathNet.Symbolics.Backend.Traversing.ActionContinue`1&lt;MathNet.Symbolics.Core.Signal&gt;,System.Boolean):System.Void" Analyze="True" />
          <Member Name="ForEachSignal(MathNet.Symbolics.Core.Port,System.Predicate`1&lt;MathNet.Symbolics.Core.Signal&gt;,MathNet.Symbolics.Backend.Traversing.ActionContinue`1&lt;MathNet.Symbolics.Core.Signal&gt;,System.Boolean):System.Void" Analyze="True" />
          <Member Name="ForEachSignal(MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Backend.Traversing.ActionContinue`1&lt;MathNet.Symbolics.Core.Signal&gt;,System.Boolean):System.Void" Analyze="True" />
          <Member Name="ForEachSignal(MathNet.Symbolics.Core.Signal,System.Predicate`1&lt;MathNet.Symbolics.Core.Signal&gt;,MathNet.Symbolics.Backend.Traversing.ActionContinue`1&lt;MathNet.Symbolics.Core.Signal&gt;,System.Boolean):System.Void" Analyze="True" />
          <Member Name="ForEachSignal(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Core.Signal&gt;,MathNet.Symbolics.Backend.Traversing.ActionContinue`1&lt;MathNet.Symbolics.Core.Signal&gt;,System.Boolean):System.Void" Analyze="True" />
          <Member Name="ForEachSignal(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Core.Signal&gt;,System.Predicate`1&lt;MathNet.Symbolics.Core.Signal&gt;,MathNet.Symbolics.Backend.Traversing.ActionContinue`1&lt;MathNet.Symbolics.Core.Signal&gt;,System.Boolean):System.Void" Analyze="True" />
          <Member Name="Manipulate(MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Backend.Traversing.EstimatePlan,MathNet.Symbolics.Backend.Traversing.ManipulatePort,MathNet.Symbolics.Backend.Traversing.ManipulateSignal,System.Boolean):MathNet.Symbolics.Core.Signal" Analyze="True" />
          <Member Name="Manipulate(MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Backend.Traversing.IManipulationVisitor,System.Boolean):MathNet.Symbolics.Core.Signal" Analyze="True" />
          <Member Name="Manipulate(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Core.Signal&gt;,MathNet.Symbolics.Backend.Traversing.EstimatePlan,MathNet.Symbolics.Backend.Traversing.ManipulatePort,MathNet.Symbolics.Backend.Traversing.ManipulateSignal,System.Boolean):MathNet.Symbolics.Backend.Containers.SignalSet" Analyze="True" />
          <Member Name="Manipulate(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Core.Signal&gt;,MathNet.Symbolics.Backend.Traversing.IManipulationVisitor,System.Boolean):MathNet.Symbolics.Backend.Containers.SignalSet" Analyze="True" />
          <Member Name="MatchAll(MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Port,MathNet.Symbolics.Backend.Patterns.CoalescedTreeNode):MathNet.Symbolics.Backend.Patterns.MatchCollection" Analyze="True" />
          <Member Name="MatchBest(MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Port,MathNet.Symbolics.Backend.Patterns.CoalescedTreeNode):MathNet.Symbolics.Backend.Patterns.Match" Analyze="True" />
          <Member Name="MatchFirst(MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Port,MathNet.Symbolics.Backend.Patterns.CoalescedTreeNode):MathNet.Symbolics.Backend.Patterns.Match" Analyze="True" />
          <Member Name="Substitute(MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Signal):MathNet.Symbolics.Core.Signal" Analyze="True" />
          <Member Name="Substitute(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Core.Signal&gt;,MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Signal):MathNet.Symbolics.Backend.Containers.SignalSet" Analyze="True" />
          <Member Name="Transform(MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Backend.Context,MathNet.Symbolics.Core.MathIdentifier,MathNet.Symbolics.Backend.Theorems.ConfigureTransformation,System.Boolean):MathNet.Symbolics.Core.Signal" Analyze="True" />
          <Member Name="Transform(MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Backend.Context,MathNet.Symbolics.Core.MathIdentifier,System.Boolean):MathNet.Symbolics.Core.Signal" Analyze="True" />
          <Member Name="Transform(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Core.Signal&gt;,MathNet.Symbolics.Backend.Context,MathNet.Symbolics.Core.MathIdentifier,MathNet.Symbolics.Backend.Theorems.ConfigureTransformation,System.Boolean):MathNet.Symbolics.Backend.Containers.SignalSet" Analyze="True" />
          <Member Name="Transform(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Core.Signal&gt;,MathNet.Symbolics.Backend.Context,MathNet.Symbolics.Core.MathIdentifier,System.Boolean):MathNet.Symbolics.Backend.Containers.SignalSet" Analyze="True" />
          <Member Name="Traverse(MathNet.Symbolics.Core.Port,MathNet.Symbolics.Backend.Traversing.ScanStrategy,MathNet.Symbolics.Backend.Traversing.IScanVisitor,System.Boolean):System.Void" Analyze="True" />
          <Member Name="Traverse(MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Backend.Traversing.ScanStrategy,MathNet.Symbolics.Backend.Traversing.IScanVisitor,System.Boolean):System.Void" Analyze="True" />
          <Member Name="Traverse(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Core.Signal&gt;,MathNet.Symbolics.Backend.Traversing.ScanStrategy,MathNet.Symbolics.Backend.Traversing.IScanVisitor,System.Boolean):System.Void" Analyze="True" />
          <Member Name="TrueForAllPorts(MathNet.Symbolics.Core.Port,System.Predicate`1&lt;MathNet.Symbolics.Core.Port&gt;,System.Boolean):System.Boolean" Analyze="True" />
          <Member Name="TrueForAllPorts(MathNet.Symbolics.Core.Port,System.Predicate`1&lt;MathNet.Symbolics.Core.Port&gt;,System.Boolean,MathNet.Symbolics.Core.Port&amp;,MathNet.Symbolics.Core.Signal&amp;):System.Boolean" Analyze="True" />
          <Member Name="TrueForAllPorts(MathNet.Symbolics.Core.Signal,System.Predicate`1&lt;MathNet.Symbolics.Core.Port&gt;,System.Boolean):System.Boolean" Analyze="True" />
          <Member Name="TrueForAllPorts(MathNet.Symbolics.Core.Signal,System.Predicate`1&lt;MathNet.Symbolics.Core.Port&gt;,System.Boolean,MathNet.Symbolics.Core.Port&amp;,MathNet.Symbolics.Core.Signal&amp;):System.Boolean" Analyze="True" />
          <Member Name="TrueForAllPorts(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Core.Signal&gt;,System.Predicate`1&lt;MathNet.Symbolics.Core.Port&gt;,System.Boolean):System.Boolean" Analyze="True" />
          <Member Name="TrueForAllPorts(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Core.Signal&gt;,System.Predicate`1&lt;MathNet.Symbolics.Core.Port&gt;,System.Boolean,MathNet.Symbolics.Core.Port&amp;,MathNet.Symbolics.Core.Signal&amp;):System.Boolean" Analyze="True" />
          <Member Name="TrueForAllSignals(MathNet.Symbolics.Core.Port,System.Predicate`1&lt;MathNet.Symbolics.Core.Signal&gt;,System.Boolean):System.Boolean" Analyze="True" />
          <Member Name="TrueForAllSignals(MathNet.Symbolics.Core.Port,System.Predicate`1&lt;MathNet.Symbolics.Core.Signal&gt;,System.Boolean,MathNet.Symbolics.Core.Signal&amp;,MathNet.Symbolics.Core.Port&amp;):System.Boolean" Analyze="True" />
          <Member Name="TrueForAllSignals(MathNet.Symbolics.Core.Signal,System.Predicate`1&lt;MathNet.Symbolics.Core.Signal&gt;,System.Boolean):System.Boolean" Analyze="True" />
          <Member Name="TrueForAllSignals(MathNet.Symbolics.Core.Signal,System.Predicate`1&lt;MathNet.Symbolics.Core.Signal&gt;,System.Boolean,MathNet.Symbolics.Core.Signal&amp;,MathNet.Symbolics.Core.Port&amp;):System.Boolean" Analyze="True" />
          <Member Name="TrueForAllSignals(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Core.Signal&gt;,System.Predicate`1&lt;MathNet.Symbolics.Core.Signal&gt;,System.Boolean):System.Boolean" Analyze="True" />
          <Member Name="TrueForAllSignals(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Core.Signal&gt;,System.Predicate`1&lt;MathNet.Symbolics.Core.Signal&gt;,System.Boolean,MathNet.Symbolics.Core.Signal&amp;,MathNet.Symbolics.Core.Port&amp;):System.Boolean" Analyze="True" />
          <Member Name="TryMatchBest(MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Port,MathNet.Symbolics.Backend.Patterns.CoalescedTreeNode,MathNet.Symbolics.Backend.Patterns.Match&amp;):System.Boolean" Analyze="True" />
          <Member Name="TryMatchFirst(MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Port,MathNet.Symbolics.Backend.Patterns.CoalescedTreeNode,MathNet.Symbolics.Backend.Patterns.Match&amp;):System.Boolean" Analyze="True" />
         </Members>
        </Type>
        <Type Name="Scanner+&lt;&gt;c__DisplayClass3" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="&lt;CreateSubstituteVisitor&gt;b__0(MathNet.Symbolics.Core.Port):MathNet.Symbolics.Backend.Traversing.ManipulationPlan" Analyze="True" />
          <Member Name="&lt;CreateSubstituteVisitor&gt;b__1(MathNet.Symbolics.Core.Port,MathNet.Symbolics.Backend.Containers.SignalSet,System.Boolean):System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Core.Signal&gt;" Analyze="True" />
          <Member Name="&lt;CreateSubstituteVisitor&gt;b__2(MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Signal,System.Boolean):MathNet.Symbolics.Core.Signal" Analyze="True" />
          <Member Name="replacement" Analyze="True" />
          <Member Name="subject" Analyze="True" />
         </Members>
        </Type>
       </Types>
      </Namespace>
     </Namespaces>
     <Resources>
      <Resource Name="MathNet.Symbolics.Properties.Resources.resources" Analyze="True" />
     </Resources>
    </Module>
   </Modules>
  </Target>
 </Targets>
 <Rules>
  <RuleFiles>
   <RuleFile Name="$(FxCopDir)\Rules\DesignRules.dll" Enabled="True">
    <Rule Name="AbstractTypesShouldNotHaveConstructors" Enabled="True" />
    <Rule Name="AssembliesShouldHaveValidStrongNames" Enabled="True" />
    <Rule Name="AvoidEmptyInterfaces" Enabled="True" />
    <Rule Name="AvoidExcessiveParametersOnGenericTypes" Enabled="True" />
    <Rule Name="AvoidNamespacesWithFewTypes" Enabled="True" />
    <Rule Name="AvoidOutParameters" Enabled="True" />
    <Rule Name="CollectionsShouldImplementGenericInterface" Enabled="True" />
    <Rule Name="ConsiderPassingBaseTypesAsParameters" Enabled="True" />
    <Rule Name="DeclareEventHandlersCorrectly" Enabled="True" />
    <Rule Name="DeclareTypesInNamespaces" Enabled="True" />
    <Rule Name="DefaultParametersShouldNotBeUsed" Enabled="True" />
    <Rule Name="DefineAccessorsForAttributeArguments" Enabled="True" />
    <Rule Name="DoNotCatchGeneralExceptionTypes" Enabled="True" />
    <Rule Name="DoNotDeclareProtectedMembersInSealedTypes" Enabled="True" />
    <Rule Name="DoNotDeclareStaticMembersOnGenericTypes" Enabled="True" />
    <Rule Name="DoNotDeclareVirtualMembersInSealedTypes" Enabled="True" />
    <Rule Name="DoNotDeclareVisibleInstanceFields" Enabled="True" />
    <Rule Name="DoNotExposeGenericLists" Enabled="True" />
    <Rule Name="DoNotHideBaseClassMethods" Enabled="True" />
    <Rule Name="DoNotNestGenericTypesInMemberSignatures" Enabled="True" />
    <Rule Name="DoNotOverloadOperatorEqualsOnReferenceTypes" Enabled="True" />
    <Rule Name="DoNotPassTypesByReference" Enabled="True" />
    <Rule Name="EnumeratorsShouldBeStronglyTyped" Enabled="True" />
    <Rule Name="EnumsShouldHaveZeroValue" Enabled="True" />
    <Rule Name="EnumStorageShouldBeInt32" Enabled="True" />
    <Rule Name="ExceptionsShouldBePublic" Enabled="True" />
    <Rule Name="GenericMethodsShouldProvideTypeParameter" Enabled="True" />
    <Rule Name="ICollectionImplementationsHaveStronglyTypedMembers" Enabled="True" />
    <Rule Name="ImplementIDisposableCorrectly" Enabled="True" />
    <Rule Name="ImplementStandardExceptionConstructors" Enabled="True" />
    <Rule Name="IndexersShouldNotBeMultidimensional" Enabled="True" />
    <Rule Name="InterfaceMethodsShouldBeCallableByChildTypes" Enabled="True" />
    <Rule Name="ListsAreStronglyTyped" Enabled="True" />
    <Rule Name="MarkAssembliesWithAssemblyVersion" Enabled="True" />
    <Rule Name="MarkAssembliesWithClsCompliant" Enabled="True" />
    <Rule Name="MarkAssembliesWithComVisible" Enabled="True" />
    <Rule Name="MarkAttributesWithAttributeUsage" Enabled="True" />
    <Rule Name="MarkEnumsWithFlags" Enabled="True" />
    <Rule Name="MembersShouldNotExposeCertainConcreteTypes" Enabled="True" />
    <Rule Name="MovePInvokesToNativeMethodsClass" Enabled="True" />
    <Rule Name="NestedTypesShouldNotBeVisible" Enabled="True" />
    <Rule Name="OverloadOperatorEqualsOnOverloadingAddAndSubtract" Enabled="True" />
    <Rule Name="OverrideMethodsOnComparableTypes" Enabled="True" />
    <Rule Name="PropertiesShouldNotBeWriteOnly" Enabled="True" />
    <Rule Name="ProvideObsoleteAttributeMessage" Enabled="True" />
    <Rule Name="ReplaceRepetitiveArgumentsWithParamsArray" Enabled="True" />
    <Rule Name="StaticHolderTypesShouldBeSealed" Enabled="True" />
    <Rule Name="StaticHolderTypesShouldNotHaveConstructors" Enabled="True" />
    <Rule Name="StringUriOverloadsCallSystemUriOverloads" Enabled="True" />
    <Rule Name="TypesShouldNotExtendCertainBaseTypes" Enabled="True" />
    <Rule Name="TypesThatOwnDisposableFieldsShouldBeDisposable" Enabled="True" />
    <Rule Name="TypesThatOwnNativeResourcesShouldBeDisposable" Enabled="True" />
    <Rule Name="UriParametersShouldNotBeStrings" Enabled="True" />
    <Rule Name="UriPropertiesShouldNotBeStrings" Enabled="True" />
    <Rule Name="UriReturnValuesShouldNotBeStrings" Enabled="True" />
    <Rule Name="UseEventsWhereAppropriate" Enabled="True" />
    <Rule Name="UseGenericEventHandlerInstances" Enabled="True" />
    <Rule Name="UseGenericsWhereAppropriate" Enabled="True" />
    <Rule Name="UseIntegralOrStringArgumentForIndexers" Enabled="True" />
    <Rule Name="UsePropertiesWhereAppropriate" Enabled="True" />
    <Rule Name="ValidateArgumentsOfPublicMethods" Enabled="True" />
   </RuleFile>
   <RuleFile Name="$(FxCopDir)\Rules\GlobalizationRules.dll" Enabled="True">
    <Rule Name="AvoidDuplicateAccelerators" Enabled="True" />
    <Rule Name="DoNotHardcodeLocaleSpecificStrings" Enabled="True" />
    <Rule Name="DoNotPassLiteralsAsLocalizedParameters" Enabled="True" />
    <Rule Name="SetLocaleForDataTypes" Enabled="True" />
    <Rule Name="SpecifyCultureInfo" Enabled="True" />
    <Rule Name="SpecifyIFormatProvider" Enabled="True" />
    <Rule Name="SpecifyMessageBoxOptions" Enabled="True" />
   </RuleFile>
   <RuleFile Name="$(FxCopDir)\Rules\InteroperabilityRules.dll" Enabled="True">
    <Rule Name="AutoLayoutTypesShouldNotBeComVisible" Enabled="True" />
    <Rule Name="AvoidInt64ArgumentsForVB6Clients" Enabled="True" />
    <Rule Name="AvoidNonpublicFieldsInComVisibleValueTypes" Enabled="True" />
    <Rule Name="AvoidOverloadsInComVisibleInterfaces" Enabled="True" />
    <Rule Name="AvoidStaticMembersInComVisibleTypes" Enabled="True" />
    <Rule Name="CallGetLastErrorImmediatelyAfterPInvoke" Enabled="True" />
    <Rule Name="ComRegistrationMethodsShouldBeMatched" Enabled="True" />
    <Rule Name="ComRegistrationMethodsShouldNotBeVisible" Enabled="True" />
    <Rule Name="ComVisibleTypeBaseTypesShouldBeComVisible" Enabled="True" />
    <Rule Name="ComVisibleTypesShouldBeCreatable" Enabled="True" />
    <Rule Name="DeclarePInvokesCorrectly" Enabled="True" />
    <Rule Name="DoNotUseAutoDualClassInterfaceType" Enabled="True" />
    <Rule Name="MarkBooleanPInvokeArgumentsWithMarshalAs" Enabled="True" />
    <Rule Name="MarkComSourceInterfacesAsIDispatch" Enabled="True" />
    <Rule Name="PInvokeEntryPointsShouldExist" Enabled="True" />
    <Rule Name="PInvokesShouldNotBeVisible" Enabled="True" />
   </RuleFile>
   <RuleFile Name="$(FxCopDir)\Rules\MobilityRules.dll" Enabled="True">
    <Rule Name="DoNotUseIdleProcessPriority" Enabled="True" />
    <Rule Name="DoNotUseTimersThatPreventPowerStateChanges" Enabled="True" />
   </RuleFile>
   <RuleFile Name="$(FxCopDir)\Rules\NamingRules.dll" Enabled="True">
    <Rule Name="AvoidLanguageSpecificTypeNamesInParameters" Enabled="True" />
    <Rule Name="AvoidTypeNamesInParameters" Enabled="True" />
    <Rule Name="CompoundWordsShouldBeCasedCorrectly" Enabled="True" />
    <Rule Name="DoNotNameEnumValuesReserved" Enabled="True" />
    <Rule Name="DoNotPrefixEnumValuesWithTypeName" Enabled="True" />
    <Rule Name="EventsShouldNotHaveBeforeOrAfterPrefix" Enabled="True" />
    <Rule Name="FlagsEnumsShouldHavePluralNames" Enabled="True" />
    <Rule Name="IdentifiersShouldBeCasedCorrectly" Enabled="True" />
    <Rule Name="IdentifiersShouldBeSpelledCorrectly" Enabled="True" />
    <Rule Name="IdentifiersShouldDifferByMoreThanCase" Enabled="True" />
    <Rule Name="IdentifiersShouldHaveCorrectPrefix" Enabled="True" />
    <Rule Name="IdentifiersShouldHaveCorrectSuffix" Enabled="True" />
    <Rule Name="IdentifiersShouldNotContainUnderscores" Enabled="True" />
    <Rule Name="IdentifiersShouldNotHaveIncorrectPrefix" Enabled="True" />
    <Rule Name="IdentifiersShouldNotHaveIncorrectSuffix" Enabled="True" />
    <Rule Name="IdentifiersShouldNotMatchKeywords" Enabled="True" />
    <Rule Name="LongAcronymsShouldBePascalCased" Enabled="True" />
    <Rule Name="OnlyFlagsEnumsShouldHavePluralNames" Enabled="True" />
    <Rule Name="ParameterNamesShouldMatchBaseDeclaration" Enabled="True" />
    <Rule Name="ParameterNamesShouldNotMatchMemberNames" Enabled="True" />
    <Rule Name="PropertyNamesShouldNotMatchGetMethods" Enabled="True" />
    <Rule Name="ResourceStringCompoundWordsShouldBeCasedCorrectly" Enabled="True" />
    <Rule Name="ResourceStringsShouldBeSpelledCorrectly" Enabled="True" />
    <Rule Name="ShortAcronymsShouldBeUppercase" Enabled="True" />
    <Rule Name="TypeNamesShouldNotMatchNamespaces" Enabled="True" />
    <Rule Name="UsePreferredTerms" Enabled="True" />
   </RuleFile>
   <RuleFile Name="$(FxCopDir)\Rules\PerformanceRules.dll" Enabled="True">
    <Rule Name="AvoidExcessiveLocals" Enabled="True" />
    <Rule Name="AvoidUncalledPrivateCode" Enabled="True" />
    <Rule Name="AvoidUninstantiatedInternalClasses" Enabled="True" />
    <Rule Name="AvoidUnnecessaryStringCreation" Enabled="True" />
    <Rule Name="AvoidUnsealedAttributes" Enabled="True" />
    <Rule Name="AvoidUnusedPrivateFields" Enabled="True" />
    <Rule Name="DisposeMethodsShouldCallSuppressFinalize" Enabled="True" />
    <Rule Name="DoNotCallPropertiesThatCloneValuesInLoops" Enabled="True" />
    <Rule Name="DoNotCastUnnecessarily" Enabled="True" />
    <Rule Name="DoNotConcatenateStringsInsideLoops" Enabled="True" />
    <Rule Name="DoNotInitializeUnnecessarily" Enabled="True" />
    <Rule Name="InitializeReferenceTypeStaticFieldsInline" Enabled="True" />
    <Rule Name="MarkMembersAsStatic" Enabled="True" />
    <Rule Name="OverrideEqualsAndOperatorEqualsOnValueTypes" Enabled="True" />
    <Rule Name="PreferJaggedArraysOverMultidimensional" Enabled="True" />
    <Rule Name="PropertiesShouldNotReturnArrays" Enabled="True" />
    <Rule Name="RemoveEmptyFinalizers" Enabled="True" />
    <Rule Name="RemoveUnusedLocals" Enabled="True" />
    <Rule Name="TestForEmptyStringsUsingStringLength" Enabled="True" />
    <Rule Name="UseLiteralsWhereAppropriate" Enabled="True" />
   </RuleFile>
   <RuleFile Name="$(FxCopDir)\Rules\PortabilityRules.dll" Enabled="True">
    <Rule Name="PInvokeDeclarationsShouldBePortable" Enabled="True" />
    <Rule Name="ValueTypeFieldsShouldBePortable" Enabled="True" />
   </RuleFile>
   <RuleFile Name="$(FxCopDir)\Rules\SecurityRules.dll" Enabled="True">
    <Rule Name="AptcaMethodsShouldOnlyCallAptcaMethods" Enabled="True" />
    <Rule Name="AptcaTypesShouldOnlyExtendAptcaBaseTypes" Enabled="True" />
    <Rule Name="ArrayFieldsShouldNotBeReadOnly" Enabled="True" />
    <Rule Name="CallGCKeepAliveWhenUsingNativeResources" Enabled="True" />
    <Rule Name="CatchNonClsCompliantExceptionsInGeneralHandlers" Enabled="True" />
    <Rule Name="DoNotDeclareReadOnlyMutableReferenceTypes" Enabled="True" />
    <Rule Name="DoNotIndirectlyExposeMethodsWithLinkDemands" Enabled="True" />
    <Rule Name="MethodSecurityShouldBeASupersetOfType" Enabled="True" />
    <Rule Name="OverrideLinkDemandsShouldBeIdenticalToBase" Enabled="True" />
    <Rule Name="PointersShouldNotBeVisible" Enabled="True" />
    <Rule Name="ReviewDeclarativeSecurityOnValueTypes" Enabled="True" />
    <Rule Name="ReviewDenyAndPermitOnlyUsage" Enabled="True" />
    <Rule Name="ReviewImperativeSecurity" Enabled="True" />
    <Rule Name="ReviewSqlQueriesForSecurityVulnerabilities" Enabled="True" />
    <Rule Name="ReviewSuppressUnmanagedCodeSecurityUsage" Enabled="True" />
    <Rule Name="ReviewVisibleEventHandlers" Enabled="True" />
    <Rule Name="SealMethodsThatSatisfyPrivateInterfaces" Enabled="True" />
    <Rule Name="SecureAsserts" Enabled="True" />
    <Rule Name="SecuredTypesShouldNotExposeFields" Enabled="True" />
    <Rule Name="SecureGetObjectDataOverrides" Enabled="True" />
    <Rule Name="SecureSerializationConstructors" Enabled="True" />
    <Rule Name="SecurityTransparentAssembliesShouldNotContainSecurityCriticalCode" Enabled="True" />
    <Rule Name="SecurityTransparentCodeShouldNotAssert" Enabled="True" />
    <Rule Name="SecurityTransparentCodeShouldNotReferenceNonpublicSecurityCriticalCode" Enabled="True" />
    <Rule Name="SpecifyMarshalingForPInvokeStringArguments" Enabled="True" />
    <Rule Name="StaticConstructorsShouldBePrivate" Enabled="True" />
    <Rule Name="TypeLinkDemandsRequireInheritanceDemands" Enabled="True" />
    <Rule Name="WrapVulnerableFinallyClausesInOuterTry" Enabled="True" />
   </RuleFile>
   <RuleFile Name="$(FxCopDir)\Rules\UsageRules.dll" Enabled="True">
    <Rule Name="AssembliesShouldDeclareMinimumSecurity" Enabled="True" />
    <Rule Name="AttributeStringLiteralsShouldParseCorrectly" Enabled="True" />
    <Rule Name="CallBaseClassMethodsOnISerializableTypes" Enabled="True" />
    <Rule Name="CollectionPropertiesShouldBeReadOnly" Enabled="True" />
    <Rule Name="DisposableFieldsShouldBeDisposed" Enabled="True" />
    <Rule Name="DisposableTypesShouldDeclareFinalizer" Enabled="True" />
    <Rule Name="DisposeMethodsShouldCallBaseClassDispose" Enabled="True" />
    <Rule Name="DoNotCallOverridableMethodsInConstructors" Enabled="True" />
    <Rule Name="DoNotDecreaseInheritedMemberVisibility" Enabled="True" />
    <Rule Name="DoNotDisposeObjectsMultipleTimes" Enabled="True" />
    <Rule Name="DoNotIgnoreMethodResults" Enabled="True" />
    <Rule Name="DoNotMarkEnumsWithFlags" Enabled="True" />
    <Rule Name="DoNotMarkServicedComponentsWithWebMethod" Enabled="True" />
    <Rule Name="DoNotRaiseExceptionsInFilterBlocks" Enabled="True" />
    <Rule Name="DoNotRaiseReservedExceptionTypes" Enabled="True" />
    <Rule Name="DoNotShipUnreleasedResourceFormats" Enabled="True" />
    <Rule Name="FinalizersShouldBeProtected" Enabled="True" />
    <Rule Name="FinalizersShouldCallBaseClassFinalizer" Enabled="True" />
    <Rule Name="ImplementISerializableCorrectly" Enabled="True" />
    <Rule Name="ImplementSerializationConstructors" Enabled="True" />
    <Rule Name="ImplementSerializationMethodsCorrectly" Enabled="True" />
    <Rule Name="InitializeValueTypeStaticFieldsInline" Enabled="True" />
    <Rule Name="InstantiateArgumentExceptionsCorrectly" Enabled="True" />
    <Rule Name="LiteralsShouldBeSpelledCorrectly" Enabled="True" />
    <Rule Name="MarkAllNonSerializableFields" Enabled="True" />
    <Rule Name="MarkISerializableTypesWithSerializable" Enabled="True" />
    <Rule Name="MarkWindowsFormsEntryPointsWithStaThread" Enabled="True" />
    <Rule Name="MembersShouldDifferByMoreThanReturnType" Enabled="True" />
    <Rule Name="NonConstantFieldsShouldNotBeVisible" Enabled="True" />
    <Rule Name="OperationsShouldNotOverflow" Enabled="True" />
    <Rule Name="OperatorOverloadsHaveNamedAlternates" Enabled="True" />
    <Rule Name="OperatorsShouldHaveSymmetricalOverloads" Enabled="True" />
    <Rule Name="OverloadOperatorEqualsOnOverridingValueTypeEquals" Enabled="True" />
    <Rule Name="OverrideEqualsOnOverloadingOperatorEquals" Enabled="True" />
    <Rule Name="OverrideGetHashCodeOnOverridingEquals" Enabled="True" />
    <Rule Name="PassSystemUriObjectsInsteadOfStrings" Enabled="True" />
    <Rule Name="ProvideCorrectArgumentsToFormattingMethods" Enabled="True" />
    <Rule Name="ProvideDeserializationMethodsForOptionalFields" Enabled="True" />
    <Rule Name="RethrowToPreserveStackDetails" Enabled="True" />
    <Rule Name="ReviewUnusedParameters" Enabled="True" />
    <Rule Name="TestForNaNCorrectly" Enabled="True" />
    <Rule Name="UseManagedEquivalentsOfWin32Api" Enabled="True" />
    <Rule Name="UseParamsForVariableArguments" Enabled="True" />
   </RuleFile>
  </RuleFiles>
  <Groups />
  <Settings />
 </Rules>
 <FxCopReport Version="1.35">
  <Namespaces>
   <Namespace Name="MathNet.Symbolics.Backend">
    <Messages>
     <Message TypeName="AvoidNamespacesWithFewTypes" Category="Microsoft.Design" CheckId="CA1020" Created="2006-08-05 09:39:03Z">
      <Issue>
       <Item>MathNet.Symbolics.Backend</Item>
      </Issue>
     </Message>
    </Messages>
   </Namespace>
   <Namespace Name="MathNet.Symbolics.Backend.ValueConversion">
    <Messages>
     <Message TypeName="AvoidNamespacesWithFewTypes" Category="Microsoft.Design" CheckId="CA1020" Created="2006-08-05 09:39:03Z">
      <Issue>
       <Item>MathNet.Symbolics.Backend.ValueConversion</Item>
      </Issue>
     </Message>
    </Messages>
   </Namespace>
   <Namespace Name="MathNet.Symbolics.StdPackage.Algebra">
    <Messages>
     <Message TypeName="AvoidNamespacesWithFewTypes" Category="Microsoft.Design" CheckId="CA1020" Created="2006-08-05 09:39:03Z">
      <Issue>
       <Item>MathNet.Symbolics.StdPackage.Algebra</Item>
      </Issue>
     </Message>
    </Messages>
   </Namespace>
   <Namespace Name="MathNet.Symbolics.StdPackage.Analysis">
    <Messages>
     <Message TypeName="AvoidNamespacesWithFewTypes" Category="Microsoft.Design" CheckId="CA1020" Created="2006-08-05 09:39:03Z">
      <Issue>
       <Item>MathNet.Symbolics.StdPackage.Analysis</Item>
      </Issue>
     </Message>
    </Messages>
   </Namespace>
   <Namespace Name="MathNet.Symbolics.StdPackage.Flow">
    <Messages>
     <Message TypeName="AvoidNamespacesWithFewTypes" Category="Microsoft.Design" CheckId="CA1020" Created="2006-08-05 09:39:03Z">
      <Issue>
       <Item>MathNet.Symbolics.StdPackage.Flow</Item>
      </Issue>
     </Message>
    </Messages>
   </Namespace>
   <Namespace Name="MathNet.Symbolics.StdPackage.TimeCurves">
    <Messages>
     <Message TypeName="AvoidNamespacesWithFewTypes" Category="Microsoft.Design" CheckId="CA1020" Created="2006-08-05 09:39:03Z">
      <Issue>
       <Item>MathNet.Symbolics.StdPackage.TimeCurves</Item>
      </Issue>
     </Message>
    </Messages>
   </Namespace>
  </Namespaces>
  <Targets>
   <Target Name="$(ProjectDir)/src/app/MathNet.Yttrium/Library/bin/Debug/MathNet.Yttrium.dll">
    <Modules>
     <Module Name="mathnet.yttrium.dll">
      <Messages>
       <Message TypeName="AssembliesShouldHaveValidStrongNames" Category="Microsoft.Design" CheckId="CA2210" Created="2006-08-05 09:39:03Z">
        <Issue Name="NoStrongName">
         <Item>MathNet.Yttrium</Item>
        </Issue>
       </Message>
      </Messages>
      <Namespaces>
       <Namespace Name="MathNet.Symbolics.Backend">
        <Types>
         <Type Name="Context">
          <Members>
           <Member Name="GenerateInstanceId():System.Guid">
            <Messages>
             <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Created="2006-08-05 09:39:03Z" FixCategory="Breaking">
              <Issue>
               <Item>Context.GenerateInstanceId():Guid</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="EncapsulationFormat">
          <Messages>
           <Message TypeName="OverrideEqualsAndOperatorEqualsOnValueTypes" Category="Microsoft.Performance" CheckId="CA1815" Created="2006-08-05 09:39:03Z">
            <Issue Name="Equals">
             <Item>MathNet.Symbolics.Backend.EncapsulationFormat</Item>
            </Issue>
            <Issue Name="op_Equality">
             <Item>MathNet.Symbolics.Backend.EncapsulationFormat</Item>
            </Issue>
           </Message>
          </Messages>
         </Type>
         <Type Name="Library">
          <Members>
           <Member Name="LoadAssembly(System.Reflection.Assembly):System.Void">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'assembly'</Item>
               <Item>Library.LoadAssembly(Assembly):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="LoadAssemblyManual(System.Reflection.Assembly):System.Void">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'assembly'</Item>
               <Item>Library.LoadAssemblyManual(Assembly):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
        </Types>
       </Namespace>
       <Namespace Name="MathNet.Symbolics.Backend.Channels">
        <Types>
         <Type Name="CommandReference">
          <Messages>
           <Message TypeName="OverrideEqualsAndOperatorEqualsOnValueTypes" Category="Microsoft.Performance" CheckId="CA1815" Created="2006-08-05 09:39:03Z">
            <Issue Name="Equals">
             <Item>MathNet.Symbolics.Backend.Channels.CommandReference</Item>
            </Issue>
            <Issue Name="op_Equality">
             <Item>MathNet.Symbolics.Backend.Channels.CommandReference</Item>
            </Issue>
           </Message>
          </Messages>
          <Members>
           <Member Name="Deserialize(System.String,System.Runtime.Serialization.SerializationInfo):MathNet.Symbolics.Backend.Channels.CommandReference">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'info'</Item>
               <Item>CommandReference.Deserialize(String, SerializationInfo):CommandReference</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Deserialize(System.String,System.Xml.XmlReader):MathNet.Symbolics.Backend.Channels.CommandReference">
            <Messages>
             <Message Id="System.Int32.Parse(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>CommandReference.Deserialize(String, XmlReader):CommandReference</Item>
               <Item>System.Int32.Parse(System.String)</Item>
               <Item>System.Int32.Parse(System.String,System.IFormatProvider)</Item>
              </Issue>
             </Message>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'reader'</Item>
               <Item>CommandReference.Deserialize(String, XmlReader):CommandReference</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Index">
            <Messages>
             <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>Index</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="InstanceId">
            <Messages>
             <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>InstanceId</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Serialize(System.String,System.Runtime.Serialization.SerializationInfo):System.Void">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'info'</Item>
               <Item>CommandReference.Serialize(String, SerializationInfo):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Serialize(System.String,System.Xml.XmlWriter):System.Void">
            <Messages>
             <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>CommandReference.Serialize(String, XmlWriter):Void</Item>
               <Item>System.Int32.ToString</Item>
               <Item>System.Int32.ToString(System.IFormatProvider)</Item>
              </Issue>
             </Message>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'writer'</Item>
               <Item>CommandReference.Serialize(String, XmlWriter):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="LogObserver">
          <Members>
           <Member Name="AttachedToSystem(MathNet.Symbolics.Workplace.MathSystem):System.Void">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'system'</Item>
               <Item>LogObserver.AttachedToSystem(MathSystem):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="OnBusAdded(MathNet.Symbolics.Core.Bus,System.Int32):System.Void">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'bus'</Item>
               <Item>LogObserver.OnBusAdded(Bus, Int32):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="OnBusAttachedToPort(MathNet.Symbolics.Core.Bus,MathNet.Symbolics.Core.Port,System.Int32):System.Void">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'bus'</Item>
               <Item>LogObserver.OnBusAttachedToPort(Bus, Port, Int32):Void</Item>
              </Issue>
              <Issue>
               <Item>'port'</Item>
               <Item>LogObserver.OnBusAttachedToPort(Bus, Port, Int32):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="OnBusAttachedToPortNoLonger(MathNet.Symbolics.Core.Bus,MathNet.Symbolics.Core.Port,System.Int32):System.Void">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'bus'</Item>
               <Item>LogObserver.OnBusAttachedToPortNoLonger(Bus, Port, Int32):Void</Item>
              </Issue>
              <Issue>
               <Item>'port'</Item>
               <Item>LogObserver.OnBusAttachedToPortNoLonger(Bus, Port, Int32):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="OnBusRemoved(MathNet.Symbolics.Core.Bus,System.Int32):System.Void">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'bus'</Item>
               <Item>LogObserver.OnBusRemoved(Bus, Int32):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="OnInputAdded(MathNet.Symbolics.Core.Signal,System.Int32):System.Void">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'signal'</Item>
               <Item>LogObserver.OnInputAdded(Signal, Int32):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="OnInputRemoved(MathNet.Symbolics.Core.Signal,System.Int32):System.Void">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'signal'</Item>
               <Item>LogObserver.OnInputRemoved(Signal, Int32):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="OnOutputAdded(MathNet.Symbolics.Core.Signal,System.Int32):System.Void">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'signal'</Item>
               <Item>LogObserver.OnOutputAdded(Signal, Int32):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="OnOutputRemoved(MathNet.Symbolics.Core.Signal,System.Int32):System.Void">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'signal'</Item>
               <Item>LogObserver.OnOutputRemoved(Signal, Int32):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="OnPortAdded(MathNet.Symbolics.Core.Port,System.Int32):System.Void">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'port'</Item>
               <Item>LogObserver.OnPortAdded(Port, Int32):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="OnPortDrivesSignal(MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Port,System.Int32):System.Void">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'port'</Item>
               <Item>LogObserver.OnPortDrivesSignal(Signal, Port, Int32):Void</Item>
              </Issue>
              <Issue>
               <Item>'signal'</Item>
               <Item>LogObserver.OnPortDrivesSignal(Signal, Port, Int32):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="OnPortDrivesSignalNoLonger(MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Port,System.Int32):System.Void">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'port'</Item>
               <Item>LogObserver.OnPortDrivesSignalNoLonger(Signal, Port, Int32):Void</Item>
              </Issue>
              <Issue>
               <Item>'signal'</Item>
               <Item>LogObserver.OnPortDrivesSignalNoLonger(Signal, Port, Int32):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="OnPortRemoved(MathNet.Symbolics.Core.Port,System.Int32):System.Void">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'port'</Item>
               <Item>LogObserver.OnPortRemoved(Port, Int32):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="OnSignalAdded(MathNet.Symbolics.Core.Signal,System.Int32):System.Void">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'signal'</Item>
               <Item>LogObserver.OnSignalAdded(Signal, Int32):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="OnSignalDrivesPort(MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Port,System.Int32):System.Void">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'port'</Item>
               <Item>LogObserver.OnSignalDrivesPort(Signal, Port, Int32):Void</Item>
              </Issue>
              <Issue>
               <Item>'signal'</Item>
               <Item>LogObserver.OnSignalDrivesPort(Signal, Port, Int32):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="OnSignalDrivesPortNoLonger(MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Port,System.Int32):System.Void">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'port'</Item>
               <Item>LogObserver.OnSignalDrivesPortNoLonger(Signal, Port, Int32):Void</Item>
              </Issue>
              <Issue>
               <Item>'signal'</Item>
               <Item>LogObserver.OnSignalDrivesPortNoLonger(Signal, Port, Int32):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="OnSignalRemoved(MathNet.Symbolics.Core.Signal,System.Int32):System.Void">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'signal'</Item>
               <Item>LogObserver.OnSignalRemoved(Signal, Int32):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
        </Types>
       </Namespace>
       <Namespace Name="MathNet.Symbolics.Backend.Channels.Commands">
        <Types>
         <Type Name="AbstractBusCommand">
          <Members>
           <Member Name="ReadXml(System.Xml.XmlReader):System.Void">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'reader'</Item>
               <Item>AbstractBusCommand.ReadXml(XmlReader):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="WriteXml(System.Xml.XmlWriter):System.Void">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'writer'</Item>
               <Item>AbstractBusCommand.WriteXml(XmlWriter):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="AbstractNewCommand">
          <Members>
           <Member Name="ReadXml(System.Xml.XmlReader):System.Void">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'reader'</Item>
               <Item>AbstractNewCommand.ReadXml(XmlReader):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="WriteXml(System.Xml.XmlWriter):System.Void">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'writer'</Item>
               <Item>AbstractNewCommand.WriteXml(XmlWriter):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="AbstractPortBusCommand">
          <Members>
           <Member Name="ReadXml(System.Xml.XmlReader):System.Void">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'reader'</Item>
               <Item>AbstractPortBusCommand.ReadXml(XmlReader):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="WriteXml(System.Xml.XmlWriter):System.Void">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'writer'</Item>
               <Item>AbstractPortBusCommand.WriteXml(XmlWriter):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="AbstractPortBusIndexCommand">
          <Members>
           <Member Name=".ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'info'</Item>
               <Item>AbstractPortBusIndexCommand.AbstractPortBusIndexCommand(SerializationInfo, StreamingContext)</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext):System.Void">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'info'</Item>
               <Item>AbstractPortBusIndexCommand.GetObjectData(SerializationInfo, StreamingContext):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="ReadXml(System.Xml.XmlReader):System.Void">
            <Messages>
             <Message Id="System.Int32.Parse(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>AbstractPortBusIndexCommand.ReadXml(XmlReader):Void</Item>
               <Item>System.Int32.Parse(System.String)</Item>
               <Item>System.Int32.Parse(System.String,System.IFormatProvider)</Item>
              </Issue>
             </Message>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'reader'</Item>
               <Item>AbstractPortBusIndexCommand.ReadXml(XmlReader):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="WriteXml(System.Xml.XmlWriter):System.Void">
            <Messages>
             <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>AbstractPortBusIndexCommand.WriteXml(XmlWriter):Void</Item>
               <Item>System.Int32.ToString</Item>
               <Item>System.Int32.ToString(System.IFormatProvider)</Item>
              </Issue>
             </Message>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'writer'</Item>
               <Item>AbstractPortBusIndexCommand.WriteXml(XmlWriter):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="AbstractPortCommand">
          <Members>
           <Member Name="ReadXml(System.Xml.XmlReader):System.Void">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'reader'</Item>
               <Item>AbstractPortCommand.ReadXml(XmlReader):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="WriteXml(System.Xml.XmlWriter):System.Void">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'writer'</Item>
               <Item>AbstractPortCommand.WriteXml(XmlWriter):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="AbstractPortIndexCommand">
          <Members>
           <Member Name=".ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'info'</Item>
               <Item>AbstractPortIndexCommand.AbstractPortIndexCommand(SerializationInfo, StreamingContext)</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext):System.Void">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'info'</Item>
               <Item>AbstractPortIndexCommand.GetObjectData(SerializationInfo, StreamingContext):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="ReadXml(System.Xml.XmlReader):System.Void">
            <Messages>
             <Message Id="System.Int32.Parse(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>AbstractPortIndexCommand.ReadXml(XmlReader):Void</Item>
               <Item>System.Int32.Parse(System.String)</Item>
               <Item>System.Int32.Parse(System.String,System.IFormatProvider)</Item>
              </Issue>
             </Message>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'reader'</Item>
               <Item>AbstractPortIndexCommand.ReadXml(XmlReader):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="WriteXml(System.Xml.XmlWriter):System.Void">
            <Messages>
             <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>AbstractPortIndexCommand.WriteXml(XmlWriter):Void</Item>
               <Item>System.Int32.ToString</Item>
               <Item>System.Int32.ToString(System.IFormatProvider)</Item>
              </Issue>
             </Message>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'writer'</Item>
               <Item>AbstractPortIndexCommand.WriteXml(XmlWriter):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="AbstractPortSignalCommand">
          <Members>
           <Member Name="ReadXml(System.Xml.XmlReader):System.Void">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'reader'</Item>
               <Item>AbstractPortSignalCommand.ReadXml(XmlReader):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="WriteXml(System.Xml.XmlWriter):System.Void">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'writer'</Item>
               <Item>AbstractPortSignalCommand.WriteXml(XmlWriter):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="AbstractPortSignalIndexCommand">
          <Members>
           <Member Name=".ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'info'</Item>
               <Item>AbstractPortSignalIndexCommand.AbstractPortSignalIndexCommand(SerializationInfo, StreamingContext)</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext):System.Void">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'info'</Item>
               <Item>AbstractPortSignalIndexCommand.GetObjectData(SerializationInfo, StreamingContext):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="ReadXml(System.Xml.XmlReader):System.Void">
            <Messages>
             <Message Id="System.Int32.Parse(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>AbstractPortSignalIndexCommand.ReadXml(XmlReader):Void</Item>
               <Item>System.Int32.Parse(System.String)</Item>
               <Item>System.Int32.Parse(System.String,System.IFormatProvider)</Item>
              </Issue>
             </Message>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'reader'</Item>
               <Item>AbstractPortSignalIndexCommand.ReadXml(XmlReader):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="WriteXml(System.Xml.XmlWriter):System.Void">
            <Messages>
             <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>AbstractPortSignalIndexCommand.WriteXml(XmlWriter):Void</Item>
               <Item>System.Int32.ToString</Item>
               <Item>System.Int32.ToString(System.IFormatProvider)</Item>
              </Issue>
             </Message>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'writer'</Item>
               <Item>AbstractPortSignalIndexCommand.WriteXml(XmlWriter):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="AbstractSignalCommand">
          <Members>
           <Member Name="ReadXml(System.Xml.XmlReader):System.Void">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'reader'</Item>
               <Item>AbstractSignalCommand.ReadXml(XmlReader):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="WriteXml(System.Xml.XmlWriter):System.Void">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'writer'</Item>
               <Item>AbstractSignalCommand.WriteXml(XmlWriter):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="CommandBase">
          <Members>
           <Member Name="GetSchema():System.Xml.Schema.XmlSchema">
            <Messages>
             <Message TypeName="UsePropertiesWhereAppropriate" Category="Microsoft.Design" CheckId="CA1024" Created="2006-08-05 09:39:03Z">
              <Issue Certainty="50">
               <Item>GetSchema</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="LazyVerify(System.Guid,System.Guid):System.Void">
            <Messages>
             <Message Id="MathNet.Symbolics.Backend.Exceptions.CommandException.#ctor(System.String)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>CommandBase.LazyVerify(Guid, Guid):Void</Item>
               <Item>1</Item>
               <Item>CommandException.CommandException(String)</Item>
               <Item>Command Failed: InstanceId mismatch.</Item>
              </Issue>
             </Message>
             <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Created="2006-08-05 09:39:03Z" FixCategory="Breaking">
              <Issue>
               <Item>CommandBase.LazyVerify(Guid, Guid):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="NewPortCommand">
          <Members>
           <Member Name=".ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'info'</Item>
               <Item>NewPortCommand.NewPortCommand(SerializationInfo, StreamingContext)</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext):System.Void">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'info'</Item>
               <Item>NewPortCommand.GetObjectData(SerializationInfo, StreamingContext):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="ReadXml(System.Xml.XmlReader):System.Void">
            <Messages>
             <Message Id="System.Int32.Parse(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>NewPortCommand.ReadXml(XmlReader):Void</Item>
               <Item>System.Int32.Parse(System.String)</Item>
               <Item>System.Int32.Parse(System.String,System.IFormatProvider)</Item>
              </Issue>
              <Issue>
               <Item>NewPortCommand.ReadXml(XmlReader):Void</Item>
               <Item>System.Int32.Parse(System.String)</Item>
               <Item>System.Int32.Parse(System.String,System.IFormatProvider)</Item>
              </Issue>
             </Message>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'reader'</Item>
               <Item>NewPortCommand.ReadXml(XmlReader):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="WriteXml(System.Xml.XmlWriter):System.Void">
            <Messages>
             <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>NewPortCommand.WriteXml(XmlWriter):Void</Item>
               <Item>System.Int32.ToString</Item>
               <Item>System.Int32.ToString(System.IFormatProvider)</Item>
              </Issue>
              <Issue>
               <Item>NewPortCommand.WriteXml(XmlWriter):Void</Item>
               <Item>System.Int32.ToString</Item>
               <Item>System.Int32.ToString(System.IFormatProvider)</Item>
              </Issue>
             </Message>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'writer'</Item>
               <Item>NewPortCommand.WriteXml(XmlWriter):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="RemovePortCommand">
          <Members>
           <Member Name=".ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'info'</Item>
               <Item>RemovePortCommand.RemovePortCommand(SerializationInfo, StreamingContext)</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext):System.Void">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'info'</Item>
               <Item>RemovePortCommand.GetObjectData(SerializationInfo, StreamingContext):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="ReadXml(System.Xml.XmlReader):System.Void">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'reader'</Item>
               <Item>RemovePortCommand.ReadXml(XmlReader):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="WriteXml(System.Xml.XmlWriter):System.Void">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'writer'</Item>
               <Item>RemovePortCommand.WriteXml(XmlWriter):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="RemoveSignalCommand">
          <Members>
           <Member Name=".ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'info'</Item>
               <Item>RemoveSignalCommand.RemoveSignalCommand(SerializationInfo, StreamingContext)</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext):System.Void">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'info'</Item>
               <Item>RemoveSignalCommand.GetObjectData(SerializationInfo, StreamingContext):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="ReadXml(System.Xml.XmlReader):System.Void">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'reader'</Item>
               <Item>RemoveSignalCommand.ReadXml(XmlReader):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="WriteXml(System.Xml.XmlWriter):System.Void">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'writer'</Item>
               <Item>RemoveSignalCommand.WriteXml(XmlWriter):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
        </Types>
       </Namespace>
       <Namespace Name="MathNet.Symbolics.Backend.Containers">
        <Types>
         <Type Name="ArchitectureTable">
          <Members>
           <Member Name="AddArchitectureBuilder(MathNet.Symbolics.Core.Entity,MathNet.Symbolics.Core.IArchitectureFactory):System.Void">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'entity'</Item>
               <Item>ArchitectureTable.AddArchitectureBuilder(Entity, IArchitectureFactory):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="ContainsEntity(MathNet.Symbolics.Core.Entity):System.Boolean">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'entity'</Item>
               <Item>ArchitectureTable.ContainsEntity(Entity):Boolean</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="BusSet">
          <Messages>
           <Message TypeName="IdentifiersShouldHaveCorrectSuffix" Category="Microsoft.Naming" CheckId="CA1710" Created="2006-08-05 09:39:03Z">
            <Issue>
             <Item>MathNet.Symbolics.Backend.Containers.BusSet</Item>
             <Item>Collection</Item>
            </Issue>
           </Message>
          </Messages>
         </Type>
         <Type Name="EntityTable">
          <Messages>
           <Message TypeName="IdentifiersShouldHaveCorrectSuffix" Category="Microsoft.Naming" CheckId="CA1710" Created="2006-08-05 09:39:03Z">
            <Issue>
             <Item>MathNet.Symbolics.Backend.Containers.EntityTable</Item>
             <Item>Dictionary</Item>
            </Issue>
           </Message>
           <Message TypeName="MarkISerializableTypesWithSerializable" Category="Microsoft.Usage" CheckId="CA2237" Created="2006-08-05 09:39:03Z">
            <Issue Certainty="75" Level="Warning">
             <Item>EntityTable</Item>
            </Issue>
           </Message>
          </Messages>
          <Members>
           <Member Name="Add(MathNet.Symbolics.Core.Entity):System.Void">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'value'</Item>
               <Item>EntityTable.Add(Entity):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Add(MathNet.Symbolics.Core.MathIdentifier,MathNet.Symbolics.Core.Entity):System.Void">
            <Messages>
             <Message Id="0#" TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>id</Item>
               <Item>EntityTable.Add(MathIdentifier, Entity):Void</Item>
               <Item />
               <Item>IdentifierDictionary`1&lt;MathNet.Symbolics.Core.Entity&gt;.Add(MathIdentifier, Entity):Void</Item>
              </Issue>
             </Message>
             <Message Id="1#" TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>value</Item>
               <Item>EntityTable.Add(MathIdentifier, Entity):Void</Item>
               <Item />
               <Item>IdentifierDictionary`1&lt;MathNet.Symbolics.Core.Entity&gt;.Add(MathIdentifier, Entity):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Remove(MathNet.Symbolics.Core.Entity):System.Void">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'entity'</Item>
               <Item>EntityTable.Remove(Entity):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="IdentifierDictionary`1">
          <Messages>
           <Message TypeName="ImplementISerializableCorrectly" Category="Microsoft.Usage" CheckId="CA2240" Created="2006-08-05 09:39:03Z">
            <Issue>
             <Item>IdentifierDictionary`1</Item>
            </Issue>
           </Message>
           <Message TypeName="ImplementSerializationConstructors" Category="Microsoft.Usage" CheckId="CA2229" Created="2006-08-05 09:39:03Z">
            <Issue Name="CreateMagicConstructor">
             <Item>IdentifierDictionary`1</Item>
            </Issue>
           </Message>
          </Messages>
         </Type>
         <Type Name="InstanceIdSet">
          <Messages>
           <Message TypeName="IdentifiersShouldHaveCorrectSuffix" Category="Microsoft.Naming" CheckId="CA1710" Created="2006-08-05 09:39:03Z">
            <Issue>
             <Item>MathNet.Symbolics.Backend.Containers.InstanceIdSet</Item>
             <Item>Collection</Item>
            </Issue>
           </Message>
          </Messages>
         </Type>
         <Type Name="ISignalSet">
          <Messages>
           <Message TypeName="IdentifiersShouldHaveCorrectSuffix" Category="Microsoft.Naming" CheckId="CA1710" Created="2006-08-05 09:39:03Z">
            <Issue>
             <Item>MathNet.Symbolics.Backend.Containers.ISignalSet</Item>
             <Item>Collection</Item>
            </Issue>
           </Message>
          </Messages>
         </Type>
         <Type Name="PortSet">
          <Messages>
           <Message TypeName="IdentifiersShouldHaveCorrectSuffix" Category="Microsoft.Naming" CheckId="CA1710" Created="2006-08-05 09:39:03Z">
            <Issue>
             <Item>MathNet.Symbolics.Backend.Containers.PortSet</Item>
             <Item>Collection</Item>
            </Issue>
           </Message>
          </Messages>
         </Type>
         <Type Name="PropertyProviderTable">
          <Messages>
           <Message TypeName="IdentifiersShouldHaveCorrectSuffix" Category="Microsoft.Naming" CheckId="CA1710" Created="2006-08-05 09:39:03Z">
            <Issue>
             <Item>MathNet.Symbolics.Backend.Containers.PropertyProviderTable</Item>
             <Item>Collection</Item>
            </Issue>
           </Message>
          </Messages>
          <Members>
           <Member Name="UpdateProperty(MathNet.Symbolics.Core.Signal):System.Boolean">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'target'</Item>
               <Item>PropertyProviderTable.UpdateProperty(Signal):Boolean</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="ReadOnlyBusSet">
          <Messages>
           <Message TypeName="IdentifiersShouldHaveCorrectSuffix" Category="Microsoft.Naming" CheckId="CA1710" Created="2006-08-05 09:39:03Z">
            <Issue>
             <Item>MathNet.Symbolics.Backend.Containers.ReadOnlyBusSet</Item>
             <Item>Collection</Item>
            </Issue>
           </Message>
          </Messages>
         </Type>
         <Type Name="ReadOnlyInstanceIdSet">
          <Messages>
           <Message TypeName="IdentifiersShouldHaveCorrectSuffix" Category="Microsoft.Naming" CheckId="CA1710" Created="2006-08-05 09:39:03Z">
            <Issue>
             <Item>MathNet.Symbolics.Backend.Containers.ReadOnlyInstanceIdSet</Item>
             <Item>Collection</Item>
            </Issue>
           </Message>
          </Messages>
         </Type>
         <Type Name="ReadOnlyPortSet">
          <Messages>
           <Message TypeName="IdentifiersShouldHaveCorrectSuffix" Category="Microsoft.Naming" CheckId="CA1710" Created="2006-08-05 09:39:03Z">
            <Issue>
             <Item>MathNet.Symbolics.Backend.Containers.ReadOnlyPortSet</Item>
             <Item>Collection</Item>
            </Issue>
           </Message>
          </Messages>
         </Type>
         <Type Name="ReadOnlySignalSet">
          <Messages>
           <Message TypeName="IdentifiersShouldHaveCorrectSuffix" Category="Microsoft.Naming" CheckId="CA1710" Created="2006-08-05 09:39:03Z">
            <Issue>
             <Item>MathNet.Symbolics.Backend.Containers.ReadOnlySignalSet</Item>
             <Item>Collection</Item>
            </Issue>
           </Message>
          </Messages>
         </Type>
         <Type Name="SignalSet">
          <Messages>
           <Message TypeName="IdentifiersShouldHaveCorrectSuffix" Category="Microsoft.Naming" CheckId="CA1710" Created="2006-08-05 09:39:03Z">
            <Issue>
             <Item>MathNet.Symbolics.Backend.Containers.SignalSet</Item>
             <Item>Collection</Item>
            </Issue>
           </Message>
          </Messages>
         </Type>
         <Type Name="SignalTable">
          <Messages>
           <Message TypeName="IdentifiersShouldHaveCorrectSuffix" Category="Microsoft.Naming" CheckId="CA1710" Created="2006-08-05 09:39:03Z">
            <Issue>
             <Item>MathNet.Symbolics.Backend.Containers.SignalTable</Item>
             <Item>Dictionary</Item>
            </Issue>
           </Message>
           <Message TypeName="MarkISerializableTypesWithSerializable" Category="Microsoft.Usage" CheckId="CA2237" Created="2006-08-05 09:39:03Z">
            <Issue Certainty="75" Level="Warning">
             <Item>SignalTable</Item>
            </Issue>
           </Message>
          </Messages>
         </Type>
         <Type Name="TheoremTable">
          <Members>
           <Member Name="ContainsPropertyProvider(MathNet.Symbolics.Core.MathIdentifier):System.Boolean">
            <Messages>
             <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Created="2006-08-05 09:39:03Z" FixCategory="Breaking">
              <Issue>
               <Item>TheoremTable.ContainsPropertyProvider(MathIdentifier):Boolean</Item>
              </Issue>
             </Message>
             <Message Id="propertyType" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2006-08-05 09:39:03Z" FixCategory="Breaking">
              <Issue>
               <Item>propertyType</Item>
               <Item>TheoremTable.ContainsPropertyProvider(MathIdentifier):Boolean</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="TransformationTheoremTypeTable">
          <Members>
           <Member Name="ContainsTheorem(MathNet.Symbolics.Backend.Theorems.ITransformationTheorem):System.Boolean">
            <Messages>
             <Message TypeName="ConsiderPassingBaseTypesAsParameters" Category="Microsoft.Design" CheckId="CA1011" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>theorem</Item>
               <Item>TransformationTheoremTypeTable.ContainsTheorem(ITransformationTheorem):Boolean</Item>
               <Item>MathNet.Symbolics.Backend.Theorems.ITransformationTheorem</Item>
               <Item>MathNet.Symbolics.Backend.Theorems.ITheorem</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Item[MathNet.Symbolics.Core.MathIdentifier]">
            <Messages>
             <Message TypeName="UseIntegralOrStringArgumentForIndexers" Category="Microsoft.Design" CheckId="CA1043" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>TransformationTheoremTypeTable.Item[MathIdentifier]:ITransformationTheorem</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="LookupBest(MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Port,MathNet.Symbolics.Backend.Patterns.GroupCollection&amp;):MathNet.Symbolics.Backend.Theorems.ITransformationTheorem">
            <Messages>
             <Message Id="2#" TypeName="AvoidOutParameters" Category="Microsoft.Design" CheckId="CA1021" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>groups</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="LookupFirst(MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Port,MathNet.Symbolics.Backend.Patterns.GroupCollection&amp;):MathNet.Symbolics.Backend.Theorems.ITransformationTheorem">
            <Messages>
             <Message Id="2#" TypeName="AvoidOutParameters" Category="Microsoft.Design" CheckId="CA1021" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>groups</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="TryLookupBest(MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Port,MathNet.Symbolics.Backend.Theorems.ITransformationTheorem&amp;,MathNet.Symbolics.Backend.Patterns.GroupCollection&amp;):System.Boolean">
            <Messages>
             <Message Id="2#" TypeName="AvoidOutParameters" Category="Microsoft.Design" CheckId="CA1021" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>theorem</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="TryLookupFirst(MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Port,MathNet.Symbolics.Backend.Theorems.ITransformationTheorem&amp;,MathNet.Symbolics.Backend.Patterns.GroupCollection&amp;):System.Boolean">
            <Messages>
             <Message Id="2#" TypeName="AvoidOutParameters" Category="Microsoft.Design" CheckId="CA1021" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>theorem</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
        </Types>
       </Namespace>
       <Namespace Name="MathNet.Symbolics.Backend.Discovery">
        <Types>
         <Type Name="EntityImplementationAttribute">
          <Messages>
           <Message TypeName="DefineAccessorsForAttributeArguments" Category="Microsoft.Design" CheckId="CA1019" Created="2006-08-05 09:39:03Z">
            <Issue>
             <Item>domain</Item>
             <Item>MathNet.Symbolics.Backend.Discovery.EntityImplementationAttribute</Item>
            </Issue>
            <Issue>
             <Item>label</Item>
             <Item>MathNet.Symbolics.Backend.Discovery.EntityImplementationAttribute</Item>
            </Issue>
           </Message>
          </Messages>
         </Type>
        </Types>
       </Namespace>
       <Namespace Name="MathNet.Symbolics.Backend.Exceptions">
        <Types>
         <Type Name="ArchitectureNotAvailableException">
          <Messages>
           <Message TypeName="ImplementStandardExceptionConstructors" Category="Microsoft.Design" CheckId="CA1032" Created="2006-08-05 09:39:03Z">
            <Issue>
             <Item>MathNet.Symbolics.Backend.Exceptions.ArchitectureNotAvailableException</Item>
             <Item>public ArchitectureNotAvailableException()</Item>
            </Issue>
            <Issue>
             <Item>MathNet.Symbolics.Backend.Exceptions.ArchitectureNotAvailableException</Item>
             <Item>public ArchitectureNotAvailableException(String)</Item>
            </Issue>
            <Issue>
             <Item>MathNet.Symbolics.Backend.Exceptions.ArchitectureNotAvailableException</Item>
             <Item>public ArchitectureNotAvailableException(String, Exception)</Item>
            </Issue>
           </Message>
          </Messages>
          <Members>
           <Member Name=".ctor(MathNet.Symbolics.Core.Port)">
            <Messages>
             <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>ArchitectureNotAvailableException.ArchitectureNotAvailableException(Port)</Item>
               <Item>System.String.Format(System.String,System.Object)</Item>
               <Item>System.String.Format(System.IFormatProvider,System.String,System.Object[])</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name=".ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'info'</Item>
               <Item>ArchitectureNotAvailableException.ArchitectureNotAvailableException(SerializationInfo, StreamingContext)</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext):System.Void">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'info'</Item>
               <Item>ArchitectureNotAvailableException.GetObjectData(SerializationInfo, StreamingContext):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="CommandException">
          <Messages>
           <Message TypeName="ImplementStandardExceptionConstructors" Category="Microsoft.Design" CheckId="CA1032" Created="2006-08-05 09:39:03Z">
            <Issue>
             <Item>MathNet.Symbolics.Backend.Exceptions.CommandException</Item>
             <Item>public CommandException()</Item>
            </Issue>
            <Issue>
             <Item>MathNet.Symbolics.Backend.Exceptions.CommandException</Item>
             <Item>public CommandException(String, Exception)</Item>
            </Issue>
           </Message>
          </Messages>
         </Type>
         <Type Name="CyclicSignalsNotSupportedException">
          <Messages>
           <Message TypeName="ImplementStandardExceptionConstructors" Category="Microsoft.Design" CheckId="CA1032" Created="2006-08-05 09:39:03Z">
            <Issue>
             <Item>MathNet.Symbolics.Backend.Exceptions.CyclicSignalsNotSupportedException</Item>
             <Item>public CyclicSignalsNotSupportedException()</Item>
            </Issue>
            <Issue>
             <Item>MathNet.Symbolics.Backend.Exceptions.CyclicSignalsNotSupportedException</Item>
             <Item>public CyclicSignalsNotSupportedException(String)</Item>
            </Issue>
            <Issue>
             <Item>MathNet.Symbolics.Backend.Exceptions.CyclicSignalsNotSupportedException</Item>
             <Item>public CyclicSignalsNotSupportedException(String, Exception)</Item>
            </Issue>
           </Message>
          </Messages>
          <Members>
           <Member Name=".ctor(MathNet.Symbolics.Core.Signal,System.String)">
            <Messages>
             <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>CyclicSignalsNotSupportedException.CyclicSignalsNotSupportedException(Signal, String)</Item>
               <Item>System.String.Format(System.String,System.Object)</Item>
               <Item>System.String.Format(System.IFormatProvider,System.String,System.Object[])</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name=".ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'info'</Item>
               <Item>CyclicSignalsNotSupportedException.CyclicSignalsNotSupportedException(SerializationInfo, StreamingContext)</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext):System.Void">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'info'</Item>
               <Item>CyclicSignalsNotSupportedException.GetObjectData(SerializationInfo, StreamingContext):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="DeserializationException">
          <Messages>
           <Message TypeName="ImplementStandardExceptionConstructors" Category="Microsoft.Design" CheckId="CA1032" Created="2006-08-05 09:39:03Z">
            <Issue>
             <Item>MathNet.Symbolics.Backend.Exceptions.DeserializationException</Item>
             <Item>public DeserializationException()</Item>
            </Issue>
            <Issue>
             <Item>MathNet.Symbolics.Backend.Exceptions.DeserializationException</Item>
             <Item>public DeserializationException(String, Exception)</Item>
            </Issue>
           </Message>
          </Messages>
         </Type>
         <Type Name="DomainNotAvailableException">
          <Messages>
           <Message TypeName="ImplementStandardExceptionConstructors" Category="Microsoft.Design" CheckId="CA1032" Created="2006-08-05 09:39:03Z">
            <Issue>
             <Item>MathNet.Symbolics.Backend.Exceptions.DomainNotAvailableException</Item>
             <Item>public DomainNotAvailableException()</Item>
            </Issue>
            <Issue>
             <Item>MathNet.Symbolics.Backend.Exceptions.DomainNotAvailableException</Item>
             <Item>public DomainNotAvailableException(String, Exception)</Item>
            </Issue>
           </Message>
          </Messages>
          <Members>
           <Member Name=".ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'info'</Item>
               <Item>DomainNotAvailableException.DomainNotAvailableException(SerializationInfo, StreamingContext)</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name=".ctor(System.String)">
            <Messages>
             <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>DomainNotAvailableException.DomainNotAvailableException(String)</Item>
               <Item>System.String.Format(System.String,System.Object)</Item>
               <Item>System.String.Format(System.IFormatProvider,System.String,System.Object[])</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext):System.Void">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'info'</Item>
               <Item>DomainNotAvailableException.GetObjectData(SerializationInfo, StreamingContext):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="EntityNotAvailableException">
          <Messages>
           <Message TypeName="ImplementStandardExceptionConstructors" Category="Microsoft.Design" CheckId="CA1032" Created="2006-08-05 09:39:03Z">
            <Issue>
             <Item>MathNet.Symbolics.Backend.Exceptions.EntityNotAvailableException</Item>
             <Item>public EntityNotAvailableException()</Item>
            </Issue>
            <Issue>
             <Item>MathNet.Symbolics.Backend.Exceptions.EntityNotAvailableException</Item>
             <Item>public EntityNotAvailableException(String)</Item>
            </Issue>
            <Issue>
             <Item>MathNet.Symbolics.Backend.Exceptions.EntityNotAvailableException</Item>
             <Item>public EntityNotAvailableException(String, Exception)</Item>
            </Issue>
           </Message>
          </Messages>
          <Members>
           <Member Name=".ctor(MathNet.Symbolics.Core.Entity)">
            <Messages>
             <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>EntityNotAvailableException.EntityNotAvailableException(Entity)</Item>
               <Item>System.String.Format(System.String,System.Object)</Item>
               <Item>System.String.Format(System.IFormatProvider,System.String,System.Object[])</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name=".ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'info'</Item>
               <Item>EntityNotAvailableException.EntityNotAvailableException(SerializationInfo, StreamingContext)</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext):System.Void">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'info'</Item>
               <Item>EntityNotAvailableException.GetObjectData(SerializationInfo, StreamingContext):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="EntitySignalCountUnexpectedException">
          <Messages>
           <Message TypeName="ImplementStandardExceptionConstructors" Category="Microsoft.Design" CheckId="CA1032" Created="2006-08-05 09:39:03Z">
            <Issue>
             <Item>MathNet.Symbolics.Backend.Exceptions.EntitySignalCountUnexpectedException</Item>
             <Item>public EntitySignalCountUnexpectedException()</Item>
            </Issue>
            <Issue>
             <Item>MathNet.Symbolics.Backend.Exceptions.EntitySignalCountUnexpectedException</Item>
             <Item>public EntitySignalCountUnexpectedException(String)</Item>
            </Issue>
            <Issue>
             <Item>MathNet.Symbolics.Backend.Exceptions.EntitySignalCountUnexpectedException</Item>
             <Item>public EntitySignalCountUnexpectedException(String, Exception)</Item>
            </Issue>
           </Message>
          </Messages>
          <Members>
           <Member Name=".ctor(System.String,System.String)">
            <Messages>
             <Message Id="System.String.Format(System.String,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>EntitySignalCountUnexpectedException.EntitySignalCountUnexpectedException(String, String)</Item>
               <Item>System.String.Format(System.String,System.Object,System.Object)</Item>
               <Item>System.String.Format(System.IFormatProvider,System.String,System.Object[])</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="EntitySignalMismatchException">
          <Messages>
           <Message TypeName="ImplementStandardExceptionConstructors" Category="Microsoft.Design" CheckId="CA1032" Created="2006-08-05 09:39:03Z">
            <Issue>
             <Item>MathNet.Symbolics.Backend.Exceptions.EntitySignalMismatchException</Item>
             <Item>public EntitySignalMismatchException(String)</Item>
            </Issue>
            <Issue>
             <Item>MathNet.Symbolics.Backend.Exceptions.EntitySignalMismatchException</Item>
             <Item>public EntitySignalMismatchException(String, Exception)</Item>
            </Issue>
           </Message>
          </Messages>
         </Type>
         <Type Name="GenericEntityPortNotInstantiableException">
          <Messages>
           <Message TypeName="ImplementStandardExceptionConstructors" Category="Microsoft.Design" CheckId="CA1032" Created="2006-08-05 09:39:03Z">
            <Issue>
             <Item>MathNet.Symbolics.Backend.Exceptions.GenericEntityPortNotInstantiableException</Item>
             <Item>public GenericEntityPortNotInstantiableException(String)</Item>
            </Issue>
            <Issue>
             <Item>MathNet.Symbolics.Backend.Exceptions.GenericEntityPortNotInstantiableException</Item>
             <Item>public GenericEntityPortNotInstantiableException(String, Exception)</Item>
            </Issue>
           </Message>
          </Messages>
         </Type>
         <Type Name="IncompatibleStructureException">
          <Messages>
           <Message TypeName="ImplementStandardExceptionConstructors" Category="Microsoft.Design" CheckId="CA1032" Created="2006-08-05 09:39:03Z">
            <Issue>
             <Item>MathNet.Symbolics.Backend.Exceptions.IncompatibleStructureException</Item>
             <Item>public IncompatibleStructureException()</Item>
            </Issue>
            <Issue>
             <Item>MathNet.Symbolics.Backend.Exceptions.IncompatibleStructureException</Item>
             <Item>public IncompatibleStructureException(String)</Item>
            </Issue>
            <Issue>
             <Item>MathNet.Symbolics.Backend.Exceptions.IncompatibleStructureException</Item>
             <Item>public IncompatibleStructureException(String, Exception)</Item>
            </Issue>
           </Message>
          </Messages>
          <Members>
           <Member Name=".ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'info'</Item>
               <Item>IncompatibleStructureException.IncompatibleStructureException(SerializationInfo, StreamingContext)</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext):System.Void">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'info'</Item>
               <Item>IncompatibleStructureException.GetObjectData(SerializationInfo, StreamingContext):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="LabelNotAvailableException">
          <Messages>
           <Message TypeName="ImplementStandardExceptionConstructors" Category="Microsoft.Design" CheckId="CA1032" Created="2006-08-05 09:39:03Z">
            <Issue>
             <Item>MathNet.Symbolics.Backend.Exceptions.LabelNotAvailableException</Item>
             <Item>public LabelNotAvailableException()</Item>
            </Issue>
            <Issue>
             <Item>MathNet.Symbolics.Backend.Exceptions.LabelNotAvailableException</Item>
             <Item>public LabelNotAvailableException(String)</Item>
            </Issue>
            <Issue>
             <Item>MathNet.Symbolics.Backend.Exceptions.LabelNotAvailableException</Item>
             <Item>public LabelNotAvailableException(String, Exception)</Item>
            </Issue>
           </Message>
          </Messages>
          <Members>
           <Member Name=".ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'info'</Item>
               <Item>LabelNotAvailableException.LabelNotAvailableException(SerializationInfo, StreamingContext)</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext):System.Void">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'info'</Item>
               <Item>LabelNotAvailableException.GetObjectData(SerializationInfo, StreamingContext):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="MutualExclusiveStrategyAlreadyActiveException">
          <Messages>
           <Message TypeName="ImplementStandardExceptionConstructors" Category="Microsoft.Design" CheckId="CA1032" Created="2006-08-05 09:39:03Z">
            <Issue>
             <Item>MathNet.Symbolics.Backend.Exceptions.MutualExclusiveStrategyAlreadyActiveException</Item>
             <Item>public MutualExclusiveStrategyAlreadyActiveException(String)</Item>
            </Issue>
            <Issue>
             <Item>MathNet.Symbolics.Backend.Exceptions.MutualExclusiveStrategyAlreadyActiveException</Item>
             <Item>public MutualExclusiveStrategyAlreadyActiveException(String, Exception)</Item>
            </Issue>
           </Message>
          </Messages>
         </Type>
         <Type Name="NotFoundException">
          <Messages>
           <Message TypeName="ImplementStandardExceptionConstructors" Category="Microsoft.Design" CheckId="CA1032" Created="2006-08-05 09:39:03Z">
            <Issue>
             <Item>MathNet.Symbolics.Backend.Exceptions.NotFoundException</Item>
             <Item>public NotFoundException(String)</Item>
            </Issue>
            <Issue>
             <Item>MathNet.Symbolics.Backend.Exceptions.NotFoundException</Item>
             <Item>public NotFoundException(String, Exception)</Item>
            </Issue>
           </Message>
          </Messages>
         </Type>
         <Type Name="ParsingException">
          <Messages>
           <Message TypeName="ImplementStandardExceptionConstructors" Category="Microsoft.Design" CheckId="CA1032" Created="2006-08-05 09:39:03Z">
            <Issue>
             <Item>MathNet.Symbolics.Backend.Exceptions.ParsingException</Item>
             <Item>public ParsingException()</Item>
            </Issue>
            <Issue>
             <Item>MathNet.Symbolics.Backend.Exceptions.ParsingException</Item>
             <Item>public ParsingException(String, Exception)</Item>
            </Issue>
           </Message>
          </Messages>
         </Type>
         <Type Name="StructureNotSupportedException">
          <Messages>
           <Message TypeName="ImplementStandardExceptionConstructors" Category="Microsoft.Design" CheckId="CA1032" Created="2006-08-05 09:39:03Z">
            <Issue>
             <Item>MathNet.Symbolics.Backend.Exceptions.StructureNotSupportedException</Item>
             <Item>public StructureNotSupportedException()</Item>
            </Issue>
            <Issue>
             <Item>MathNet.Symbolics.Backend.Exceptions.StructureNotSupportedException</Item>
             <Item>public StructureNotSupportedException(String)</Item>
            </Issue>
            <Issue>
             <Item>MathNet.Symbolics.Backend.Exceptions.StructureNotSupportedException</Item>
             <Item>public StructureNotSupportedException(String, Exception)</Item>
            </Issue>
           </Message>
          </Messages>
          <Members>
           <Member Name=".ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'info'</Item>
               <Item>StructureNotSupportedException.StructureNotSupportedException(SerializationInfo, StreamingContext)</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext):System.Void">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'info'</Item>
               <Item>StructureNotSupportedException.GetObjectData(SerializationInfo, StreamingContext):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="SymbolNotAvailableException">
          <Messages>
           <Message TypeName="ImplementStandardExceptionConstructors" Category="Microsoft.Design" CheckId="CA1032" Created="2006-08-05 09:39:03Z">
            <Issue>
             <Item>MathNet.Symbolics.Backend.Exceptions.SymbolNotAvailableException</Item>
             <Item>public SymbolNotAvailableException()</Item>
            </Issue>
            <Issue>
             <Item>MathNet.Symbolics.Backend.Exceptions.SymbolNotAvailableException</Item>
             <Item>public SymbolNotAvailableException(String, Exception)</Item>
            </Issue>
           </Message>
          </Messages>
          <Members>
           <Member Name=".ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'info'</Item>
               <Item>SymbolNotAvailableException.SymbolNotAvailableException(SerializationInfo, StreamingContext)</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext):System.Void">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'info'</Item>
               <Item>SymbolNotAvailableException.GetObjectData(SerializationInfo, StreamingContext):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="TheoremMismatchException">
          <Messages>
           <Message TypeName="ImplementStandardExceptionConstructors" Category="Microsoft.Design" CheckId="CA1032" Created="2006-08-05 09:39:03Z">
            <Issue>
             <Item>MathNet.Symbolics.Backend.Exceptions.TheoremMismatchException</Item>
             <Item>public TheoremMismatchException(String)</Item>
            </Issue>
            <Issue>
             <Item>MathNet.Symbolics.Backend.Exceptions.TheoremMismatchException</Item>
             <Item>public TheoremMismatchException(String, Exception)</Item>
            </Issue>
           </Message>
          </Messages>
         </Type>
        </Types>
       </Namespace>
       <Namespace Name="MathNet.Symbolics.Backend.Parsing">
        <Types>
         <Type Name="EntityStack">
          <Messages>
           <Message TypeName="IdentifiersShouldNotHaveIncorrectSuffix" Category="Microsoft.Naming" CheckId="CA1711" Created="2006-08-05 09:39:03Z">
            <Issue>
             <Item>MathNet.Symbolics.Backend.Parsing.EntityStack</Item>
             <Item>Stack</Item>
            </Issue>
           </Message>
          </Messages>
          <Members>
           <Member Name="Expand():System.Void">
            <Messages>
             <Message Id="MathNet.Symbolics.Backend.Exceptions.ParsingException.#ctor(System.String)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>EntityStack.Expand():Void</Item>
               <Item>1</Item>
               <Item>ParsingException.ParsingException(String)</Item>
               <Item>Parsing failed. Maximum token stack size exceeded.</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="Int32Stack">
          <Members>
           <Member Name="Count">
            <Accessors>
             <Accessor Name="get_Count():System.Int32">
              <Messages>
               <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Created="2006-08-05 09:39:03Z">
                <Issue>
                 <Item>Int32Stack.get_Count():Int32</Item>
                </Issue>
               </Message>
              </Messages>
             </Accessor>
            </Accessors>
           </Member>
           <Member Name="Expand():System.Void">
            <Messages>
             <Message Id="MathNet.Symbolics.Backend.Exceptions.ParsingException.#ctor(System.String)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>Int32Stack.Expand():Void</Item>
               <Item>1</Item>
               <Item>ParsingException.ParsingException(String)</Item>
               <Item>Parsing failed. Maximum marker stack size exceeded.</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Item[System.Int32]">
            <Accessors>
             <Accessor Name="get_Item(System.Int32):System.Int32">
              <Messages>
               <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Created="2006-08-05 09:39:03Z">
                <Issue>
                 <Item>Int32Stack.get_Item(Int32):Int32</Item>
                </Issue>
               </Message>
              </Messages>
             </Accessor>
            </Accessors>
           </Member>
           <Member Name="Peek():System.Int32">
            <Messages>
             <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>Int32Stack.Peek():Int32</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Remove():System.Void">
            <Messages>
             <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>Int32Stack.Remove():Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Size">
            <Accessors>
             <Accessor Name="get_Size():System.Int32">
              <Messages>
               <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Created="2006-08-05 09:39:03Z">
                <Issue>
                 <Item>Int32Stack.get_Size():Int32</Item>
                </Issue>
               </Message>
              </Messages>
             </Accessor>
            </Accessors>
           </Member>
          </Members>
         </Type>
         <Type Name="LexerBuffer">
          <Members>
           <Member Name="Append(System.Char):System.Void">
            <Messages>
             <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>LexerBuffer.Append(Char):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Count">
            <Accessors>
             <Accessor Name="get_Count():System.Int32">
              <Messages>
               <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Created="2006-08-05 09:39:03Z">
                <Issue>
                 <Item>LexerBuffer.get_Count():Int32</Item>
                </Issue>
               </Message>
              </Messages>
             </Accessor>
            </Accessors>
           </Member>
           <Member Name="Expand():System.Void">
            <Messages>
             <Message Id="MathNet.Symbolics.Backend.Exceptions.ParsingException.#ctor(System.String)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>LexerBuffer.Expand():Void</Item>
               <Item>1</Item>
               <Item>ParsingException.ParsingException(String)</Item>
               <Item>Parsing failed. Maximum lexer buffer size exceeded.</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="RemoveFirst():System.Void">
            <Messages>
             <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>LexerBuffer.RemoveFirst():Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="LexerMarker">
          <Members>
           <Member Name="markerOffset">
            <Messages>
             <Message TypeName="AvoidUnusedPrivateFields" Category="Microsoft.Performance" CheckId="CA1823" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>LexerMarker.markerOffset</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="LexerScanner">
          <Members>
           <Member Name=".ctor(System.IO.TextReader,MathNet.Symbolics.Backend.Context)">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'context'</Item>
               <Item>LexerScanner.LexerScanner(TextReader, Context)</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="NextToken():MathNet.Symbolics.Backend.Parsing.LexerToken">
            <Messages>
             <Message Id="MathNet.Symbolics.Backend.Exceptions.ParsingException.#ctor(System.String)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>LexerScanner.NextToken():LexerToken</Item>
               <Item>1</Item>
               <Item>ParsingException.ParsingException(String)</Item>
               <Item>Parsing failed. Lexer Scanner detected unexpected token '____'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Reset(System.IO.TextReader,MathNet.Symbolics.Backend.Context):System.Void">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'context'</Item>
               <Item>LexerScanner.Reset(TextReader, Context):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="ScanClosingPunctuation():MathNet.Symbolics.Backend.Parsing.LexerToken">
            <Messages>
             <Message Id="MathNet.Symbolics.Backend.Parsing.LexerToken.#ctor(System.String,MathNet.Symbolics.Backend.Parsing.TokenTypes)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>LexerScanner.ScanClosingPunctuation():LexerToken</Item>
               <Item>1</Item>
               <Item>LexerToken.LexerToken(String, TokenTypes)</Item>
               <Item>-&gt;</Item>
              </Issue>
              <Issue>
               <Item>LexerScanner.ScanClosingPunctuation():LexerToken</Item>
               <Item>1</Item>
               <Item>LexerToken.LexerToken(String, TokenTypes)</Item>
               <Item>&lt;-</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="ScanLiteral():MathNet.Symbolics.Backend.Parsing.LexerToken">
            <Messages>
             <Message Id="MathNet.Symbolics.Backend.Exceptions.ParsingException.#ctor(System.String)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>LexerScanner.ScanLiteral():LexerToken</Item>
               <Item>1</Item>
               <Item>ParsingException.ParsingException(String)</Item>
               <Item>Parsing failed. Unexpected end of file. Did you forget to close a literal encapsulation?</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="ScanOpeningPunctuation():MathNet.Symbolics.Backend.Parsing.LexerToken">
            <Messages>
             <Message Id="MathNet.Symbolics.Backend.Parsing.LexerToken.#ctor(System.String,MathNet.Symbolics.Backend.Parsing.TokenTypes)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>LexerScanner.ScanOpeningPunctuation():LexerToken</Item>
               <Item>1</Item>
               <Item>LexerToken.LexerToken(String, TokenTypes)</Item>
               <Item>-&gt;</Item>
              </Issue>
              <Issue>
               <Item>LexerScanner.ScanOpeningPunctuation():LexerToken</Item>
               <Item>1</Item>
               <Item>LexerToken.LexerToken(String, TokenTypes)</Item>
               <Item>&lt;-</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="ScanSymbolIdentifier():MathNet.Symbolics.Backend.Parsing.LexerToken">
            <Messages>
             <Message Id="MathNet.Symbolics.Backend.Parsing.LexerToken.#ctor(System.String,MathNet.Symbolics.Backend.Parsing.TokenTypes)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>LexerScanner.ScanSymbolIdentifier():LexerToken</Item>
               <Item>1</Item>
               <Item>LexerToken.LexerToken(String, TokenTypes)</Item>
               <Item>-&gt;</Item>
              </Issue>
              <Issue>
               <Item>LexerScanner.ScanSymbolIdentifier():LexerToken</Item>
               <Item>1</Item>
               <Item>LexerToken.LexerToken(String, TokenTypes)</Item>
               <Item>&lt;-</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="Parser">
          <Members>
           <Member Name="Interpret(System.IO.FileInfo,MathNet.Symbolics.Workplace.MathSystem):System.Void">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'file'</Item>
               <Item>Parser.Interpret(FileInfo, MathSystem):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="ParserBuffer">
          <Members>
           <Member Name="Append(MathNet.Symbolics.Backend.Parsing.LexerToken):System.Void">
            <Messages>
             <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>ParserBuffer.Append(LexerToken):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Count">
            <Accessors>
             <Accessor Name="get_Count():System.Int32">
              <Messages>
               <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Created="2006-08-05 09:39:03Z">
                <Issue>
                 <Item>ParserBuffer.get_Count():Int32</Item>
                </Issue>
               </Message>
              </Messages>
             </Accessor>
            </Accessors>
           </Member>
           <Member Name="Expand():System.Void">
            <Messages>
             <Message Id="MathNet.Symbolics.Backend.Exceptions.ParsingException.#ctor(System.String)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>ParserBuffer.Expand():Void</Item>
               <Item>1</Item>
               <Item>ParsingException.ParsingException(String)</Item>
               <Item>Parsing failed. Maximum parser buffer size exceeded.</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="RemoveFirst():System.Void">
            <Messages>
             <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>ParserBuffer.RemoveFirst():Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="ParserMarker">
          <Members>
           <Member Name="CommitMark():System.Void">
            <Messages>
             <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>ParserMarker.CommitMark():Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Mark():System.Void">
            <Messages>
             <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>ParserMarker.Mark():Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="markerOffset">
            <Messages>
             <Message TypeName="AvoidUnusedPrivateFields" Category="Microsoft.Performance" CheckId="CA1823" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>ParserMarker.markerOffset</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Match(MathNet.Symbolics.Backend.Parsing.TokenTypes):System.Void">
            <Messages>
             <Message Id="System.String.Format(System.String,System.Object,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>ParserMarker.Match(TokenTypes):Void</Item>
               <Item>System.String.Format(System.String,System.Object,System.Object,System.Object)</Item>
               <Item>System.String.Format(System.IFormatProvider,System.String,System.Object[])</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Match(MathNet.Symbolics.Backend.Parsing.TokenTypes,System.String):System.Void">
            <Messages>
             <Message Id="System.String.Format(System.String,System.Object[])" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>ParserMarker.Match(TokenTypes, String):Void</Item>
               <Item>System.String.Format(System.String,System.Object[])</Item>
               <Item>System.String.Format(System.IFormatProvider,System.String,System.Object[])</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Match(System.String):System.Void">
            <Messages>
             <Message Id="System.String.Format(System.String,System.Object,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>ParserMarker.Match(String):Void</Item>
               <Item>System.String.Format(System.String,System.Object,System.Object,System.Object)</Item>
               <Item>System.String.Format(System.IFormatProvider,System.String,System.Object[])</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="MatchGet(MathNet.Symbolics.Backend.Parsing.TokenTypes):MathNet.Symbolics.Backend.Parsing.LexerToken">
            <Messages>
             <Message Id="System.String.Format(System.String,System.Object,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>ParserMarker.MatchGet(TokenTypes):LexerToken</Item>
               <Item>System.String.Format(System.String,System.Object,System.Object,System.Object)</Item>
               <Item>System.String.Format(System.IFormatProvider,System.String,System.Object[])</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="RollbackMark():System.Void">
            <Messages>
             <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>ParserMarker.RollbackMark():Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="ParserScanner">
          <Members>
           <Member Name=".ctor(System.IO.TextReader,MathNet.Symbolics.Workplace.MathSystem)">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'system'</Item>
               <Item>ParserScanner.ParserScanner(TextReader, MathSystem)</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="IsBinary(MathNet.Symbolics.Backend.Parsing.LexerToken):System.Boolean">
            <Messages>
             <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>ParserScanner.IsBinary(LexerToken):Boolean</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Reset(System.IO.TextReader,MathNet.Symbolics.Workplace.MathSystem):System.Void">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'system'</Item>
               <Item>ParserScanner.Reset(TextReader, MathSystem):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="ScanDefine():System.Void">
            <Messages>
             <Message Id="MathNet.Symbolics.Backend.Exceptions.ParsingException.#ctor(System.String)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>ParserScanner.ScanDefine():Void</Item>
               <Item>1</Item>
               <Item>ParsingException.ParsingException(String)</Item>
               <Item>Parsing failed. Parser Scanner detected unexpected definition token '____'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="ScanEntitySymbol():System.String">
            <Messages>
             <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>ParserScanner.ScanEntitySymbol():String</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="ScanEntitySymbolLiteral():System.String">
            <Messages>
             <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>ParserScanner.ScanEntitySymbolLiteral():String</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="ScanLiteralList():System.Collections.Generic.List`1&lt;System.String&gt;">
            <Messages>
             <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>ParserScanner.ScanLiteralList():List`1&lt;System.String&gt;</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="ScanMathIdentifier():MathNet.Symbolics.Core.MathIdentifier">
            <Messages>
             <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>ParserScanner.ScanMathIdentifier():MathIdentifier</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="ScanOperandPart():MathNet.Symbolics.Core.Signal">
            <Messages>
             <Message Id="MathNet.Symbolics.Backend.Exceptions.ParsingException.#ctor(System.String)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>ParserScanner.ScanOperandPart():Signal</Item>
               <Item>1</Item>
               <Item>ParsingException.ParsingException(String)</Item>
               <Item>Parsing failed. Parser Scanner detected unexpected operand part token '____'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="SignalStack">
          <Messages>
           <Message TypeName="IdentifiersShouldNotHaveIncorrectSuffix" Category="Microsoft.Naming" CheckId="CA1711" Created="2006-08-05 09:39:03Z">
            <Issue>
             <Item>MathNet.Symbolics.Backend.Parsing.SignalStack</Item>
             <Item>Stack</Item>
            </Issue>
           </Message>
          </Messages>
          <Members>
           <Member Name="Expand():System.Void">
            <Messages>
             <Message Id="MathNet.Symbolics.Backend.Exceptions.ParsingException.#ctor(System.String)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>SignalStack.Expand():Void</Item>
               <Item>1</Item>
               <Item>ParsingException.ParsingException(String)</Item>
               <Item>Parsing failed. Maximum expression stack size exceeded.</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="TokenTypes">
          <Messages>
           <Message TypeName="DoNotMarkEnumsWithFlags" Category="Microsoft.Usage" CheckId="CA2217" Created="2006-08-05 09:39:03Z">
            <Issue>
             <Item>MathNet.Symbolics.Backend.Parsing.TokenTypes</Item>
             <Item>0x100000, 0x200000, 0x400000, 0x800000, 0x10000000, 0x20000000</Item>
            </Issue>
           </Message>
           <Message TypeName="EnumsShouldHaveZeroValue" Category="Microsoft.Design" CheckId="CA1008" Created="2006-08-05 09:39:03Z" FixCategory="Breaking">
            <Issue Name="FlagsRename">
             <Item>MathNet.Symbolics.Backend.Parsing.TokenTypes</Item>
             <Item>TokenTypes.Unknown</Item>
            </Issue>
           </Message>
          </Messages>
         </Type>
        </Types>
       </Namespace>
       <Namespace Name="MathNet.Symbolics.Backend.Patterns">
        <Types>
         <Type Name="AlwaysTrueCondition">
          <Members>
           <Member Name="MergeToCoalescedTreeNode(MathNet.Symbolics.Backend.Patterns.CoalescedTreeNode,System.Collections.Generic.List`1&lt;MathNet.Symbolics.Backend.Patterns.CoalescedTreeNode&gt;):System.Void">
            <Messages>
             <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>System.Collections.Generic.List`1&lt;MathNet.Symbolics.Backend.Patterns.CoalescedTreeNode&gt;</Item>
               <Item>AlwaysTrueCondition.MergeToCoalescedTreeNode(CoalescedTreeNode, List`1&lt;MathNet.Symbolics.Backend.Patterns.CoalescedTreeNode&gt;):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="AndCondition">
          <Members>
           <Member Name="MergeToCoalescedTreeNode(MathNet.Symbolics.Backend.Patterns.CoalescedTreeNode,System.Collections.Generic.List`1&lt;MathNet.Symbolics.Backend.Patterns.CoalescedTreeNode&gt;):System.Void">
            <Messages>
             <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>System.Collections.Generic.List`1&lt;MathNet.Symbolics.Backend.Patterns.CoalescedTreeNode&gt;</Item>
               <Item>AndCondition.MergeToCoalescedTreeNode(CoalescedTreeNode, List`1&lt;MathNet.Symbolics.Backend.Patterns.CoalescedTreeNode&gt;):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="CoalescedChildPattern">
          <Members>
           <Member Name="ChildrenAxis">
            <Messages>
             <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>System.Collections.Generic.List`1&lt;MathNet.Symbolics.Backend.Patterns.CoalescedTreeNode&gt;</Item>
               <Item>CoalescedChildPattern.ChildrenAxis:List`1&lt;MathNet.Symbolics.Backend.Patterns.CoalescedTreeNode&gt;</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="MatchAll(MathNet.Symbolics.Core.Port,System.Int32):MathNet.Symbolics.Backend.Patterns.MatchCollection">
            <Messages>
             <Message Id="score+3" TypeName="OperationsShouldNotOverflow" Category="Microsoft.Usage" CheckId="CA2233" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>score+3</Item>
               <Item>CoalescedChildPattern.MatchAll(Port, Int32):MatchCollection</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="CoalescedTreeNode">
          <Members>
           <Member Name="ConditionAxis">
            <Messages>
             <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>System.Collections.Generic.List`1&lt;MathNet.Symbolics.Backend.Patterns.CoalescedTreeNode&gt;</Item>
               <Item>CoalescedTreeNode.ConditionAxis:List`1&lt;MathNet.Symbolics.Backend.Patterns.CoalescedTreeNode&gt;</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="CreateRootTree():System.Collections.Generic.List`1&lt;MathNet.Symbolics.Backend.Patterns.CoalescedTreeNode&gt;">
            <Messages>
             <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>System.Collections.Generic.List`1&lt;MathNet.Symbolics.Backend.Patterns.CoalescedTreeNode&gt;</Item>
               <Item>CoalescedTreeNode.CreateRootTree():List`1&lt;MathNet.Symbolics.Backend.Patterns.CoalescedTreeNode&gt;</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="CreateRootTree(MathNet.Symbolics.Backend.Patterns.CoalescedTreeNode&amp;):System.Collections.Generic.List`1&lt;MathNet.Symbolics.Backend.Patterns.CoalescedTreeNode&gt;">
            <Messages>
             <Message Id="0#" TypeName="AvoidOutParameters" Category="Microsoft.Design" CheckId="CA1021" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>root</Item>
              </Issue>
             </Message>
             <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>System.Collections.Generic.List`1&lt;MathNet.Symbolics.Backend.Patterns.CoalescedTreeNode&gt;</Item>
               <Item>CoalescedTreeNode.CreateRootTree(CoalescedTreeNode&amp;):List`1&lt;MathNet.Symbolics.Backend.Patterns.CoalescedTreeNode&gt;</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="PatternAxis">
            <Messages>
             <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>System.Collections.Generic.List`1&lt;MathNet.Symbolics.Backend.Patterns.CoalescedChildPattern&gt;</Item>
               <Item>CoalescedTreeNode.PatternAxis:List`1&lt;MathNet.Symbolics.Backend.Patterns.CoalescedChildPattern&gt;</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="SubscriptionAxis">
            <Messages>
             <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>System.Collections.Generic.List`1&lt;MathNet.Symbolics.Core.MathIdentifier&gt;</Item>
               <Item>CoalescedTreeNode.SubscriptionAxis:List`1&lt;MathNet.Symbolics.Core.MathIdentifier&gt;</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="Condition">
          <Members>
           <Member Name="CouldMergeToCoalescedTree(MathNet.Symbolics.Backend.Patterns.CoalescedTreeNode):System.Boolean">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'node'</Item>
               <Item>Condition.CouldMergeToCoalescedTree(CoalescedTreeNode):Boolean</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="IteratorEquals(System.Collections.Generic.IEnumerator`1&lt;MathNet.Symbolics.Backend.Patterns.Condition&gt;,System.Collections.Generic.IEnumerator`1&lt;MathNet.Symbolics.Backend.Patterns.Condition&gt;):System.Boolean">
            <Messages>
             <Message Id="0#a" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:39:03Z">
              <Issue Name="ParameterOneLetter">
               <Item>Condition.IteratorEquals(IEnumerator`1&lt;MathNet.Symbolics.Backend.Patterns.Condition&gt;, IEnumerator`1&lt;MathNet.Symbolics.Backend.Patterns.Condition&gt;):Boolean</Item>
               <Item>a</Item>
              </Issue>
             </Message>
             <Message Id="1#b" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:39:03Z">
              <Issue Name="ParameterOneLetter">
               <Item>Condition.IteratorEquals(IEnumerator`1&lt;MathNet.Symbolics.Backend.Patterns.Condition&gt;, IEnumerator`1&lt;MathNet.Symbolics.Backend.Patterns.Condition&gt;):Boolean</Item>
               <Item>b</Item>
              </Issue>
             </Message>
             <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Created="2006-08-05 09:39:03Z" FixCategory="Breaking">
              <Issue>
               <Item>Condition.IteratorEquals(IEnumerator`1&lt;MathNet.Symbolics.Backend.Patterns.Condition&gt;, IEnumerator`1&lt;MathNet.Symbolics.Backend.Patterns.Condition&gt;):Boolean</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="MergeToCoalescedTree():System.Collections.Generic.List`1&lt;MathNet.Symbolics.Backend.Patterns.CoalescedTreeNode&gt;">
            <Messages>
             <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>System.Collections.Generic.List`1&lt;MathNet.Symbolics.Backend.Patterns.CoalescedTreeNode&gt;</Item>
               <Item>Condition.MergeToCoalescedTree():List`1&lt;MathNet.Symbolics.Backend.Patterns.CoalescedTreeNode&gt;</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="MergeToCoalescedTree(System.Collections.Generic.List`1&lt;MathNet.Symbolics.Backend.Patterns.CoalescedTreeNode&gt;):System.Collections.Generic.List`1&lt;MathNet.Symbolics.Backend.Patterns.CoalescedTreeNode&gt;">
            <Messages>
             <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>System.Collections.Generic.List`1&lt;MathNet.Symbolics.Backend.Patterns.CoalescedTreeNode&gt;</Item>
               <Item>Condition.MergeToCoalescedTree(List`1&lt;MathNet.Symbolics.Backend.Patterns.CoalescedTreeNode&gt;):List`1&lt;MathNet.Symbolics.Backend.Patterns.CoalescedTreeNode&gt;</Item>
              </Issue>
              <Issue>
               <Item>System.Collections.Generic.List`1&lt;MathNet.Symbolics.Backend.Patterns.CoalescedTreeNode&gt;</Item>
               <Item>Condition.MergeToCoalescedTree(List`1&lt;MathNet.Symbolics.Backend.Patterns.CoalescedTreeNode&gt;):List`1&lt;MathNet.Symbolics.Backend.Patterns.CoalescedTreeNode&gt;</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="MergeToCoalescedTreeNode(MathNet.Symbolics.Backend.Patterns.CoalescedTreeNode,System.Collections.Generic.List`1&lt;MathNet.Symbolics.Backend.Patterns.CoalescedTreeNode&gt;):System.Void">
            <Messages>
             <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>System.Collections.Generic.List`1&lt;MathNet.Symbolics.Backend.Patterns.CoalescedTreeNode&gt;</Item>
               <Item>Condition.MergeToCoalescedTreeNode(CoalescedTreeNode, List`1&lt;MathNet.Symbolics.Backend.Patterns.CoalescedTreeNode&gt;):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="TryGetExistingNode(MathNet.Symbolics.Backend.Patterns.CoalescedTreeNode,MathNet.Symbolics.Backend.Patterns.Condition,MathNet.Symbolics.Backend.Patterns.CoalescedTreeNode&amp;):System.Boolean">
            <Messages>
             <Message Id="condition" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2006-08-05 09:39:03Z" FixCategory="Breaking">
              <Issue>
               <Item>condition</Item>
               <Item>Condition.TryGetExistingNode(CoalescedTreeNode, Condition, CoalescedTreeNode&amp;):Boolean</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="Group">
          <Messages>
           <Message TypeName="IdentifiersShouldHaveCorrectSuffix" Category="Microsoft.Naming" CheckId="CA1710" Created="2006-08-05 09:39:03Z">
            <Issue>
             <Item>MathNet.Symbolics.Backend.Patterns.Group</Item>
             <Item>Collection</Item>
            </Issue>
           </Message>
          </Messages>
          <Members>
           <Member Name="AddRange(System.Collections.Generic.IEnumerable`1&lt;MathNet.Numerics.Tuple`2&lt;MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Port&gt;&gt;):System.Void">
            <Messages>
             <Message TypeName="DoNotNestGenericTypesInMemberSignatures" Category="Microsoft.Design" CheckId="CA1006" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>Group.AddRange(IEnumerable`1&lt;MathNet.Numerics.Tuple`2&lt;MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Port&gt;&gt;):Void</Item>
               <Item>System.Collections.Generic.IEnumerable`1&lt;MathNet.Numerics.Tuple`2&lt;MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Port&gt;&gt;</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="GroupCollection">
          <Members>
           <Member Name="Append(System.String,System.Collections.Generic.IEnumerable`1&lt;MathNet.Numerics.Tuple`2&lt;MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Port&gt;&gt;):System.Void">
            <Messages>
             <Message TypeName="DoNotNestGenericTypesInMemberSignatures" Category="Microsoft.Design" CheckId="CA1006" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>GroupCollection.Append(String, IEnumerable`1&lt;MathNet.Numerics.Tuple`2&lt;MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Port&gt;&gt;):Void</Item>
               <Item>System.Collections.Generic.IEnumerable`1&lt;MathNet.Numerics.Tuple`2&lt;MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Port&gt;&gt;</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="GetKeyForItem(MathNet.Symbolics.Backend.Patterns.Group):System.String">
            <Messages>
             <Message Id="0#" TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>group</Item>
               <Item>GroupCollection.GetKeyForItem(Group):String</Item>
               <Item>item</Item>
               <Item>KeyedCollection`2&lt;System.String,MathNet.Symbolics.Backend.Patterns.Group&gt;.GetKeyForItem(Group):String</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="Match">
          <Messages>
           <Message TypeName="IdentifiersShouldHaveCorrectSuffix" Category="Microsoft.Naming" CheckId="CA1710" Created="2006-08-05 09:39:03Z">
            <Issue>
             <Item>MathNet.Symbolics.Backend.Patterns.Match</Item>
             <Item>Collection</Item>
            </Issue>
           </Message>
          </Messages>
          <Members>
           <Member Name="AppendGroup(System.String,System.Collections.Generic.List`1&lt;MathNet.Numerics.Tuple`2&lt;MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Port&gt;&gt;):System.Void">
            <Messages>
             <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>System.Collections.Generic.List`1&lt;MathNet.Numerics.Tuple`2&lt;MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Port&gt;&gt;</Item>
               <Item>Match.AppendGroup(String, List`1&lt;MathNet.Numerics.Tuple`2&lt;MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Port&gt;&gt;):Void</Item>
              </Issue>
             </Message>
             <Message TypeName="DoNotNestGenericTypesInMemberSignatures" Category="Microsoft.Design" CheckId="CA1006" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>Match.AppendGroup(String, List`1&lt;MathNet.Numerics.Tuple`2&lt;MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Port&gt;&gt;):Void</Item>
               <Item>System.Collections.Generic.List`1&lt;MathNet.Numerics.Tuple`2&lt;MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Port&gt;&gt;</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="MatchCollection">
          <Members>
           <Member Name="CombineIntersect(System.Collections.Generic.List`1&lt;MathNet.Symbolics.Backend.Patterns.MatchCollection&gt;):MathNet.Symbolics.Backend.Patterns.MatchCollection">
            <Messages>
             <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>System.Collections.Generic.List`1&lt;MathNet.Symbolics.Backend.Patterns.MatchCollection&gt;</Item>
               <Item>MatchCollection.CombineIntersect(List`1&lt;MathNet.Symbolics.Backend.Patterns.MatchCollection&gt;):MatchCollection</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="CombineIntersectFirst(System.Collections.Generic.List`1&lt;MathNet.Symbolics.Backend.Patterns.MatchCollection&gt;):MathNet.Symbolics.Backend.Patterns.Match">
            <Messages>
             <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>System.Collections.Generic.List`1&lt;MathNet.Symbolics.Backend.Patterns.MatchCollection&gt;</Item>
               <Item>MatchCollection.CombineIntersectFirst(List`1&lt;MathNet.Symbolics.Backend.Patterns.MatchCollection&gt;):Match</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="CombineUnion(System.Collections.Generic.List`1&lt;MathNet.Symbolics.Backend.Patterns.MatchCollection&gt;):MathNet.Symbolics.Backend.Patterns.MatchCollection">
            <Messages>
             <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>System.Collections.Generic.List`1&lt;MathNet.Symbolics.Backend.Patterns.MatchCollection&gt;</Item>
               <Item>MatchCollection.CombineUnion(List`1&lt;MathNet.Symbolics.Backend.Patterns.MatchCollection&gt;):MatchCollection</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="OrCondition">
          <Members>
           <Member Name="MergeToCoalescedTreeNode(MathNet.Symbolics.Backend.Patterns.CoalescedTreeNode,System.Collections.Generic.List`1&lt;MathNet.Symbolics.Backend.Patterns.CoalescedTreeNode&gt;):System.Void">
            <Messages>
             <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>System.Collections.Generic.List`1&lt;MathNet.Symbolics.Backend.Patterns.CoalescedTreeNode&gt;</Item>
               <Item>OrCondition.MergeToCoalescedTreeNode(CoalescedTreeNode, List`1&lt;MathNet.Symbolics.Backend.Patterns.CoalescedTreeNode&gt;):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="Pattern">
          <Members>
           <Member Name="MergeGroupToCoalescedTree(MathNet.Symbolics.Core.MathIdentifier,System.Collections.Generic.List`1&lt;MathNet.Symbolics.Backend.Patterns.CoalescedTreeNode&gt;):System.Void">
            <Messages>
             <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>System.Collections.Generic.List`1&lt;MathNet.Symbolics.Backend.Patterns.CoalescedTreeNode&gt;</Item>
               <Item>Pattern.MergeGroupToCoalescedTree(MathIdentifier, List`1&lt;MathNet.Symbolics.Backend.Patterns.CoalescedTreeNode&gt;):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="MergeToCoalescedTree(MathNet.Symbolics.Core.MathIdentifier,System.Collections.Generic.List`1&lt;MathNet.Symbolics.Backend.Patterns.CoalescedTreeNode&gt;):System.Void">
            <Messages>
             <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>System.Collections.Generic.List`1&lt;MathNet.Symbolics.Backend.Patterns.CoalescedTreeNode&gt;</Item>
               <Item>Pattern.MergeToCoalescedTree(MathIdentifier, List`1&lt;MathNet.Symbolics.Backend.Patterns.CoalescedTreeNode&gt;):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="TreePattern">
          <Members>
           <Member Name="MergeToCoalescedTree(MathNet.Symbolics.Core.MathIdentifier,System.Collections.Generic.List`1&lt;MathNet.Symbolics.Backend.Patterns.CoalescedTreeNode&gt;):System.Void">
            <Messages>
             <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>System.Collections.Generic.List`1&lt;MathNet.Symbolics.Backend.Patterns.CoalescedTreeNode&gt;</Item>
               <Item>TreePattern.MergeToCoalescedTree(MathIdentifier, List`1&lt;MathNet.Symbolics.Backend.Patterns.CoalescedTreeNode&gt;):Void</Item>
              </Issue>
             </Message>
             <Message Id="atc" TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>TreePattern.MergeToCoalescedTree(MathIdentifier, List`1&lt;MathNet.Symbolics.Backend.Patterns.CoalescedTreeNode&gt;):Void</Item>
               <Item>atc</Item>
               <Item>MathNet.Symbolics.Backend.Patterns.AlwaysTrueCondition</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
        </Types>
       </Namespace>
       <Namespace Name="MathNet.Symbolics.Backend.Properties">
        <Types>
         <Type Name="Category">
          <Members>
           <Member Name="Deserialize(MathNet.Symbolics.Backend.Context,System.Xml.XmlReader):MathNet.Symbolics.Backend.Properties.Category">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'reader'</Item>
               <Item>Category.Deserialize(Context, XmlReader):Category</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Equals(MathNet.Symbolics.Backend.Properties.Category):System.Boolean">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'other'</Item>
               <Item>Category.Equals(Category):Boolean</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Serialize(System.Xml.XmlWriter,MathNet.Symbolics.Backend.Properties.Category):System.Void">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'category'</Item>
               <Item>Category.Serialize(XmlWriter, Category):Void</Item>
              </Issue>
              <Issue>
               <Item>'writer'</Item>
               <Item>Category.Serialize(XmlWriter, Category):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="TagSignal(MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Backend.Properties.ECategoryMembership,System.Boolean):MathNet.Symbolics.Backend.Properties.CategoryMembershipProperty">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'signal'</Item>
               <Item>Category.TagSignal(Signal, ECategoryMembership, Boolean):CategoryMembershipProperty</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="TryGetCachedMembership(MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Backend.Properties.ECategoryMembership&amp;):System.Boolean">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'signal'</Item>
               <Item>Category.TryGetCachedMembership(Signal, ECategoryMembership&amp;):Boolean</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="CategoryMembershipProperty">
          <Members>
           <Member Name=".ctor(MathNet.Symbolics.Backend.Properties.Category,MathNet.Symbolics.Backend.Properties.ECategoryMembership,System.Boolean)">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'category'</Item>
               <Item>CategoryMembershipProperty.CategoryMembershipProperty(Category, ECategoryMembership, Boolean)</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="InnerDeserialize(MathNet.Symbolics.Backend.Context,System.Xml.XmlReader):MathNet.Symbolics.Backend.Properties.CategoryMembershipProperty">
            <Messages>
             <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>CategoryMembershipProperty.InnerDeserialize(Context, XmlReader):CategoryMembershipProperty</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="Property">
          <Messages>
           <Message TypeName="IdentifiersShouldNotMatchKeywords" Category="Microsoft.Naming" CheckId="CA1716" Created="2006-08-05 09:39:03Z">
            <Issue Name="Type">
             <Item>Property</Item>
             <Item>Property</Item>
            </Issue>
           </Message>
           <Message TypeName="OverrideGetHashCodeOnOverridingEquals" Category="Microsoft.Usage" CheckId="CA2218" Created="2006-08-05 09:39:03Z">
            <Issue>
             <Item>MathNet.Symbolics.Backend.Properties.Property</Item>
            </Issue>
           </Message>
          </Messages>
         </Type>
         <Type Name="PropertyBag">
          <Messages>
           <Message TypeName="IdentifiersShouldHaveCorrectSuffix" Category="Microsoft.Naming" CheckId="CA1710" Created="2006-08-05 09:39:03Z">
            <Issue>
             <Item>MathNet.Symbolics.Backend.Properties.PropertyBag</Item>
             <Item>Collection</Item>
            </Issue>
           </Message>
          </Messages>
          <Members>
           <Member Name=".ctor(MathNet.Symbolics.Backend.Context)">
            <Messages>
             <Message Id="context" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2006-08-05 09:39:03Z" FixCategory="Breaking">
              <Issue>
               <Item>context</Item>
               <Item>PropertyBag.PropertyBag(Context)</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
        </Types>
       </Namespace>
       <Namespace Name="MathNet.Symbolics.Backend.Simulation">
        <Types>
         <Type Name="SignalEventItem">
          <Messages>
           <Message TypeName="OverrideEqualsAndOperatorEqualsOnValueTypes" Category="Microsoft.Performance" CheckId="CA1815" Created="2006-08-05 09:39:03Z">
            <Issue Name="Equals">
             <Item>MathNet.Symbolics.Backend.Simulation.SignalEventItem</Item>
            </Issue>
            <Issue Name="op_Equality">
             <Item>MathNet.Symbolics.Backend.Simulation.SignalEventItem</Item>
            </Issue>
           </Message>
          </Messages>
         </Type>
         <Type Name="TimedSignalEventItem">
          <Messages>
           <Message TypeName="OverrideEqualsAndOperatorEqualsOnValueTypes" Category="Microsoft.Performance" CheckId="CA1815" Created="2006-08-05 09:39:03Z">
            <Issue Name="Equals">
             <Item>MathNet.Symbolics.Backend.Simulation.TimedSignalEventItem</Item>
            </Issue>
            <Issue Name="op_Equality">
             <Item>MathNet.Symbolics.Backend.Simulation.TimedSignalEventItem</Item>
            </Issue>
           </Message>
          </Messages>
         </Type>
        </Types>
       </Namespace>
       <Namespace Name="MathNet.Symbolics.Backend.SystemBuilder">
        <Types>
         <Type Name="BuilderStateMachine">
          <Members>
           <Member Name="AdvanceTo(MathNet.Symbolics.Backend.SystemBuilder.BuilderState):System.Void">
            <Messages>
             <Message Id="System.InvalidOperationException.#ctor(System.String)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>BuilderStateMachine.AdvanceTo(BuilderState):Void</Item>
               <Item>1</Item>
               <Item>InvalidOperationException.InvalidOperationException(String)</Item>
               <Item>Can't move from state ____ to state ____.</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="PropertyPack">
          <Members>
           <Member Name="Pack(MathNet.Symbolics.Backend.Properties.Property,System.Collections.Generic.Dictionary`2&lt;System.Guid,System.Guid&gt;,System.Collections.Generic.Dictionary`2&lt;System.Guid,System.Guid&gt;):MathNet.Symbolics.Backend.SystemBuilder.PropertyPack">
            <Messages>
             <Message Id="busMappings" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2006-08-05 09:39:03Z" FixCategory="Breaking">
              <Issue>
               <Item>busMappings</Item>
               <Item>PropertyPack.Pack(Property, Dictionary`2&lt;System.Guid,System.Guid&gt;, Dictionary`2&lt;System.Guid,System.Guid&gt;):PropertyPack</Item>
              </Issue>
             </Message>
             <Message Id="signalMappings" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2006-08-05 09:39:03Z" FixCategory="Breaking">
              <Issue>
               <Item>signalMappings</Item>
               <Item>PropertyPack.Pack(Property, Dictionary`2&lt;System.Guid,System.Guid&gt;, Dictionary`2&lt;System.Guid,System.Guid&gt;):PropertyPack</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Unpack(MathNet.Symbolics.Backend.Context,System.Collections.Generic.Dictionary`2&lt;System.Guid,MathNet.Symbolics.Core.Signal&gt;,System.Collections.Generic.Dictionary`2&lt;System.Guid,MathNet.Symbolics.Core.Bus&gt;):MathNet.Symbolics.Backend.Properties.Property">
            <Messages>
             <Message Id="buses" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2006-08-05 09:39:03Z" FixCategory="Breaking">
              <Issue>
               <Item>buses</Item>
               <Item>PropertyPack.Unpack(Context, Dictionary`2&lt;System.Guid,MathNet.Symbolics.Core.Signal&gt;, Dictionary`2&lt;System.Guid,MathNet.Symbolics.Core.Bus&gt;):Property</Item>
              </Issue>
             </Message>
             <Message Id="signals" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2006-08-05 09:39:03Z" FixCategory="Breaking">
              <Issue>
               <Item>signals</Item>
               <Item>PropertyPack.Unpack(Context, Dictionary`2&lt;System.Guid,MathNet.Symbolics.Core.Signal&gt;, Dictionary`2&lt;System.Guid,MathNet.Symbolics.Core.Bus&gt;):Property</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="StructurePack">
          <Members>
           <Member Name="Pack(MathNet.Symbolics.Core.ValueStructure,System.Collections.Generic.Dictionary`2&lt;System.Guid,System.Guid&gt;,System.Collections.Generic.Dictionary`2&lt;System.Guid,System.Guid&gt;):MathNet.Symbolics.Backend.SystemBuilder.StructurePack">
            <Messages>
             <Message Id="busMappings" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2006-08-05 09:39:03Z" FixCategory="Breaking">
              <Issue>
               <Item>busMappings</Item>
               <Item>StructurePack.Pack(ValueStructure, Dictionary`2&lt;System.Guid,System.Guid&gt;, Dictionary`2&lt;System.Guid,System.Guid&gt;):StructurePack</Item>
              </Issue>
             </Message>
             <Message Id="signalMappings" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2006-08-05 09:39:03Z" FixCategory="Breaking">
              <Issue>
               <Item>signalMappings</Item>
               <Item>StructurePack.Pack(ValueStructure, Dictionary`2&lt;System.Guid,System.Guid&gt;, Dictionary`2&lt;System.Guid,System.Guid&gt;):StructurePack</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Unpack(MathNet.Symbolics.Backend.Context,System.Collections.Generic.Dictionary`2&lt;System.Guid,MathNet.Symbolics.Core.Signal&gt;,System.Collections.Generic.Dictionary`2&lt;System.Guid,MathNet.Symbolics.Core.Bus&gt;):MathNet.Symbolics.Core.ValueStructure">
            <Messages>
             <Message Id="buses" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2006-08-05 09:39:03Z" FixCategory="Breaking">
              <Issue>
               <Item>buses</Item>
               <Item>StructurePack.Unpack(Context, Dictionary`2&lt;System.Guid,MathNet.Symbolics.Core.Signal&gt;, Dictionary`2&lt;System.Guid,MathNet.Symbolics.Core.Bus&gt;):ValueStructure</Item>
              </Issue>
             </Message>
             <Message Id="signals" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2006-08-05 09:39:03Z" FixCategory="Breaking">
              <Issue>
               <Item>signals</Item>
               <Item>StructurePack.Unpack(Context, Dictionary`2&lt;System.Guid,MathNet.Symbolics.Core.Signal&gt;, Dictionary`2&lt;System.Guid,MathNet.Symbolics.Core.Bus&gt;):ValueStructure</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="SystemReader">
          <Members>
           <Member Name="ReadSystem(MathNet.Symbolics.Workplace.MathSystem):System.Void">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'system'</Item>
               <Item>SystemReader.ReadSystem(MathSystem):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="XmlSystemReader+StateMachine">
          <Members>
           <Member Name=".ctor(System.Xml.XmlReader)">
            <Messages>
             <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>StateMachine.StateMachine(XmlReader)</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Reader">
            <Accessors>
             <Accessor Name="get_Reader():System.Xml.XmlReader">
              <Messages>
               <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Created="2006-08-05 09:39:03Z">
                <Issue>
                 <Item>StateMachine.get_Reader():XmlReader</Item>
                </Issue>
               </Message>
              </Messages>
             </Accessor>
            </Accessors>
           </Member>
          </Members>
         </Type>
         <Type Name="XmlSystemWriter">
          <Members>
           <Member Name="AppendSignalConstraint(System.Guid,MathNet.Symbolics.Backend.SystemBuilder.PropertyPack):System.Void">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'constraint'</Item>
               <Item>XmlSystemWriter.AppendSignalConstraint(Guid, PropertyPack):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="AppendSignalProperty(System.Guid,MathNet.Symbolics.Backend.SystemBuilder.PropertyPack):System.Void">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'property'</Item>
               <Item>XmlSystemWriter.AppendSignalProperty(Guid, PropertyPack):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="AppendSignalValue(System.Guid,MathNet.Symbolics.Backend.SystemBuilder.StructurePack):System.Void">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'value'</Item>
               <Item>XmlSystemWriter.AppendSignalValue(Guid, StructurePack):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="XmlSystemWriter+StateMachine">
          <Members>
           <Member Name="Writer">
            <Accessors>
             <Accessor Name="get_Writer():System.Xml.XmlWriter">
              <Messages>
               <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Created="2006-08-05 09:39:03Z">
                <Issue>
                 <Item>StateMachine.get_Writer():XmlWriter</Item>
                </Issue>
               </Message>
              </Messages>
             </Accessor>
            </Accessors>
           </Member>
          </Members>
         </Type>
        </Types>
       </Namespace>
       <Namespace Name="MathNet.Symbolics.Backend.Templates">
        <Types>
         <Type Name="CompoundArchitectureFactory">
          <Members>
           <Member Name=".ctor(MathNet.Symbolics.Core.MathIdentifier,MathNet.Symbolics.Core.MathIdentifier,MathNet.Symbolics.Workplace.MathSystem)">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'system'</Item>
               <Item>CompoundArchitectureFactory.CompoundArchitectureFactory(MathIdentifier, MathIdentifier, MathSystem)</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="GenericFunctionProcess">
          <Members>
           <Member Name=".ctor(System.Boolean[],System.Boolean[],System.Boolean[],System.Boolean[])">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'inInput'</Item>
               <Item>GenericFunctionProcess.GenericFunctionProcess(Boolean[], Boolean[], Boolean[], Boolean[])</Item>
              </Issue>
              <Issue>
               <Item>'inInput'</Item>
               <Item>GenericFunctionProcess.GenericFunctionProcess(Boolean[], Boolean[], Boolean[], Boolean[])</Item>
              </Issue>
              <Issue>
               <Item>'inInternal'</Item>
               <Item>GenericFunctionProcess.GenericFunctionProcess(Boolean[], Boolean[], Boolean[], Boolean[])</Item>
              </Issue>
              <Issue>
               <Item>'inInternal'</Item>
               <Item>GenericFunctionProcess.GenericFunctionProcess(Boolean[], Boolean[], Boolean[], Boolean[])</Item>
              </Issue>
              <Issue>
               <Item>'outInternal'</Item>
               <Item>GenericFunctionProcess.GenericFunctionProcess(Boolean[], Boolean[], Boolean[], Boolean[])</Item>
              </Issue>
              <Issue>
               <Item>'outInternal'</Item>
               <Item>GenericFunctionProcess.GenericFunctionProcess(Boolean[], Boolean[], Boolean[], Boolean[])</Item>
              </Issue>
              <Issue>
               <Item>'outOutput'</Item>
               <Item>GenericFunctionProcess.GenericFunctionProcess(Boolean[], Boolean[], Boolean[], Boolean[])</Item>
              </Issue>
              <Issue>
               <Item>'outOutput'</Item>
               <Item>GenericFunctionProcess.GenericFunctionProcess(Boolean[], Boolean[], Boolean[], Boolean[])</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name=".ctor(System.Int32,System.Int32,System.Int32)">
            <Messages>
             <Message Id="output+1" TypeName="OperationsShouldNotOverflow" Category="Microsoft.Usage" CheckId="CA2233" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>output+1</Item>
               <Item>GenericFunctionProcess.GenericFunctionProcess(Int32, Int32, Int32)</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Inputs">
            <Messages>
             <Message TypeName="PropertiesShouldNotReturnArrays" Category="Microsoft.Performance" CheckId="CA1819" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>GenericFunctionProcess.Inputs:Signal[]</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Outputs">
            <Messages>
             <Message TypeName="PropertiesShouldNotReturnArrays" Category="Microsoft.Performance" CheckId="CA1819" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>GenericFunctionProcess.Outputs:Signal[]</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="GenericMathOpArchitecture">
          <Messages>
           <Message TypeName="ShortAcronymsShouldBeUppercase" Category="Microsoft.Naming" CheckId="CA1706" Created="2006-08-05 09:39:03Z">
            <Issue Name="Type">
             <Item>Op</Item>
             <Item>MathNet.Symbolics.Backend.Templates.GenericMathOpArchitecture</Item>
            </Issue>
           </Message>
          </Messages>
         </Type>
         <Type Name="GenericSimpleArchitecture">
          <Members>
           <Member Name=".ctor(MathNet.Symbolics.Core.MathIdentifier,System.Boolean,MathNet.Symbolics.Core.Port,System.Int32)">
            <Messages>
             <Message TypeName="DoNotCallOverridableMethodsInConstructors" Category="Microsoft.Usage" CheckId="CA2214" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>GenericSimpleArchitecture.GenericSimpleArchitecture(MathIdentifier, Boolean, Port, Int32)</Item>
               <Item>&#xD;&#xA;&#xD;&#xA;GenericSimpleArchitecture.GenericSimpleArchitecture(MathIdentifier, Boolean, Port, Int32)&#xD;&#xA;GenericSimpleArchitecture.Action(IList`1&lt;MathNet.Symbolics.Core.Signal&gt;, IList`1&lt;MathNet.Symbolics.Core.Signal&gt;, IList`1&lt;MathNet.Symbolics.Core.Signal&gt;, IList`1&lt;MathNet.Symbolics.Core.Bus&gt;):Void</Item>
              </Issue>
              <Issue>
               <Item>GenericSimpleArchitecture.GenericSimpleArchitecture(MathIdentifier, Boolean, Port, Int32)</Item>
               <Item>&#xD;&#xA;&#xD;&#xA;GenericSimpleArchitecture.GenericSimpleArchitecture(MathIdentifier, Boolean, Port, Int32)&#xD;&#xA;GenericSimpleArchitecture.SenseSignals(IList`1&lt;MathNet.Symbolics.Core.Signal&gt;, IList`1&lt;MathNet.Symbolics.Core.Signal&gt;, IList`1&lt;MathNet.Symbolics.Core.Bus&gt;, IList`1&lt;MathNet.Symbolics.Core.Signal&gt;):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
        </Types>
       </Namespace>
       <Namespace Name="MathNet.Symbolics.Backend.Traversing">
        <Types>
         <Type Name="PortPathCollectVisitor">
          <Members>
           <Member Name="Paths">
            <Messages>
             <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>System.Collections.Generic.List`1&lt;System.Collections.Generic.List`1&lt;MathNet.Symbolics.Core.Port&gt;&gt;</Item>
               <Item>PortPathCollectVisitor.Paths:List`1&lt;System.Collections.Generic.List`1&lt;MathNet.Symbolics.Core.Port&gt;&gt;</Item>
              </Issue>
             </Message>
             <Message TypeName="DoNotNestGenericTypesInMemberSignatures" Category="Microsoft.Design" CheckId="CA1006" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>PortPathCollectVisitor.Paths:List`1&lt;System.Collections.Generic.List`1&lt;MathNet.Symbolics.Core.Port&gt;&gt;</Item>
               <Item>System.Collections.Generic.List`1&lt;System.Collections.Generic.List`1&lt;MathNet.Symbolics.Core.Port&gt;&gt;</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="SignalPathCollectVisitor">
          <Members>
           <Member Name="Paths">
            <Messages>
             <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>System.Collections.Generic.List`1&lt;System.Collections.Generic.List`1&lt;MathNet.Symbolics.Core.Signal&gt;&gt;</Item>
               <Item>SignalPathCollectVisitor.Paths:List`1&lt;System.Collections.Generic.List`1&lt;MathNet.Symbolics.Core.Signal&gt;&gt;</Item>
              </Issue>
             </Message>
             <Message TypeName="DoNotNestGenericTypesInMemberSignatures" Category="Microsoft.Design" CheckId="CA1006" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>SignalPathCollectVisitor.Paths:List`1&lt;System.Collections.Generic.List`1&lt;MathNet.Symbolics.Core.Signal&gt;&gt;</Item>
               <Item>System.Collections.Generic.List`1&lt;System.Collections.Generic.List`1&lt;MathNet.Symbolics.Core.Signal&gt;&gt;</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
        </Types>
       </Namespace>
       <Namespace Name="MathNet.Symbolics.Backend.ValueConversion">
        <Types>
         <Type Name="ConversionRouter">
          <Members>
           <Member Name="AddSourceNeighbor(MathNet.Symbolics.Backend.ValueConversion.ConversionRouter,System.Boolean,System.Converter`2&lt;MathNet.Symbolics.Core.ValueStructure,MathNet.Symbolics.Core.ValueStructure&gt;):System.Void">
            <Messages>
             <Message Id="0#" TypeName="ShortAcronymsShouldBeUppercase" Category="Microsoft.Naming" CheckId="CA1706" Created="2006-08-05 09:39:03Z">
              <Issue Name="Parameter">
               <Item>We</Item>
               <Item>routerWeCanConvertFrom</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
        </Types>
       </Namespace>
       <Namespace Name="MathNet.Symbolics.Core">
        <Types>
         <Type Name="Bus">
          <Members>
           <Member Name="AcceptSystemBuilderAfter(MathNet.Symbolics.Backend.SystemBuilder.ISystemBuilder,System.Collections.Generic.Dictionary`2&lt;System.Guid,System.Guid&gt;,System.Collections.Generic.Dictionary`2&lt;System.Guid,System.Guid&gt;):System.Void">
            <Messages>
             <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>Bus.AcceptSystemBuilderAfter(ISystemBuilder, Dictionary`2&lt;System.Guid,System.Guid&gt;, Dictionary`2&lt;System.Guid,System.Guid&gt;):Void</Item>
              </Issue>
             </Message>
             <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Created="2006-08-05 09:39:03Z" FixCategory="NonBreaking">
              <Issue>
               <Item>Bus.AcceptSystemBuilderAfter(ISystemBuilder, Dictionary`2&lt;System.Guid,System.Guid&gt;, Dictionary`2&lt;System.Guid,System.Guid&gt;):Void</Item>
              </Issue>
             </Message>
             <Message Id="builder" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2006-08-05 09:39:03Z" FixCategory="NonBreaking">
              <Issue>
               <Item>builder</Item>
               <Item>Bus.AcceptSystemBuilderAfter(ISystemBuilder, Dictionary`2&lt;System.Guid,System.Guid&gt;, Dictionary`2&lt;System.Guid,System.Guid&gt;):Void</Item>
              </Issue>
             </Message>
             <Message Id="busMappings" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2006-08-05 09:39:03Z" FixCategory="NonBreaking">
              <Issue>
               <Item>busMappings</Item>
               <Item>Bus.AcceptSystemBuilderAfter(ISystemBuilder, Dictionary`2&lt;System.Guid,System.Guid&gt;, Dictionary`2&lt;System.Guid,System.Guid&gt;):Void</Item>
              </Issue>
             </Message>
             <Message Id="signalMappings" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2006-08-05 09:39:03Z" FixCategory="NonBreaking">
              <Issue>
               <Item>signalMappings</Item>
               <Item>Bus.AcceptSystemBuilderAfter(ISystemBuilder, Dictionary`2&lt;System.Guid,System.Guid&gt;, Dictionary`2&lt;System.Guid,System.Guid&gt;):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="Entity">
          <Members>
           <Member Name="Buses">
            <Messages>
             <Message TypeName="PropertiesShouldNotReturnArrays" Category="Microsoft.Performance" CheckId="CA1819" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>Entity.Buses:String[]</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="InputSignals">
            <Messages>
             <Message TypeName="PropertiesShouldNotReturnArrays" Category="Microsoft.Performance" CheckId="CA1819" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>Entity.InputSignals:String[]</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="OutputSignals">
            <Messages>
             <Message TypeName="PropertiesShouldNotReturnArrays" Category="Microsoft.Performance" CheckId="CA1819" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>Entity.OutputSignals:String[]</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="Port">
          <Members>
           <Member Name="MapBuses(MathNet.Symbolics.Backend.Containers.BusSet,System.Collections.Generic.Dictionary`2&lt;System.Guid,System.Guid&gt;):MathNet.Symbolics.Backend.Containers.InstanceIdSet">
            <Messages>
             <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Created="2006-08-05 09:39:03Z" FixCategory="NonBreaking">
              <Issue>
               <Item>Port.MapBuses(BusSet, Dictionary`2&lt;System.Guid,System.Guid&gt;):InstanceIdSet</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="MapSignals(MathNet.Symbolics.Backend.Containers.SignalSet,System.Collections.Generic.Dictionary`2&lt;System.Guid,System.Guid&gt;):MathNet.Symbolics.Backend.Containers.InstanceIdSet">
            <Messages>
             <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Created="2006-08-05 09:39:03Z" FixCategory="NonBreaking">
              <Issue>
               <Item>Port.MapSignals(SignalSet, Dictionary`2&lt;System.Guid,System.Guid&gt;):InstanceIdSet</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="Signal">
          <Members>
           <Member Name="op_Addition(MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Signal):MathNet.Symbolics.Core.Signal">
            <Messages>
             <Message TypeName="OperatorOverloadsHaveNamedAlternates" Category="Microsoft.Usage" CheckId="CA2225" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>Add</Item>
               <Item>Signal.op_Addition(Signal, Signal):Signal</Item>
              </Issue>
             </Message>
             <Message TypeName="OverloadOperatorEqualsOnOverloadingAddAndSubtract" Category="Microsoft.Design" CheckId="CA1013" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>Signal</Item>
               <Item>Signal.op_Addition(Signal, Signal):Signal</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="op_Division(MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Signal):MathNet.Symbolics.Core.Signal">
            <Messages>
             <Message TypeName="OperatorOverloadsHaveNamedAlternates" Category="Microsoft.Usage" CheckId="CA2225" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>Divide</Item>
               <Item>Signal.op_Division(Signal, Signal):Signal</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="op_Multiply(MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Signal):MathNet.Symbolics.Core.Signal">
            <Messages>
             <Message TypeName="OperatorOverloadsHaveNamedAlternates" Category="Microsoft.Usage" CheckId="CA2225" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>Multiply</Item>
               <Item>Signal.op_Multiply(Signal, Signal):Signal</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="op_Subtraction(MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Signal):MathNet.Symbolics.Core.Signal">
            <Messages>
             <Message TypeName="OperatorOverloadsHaveNamedAlternates" Category="Microsoft.Usage" CheckId="CA2225" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>Subtract</Item>
               <Item>Signal.op_Subtraction(Signal, Signal):Signal</Item>
              </Issue>
             </Message>
             <Message TypeName="OverloadOperatorEqualsOnOverloadingAddAndSubtract" Category="Microsoft.Design" CheckId="CA1013" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>Signal</Item>
               <Item>Signal.op_Subtraction(Signal, Signal):Signal</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="op_UnaryNegation(MathNet.Symbolics.Core.Signal):MathNet.Symbolics.Core.Signal">
            <Messages>
             <Message TypeName="OperatorOverloadsHaveNamedAlternates" Category="Microsoft.Usage" CheckId="CA2225" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>Negate</Item>
               <Item>Signal.op_UnaryNegation(Signal):Signal</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="op_UnaryPlus(MathNet.Symbolics.Core.Signal):MathNet.Symbolics.Core.Signal">
            <Messages>
             <Message TypeName="OperatorOverloadsHaveNamedAlternates" Category="Microsoft.Usage" CheckId="CA2225" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>Plus</Item>
               <Item>Signal.op_UnaryPlus(Signal):Signal</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="ValueStructure">
          <Messages>
           <Message TypeName="OverrideGetHashCodeOnOverridingEquals" Category="Microsoft.Usage" CheckId="CA2218" Created="2006-08-05 09:39:03Z">
            <Issue>
             <Item>MathNet.Symbolics.Core.ValueStructure</Item>
            </Issue>
           </Message>
          </Messages>
         </Type>
        </Types>
       </Namespace>
       <Namespace Name="MathNet.Symbolics.StdPackage">
        <Types>
         <Type Name="AlgebraicExpressionCategory">
          <Members>
           <Member Name="InnerDeserialize(MathNet.Symbolics.Backend.Context,System.Xml.XmlReader):MathNet.Symbolics.StdPackage.AlgebraicExpressionCategory">
            <Messages>
             <Message Id="context" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2006-08-05 09:39:03Z" FixCategory="Breaking">
              <Issue>
               <Item>context</Item>
               <Item>AlgebraicExpressionCategory.InnerDeserialize(Context, XmlReader):AlgebraicExpressionCategory</Item>
              </Issue>
             </Message>
             <Message Id="reader" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2006-08-05 09:39:03Z" FixCategory="Breaking">
              <Issue>
               <Item>reader</Item>
               <Item>AlgebraicExpressionCategory.InnerDeserialize(Context, XmlReader):AlgebraicExpressionCategory</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="IsMember(MathNet.Symbolics.Core.Signal,System.Boolean):MathNet.Symbolics.Backend.Properties.ECategoryMembership">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'signal'</Item>
               <Item>AlgebraicExpressionCategory.IsMember(Signal, Boolean):ECategoryMembership</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="AlgebraicStructureCategory">
          <Members>
           <Member Name=".ctor(MathNet.Symbolics.StdPackage.EAlgebraicStructure,MathNet.Symbolics.Core.Entity)">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'additive'</Item>
               <Item>AlgebraicStructureCategory.AlgebraicStructureCategory(EAlgebraicStructure, Entity)</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name=".ctor(MathNet.Symbolics.StdPackage.EAlgebraicStructure,MathNet.Symbolics.Core.Entity,MathNet.Symbolics.Core.Entity)">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'additive'</Item>
               <Item>AlgebraicStructureCategory.AlgebraicStructureCategory(EAlgebraicStructure, Entity, Entity)</Item>
              </Issue>
              <Issue>
               <Item>'multiplicative'</Item>
               <Item>AlgebraicStructureCategory.AlgebraicStructureCategory(EAlgebraicStructure, Entity, Entity)</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="InnerDeserialize(MathNet.Symbolics.Backend.Context,System.Xml.XmlReader):MathNet.Symbolics.StdPackage.AlgebraicStructureCategory">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'context'</Item>
               <Item>AlgebraicStructureCategory.InnerDeserialize(Context, XmlReader):AlgebraicStructureCategory</Item>
              </Issue>
              <Issue>
               <Item>'reader'</Item>
               <Item>AlgebraicStructureCategory.InnerDeserialize(Context, XmlReader):AlgebraicStructureCategory</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="IsMember(MathNet.Symbolics.Core.Signal,System.Boolean):MathNet.Symbolics.Backend.Properties.ECategoryMembership">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'signal'</Item>
               <Item>AlgebraicStructureCategory.IsMember(Signal, Boolean):ECategoryMembership</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="EAlgebraicStructure">
          <Messages>
           <Message TypeName="FlagsEnumsShouldHavePluralNames" Category="Microsoft.Naming" CheckId="CA1714" Created="2006-08-05 09:39:03Z">
            <Issue>
             <Item>EAlgebraicStructure</Item>
            </Issue>
           </Message>
          </Messages>
         </Type>
         <Type Name="Std">
          <Members>
           <Member Name="Cosecant(MathNet.Symbolics.Backend.Context,MathNet.Symbolics.Core.Signal):MathNet.Symbolics.Core.Signal">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'context'</Item>
               <Item>Std.Cosecant(Context, Signal):Signal</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Cosine(MathNet.Symbolics.Backend.Context,MathNet.Symbolics.Core.Signal):MathNet.Symbolics.Core.Signal">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'context'</Item>
               <Item>Std.Cosine(Context, Signal):Signal</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Cotangent(MathNet.Symbolics.Backend.Context,MathNet.Symbolics.Core.Signal):MathNet.Symbolics.Core.Signal">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'context'</Item>
               <Item>Std.Cotangent(Context, Signal):Signal</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="IsAdditiveIdentity(MathNet.Symbolics.Core.Signal):System.Boolean">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'signal'</Item>
               <Item>Std.IsAdditiveIdentity(Signal):Boolean</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="IsAlwaysInteger(MathNet.Symbolics.Core.Signal):System.Boolean">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'signal'</Item>
               <Item>Std.IsAlwaysInteger(Signal):Boolean</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="IsAlwaysPositiveInteger(MathNet.Symbolics.Core.Signal):System.Boolean">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'signal'</Item>
               <Item>Std.IsAlwaysPositiveInteger(Signal):Boolean</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="IsAlwaysRational(MathNet.Symbolics.Core.Signal):System.Boolean">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'signal'</Item>
               <Item>Std.IsAlwaysRational(Signal):Boolean</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="IsAlwaysReal(MathNet.Symbolics.Core.Signal):System.Boolean">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'signal'</Item>
               <Item>Std.IsAlwaysReal(Signal):Boolean</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="IsConstant(MathNet.Symbolics.Core.Signal):System.Boolean">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'signal'</Item>
               <Item>Std.IsConstant(Signal):Boolean</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="IsMonomial(MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Signal):System.Boolean">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'signal'</Item>
               <Item>Std.IsMonomial(Signal, Signal):Boolean</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="IsMultiplicativeIdentity(MathNet.Symbolics.Core.Signal):System.Boolean">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'signal'</Item>
               <Item>Std.IsMultiplicativeIdentity(Signal):Boolean</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="IsRational(MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Signal):System.Boolean">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'signal'</Item>
               <Item>Std.IsRational(Signal, Signal):Boolean</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="IsUndefined(MathNet.Symbolics.Core.Signal):System.Boolean">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'signal'</Item>
               <Item>Std.IsUndefined(Signal):Boolean</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="MonomialCoefficient(MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.ValueStructure&amp;):MathNet.Symbolics.Core.Signal">
            <Messages>
             <Message Id="2#" TypeName="AvoidOutParameters" Category="Microsoft.Design" CheckId="CA1021" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>degree</Item>
              </Issue>
             </Message>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'signal'</Item>
               <Item>Std.MonomialCoefficient(Signal, Signal, ValueStructure&amp;):Signal</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="MonomialDegree(MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Signal):MathNet.Symbolics.Core.ValueStructure">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'signal'</Item>
               <Item>Std.MonomialDegree(Signal, Signal):ValueStructure</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Numerator(MathNet.Symbolics.Core.Signal):MathNet.Symbolics.Core.Signal">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'signal'</Item>
               <Item>Std.Numerator(Signal):Signal</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="PolynomialCoefficient(MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Signal,System.Int32):MathNet.Symbolics.Core.Signal">
            <Messages>
             <Message TypeName="DoNotCastUnnecessarily" Category="Microsoft.Performance" CheckId="CA1800" Created="2006-08-05 09:39:03Z">
              <Issue Name="Local">
               <Item>vs</Item>
               <Item>MathNet.Symbolics.StdPackage.Structures.IntegerValue</Item>
               <Item>Std.PolynomialCoefficient(Signal, Signal, Int32):Signal</Item>
               <Item>isint</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="PolynomialCoefficients(MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Signal):MathNet.Symbolics.Core.Signal[]">
            <Messages>
             <Message TypeName="DoNotCastUnnecessarily" Category="Microsoft.Performance" CheckId="CA1800" Created="2006-08-05 09:39:03Z">
              <Issue Name="Local">
               <Item>vs</Item>
               <Item>MathNet.Symbolics.StdPackage.Structures.IntegerValue</Item>
               <Item>Std.PolynomialCoefficients(Signal, Signal):Signal[]</Item>
               <Item>isint</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="PolynomialDegree(MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Signal):MathNet.Symbolics.Core.ValueStructure">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'signal'</Item>
               <Item>Std.PolynomialDegree(Signal, Signal):ValueStructure</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="PolynomialDegree(MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Signal[]):MathNet.Symbolics.Core.ValueStructure">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'signal'</Item>
               <Item>Std.PolynomialDegree(Signal, Signal[]):ValueStructure</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="PolynomialLeadingCoefficient(MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Signal):MathNet.Symbolics.Core.Signal">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'signal'</Item>
               <Item>Std.PolynomialLeadingCoefficient(Signal, Signal):Signal</Item>
              </Issue>
              <Issue>
               <Item>'signal'</Item>
               <Item>Std.PolynomialLeadingCoefficient(Signal, Signal):Signal</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Secant(MathNet.Symbolics.Backend.Context,MathNet.Symbolics.Core.Signal):MathNet.Symbolics.Core.Signal">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'context'</Item>
               <Item>Std.Secant(Context, Signal):Signal</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="SeparateFactors(MathNet.Symbolics.Backend.Context,MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Signal):MathNet.Symbolics.Core.Signal[]">
            <Messages>
             <Message Id="2#x" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:39:03Z">
              <Issue Name="ParameterOneLetter">
               <Item>Std.SeparateFactors(Context, Signal, Signal):Signal[]</Item>
               <Item>x</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Sine(MathNet.Symbolics.Backend.Context,MathNet.Symbolics.Core.Signal):MathNet.Symbolics.Core.Signal">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'context'</Item>
               <Item>Std.Sine(Context, Signal):Signal</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Tangent(MathNet.Symbolics.Backend.Context,MathNet.Symbolics.Core.Signal):MathNet.Symbolics.Core.Signal">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'context'</Item>
               <Item>Std.Tangent(Context, Signal):Signal</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="TrigonometricSubstitute(MathNet.Symbolics.Core.Signal):MathNet.Symbolics.Core.Signal">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'signal'</Item>
               <Item>Std.TrigonometricSubstitute(Signal):Signal</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="StdPackageManager">
          <Members>
           <Member Name="AppendArchitectures(MathNet.Symbolics.Backend.Containers.ArchitectureTable):System.Void">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'table'</Item>
               <Item>StdPackageManager.AppendArchitectures(ArchitectureTable):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="AppendEntities(MathNet.Symbolics.Backend.Containers.EntityTable):System.Void">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'table'</Item>
               <Item>StdPackageManager.AppendEntities(EntityTable):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
        </Types>
       </Namespace>
       <Namespace Name="MathNet.Symbolics.StdPackage.Analysis">
        <Types>
         <Type Name="AlgebraicDerivativeArchitecture">
          <Members>
           <Member Name="SupportsPort(MathNet.Symbolics.Core.Port):System.Boolean">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'port'</Item>
               <Item>AlgebraicDerivativeArchitecture.SupportsPort(Port):Boolean</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="DerivativeTransformation">
          <Members>
           <Member Name="ManipulateSignal(MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Signal,System.Boolean):MathNet.Symbolics.Core.Signal">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'original'</Item>
               <Item>DerivativeTransformation.ManipulateSignal(Signal, Signal, Boolean):Signal</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
        </Types>
       </Namespace>
       <Namespace Name="MathNet.Symbolics.StdPackage.Arithmetics">
        <Types>
         <Type Name="AbsoluteArchitectures">
          <Members>
           <Member Name="BuildTheorems(MathNet.Symbolics.Backend.Context):MathNet.Symbolics.Backend.Theorems.ITheorem[]">
            <Messages>
             <Message Id="context" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2006-08-05 09:39:03Z" FixCategory="Breaking">
              <Issue>
               <Item>context</Item>
               <Item>AbsoluteArchitectures.BuildTheorems(Context):ITheorem[]</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="PowerArchitectures">
          <Members>
           <Member Name="BuildTheorems(MathNet.Symbolics.Backend.Context):MathNet.Symbolics.Backend.Theorems.ITheorem[]">
            <Messages>
             <Message Id="context" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2006-08-05 09:39:03Z" FixCategory="Breaking">
              <Issue>
               <Item>context</Item>
               <Item>PowerArchitectures.BuildTheorems(Context):ITheorem[]</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
        </Types>
       </Namespace>
       <Namespace Name="MathNet.Symbolics.StdPackage.Flow">
        <Types>
         <Type Name="SyncArchitecture">
          <Members>
           <Member Name="SupportsPort(MathNet.Symbolics.Core.Port):System.Boolean">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'port'</Item>
               <Item>SyncArchitecture.SupportsPort(Port):Boolean</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="TransportArchitecture">
          <Members>
           <Member Name="BuildTheorems(MathNet.Symbolics.Backend.Context):MathNet.Symbolics.Backend.Theorems.ITheorem[]">
            <Messages>
             <Message Id="context" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2006-08-05 09:39:03Z" FixCategory="Breaking">
              <Issue>
               <Item>context</Item>
               <Item>TransportArchitecture.BuildTheorems(Context):ITheorem[]</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="SupportsPort(MathNet.Symbolics.Core.Port):System.Boolean">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'port'</Item>
               <Item>TransportArchitecture.SupportsPort(Port):Boolean</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
        </Types>
       </Namespace>
       <Namespace Name="MathNet.Symbolics.StdPackage.Properties">
        <Types>
         <Type Name="ConstantSignalProperty">
          <Members>
           <Member Name="InnerDeserialize(MathNet.Symbolics.Backend.Context,System.Xml.XmlReader):MathNet.Symbolics.StdPackage.Properties.ConstantSignalProperty">
            <Messages>
             <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>ConstantSignalProperty.InnerDeserialize(Context, XmlReader):ConstantSignalProperty</Item>
              </Issue>
             </Message>
             <Message Id="context" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2006-08-05 09:39:03Z" FixCategory="NonBreaking">
              <Issue>
               <Item>context</Item>
               <Item>ConstantSignalProperty.InnerDeserialize(Context, XmlReader):ConstantSignalProperty</Item>
              </Issue>
             </Message>
             <Message Id="reader" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2006-08-05 09:39:03Z" FixCategory="NonBreaking">
              <Issue>
               <Item>reader</Item>
               <Item>ConstantSignalProperty.InnerDeserialize(Context, XmlReader):ConstantSignalProperty</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="IntegerSetProperty">
          <Members>
           <Member Name="InnerDeserialize(MathNet.Symbolics.Backend.Context,System.Xml.XmlReader):MathNet.Symbolics.StdPackage.Properties.IntegerSetProperty">
            <Messages>
             <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>IntegerSetProperty.InnerDeserialize(Context, XmlReader):IntegerSetProperty</Item>
              </Issue>
             </Message>
             <Message Id="context" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2006-08-05 09:39:03Z" FixCategory="NonBreaking">
              <Issue>
               <Item>context</Item>
               <Item>IntegerSetProperty.InnerDeserialize(Context, XmlReader):IntegerSetProperty</Item>
              </Issue>
             </Message>
             <Message Id="reader" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2006-08-05 09:39:03Z" FixCategory="NonBreaking">
              <Issue>
               <Item>reader</Item>
               <Item>IntegerSetProperty.InnerDeserialize(Context, XmlReader):IntegerSetProperty</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="StillValidAfterEvent(MathNet.Symbolics.Core.Signal):System.Boolean">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'signal'</Item>
               <Item>IntegerSetProperty.StillValidAfterEvent(Signal):Boolean</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="PositiveIntegerSetProperty">
          <Members>
           <Member Name="InnerDeserialize(MathNet.Symbolics.Backend.Context,System.Xml.XmlReader):MathNet.Symbolics.StdPackage.Properties.PositiveIntegerSetProperty">
            <Messages>
             <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>PositiveIntegerSetProperty.InnerDeserialize(Context, XmlReader):PositiveIntegerSetProperty</Item>
              </Issue>
             </Message>
             <Message Id="context" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2006-08-05 09:39:03Z" FixCategory="NonBreaking">
              <Issue>
               <Item>context</Item>
               <Item>PositiveIntegerSetProperty.InnerDeserialize(Context, XmlReader):PositiveIntegerSetProperty</Item>
              </Issue>
             </Message>
             <Message Id="reader" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2006-08-05 09:39:03Z" FixCategory="NonBreaking">
              <Issue>
               <Item>reader</Item>
               <Item>PositiveIntegerSetProperty.InnerDeserialize(Context, XmlReader):PositiveIntegerSetProperty</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="StillValidAfterEvent(MathNet.Symbolics.Core.Signal):System.Boolean">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'signal'</Item>
               <Item>PositiveIntegerSetProperty.StillValidAfterEvent(Signal):Boolean</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="RationalSetProperty">
          <Members>
           <Member Name="InnerDeserialize(MathNet.Symbolics.Backend.Context,System.Xml.XmlReader):MathNet.Symbolics.StdPackage.Properties.RationalSetProperty">
            <Messages>
             <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>RationalSetProperty.InnerDeserialize(Context, XmlReader):RationalSetProperty</Item>
              </Issue>
             </Message>
             <Message Id="context" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2006-08-05 09:39:03Z" FixCategory="NonBreaking">
              <Issue>
               <Item>context</Item>
               <Item>RationalSetProperty.InnerDeserialize(Context, XmlReader):RationalSetProperty</Item>
              </Issue>
             </Message>
             <Message Id="reader" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2006-08-05 09:39:03Z" FixCategory="NonBreaking">
              <Issue>
               <Item>reader</Item>
               <Item>RationalSetProperty.InnerDeserialize(Context, XmlReader):RationalSetProperty</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="StillValidAfterEvent(MathNet.Symbolics.Core.Signal):System.Boolean">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'signal'</Item>
               <Item>RationalSetProperty.StillValidAfterEvent(Signal):Boolean</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="RealSetProperty">
          <Members>
           <Member Name="InnerDeserialize(MathNet.Symbolics.Backend.Context,System.Xml.XmlReader):MathNet.Symbolics.StdPackage.Properties.RealSetProperty">
            <Messages>
             <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>RealSetProperty.InnerDeserialize(Context, XmlReader):RealSetProperty</Item>
              </Issue>
             </Message>
             <Message Id="context" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2006-08-05 09:39:03Z" FixCategory="NonBreaking">
              <Issue>
               <Item>context</Item>
               <Item>RealSetProperty.InnerDeserialize(Context, XmlReader):RealSetProperty</Item>
              </Issue>
             </Message>
             <Message Id="reader" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2006-08-05 09:39:03Z" FixCategory="NonBreaking">
              <Issue>
               <Item>reader</Item>
               <Item>RealSetProperty.InnerDeserialize(Context, XmlReader):RealSetProperty</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="StillValidAfterEvent(MathNet.Symbolics.Core.Signal):System.Boolean">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'signal'</Item>
               <Item>RealSetProperty.StillValidAfterEvent(Signal):Boolean</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
        </Types>
       </Namespace>
       <Namespace Name="MathNet.Symbolics.StdPackage.Structures">
        <Types>
         <Type Name="ComplexInfinitySymbol">
          <Members>
           <Member Name="Constant(MathNet.Symbolics.Backend.Context):MathNet.Symbolics.Core.Signal">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'context'</Item>
               <Item>ComplexInfinitySymbol.Constant(Context):Signal</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="ConvertFrom(MathNet.Symbolics.Core.ValueStructure):MathNet.Symbolics.StdPackage.Structures.ComplexInfinitySymbol">
            <Messages>
             <Message Id="value" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2006-08-05 09:39:03Z" FixCategory="Breaking">
              <Issue>
               <Item>value</Item>
               <Item>ComplexInfinitySymbol.ConvertFrom(ValueStructure):ComplexInfinitySymbol</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="InnerDeserialize(MathNet.Symbolics.Backend.Context,System.Xml.XmlReader):MathNet.Symbolics.StdPackage.Structures.ComplexInfinitySymbol">
            <Messages>
             <Message Id="context" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2006-08-05 09:39:03Z" FixCategory="NonBreaking">
              <Issue>
               <Item>context</Item>
               <Item>ComplexInfinitySymbol.InnerDeserialize(Context, XmlReader):ComplexInfinitySymbol</Item>
              </Issue>
             </Message>
             <Message Id="reader" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2006-08-05 09:39:03Z" FixCategory="NonBreaking">
              <Issue>
               <Item>reader</Item>
               <Item>ComplexInfinitySymbol.InnerDeserialize(Context, XmlReader):ComplexInfinitySymbol</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="ComplexValue">
          <Members>
           <Member Name=".ctor(MathNet.Symbolics.StdPackage.Structures.IntegerValue)">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'realValue'</Item>
               <Item>ComplexValue.ComplexValue(IntegerValue)</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name=".ctor(MathNet.Symbolics.StdPackage.Structures.RationalValue)">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'realValue'</Item>
               <Item>ComplexValue.ComplexValue(RationalValue)</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name=".ctor(MathNet.Symbolics.StdPackage.Structures.RealValue)">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'realValue'</Item>
               <Item>ComplexValue.ComplexValue(RealValue)</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name=".ctor(MathNet.Symbolics.StdPackage.Structures.RealValue,MathNet.Symbolics.StdPackage.Structures.RealValue)">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'imagValue'</Item>
               <Item>ComplexValue.ComplexValue(RealValue, RealValue)</Item>
              </Issue>
              <Issue>
               <Item>'realValue'</Item>
               <Item>ComplexValue.ComplexValue(RealValue, RealValue)</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Absolute(MathNet.Symbolics.StdPackage.Structures.ComplexValue):MathNet.Symbolics.StdPackage.Structures.RealValue">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'complex'</Item>
               <Item>ComplexValue.Absolute(ComplexValue):RealValue</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Add(MathNet.Symbolics.StdPackage.Structures.ComplexValue):MathNet.Symbolics.StdPackage.Structures.ComplexValue">
            <Messages>
             <Message Id="0#" TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>summand</Item>
               <Item>ComplexValue.Add(ComplexValue):ComplexValue</Item>
               <Item>other</Item>
               <Item>IAlgebraicAdditiveClose`1&lt;MathNet.Symbolics.StdPackage.Structures.ComplexValue&gt;.Add(ComplexValue):ComplexValue</Item>
              </Issue>
             </Message>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'summand'</Item>
               <Item>ComplexValue.Add(ComplexValue):ComplexValue</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Add(MathNet.Symbolics.StdPackage.Structures.ComplexValue,MathNet.Symbolics.StdPackage.Structures.ComplexValue):MathNet.Symbolics.StdPackage.Structures.ComplexValue">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'summand1'</Item>
               <Item>ComplexValue.Add(ComplexValue, ComplexValue):ComplexValue</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="CompareTo(MathNet.Symbolics.StdPackage.Structures.ComplexValue):System.Int32">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'other'</Item>
               <Item>ComplexValue.CompareTo(ComplexValue):Int32</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Conjugate(MathNet.Symbolics.StdPackage.Structures.ComplexValue):MathNet.Symbolics.StdPackage.Structures.ComplexValue">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'complex'</Item>
               <Item>ComplexValue.Conjugate(ComplexValue):ComplexValue</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Divide(MathNet.Symbolics.StdPackage.Structures.ComplexValue):MathNet.Symbolics.StdPackage.Structures.ComplexValue">
            <Messages>
             <Message Id="0#" TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>divisor</Item>
               <Item>ComplexValue.Divide(ComplexValue):ComplexValue</Item>
               <Item>other</Item>
               <Item>IAlgebraicSkewField`1&lt;MathNet.Symbolics.StdPackage.Structures.ComplexValue&gt;.Divide(ComplexValue):ComplexValue</Item>
              </Issue>
             </Message>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'divisor'</Item>
               <Item>ComplexValue.Divide(ComplexValue):ComplexValue</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Divide(MathNet.Symbolics.StdPackage.Structures.ComplexValue,MathNet.Symbolics.StdPackage.Structures.ComplexValue):MathNet.Symbolics.StdPackage.Structures.ComplexValue">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'dividend'</Item>
               <Item>ComplexValue.Divide(ComplexValue, ComplexValue):ComplexValue</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Exponential(MathNet.Symbolics.StdPackage.Structures.ComplexValue):MathNet.Symbolics.StdPackage.Structures.ComplexValue">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'exponent'</Item>
               <Item>ComplexValue.Exponential(ComplexValue):ComplexValue</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="I">
            <Messages>
             <Message Id="I" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:39:03Z">
              <Issue Name="MemberOneLetter">
               <Item>I</Item>
               <Item>ComplexValue.I:ComplexValue</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="InnerDeserialize(MathNet.Symbolics.Backend.Context,System.Xml.XmlReader):MathNet.Symbolics.StdPackage.Structures.ComplexValue">
            <Messages>
             <Message Id="context" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2006-08-05 09:39:03Z" FixCategory="NonBreaking">
              <Issue>
               <Item>context</Item>
               <Item>ComplexValue.InnerDeserialize(Context, XmlReader):ComplexValue</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Invert(MathNet.Symbolics.StdPackage.Structures.ComplexValue):MathNet.Symbolics.StdPackage.Structures.ComplexValue">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'divisor'</Item>
               <Item>ComplexValue.Invert(ComplexValue):ComplexValue</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Multiply(MathNet.Symbolics.StdPackage.Structures.ComplexValue):MathNet.Symbolics.StdPackage.Structures.ComplexValue">
            <Messages>
             <Message Id="0#" TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>multiplier</Item>
               <Item>ComplexValue.Multiply(ComplexValue):ComplexValue</Item>
               <Item>other</Item>
               <Item>IAlgebraicMultiplicativeClose`1&lt;MathNet.Symbolics.StdPackage.Structures.ComplexValue&gt;.Multiply(ComplexValue):ComplexValue</Item>
              </Issue>
             </Message>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'multiplier'</Item>
               <Item>ComplexValue.Multiply(ComplexValue):ComplexValue</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Multiply(MathNet.Symbolics.StdPackage.Structures.ComplexValue,MathNet.Symbolics.StdPackage.Structures.ComplexValue):MathNet.Symbolics.StdPackage.Structures.ComplexValue">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'multiplicand'</Item>
               <Item>ComplexValue.Multiply(ComplexValue, ComplexValue):ComplexValue</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="NaturalLogarithm(MathNet.Symbolics.StdPackage.Structures.ComplexValue):MathNet.Symbolics.StdPackage.Structures.ComplexValue">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'antilogarithm'</Item>
               <Item>ComplexValue.NaturalLogarithm(ComplexValue):ComplexValue</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Negate(MathNet.Symbolics.StdPackage.Structures.ComplexValue):MathNet.Symbolics.StdPackage.Structures.ComplexValue">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'subtrahend'</Item>
               <Item>ComplexValue.Negate(ComplexValue):ComplexValue</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Power(MathNet.Symbolics.StdPackage.Structures.ComplexValue):MathNet.Symbolics.StdPackage.Structures.ComplexValue">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'exponent'</Item>
               <Item>ComplexValue.Power(ComplexValue):ComplexValue</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Power(MathNet.Symbolics.StdPackage.Structures.ComplexValue,MathNet.Symbolics.StdPackage.Structures.ComplexValue):MathNet.Symbolics.StdPackage.Structures.ComplexValue">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'radix'</Item>
               <Item>ComplexValue.Power(ComplexValue, ComplexValue):ComplexValue</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Root(MathNet.Symbolics.StdPackage.Structures.ComplexValue):MathNet.Symbolics.StdPackage.Structures.ComplexValue">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'rootexponent'</Item>
               <Item>ComplexValue.Root(ComplexValue):ComplexValue</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Root(MathNet.Symbolics.StdPackage.Structures.ComplexValue,MathNet.Symbolics.StdPackage.Structures.ComplexValue):MathNet.Symbolics.StdPackage.Structures.ComplexValue">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'radicand'</Item>
               <Item>ComplexValue.Root(ComplexValue, ComplexValue):ComplexValue</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Square(MathNet.Symbolics.StdPackage.Structures.ComplexValue):MathNet.Symbolics.StdPackage.Structures.ComplexValue">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'radix'</Item>
               <Item>ComplexValue.Square(ComplexValue):ComplexValue</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="SquareRoot(MathNet.Symbolics.StdPackage.Structures.ComplexValue):MathNet.Symbolics.StdPackage.Structures.ComplexValue">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'radicand'</Item>
               <Item>ComplexValue.SquareRoot(ComplexValue):ComplexValue</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Subtract(MathNet.Symbolics.StdPackage.Structures.ComplexValue):MathNet.Symbolics.StdPackage.Structures.ComplexValue">
            <Messages>
             <Message Id="0#" TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>subtrahend</Item>
               <Item>ComplexValue.Subtract(ComplexValue):ComplexValue</Item>
               <Item>other</Item>
               <Item>IAlgebraicGroup`1&lt;MathNet.Symbolics.StdPackage.Structures.ComplexValue&gt;.Subtract(ComplexValue):ComplexValue</Item>
              </Issue>
             </Message>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'subtrahend'</Item>
               <Item>ComplexValue.Subtract(ComplexValue):ComplexValue</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Subtract(MathNet.Symbolics.StdPackage.Structures.ComplexValue,MathNet.Symbolics.StdPackage.Structures.ComplexValue):MathNet.Symbolics.StdPackage.Structures.ComplexValue">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'minuend'</Item>
               <Item>ComplexValue.Subtract(ComplexValue, ComplexValue):ComplexValue</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="ComplexValueCategory">
          <Members>
           <Member Name="InnerDeserialize(MathNet.Symbolics.Backend.Context,System.Xml.XmlReader):MathNet.Symbolics.StdPackage.Structures.ComplexValueCategory">
            <Messages>
             <Message Id="context" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2006-08-05 09:39:03Z" FixCategory="Breaking">
              <Issue>
               <Item>context</Item>
               <Item>ComplexValueCategory.InnerDeserialize(Context, XmlReader):ComplexValueCategory</Item>
              </Issue>
             </Message>
             <Message Id="reader" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2006-08-05 09:39:03Z" FixCategory="Breaking">
              <Issue>
               <Item>reader</Item>
               <Item>ComplexValueCategory.InnerDeserialize(Context, XmlReader):ComplexValueCategory</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="IsMember(MathNet.Symbolics.Core.Signal,System.Boolean):MathNet.Symbolics.Backend.Properties.ECategoryMembership">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'signal'</Item>
               <Item>ComplexValueCategory.IsMember(Signal, Boolean):ECategoryMembership</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="IntegerValue">
          <Members>
           <Member Name="Add(MathNet.Symbolics.StdPackage.Structures.IntegerValue):MathNet.Symbolics.StdPackage.Structures.IntegerValue">
            <Messages>
             <Message Id="0#" TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>op</Item>
               <Item>IntegerValue.Add(IntegerValue):IntegerValue</Item>
               <Item>other</Item>
               <Item>IAlgebraicAdditiveClose`1&lt;MathNet.Symbolics.StdPackage.Structures.IntegerValue&gt;.Add(IntegerValue):IntegerValue</Item>
              </Issue>
             </Message>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'op'</Item>
               <Item>IntegerValue.Add(IntegerValue):IntegerValue</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="CompareTo(MathNet.Symbolics.StdPackage.Structures.IntegerValue):System.Int32">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'other'</Item>
               <Item>IntegerValue.CompareTo(IntegerValue):Int32</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="ConstantMinusOne(MathNet.Symbolics.Backend.Context):MathNet.Symbolics.Core.Signal">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'context'</Item>
               <Item>IntegerValue.ConstantMinusOne(Context):Signal</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="ConstantOne(MathNet.Symbolics.Backend.Context):MathNet.Symbolics.Core.Signal">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'context'</Item>
               <Item>IntegerValue.ConstantOne(Context):Signal</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="ConstantTwo(MathNet.Symbolics.Backend.Context):MathNet.Symbolics.Core.Signal">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'context'</Item>
               <Item>IntegerValue.ConstantTwo(Context):Signal</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="ConstantZero(MathNet.Symbolics.Backend.Context):MathNet.Symbolics.Core.Signal">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'context'</Item>
               <Item>IntegerValue.ConstantZero(Context):Signal</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Divide(MathNet.Symbolics.StdPackage.Structures.IntegerValue):MathNet.Symbolics.StdPackage.Structures.RationalValue">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'op'</Item>
               <Item>IntegerValue.Divide(IntegerValue):RationalValue</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="InnerDeserialize(MathNet.Symbolics.Backend.Context,System.Xml.XmlReader):MathNet.Symbolics.StdPackage.Structures.IntegerValue">
            <Messages>
             <Message Id="context" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2006-08-05 09:39:03Z" FixCategory="NonBreaking">
              <Issue>
               <Item>context</Item>
               <Item>IntegerValue.InnerDeserialize(Context, XmlReader):IntegerValue</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Max(MathNet.Symbolics.StdPackage.Structures.IntegerValue):MathNet.Symbolics.StdPackage.Structures.IntegerValue">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'op'</Item>
               <Item>IntegerValue.Max(IntegerValue):IntegerValue</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Min(MathNet.Symbolics.StdPackage.Structures.IntegerValue):MathNet.Symbolics.StdPackage.Structures.IntegerValue">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'op'</Item>
               <Item>IntegerValue.Min(IntegerValue):IntegerValue</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Multiply(MathNet.Symbolics.StdPackage.Structures.IntegerValue):MathNet.Symbolics.StdPackage.Structures.IntegerValue">
            <Messages>
             <Message Id="0#" TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>op</Item>
               <Item>IntegerValue.Multiply(IntegerValue):IntegerValue</Item>
               <Item>other</Item>
               <Item>IAlgebraicMultiplicativeClose`1&lt;MathNet.Symbolics.StdPackage.Structures.IntegerValue&gt;.Multiply(IntegerValue):IntegerValue</Item>
              </Issue>
             </Message>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'op'</Item>
               <Item>IntegerValue.Multiply(IntegerValue):IntegerValue</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="op_GreaterThan(MathNet.Symbolics.StdPackage.Structures.IntegerValue,MathNet.Symbolics.StdPackage.Structures.IntegerValue):System.Boolean">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'left'</Item>
               <Item>IntegerValue.op_GreaterThan(IntegerValue, IntegerValue):Boolean</Item>
              </Issue>
              <Issue>
               <Item>'right'</Item>
               <Item>IntegerValue.op_GreaterThan(IntegerValue, IntegerValue):Boolean</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="op_LessThan(MathNet.Symbolics.StdPackage.Structures.IntegerValue,MathNet.Symbolics.StdPackage.Structures.IntegerValue):System.Boolean">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'left'</Item>
               <Item>IntegerValue.op_LessThan(IntegerValue, IntegerValue):Boolean</Item>
              </Issue>
              <Issue>
               <Item>'right'</Item>
               <Item>IntegerValue.op_LessThan(IntegerValue, IntegerValue):Boolean</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Power(MathNet.Symbolics.StdPackage.Structures.IntegerValue):MathNet.Symbolics.StdPackage.Structures.IntegerValue">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'op'</Item>
               <Item>IntegerValue.Power(IntegerValue):IntegerValue</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Subtract(MathNet.Symbolics.StdPackage.Structures.IntegerValue):MathNet.Symbolics.StdPackage.Structures.IntegerValue">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'op'</Item>
               <Item>IntegerValue.Subtract(IntegerValue):IntegerValue</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="IntegerValue+AddProcess">
          <Messages>
           <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Created="2006-08-05 09:39:03Z">
            <Issue>
             <Item>MathNet.Symbolics.StdPackage.Structures.IntegerValue+AddProcess</Item>
            </Issue>
           </Message>
          </Messages>
         </Type>
         <Type Name="IntegerValue+DivideProcess">
          <Messages>
           <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Created="2006-08-05 09:39:03Z">
            <Issue>
             <Item>MathNet.Symbolics.StdPackage.Structures.IntegerValue+DivideProcess</Item>
            </Issue>
           </Message>
          </Messages>
         </Type>
         <Type Name="IntegerValue+MultiplyProcess">
          <Messages>
           <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Created="2006-08-05 09:39:03Z">
            <Issue>
             <Item>MathNet.Symbolics.StdPackage.Structures.IntegerValue+MultiplyProcess</Item>
            </Issue>
           </Message>
          </Messages>
         </Type>
         <Type Name="IntegerValue+SubtractProcess">
          <Messages>
           <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Created="2006-08-05 09:39:03Z">
            <Issue>
             <Item>MathNet.Symbolics.StdPackage.Structures.IntegerValue+SubtractProcess</Item>
            </Issue>
           </Message>
          </Messages>
         </Type>
         <Type Name="IntegerValueCategory">
          <Members>
           <Member Name="InnerDeserialize(MathNet.Symbolics.Backend.Context,System.Xml.XmlReader):MathNet.Symbolics.StdPackage.Structures.IntegerValueCategory">
            <Messages>
             <Message Id="context" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2006-08-05 09:39:03Z" FixCategory="Breaking">
              <Issue>
               <Item>context</Item>
               <Item>IntegerValueCategory.InnerDeserialize(Context, XmlReader):IntegerValueCategory</Item>
              </Issue>
             </Message>
             <Message Id="reader" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2006-08-05 09:39:03Z" FixCategory="Breaking">
              <Issue>
               <Item>reader</Item>
               <Item>IntegerValueCategory.InnerDeserialize(Context, XmlReader):IntegerValueCategory</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="IsMember(MathNet.Symbolics.Core.Signal,System.Boolean):MathNet.Symbolics.Backend.Properties.ECategoryMembership">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'signal'</Item>
               <Item>IntegerValueCategory.IsMember(Signal, Boolean):ECategoryMembership</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="LiteralValue">
          <Members>
           <Member Name="CompareTo(MathNet.Symbolics.StdPackage.Structures.LiteralValue):System.Int32">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'other'</Item>
               <Item>LiteralValue.CompareTo(LiteralValue):Int32</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Concatenate(MathNet.Symbolics.StdPackage.Structures.LiteralValue):MathNet.Symbolics.StdPackage.Structures.LiteralValue">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'op'</Item>
               <Item>LiteralValue.Concatenate(LiteralValue):LiteralValue</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="ConstantEmpty(MathNet.Symbolics.Backend.Context):MathNet.Symbolics.Core.Signal">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'context'</Item>
               <Item>LiteralValue.ConstantEmpty(Context):Signal</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="InnerDeserialize(MathNet.Symbolics.Backend.Context,System.Xml.XmlReader):MathNet.Symbolics.StdPackage.Structures.LiteralValue">
            <Messages>
             <Message Id="context" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2006-08-05 09:39:03Z" FixCategory="NonBreaking">
              <Issue>
               <Item>context</Item>
               <Item>LiteralValue.InnerDeserialize(Context, XmlReader):LiteralValue</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="ParseConstant(MathNet.Symbolics.Backend.Context,System.String):MathNet.Symbolics.Core.Signal">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'value'</Item>
               <Item>LiteralValue.ParseConstant(Context, String):Signal</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="LogicValue">
          <Members>
           <Member Name="Add(MathNet.Symbolics.StdPackage.Structures.LogicValue):MathNet.Symbolics.StdPackage.Structures.LogicValue">
            <Messages>
             <Message Id="0#" TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>op</Item>
               <Item>LogicValue.Add(LogicValue):LogicValue</Item>
               <Item>other</Item>
               <Item>IAlgebraicAdditiveClose`1&lt;MathNet.Symbolics.StdPackage.Structures.LogicValue&gt;.Add(LogicValue):LogicValue</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="And(MathNet.Symbolics.StdPackage.Structures.LogicValue):MathNet.Symbolics.StdPackage.Structures.LogicValue">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'op'</Item>
               <Item>LogicValue.And(LogicValue):LogicValue</Item>
              </Issue>
              <Issue>
               <Item>'op'</Item>
               <Item>LogicValue.And(LogicValue):LogicValue</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="CompareTo(MathNet.Symbolics.StdPackage.Structures.LogicValue):System.Int32">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'other'</Item>
               <Item>LogicValue.CompareTo(LogicValue):Int32</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="InnerDeserialize(MathNet.Symbolics.Backend.Context,System.Xml.XmlReader):MathNet.Symbolics.StdPackage.Structures.LogicValue">
            <Messages>
             <Message Id="context" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2006-08-05 09:39:03Z" FixCategory="NonBreaking">
              <Issue>
               <Item>context</Item>
               <Item>LogicValue.InnerDeserialize(Context, XmlReader):LogicValue</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Multiply(MathNet.Symbolics.StdPackage.Structures.LogicValue):MathNet.Symbolics.StdPackage.Structures.LogicValue">
            <Messages>
             <Message Id="0#" TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>op</Item>
               <Item>LogicValue.Multiply(LogicValue):LogicValue</Item>
               <Item>other</Item>
               <Item>IAlgebraicMultiplicativeClose`1&lt;MathNet.Symbolics.StdPackage.Structures.LogicValue&gt;.Multiply(LogicValue):LogicValue</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Nand(MathNet.Symbolics.StdPackage.Structures.LogicValue):MathNet.Symbolics.StdPackage.Structures.LogicValue">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'op'</Item>
               <Item>LogicValue.Nand(LogicValue):LogicValue</Item>
              </Issue>
              <Issue>
               <Item>'op'</Item>
               <Item>LogicValue.Nand(LogicValue):LogicValue</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Nor(MathNet.Symbolics.StdPackage.Structures.LogicValue):MathNet.Symbolics.StdPackage.Structures.LogicValue">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'op'</Item>
               <Item>LogicValue.Nor(LogicValue):LogicValue</Item>
              </Issue>
              <Issue>
               <Item>'op'</Item>
               <Item>LogicValue.Nor(LogicValue):LogicValue</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Or(MathNet.Symbolics.StdPackage.Structures.LogicValue):MathNet.Symbolics.StdPackage.Structures.LogicValue">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'op'</Item>
               <Item>LogicValue.Or(LogicValue):LogicValue</Item>
              </Issue>
              <Issue>
               <Item>'op'</Item>
               <Item>LogicValue.Or(LogicValue):LogicValue</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Xnor(MathNet.Symbolics.StdPackage.Structures.LogicValue):MathNet.Symbolics.StdPackage.Structures.LogicValue">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'op'</Item>
               <Item>LogicValue.Xnor(LogicValue):LogicValue</Item>
              </Issue>
              <Issue>
               <Item>'op'</Item>
               <Item>LogicValue.Xnor(LogicValue):LogicValue</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Xor(MathNet.Symbolics.StdPackage.Structures.LogicValue):MathNet.Symbolics.StdPackage.Structures.LogicValue">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'op'</Item>
               <Item>LogicValue.Xor(LogicValue):LogicValue</Item>
              </Issue>
              <Issue>
               <Item>'op'</Item>
               <Item>LogicValue.Xor(LogicValue):LogicValue</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="LogicValueCategory">
          <Members>
           <Member Name="InnerDeserialize(MathNet.Symbolics.Backend.Context,System.Xml.XmlReader):MathNet.Symbolics.StdPackage.Structures.LogicValueCategory">
            <Messages>
             <Message Id="context" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2006-08-05 09:39:03Z" FixCategory="Breaking">
              <Issue>
               <Item>context</Item>
               <Item>LogicValueCategory.InnerDeserialize(Context, XmlReader):LogicValueCategory</Item>
              </Issue>
             </Message>
             <Message Id="reader" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2006-08-05 09:39:03Z" FixCategory="Breaking">
              <Issue>
               <Item>reader</Item>
               <Item>LogicValueCategory.InnerDeserialize(Context, XmlReader):LogicValueCategory</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="IsMember(MathNet.Symbolics.Core.Signal,System.Boolean):MathNet.Symbolics.Backend.Properties.ECategoryMembership">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'signal'</Item>
               <Item>LogicValueCategory.IsMember(Signal, Boolean):ECategoryMembership</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="NegativeInfinitySymbol">
          <Members>
           <Member Name="Constant(MathNet.Symbolics.Backend.Context):MathNet.Symbolics.Core.Signal">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'context'</Item>
               <Item>NegativeInfinitySymbol.Constant(Context):Signal</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="ConvertFrom(MathNet.Symbolics.Core.ValueStructure):MathNet.Symbolics.StdPackage.Structures.NegativeInfinitySymbol">
            <Messages>
             <Message Id="value" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2006-08-05 09:39:03Z" FixCategory="Breaking">
              <Issue>
               <Item>value</Item>
               <Item>NegativeInfinitySymbol.ConvertFrom(ValueStructure):NegativeInfinitySymbol</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="InnerDeserialize(MathNet.Symbolics.Backend.Context,System.Xml.XmlReader):MathNet.Symbolics.StdPackage.Structures.NegativeInfinitySymbol">
            <Messages>
             <Message Id="context" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2006-08-05 09:39:03Z" FixCategory="NonBreaking">
              <Issue>
               <Item>context</Item>
               <Item>NegativeInfinitySymbol.InnerDeserialize(Context, XmlReader):NegativeInfinitySymbol</Item>
              </Issue>
             </Message>
             <Message Id="reader" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2006-08-05 09:39:03Z" FixCategory="NonBreaking">
              <Issue>
               <Item>reader</Item>
               <Item>NegativeInfinitySymbol.InnerDeserialize(Context, XmlReader):NegativeInfinitySymbol</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="PositiveInfinitySymbol">
          <Members>
           <Member Name="Constant(MathNet.Symbolics.Backend.Context):MathNet.Symbolics.Core.Signal">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'context'</Item>
               <Item>PositiveInfinitySymbol.Constant(Context):Signal</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="ConvertFrom(MathNet.Symbolics.Core.ValueStructure):MathNet.Symbolics.StdPackage.Structures.PositiveInfinitySymbol">
            <Messages>
             <Message Id="value" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2006-08-05 09:39:03Z" FixCategory="Breaking">
              <Issue>
               <Item>value</Item>
               <Item>PositiveInfinitySymbol.ConvertFrom(ValueStructure):PositiveInfinitySymbol</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="InnerDeserialize(MathNet.Symbolics.Backend.Context,System.Xml.XmlReader):MathNet.Symbolics.StdPackage.Structures.PositiveInfinitySymbol">
            <Messages>
             <Message Id="context" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2006-08-05 09:39:03Z" FixCategory="NonBreaking">
              <Issue>
               <Item>context</Item>
               <Item>PositiveInfinitySymbol.InnerDeserialize(Context, XmlReader):PositiveInfinitySymbol</Item>
              </Issue>
             </Message>
             <Message Id="reader" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2006-08-05 09:39:03Z" FixCategory="NonBreaking">
              <Issue>
               <Item>reader</Item>
               <Item>PositiveInfinitySymbol.InnerDeserialize(Context, XmlReader):PositiveInfinitySymbol</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="RationalValue">
          <Members>
           <Member Name=".ctor(MathNet.Symbolics.StdPackage.Structures.IntegerValue)">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'value'</Item>
               <Item>RationalValue.RationalValue(IntegerValue)</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Add(MathNet.Symbolics.StdPackage.Structures.RationalValue):MathNet.Symbolics.StdPackage.Structures.RationalValue">
            <Messages>
             <Message Id="0#" TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>op</Item>
               <Item>RationalValue.Add(RationalValue):RationalValue</Item>
               <Item>other</Item>
               <Item>IAlgebraicAdditiveClose`1&lt;MathNet.Symbolics.StdPackage.Structures.RationalValue&gt;.Add(RationalValue):RationalValue</Item>
              </Issue>
             </Message>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'op'</Item>
               <Item>RationalValue.Add(RationalValue):RationalValue</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="CompareTo(MathNet.Symbolics.StdPackage.Structures.RationalValue):System.Int32">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'other'</Item>
               <Item>RationalValue.CompareTo(RationalValue):Int32</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="ConstantHalf(MathNet.Symbolics.Backend.Context):MathNet.Symbolics.Core.Signal">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'context'</Item>
               <Item>RationalValue.ConstantHalf(Context):Signal</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Divide(MathNet.Symbolics.StdPackage.Structures.IntegerValue):MathNet.Symbolics.StdPackage.Structures.RationalValue">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'op'</Item>
               <Item>RationalValue.Divide(IntegerValue):RationalValue</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Divide(MathNet.Symbolics.StdPackage.Structures.RationalValue):MathNet.Symbolics.StdPackage.Structures.RationalValue">
            <Messages>
             <Message Id="0#" TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>op</Item>
               <Item>RationalValue.Divide(RationalValue):RationalValue</Item>
               <Item>other</Item>
               <Item>IAlgebraicSkewField`1&lt;MathNet.Symbolics.StdPackage.Structures.RationalValue&gt;.Divide(RationalValue):RationalValue</Item>
              </Issue>
             </Message>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'op'</Item>
               <Item>RationalValue.Divide(RationalValue):RationalValue</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="InnerDeserialize(MathNet.Symbolics.Backend.Context,System.Xml.XmlReader):MathNet.Symbolics.StdPackage.Structures.RationalValue">
            <Messages>
             <Message Id="context" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2006-08-05 09:39:03Z" FixCategory="NonBreaking">
              <Issue>
               <Item>context</Item>
               <Item>RationalValue.InnerDeserialize(Context, XmlReader):RationalValue</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Multiply(MathNet.Symbolics.StdPackage.Structures.IntegerValue):MathNet.Symbolics.StdPackage.Structures.RationalValue">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'op'</Item>
               <Item>RationalValue.Multiply(IntegerValue):RationalValue</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Multiply(MathNet.Symbolics.StdPackage.Structures.RationalValue):MathNet.Symbolics.StdPackage.Structures.RationalValue">
            <Messages>
             <Message Id="0#" TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>op</Item>
               <Item>RationalValue.Multiply(RationalValue):RationalValue</Item>
               <Item>other</Item>
               <Item>IAlgebraicMultiplicativeClose`1&lt;MathNet.Symbolics.StdPackage.Structures.RationalValue&gt;.Multiply(RationalValue):RationalValue</Item>
              </Issue>
             </Message>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'op'</Item>
               <Item>RationalValue.Multiply(RationalValue):RationalValue</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="op_GreaterThan(MathNet.Symbolics.StdPackage.Structures.RationalValue,MathNet.Symbolics.StdPackage.Structures.RationalValue):System.Boolean">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'left'</Item>
               <Item>RationalValue.op_GreaterThan(RationalValue, RationalValue):Boolean</Item>
              </Issue>
              <Issue>
               <Item>'right'</Item>
               <Item>RationalValue.op_GreaterThan(RationalValue, RationalValue):Boolean</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="op_LessThan(MathNet.Symbolics.StdPackage.Structures.RationalValue,MathNet.Symbolics.StdPackage.Structures.RationalValue):System.Boolean">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'left'</Item>
               <Item>RationalValue.op_LessThan(RationalValue, RationalValue):Boolean</Item>
              </Issue>
              <Issue>
               <Item>'right'</Item>
               <Item>RationalValue.op_LessThan(RationalValue, RationalValue):Boolean</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Power(MathNet.Symbolics.StdPackage.Structures.IntegerValue):MathNet.Symbolics.StdPackage.Structures.RationalValue">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'op'</Item>
               <Item>RationalValue.Power(IntegerValue):RationalValue</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Power(MathNet.Symbolics.StdPackage.Structures.RationalValue):MathNet.Symbolics.StdPackage.Structures.RealValue">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'op'</Item>
               <Item>RationalValue.Power(RationalValue):RealValue</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Subtract(MathNet.Symbolics.StdPackage.Structures.RationalValue):MathNet.Symbolics.StdPackage.Structures.RationalValue">
            <Messages>
             <Message Id="0#" TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>op</Item>
               <Item>RationalValue.Subtract(RationalValue):RationalValue</Item>
               <Item>other</Item>
               <Item>IAlgebraicGroup`1&lt;MathNet.Symbolics.StdPackage.Structures.RationalValue&gt;.Subtract(RationalValue):RationalValue</Item>
              </Issue>
             </Message>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'op'</Item>
               <Item>RationalValue.Subtract(RationalValue):RationalValue</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="RationalValue+AddProcess">
          <Messages>
           <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Created="2006-08-05 09:39:03Z">
            <Issue>
             <Item>MathNet.Symbolics.StdPackage.Structures.RationalValue+AddProcess</Item>
            </Issue>
           </Message>
          </Messages>
         </Type>
         <Type Name="RationalValue+DivideProcess">
          <Messages>
           <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Created="2006-08-05 09:39:03Z">
            <Issue>
             <Item>MathNet.Symbolics.StdPackage.Structures.RationalValue+DivideProcess</Item>
            </Issue>
           </Message>
          </Messages>
         </Type>
         <Type Name="RationalValue+MultiplyProcess">
          <Messages>
           <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Created="2006-08-05 09:39:03Z">
            <Issue>
             <Item>MathNet.Symbolics.StdPackage.Structures.RationalValue+MultiplyProcess</Item>
            </Issue>
           </Message>
          </Messages>
         </Type>
         <Type Name="RationalValue+SubtractProcess">
          <Messages>
           <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Created="2006-08-05 09:39:03Z">
            <Issue>
             <Item>MathNet.Symbolics.StdPackage.Structures.RationalValue+SubtractProcess</Item>
            </Issue>
           </Message>
          </Messages>
         </Type>
         <Type Name="RationalValueCategory">
          <Members>
           <Member Name="InnerDeserialize(MathNet.Symbolics.Backend.Context,System.Xml.XmlReader):MathNet.Symbolics.StdPackage.Structures.RationalValueCategory">
            <Messages>
             <Message Id="context" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2006-08-05 09:39:03Z" FixCategory="Breaking">
              <Issue>
               <Item>context</Item>
               <Item>RationalValueCategory.InnerDeserialize(Context, XmlReader):RationalValueCategory</Item>
              </Issue>
             </Message>
             <Message Id="reader" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2006-08-05 09:39:03Z" FixCategory="Breaking">
              <Issue>
               <Item>reader</Item>
               <Item>RationalValueCategory.InnerDeserialize(Context, XmlReader):RationalValueCategory</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="IsMember(MathNet.Symbolics.Core.Signal,System.Boolean):MathNet.Symbolics.Backend.Properties.ECategoryMembership">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'signal'</Item>
               <Item>RationalValueCategory.IsMember(Signal, Boolean):ECategoryMembership</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="RealValue">
          <Members>
           <Member Name=".ctor(MathNet.Symbolics.StdPackage.Structures.IntegerValue)">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'value'</Item>
               <Item>RealValue.RealValue(IntegerValue)</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name=".ctor(MathNet.Symbolics.StdPackage.Structures.RationalValue)">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'value'</Item>
               <Item>RealValue.RealValue(RationalValue)</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Add(MathNet.Symbolics.StdPackage.Structures.RealValue):MathNet.Symbolics.StdPackage.Structures.RealValue">
            <Messages>
             <Message Id="0#" TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>op</Item>
               <Item>RealValue.Add(RealValue):RealValue</Item>
               <Item>other</Item>
               <Item>IAlgebraicAdditiveClose`1&lt;MathNet.Symbolics.StdPackage.Structures.RealValue&gt;.Add(RealValue):RealValue</Item>
              </Issue>
             </Message>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'op'</Item>
               <Item>RealValue.Add(RealValue):RealValue</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="CompareTo(MathNet.Symbolics.StdPackage.Structures.RealValue):System.Int32">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'other'</Item>
               <Item>RealValue.CompareTo(RealValue):Int32</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="ConstantE(MathNet.Symbolics.Backend.Context):MathNet.Symbolics.Core.Signal">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'context'</Item>
               <Item>RealValue.ConstantE(Context):Signal</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="ConstantPI(MathNet.Symbolics.Backend.Context):MathNet.Symbolics.Core.Signal">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'context'</Item>
               <Item>RealValue.ConstantPI(Context):Signal</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Divide(MathNet.Symbolics.StdPackage.Structures.RealValue):MathNet.Symbolics.StdPackage.Structures.RealValue">
            <Messages>
             <Message Id="0#" TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>op</Item>
               <Item>RealValue.Divide(RealValue):RealValue</Item>
               <Item>other</Item>
               <Item>IAlgebraicSkewField`1&lt;MathNet.Symbolics.StdPackage.Structures.RealValue&gt;.Divide(RealValue):RealValue</Item>
              </Issue>
             </Message>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'op'</Item>
               <Item>RealValue.Divide(RealValue):RealValue</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="E">
            <Messages>
             <Message Id="E" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:39:03Z">
              <Issue Name="MemberOneLetter">
               <Item>E</Item>
               <Item>RealValue.E:RealValue</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="InnerDeserialize(MathNet.Symbolics.Backend.Context,System.Xml.XmlReader):MathNet.Symbolics.StdPackage.Structures.RealValue">
            <Messages>
             <Message Id="context" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2006-08-05 09:39:03Z" FixCategory="NonBreaking">
              <Issue>
               <Item>context</Item>
               <Item>RealValue.InnerDeserialize(Context, XmlReader):RealValue</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Multiply(MathNet.Symbolics.StdPackage.Structures.RealValue):MathNet.Symbolics.StdPackage.Structures.RealValue">
            <Messages>
             <Message Id="0#" TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>op</Item>
               <Item>RealValue.Multiply(RealValue):RealValue</Item>
               <Item>other</Item>
               <Item>IAlgebraicMultiplicativeClose`1&lt;MathNet.Symbolics.StdPackage.Structures.RealValue&gt;.Multiply(RealValue):RealValue</Item>
              </Issue>
             </Message>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'op'</Item>
               <Item>RealValue.Multiply(RealValue):RealValue</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="ParseConstant(MathNet.Symbolics.Backend.Context,System.String):MathNet.Symbolics.Core.Signal">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'value'</Item>
               <Item>RealValue.ParseConstant(Context, String):Signal</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Power(MathNet.Symbolics.StdPackage.Structures.RealValue):MathNet.Symbolics.StdPackage.Structures.RealValue">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'op'</Item>
               <Item>RealValue.Power(RealValue):RealValue</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Root(MathNet.Symbolics.StdPackage.Structures.RealValue):MathNet.Symbolics.StdPackage.Structures.RealValue">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'op'</Item>
               <Item>RealValue.Root(RealValue):RealValue</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Subtract(MathNet.Symbolics.StdPackage.Structures.RealValue):MathNet.Symbolics.StdPackage.Structures.RealValue">
            <Messages>
             <Message Id="0#" TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>op</Item>
               <Item>RealValue.Subtract(RealValue):RealValue</Item>
               <Item>other</Item>
               <Item>IAlgebraicGroup`1&lt;MathNet.Symbolics.StdPackage.Structures.RealValue&gt;.Subtract(RealValue):RealValue</Item>
              </Issue>
             </Message>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'op'</Item>
               <Item>RealValue.Subtract(RealValue):RealValue</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="RealValue+AddProcess">
          <Messages>
           <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Created="2006-08-05 09:39:03Z">
            <Issue>
             <Item>MathNet.Symbolics.StdPackage.Structures.RealValue+AddProcess</Item>
            </Issue>
           </Message>
          </Messages>
         </Type>
         <Type Name="RealValue+DivideProcess">
          <Messages>
           <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Created="2006-08-05 09:39:03Z">
            <Issue>
             <Item>MathNet.Symbolics.StdPackage.Structures.RealValue+DivideProcess</Item>
            </Issue>
           </Message>
          </Messages>
         </Type>
         <Type Name="RealValue+MultiplyProcess">
          <Messages>
           <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Created="2006-08-05 09:39:03Z">
            <Issue>
             <Item>MathNet.Symbolics.StdPackage.Structures.RealValue+MultiplyProcess</Item>
            </Issue>
           </Message>
          </Messages>
         </Type>
         <Type Name="RealValue+SubtractProcess">
          <Messages>
           <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Created="2006-08-05 09:39:03Z">
            <Issue>
             <Item>MathNet.Symbolics.StdPackage.Structures.RealValue+SubtractProcess</Item>
            </Issue>
           </Message>
          </Messages>
         </Type>
         <Type Name="RealValueCategory">
          <Members>
           <Member Name="InnerDeserialize(MathNet.Symbolics.Backend.Context,System.Xml.XmlReader):MathNet.Symbolics.StdPackage.Structures.RealValueCategory">
            <Messages>
             <Message Id="context" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2006-08-05 09:39:03Z" FixCategory="Breaking">
              <Issue>
               <Item>context</Item>
               <Item>RealValueCategory.InnerDeserialize(Context, XmlReader):RealValueCategory</Item>
              </Issue>
             </Message>
             <Message Id="reader" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2006-08-05 09:39:03Z" FixCategory="Breaking">
              <Issue>
               <Item>reader</Item>
               <Item>RealValueCategory.InnerDeserialize(Context, XmlReader):RealValueCategory</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="IsMember(MathNet.Symbolics.Core.Signal,System.Boolean):MathNet.Symbolics.Backend.Properties.ECategoryMembership">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'signal'</Item>
               <Item>RealValueCategory.IsMember(Signal, Boolean):ECategoryMembership</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="ToggleValue">
          <Members>
           <Member Name="CompareTo(MathNet.Symbolics.StdPackage.Structures.ToggleValue):System.Int32">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'other'</Item>
               <Item>ToggleValue.CompareTo(ToggleValue):Int32</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="InnerDeserialize(MathNet.Symbolics.Backend.Context,System.Xml.XmlReader):MathNet.Symbolics.StdPackage.Structures.ToggleValue">
            <Messages>
             <Message Id="context" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2006-08-05 09:39:03Z" FixCategory="NonBreaking">
              <Issue>
               <Item>context</Item>
               <Item>ToggleValue.InnerDeserialize(Context, XmlReader):ToggleValue</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="UndefinedSymbol">
          <Members>
           <Member Name="Constant(MathNet.Symbolics.Backend.Context):MathNet.Symbolics.Core.Signal">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'context'</Item>
               <Item>UndefinedSymbol.Constant(Context):Signal</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="ConvertFrom(MathNet.Symbolics.Core.ValueStructure):MathNet.Symbolics.StdPackage.Structures.UndefinedSymbol">
            <Messages>
             <Message Id="value" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2006-08-05 09:39:03Z" FixCategory="Breaking">
              <Issue>
               <Item>value</Item>
               <Item>UndefinedSymbol.ConvertFrom(ValueStructure):UndefinedSymbol</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="InnerDeserialize(MathNet.Symbolics.Backend.Context,System.Xml.XmlReader):MathNet.Symbolics.StdPackage.Structures.UndefinedSymbol">
            <Messages>
             <Message Id="context" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2006-08-05 09:39:03Z" FixCategory="NonBreaking">
              <Issue>
               <Item>context</Item>
               <Item>UndefinedSymbol.InnerDeserialize(Context, XmlReader):UndefinedSymbol</Item>
              </Issue>
             </Message>
             <Message Id="reader" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2006-08-05 09:39:03Z" FixCategory="NonBreaking">
              <Issue>
               <Item>reader</Item>
               <Item>UndefinedSymbol.InnerDeserialize(Context, XmlReader):UndefinedSymbol</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="VectorValue`1">
          <Members>
           <Member Name="Add(MathNet.Symbolics.StdPackage.Structures.VectorValue`1&lt;TScalar&gt;):MathNet.Symbolics.StdPackage.Structures.VectorValue`1&lt;TScalar&gt;">
            <Messages>
             <Message Id="0#" TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>summand</Item>
               <Item>VectorValue`1.Add(VectorValue`1&lt;TScalar&gt;):VectorValue`1&lt;TScalar&gt;</Item>
               <Item>other</Item>
               <Item>IAlgebraicAdditiveClose`1&lt;MathNet.Symbolics.StdPackage.Structures.VectorValue`1&lt;TScalar&gt;&gt;.Add(VectorValue`1&lt;TScalar&gt;):VectorValue`1&lt;TScalar&gt;</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Add(MathNet.Symbolics.StdPackage.Structures.VectorValue`1&lt;TScalar&gt;,MathNet.Symbolics.StdPackage.Structures.VectorValue`1&lt;TScalar&gt;):MathNet.Symbolics.StdPackage.Structures.VectorValue`1&lt;TScalar&gt;">
            <Messages>
             <Message TypeName="DoNotDeclareStaticMembersOnGenericTypes" Category="Microsoft.Design" CheckId="CA1000" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>VectorValue`1.Add(VectorValue`1&lt;TScalar&gt;, VectorValue`1&lt;TScalar&gt;):VectorValue`1&lt;TScalar&gt;</Item>
               <Item>MathNet.Symbolics.StdPackage.Structures.VectorValue`1</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="AdditiveIdentity">
            <Messages>
             <Message TypeName="DoNotDeclareStaticMembersOnGenericTypes" Category="Microsoft.Design" CheckId="CA1000" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>VectorValue`1.AdditiveIdentity:VectorValue`1&lt;TScalar&gt;</Item>
               <Item>MathNet.Symbolics.StdPackage.Structures.VectorValue`1</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Constant(MathNet.Symbolics.Backend.Context,TScalar[]):MathNet.Symbolics.Core.Signal">
            <Messages>
             <Message TypeName="DoNotDeclareStaticMembersOnGenericTypes" Category="Microsoft.Design" CheckId="CA1000" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>VectorValue`1.Constant(Context, TScalar[]):Signal</Item>
               <Item>MathNet.Symbolics.StdPackage.Structures.VectorValue`1</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Constant(MathNet.Symbolics.Backend.Context,TScalar[],System.String):MathNet.Symbolics.Core.Signal">
            <Messages>
             <Message TypeName="DoNotDeclareStaticMembersOnGenericTypes" Category="Microsoft.Design" CheckId="CA1000" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>VectorValue`1.Constant(Context, TScalar[], String):Signal</Item>
               <Item>MathNet.Symbolics.StdPackage.Structures.VectorValue`1</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Converter">
            <Messages>
             <Message TypeName="DoNotDeclareStaticMembersOnGenericTypes" Category="Microsoft.Design" CheckId="CA1000" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>VectorValue`1.Converter:ConversionRouter</Item>
               <Item>MathNet.Symbolics.StdPackage.Structures.VectorValue`1</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="ConvertFrom(MathNet.Symbolics.Core.ValueStructure):MathNet.Symbolics.StdPackage.Structures.VectorValue`1&lt;TScalar&gt;">
            <Messages>
             <Message TypeName="DoNotDeclareStaticMembersOnGenericTypes" Category="Microsoft.Design" CheckId="CA1000" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>VectorValue`1.ConvertFrom(ValueStructure):VectorValue`1&lt;TScalar&gt;</Item>
               <Item>MathNet.Symbolics.StdPackage.Structures.VectorValue`1</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="InnerDeserialize(MathNet.Symbolics.Backend.Context,System.Xml.XmlReader):MathNet.Symbolics.StdPackage.Structures.VectorValue`1&lt;TScalar&gt;">
            <Messages>
             <Message Id="System.Int32.Parse(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>VectorValue`1.InnerDeserialize(Context, XmlReader):VectorValue`1&lt;TScalar&gt;</Item>
               <Item>System.Int32.Parse(System.String)</Item>
               <Item>System.Int32.Parse(System.String,System.IFormatProvider)</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="InnerSerialize(System.Xml.XmlWriter):System.Void">
            <Messages>
             <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>VectorValue`1.InnerSerialize(XmlWriter):Void</Item>
               <Item>System.Int32.ToString</Item>
               <Item>System.Int32.ToString(System.IFormatProvider)</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Negate(MathNet.Symbolics.StdPackage.Structures.VectorValue`1&lt;TScalar&gt;):MathNet.Symbolics.StdPackage.Structures.VectorValue`1&lt;TScalar&gt;">
            <Messages>
             <Message TypeName="DoNotDeclareStaticMembersOnGenericTypes" Category="Microsoft.Design" CheckId="CA1000" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>VectorValue`1.Negate(VectorValue`1&lt;TScalar&gt;):VectorValue`1&lt;TScalar&gt;</Item>
               <Item>MathNet.Symbolics.StdPackage.Structures.VectorValue`1</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="PublishConversionRouteNeighbors(MathNet.Symbolics.Backend.ValueConversion.StructureTable):System.Void">
            <Messages>
             <Message TypeName="DoNotDeclareStaticMembersOnGenericTypes" Category="Microsoft.Design" CheckId="CA1000" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>VectorValue`1.PublishConversionRouteNeighbors(StructureTable):Void</Item>
               <Item>MathNet.Symbolics.StdPackage.Structures.VectorValue`1</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="StructureIdentifier">
            <Messages>
             <Message TypeName="DoNotDeclareStaticMembersOnGenericTypes" Category="Microsoft.Design" CheckId="CA1000" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>VectorValue`1.StructureIdentifier:MathIdentifier</Item>
               <Item>MathNet.Symbolics.StdPackage.Structures.VectorValue`1</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Subtract(MathNet.Symbolics.StdPackage.Structures.VectorValue`1&lt;TScalar&gt;):MathNet.Symbolics.StdPackage.Structures.VectorValue`1&lt;TScalar&gt;">
            <Messages>
             <Message Id="0#" TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>subtrahend</Item>
               <Item>VectorValue`1.Subtract(VectorValue`1&lt;TScalar&gt;):VectorValue`1&lt;TScalar&gt;</Item>
               <Item>other</Item>
               <Item>IAlgebraicGroup`1&lt;MathNet.Symbolics.StdPackage.Structures.VectorValue`1&lt;TScalar&gt;&gt;.Subtract(VectorValue`1&lt;TScalar&gt;):VectorValue`1&lt;TScalar&gt;</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Subtract(MathNet.Symbolics.StdPackage.Structures.VectorValue`1&lt;TScalar&gt;,MathNet.Symbolics.StdPackage.Structures.VectorValue`1&lt;TScalar&gt;):MathNet.Symbolics.StdPackage.Structures.VectorValue`1&lt;TScalar&gt;">
            <Messages>
             <Message TypeName="DoNotDeclareStaticMembersOnGenericTypes" Category="Microsoft.Design" CheckId="CA1000" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>VectorValue`1.Subtract(VectorValue`1&lt;TScalar&gt;, VectorValue`1&lt;TScalar&gt;):VectorValue`1&lt;TScalar&gt;</Item>
               <Item>MathNet.Symbolics.StdPackage.Structures.VectorValue`1</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Value">
            <Messages>
             <Message TypeName="PropertiesShouldNotReturnArrays" Category="Microsoft.Performance" CheckId="CA1819" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>VectorValue`1.Value:TScalar[]</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Zero">
            <Messages>
             <Message TypeName="DoNotDeclareStaticMembersOnGenericTypes" Category="Microsoft.Design" CheckId="CA1000" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>VectorValue`1.Zero:VectorValue`1&lt;TScalar&gt;</Item>
               <Item>MathNet.Symbolics.StdPackage.Structures.VectorValue`1</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
        </Types>
       </Namespace>
       <Namespace Name="MathNet.Symbolics.StdPackage.TimeCurves">
        <Types>
         <Type Name="Curve+CurveSegment">
          <Messages>
           <Message TypeName="AvoidUninstantiatedInternalClasses" Category="Microsoft.Performance" CheckId="CA1812" Created="2006-08-05 09:39:03Z">
            <Issue>
             <Item>MathNet.Symbolics.StdPackage.TimeCurves.Curve+CurveSegment</Item>
            </Issue>
           </Message>
          </Messages>
          <Members>
           <Member Name="Begin">
            <Messages>
             <Message TypeName="AvoidUnusedPrivateFields" Category="Microsoft.Performance" CheckId="CA1823" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>CurveSegment.Begin</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Offset">
            <Messages>
             <Message TypeName="AvoidUnusedPrivateFields" Category="Microsoft.Performance" CheckId="CA1823" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>CurveSegment.Offset</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Segment">
            <Messages>
             <Message TypeName="AvoidUnusedPrivateFields" Category="Microsoft.Performance" CheckId="CA1823" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>CurveSegment.Segment</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="CurveSegment`1">
          <Members>
           <Member Name=".ctor(System.TimeSpan,T,T)">
            <Messages>
             <Message Id="slopePerSecond" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2006-08-05 09:39:03Z" FixCategory="Breaking">
              <Issue>
               <Item>slopePerSecond</Item>
               <Item>CurveSegment`1.CurveSegment`1(TimeSpan, T, T)</Item>
              </Issue>
             </Message>
             <Message Id="timeOffset" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2006-08-05 09:39:03Z" FixCategory="Breaking">
              <Issue>
               <Item>timeOffset</Item>
               <Item>CurveSegment`1.CurveSegment`1(TimeSpan, T, T)</Item>
              </Issue>
             </Message>
             <Message Id="valueOffset" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2006-08-05 09:39:03Z" FixCategory="Breaking">
              <Issue>
               <Item>valueOffset</Item>
               <Item>CurveSegment`1.CurveSegment`1(TimeSpan, T, T)</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
        </Types>
       </Namespace>
       <Namespace Name="MathNet.Symbolics.StdPackage.Trigonometry">
        <Types>
         <Type Name="HyperbolicCosecantArchitectures">
          <Members>
           <Member Name="BuildTheorems(MathNet.Symbolics.Backend.Context):MathNet.Symbolics.Backend.Theorems.ITheorem[]">
            <Messages>
             <Message Id="context" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2006-08-05 09:39:03Z" FixCategory="Breaking">
              <Issue>
               <Item>context</Item>
               <Item>HyperbolicCosecantArchitectures.BuildTheorems(Context):ITheorem[]</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="HyperbolicCosineArchitectures">
          <Members>
           <Member Name="BuildTheorems(MathNet.Symbolics.Backend.Context):MathNet.Symbolics.Backend.Theorems.ITheorem[]">
            <Messages>
             <Message Id="context" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2006-08-05 09:39:03Z" FixCategory="Breaking">
              <Issue>
               <Item>context</Item>
               <Item>HyperbolicCosineArchitectures.BuildTheorems(Context):ITheorem[]</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="HyperbolicCotangentArchitectures">
          <Members>
           <Member Name="BuildTheorems(MathNet.Symbolics.Backend.Context):MathNet.Symbolics.Backend.Theorems.ITheorem[]">
            <Messages>
             <Message Id="context" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2006-08-05 09:39:03Z" FixCategory="Breaking">
              <Issue>
               <Item>context</Item>
               <Item>HyperbolicCotangentArchitectures.BuildTheorems(Context):ITheorem[]</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="HyperbolicSecantArchitectures">
          <Members>
           <Member Name="BuildTheorems(MathNet.Symbolics.Backend.Context):MathNet.Symbolics.Backend.Theorems.ITheorem[]">
            <Messages>
             <Message Id="context" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2006-08-05 09:39:03Z" FixCategory="Breaking">
              <Issue>
               <Item>context</Item>
               <Item>HyperbolicSecantArchitectures.BuildTheorems(Context):ITheorem[]</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="HyperbolicSineArchitectures">
          <Members>
           <Member Name="BuildTheorems(MathNet.Symbolics.Backend.Context):MathNet.Symbolics.Backend.Theorems.ITheorem[]">
            <Messages>
             <Message Id="context" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2006-08-05 09:39:03Z" FixCategory="Breaking">
              <Issue>
               <Item>context</Item>
               <Item>HyperbolicSineArchitectures.BuildTheorems(Context):ITheorem[]</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="HyperbolicTangentArchitectures">
          <Members>
           <Member Name="BuildTheorems(MathNet.Symbolics.Backend.Context):MathNet.Symbolics.Backend.Theorems.ITheorem[]">
            <Messages>
             <Message Id="context" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2006-08-05 09:39:03Z" FixCategory="Breaking">
              <Issue>
               <Item>context</Item>
               <Item>HyperbolicTangentArchitectures.BuildTheorems(Context):ITheorem[]</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
        </Types>
       </Namespace>
       <Namespace Name="MathNet.Symbolics.Workplace">
        <Types>
         <Type Name="Builder">
          <Members>
           <Member Name="EncapsulateAsList(MathNet.Symbolics.Core.Signal[]):MathNet.Symbolics.Core.Signal">
            <Messages>
             <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Created="2006-08-05 09:39:03Z" FixCategory="Breaking">
              <Issue>
               <Item>Builder.EncapsulateAsList(Signal[]):Signal</Item>
              </Issue>
             </Message>
             <Message Id="inner" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2006-08-05 09:39:03Z" FixCategory="Breaking">
              <Issue>
               <Item>inner</Item>
               <Item>Builder.EncapsulateAsList(Signal[]):Signal</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="EncapsulateAsList(System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Core.Signal&gt;):MathNet.Symbolics.Core.Signal">
            <Messages>
             <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Created="2006-08-05 09:39:03Z" FixCategory="Breaking">
              <Issue>
               <Item>Builder.EncapsulateAsList(IList`1&lt;MathNet.Symbolics.Core.Signal&gt;):Signal</Item>
              </Issue>
             </Message>
             <Message Id="inner" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2006-08-05 09:39:03Z" FixCategory="Breaking">
              <Issue>
               <Item>inner</Item>
               <Item>Builder.EncapsulateAsList(IList`1&lt;MathNet.Symbolics.Core.Signal&gt;):Signal</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="EncapsulateAsScalar(MathNet.Symbolics.Core.Signal[]):MathNet.Symbolics.Core.Signal">
            <Messages>
             <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Created="2006-08-05 09:39:03Z" FixCategory="Breaking">
              <Issue>
               <Item>Builder.EncapsulateAsScalar(Signal[]):Signal</Item>
              </Issue>
             </Message>
             <Message Id="inner" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2006-08-05 09:39:03Z" FixCategory="Breaking">
              <Issue>
               <Item>inner</Item>
               <Item>Builder.EncapsulateAsScalar(Signal[]):Signal</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="EncapsulateAsScalar(System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Core.Signal&gt;):MathNet.Symbolics.Core.Signal">
            <Messages>
             <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Created="2006-08-05 09:39:03Z" FixCategory="Breaking">
              <Issue>
               <Item>Builder.EncapsulateAsScalar(IList`1&lt;MathNet.Symbolics.Core.Signal&gt;):Signal</Item>
              </Issue>
             </Message>
             <Message Id="inner" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2006-08-05 09:39:03Z" FixCategory="Breaking">
              <Issue>
               <Item>inner</Item>
               <Item>Builder.EncapsulateAsScalar(IList`1&lt;MathNet.Symbolics.Core.Signal&gt;):Signal</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="EncapsulateAsSet(MathNet.Symbolics.Core.Signal[]):MathNet.Symbolics.Core.Signal">
            <Messages>
             <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Created="2006-08-05 09:39:03Z" FixCategory="Breaking">
              <Issue>
               <Item>Builder.EncapsulateAsSet(Signal[]):Signal</Item>
              </Issue>
             </Message>
             <Message Id="inner" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2006-08-05 09:39:03Z" FixCategory="Breaking">
              <Issue>
               <Item>inner</Item>
               <Item>Builder.EncapsulateAsSet(Signal[]):Signal</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="EncapsulateAsSet(System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Core.Signal&gt;):MathNet.Symbolics.Core.Signal">
            <Messages>
             <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Created="2006-08-05 09:39:03Z" FixCategory="Breaking">
              <Issue>
               <Item>Builder.EncapsulateAsSet(IList`1&lt;MathNet.Symbolics.Core.Signal&gt;):Signal</Item>
              </Issue>
             </Message>
             <Message Id="inner" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2006-08-05 09:39:03Z" FixCategory="Breaking">
              <Issue>
               <Item>inner</Item>
               <Item>Builder.EncapsulateAsSet(IList`1&lt;MathNet.Symbolics.Core.Signal&gt;):Signal</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="EncapsulateAsVector(MathNet.Symbolics.Core.Signal[]):MathNet.Symbolics.Core.Signal">
            <Messages>
             <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Created="2006-08-05 09:39:03Z" FixCategory="Breaking">
              <Issue>
               <Item>Builder.EncapsulateAsVector(Signal[]):Signal</Item>
              </Issue>
             </Message>
             <Message Id="inner" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2006-08-05 09:39:03Z" FixCategory="Breaking">
              <Issue>
               <Item>inner</Item>
               <Item>Builder.EncapsulateAsVector(Signal[]):Signal</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="EncapsulateAsVector(System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Core.Signal&gt;):MathNet.Symbolics.Core.Signal">
            <Messages>
             <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Created="2006-08-05 09:39:03Z" FixCategory="Breaking">
              <Issue>
               <Item>Builder.EncapsulateAsVector(IList`1&lt;MathNet.Symbolics.Core.Signal&gt;):Signal</Item>
              </Issue>
             </Message>
             <Message Id="inner" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2006-08-05 09:39:03Z" FixCategory="Breaking">
              <Issue>
               <Item>inner</Item>
               <Item>Builder.EncapsulateAsVector(IList`1&lt;MathNet.Symbolics.Core.Signal&gt;):Signal</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Function(MathNet.Symbolics.Core.Entity,MathNet.Symbolics.Core.Signal):MathNet.Symbolics.Core.Signal">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'entity'</Item>
               <Item>Builder.Function(Entity, Signal):Signal</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Function(MathNet.Symbolics.Core.Entity,MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Signal):MathNet.Symbolics.Core.Signal">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'entity'</Item>
               <Item>Builder.Function(Entity, Signal, Signal):Signal</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Function(MathNet.Symbolics.Core.Entity,MathNet.Symbolics.Core.Signal[]):MathNet.Symbolics.Core.Signal">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'arguments'</Item>
               <Item>Builder.Function(Entity, Signal[]):Signal</Item>
              </Issue>
              <Issue>
               <Item>'entity'</Item>
               <Item>Builder.Function(Entity, Signal[]):Signal</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Function(System.String,MathNet.Symbolics.Core.InfixNotation,MathNet.Symbolics.Core.Signal[]):MathNet.Symbolics.Core.Signal">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'arguments'</Item>
               <Item>Builder.Function(String, InfixNotation, Signal[]):Signal</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Function(System.String,MathNet.Symbolics.Core.Signal[]):MathNet.Symbolics.Core.Signal">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'arguments'</Item>
               <Item>Builder.Function(String, Signal[]):Signal</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Functions(MathNet.Symbolics.Core.Entity,MathNet.Symbolics.Core.Signal):MathNet.Symbolics.Backend.Containers.ReadOnlySignalSet">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'entity'</Item>
               <Item>Builder.Functions(Entity, Signal):ReadOnlySignalSet</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Functions(MathNet.Symbolics.Core.Entity,MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Signal):MathNet.Symbolics.Backend.Containers.ReadOnlySignalSet">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'entity'</Item>
               <Item>Builder.Functions(Entity, Signal, Signal):ReadOnlySignalSet</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Functions(MathNet.Symbolics.Core.Entity,MathNet.Symbolics.Core.Signal[]):MathNet.Symbolics.Backend.Containers.ReadOnlySignalSet">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'arguments'</Item>
               <Item>Builder.Functions(Entity, Signal[]):ReadOnlySignalSet</Item>
              </Issue>
              <Issue>
               <Item>'entity'</Item>
               <Item>Builder.Functions(Entity, Signal[]):ReadOnlySignalSet</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Functions(System.String,MathNet.Symbolics.Core.InfixNotation,MathNet.Symbolics.Core.Signal[]):MathNet.Symbolics.Backend.Containers.ReadOnlySignalSet">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'arguments'</Item>
               <Item>Builder.Functions(String, InfixNotation, Signal[]):ReadOnlySignalSet</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Functions(System.String,MathNet.Symbolics.Core.Signal[]):MathNet.Symbolics.Backend.Containers.ReadOnlySignalSet">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'arguments'</Item>
               <Item>Builder.Functions(String, Signal[]):ReadOnlySignalSet</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="MathSystem">
          <Members>
           <Member Name="Evaluate(MathNet.Symbolics.Core.ValueStructure[]):MathNet.Symbolics.Core.ValueStructure[]">
            <Messages>
             <Message Id="System.ArgumentException.#ctor(System.String,System.String)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>MathSystem.Evaluate(ValueStructure[]):ValueStructure[]</Item>
               <Item>1</Item>
               <Item>ArgumentException.ArgumentException(String, String)</Item>
               <Item>The count of inputs doesn't match the systems count of input signals.</Item>
              </Issue>
             </Message>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'inputs'</Item>
               <Item>MathSystem.Evaluate(ValueStructure[]):ValueStructure[]</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Evaluate(System.Double[]):System.Double[]">
            <Messages>
             <Message Id="System.ArgumentException.#ctor(System.String,System.String)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>MathSystem.Evaluate(Double[]):Double[]</Item>
               <Item>1</Item>
               <Item>ArgumentException.ArgumentException(String, String)</Item>
               <Item>The count of inputs doesn't match the systems count of input signals.</Item>
              </Issue>
             </Message>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'inputs'</Item>
               <Item>MathSystem.Evaluate(Double[]):Double[]</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="GetAllBuses():MathNet.Symbolics.Backend.Containers.ReadOnlyBusSet">
            <Messages>
             <Message TypeName="UsePropertiesWhereAppropriate" Category="Microsoft.Design" CheckId="CA1024" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>GetAllBuses</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="GetAllInputs():MathNet.Symbolics.Backend.Containers.ReadOnlySignalSet">
            <Messages>
             <Message TypeName="UsePropertiesWhereAppropriate" Category="Microsoft.Design" CheckId="CA1024" Created="2006-08-05 09:39:03Z">
              <Issue Certainty="50">
               <Item>GetAllInputs</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="GetAllLeafSignals():MathNet.Symbolics.Backend.Containers.ReadOnlySignalSet">
            <Messages>
             <Message TypeName="UsePropertiesWhereAppropriate" Category="Microsoft.Design" CheckId="CA1024" Created="2006-08-05 09:39:03Z">
              <Issue Certainty="50">
               <Item>GetAllLeafSignals</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="GetAllOutputs():MathNet.Symbolics.Backend.Containers.ReadOnlySignalSet">
            <Messages>
             <Message TypeName="UsePropertiesWhereAppropriate" Category="Microsoft.Design" CheckId="CA1024" Created="2006-08-05 09:39:03Z">
              <Issue Certainty="50">
               <Item>GetAllOutputs</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="GetAllPorts():MathNet.Symbolics.Backend.Containers.ReadOnlyPortSet">
            <Messages>
             <Message TypeName="UsePropertiesWhereAppropriate" Category="Microsoft.Design" CheckId="CA1024" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>GetAllPorts</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="GetAllSignals():MathNet.Symbolics.Backend.Containers.ReadOnlySignalSet">
            <Messages>
             <Message TypeName="UsePropertiesWhereAppropriate" Category="Microsoft.Design" CheckId="CA1024" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>GetAllSignals</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="PublishToLibrary(System.String,MathNet.Symbolics.Backend.Library,MathNet.Symbolics.Core.MathIdentifier,MathNet.Symbolics.Core.MathIdentifier):System.Void">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'library'</Item>
               <Item>MathSystem.PublishToLibrary(String, Library, MathIdentifier, MathIdentifier):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="PublishToLibrary(System.String,MathNet.Symbolics.Backend.Library,System.String,System.String,System.String,System.String):MathNet.Symbolics.Core.Entity">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'library'</Item>
               <Item>MathSystem.PublishToLibrary(String, Library, String, String, String, String):Entity</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="ReadXml(System.IO.FileInfo,MathNet.Symbolics.Backend.Context):MathNet.Symbolics.Workplace.MathSystem">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'file'</Item>
               <Item>MathSystem.ReadXml(FileInfo, Context):MathSystem</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="ReadXmlEntity(System.IO.FileInfo,MathNet.Symbolics.Core.MathIdentifier,System.String):MathNet.Symbolics.Core.Entity">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'file'</Item>
               <Item>MathSystem.ReadXmlEntity(FileInfo, MathIdentifier, String):Entity</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="ReadXmlEntity(System.IO.FileInfo,MathNet.Symbolics.Core.MathIdentifier,System.String,MathNet.Symbolics.Core.InfixNotation,System.Int32):MathNet.Symbolics.Core.Entity">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'file'</Item>
               <Item>MathSystem.ReadXmlEntity(FileInfo, MathIdentifier, String, InfixNotation, Int32):Entity</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="ReadXmlEntity(System.Xml.XmlReader,MathNet.Symbolics.Core.MathIdentifier,System.String,MathNet.Symbolics.Core.InfixNotation,System.Int32):MathNet.Symbolics.Core.Entity">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'reader'</Item>
               <Item>MathSystem.ReadXmlEntity(XmlReader, MathIdentifier, String, InfixNotation, Int32):Entity</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="RemovePort(MathNet.Symbolics.Core.Port,System.Boolean):System.Void">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'port'</Item>
               <Item>MathSystem.RemovePort(Port, Boolean):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="RemoveSignal(MathNet.Symbolics.Core.Signal,System.Boolean):System.Void">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'signal'</Item>
               <Item>MathSystem.RemoveSignal(Signal, Boolean):Void</Item>
              </Issue>
              <Issue>
               <Item>'signal'</Item>
               <Item>MathSystem.RemoveSignal(Signal, Boolean):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="WriteXml(System.IO.FileInfo):System.Void">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'file'</Item>
               <Item>MathSystem.WriteXml(FileInfo):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="WriteXml(System.Xml.XmlWriter):System.Void">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'writer'</Item>
               <Item>MathSystem.WriteXml(XmlWriter):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="Project">
          <Members>
           <Member Name="KeepTrack">
            <Messages>
             <Message TypeName="ProvideObsoleteAttributeMessage" Category="Microsoft.Design" CheckId="CA1041" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>Project.KeepTrack:Boolean</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="LoadSystem(System.Int32):System.Void">
            <Messages>
             <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Created="2006-08-05 09:39:03Z" FixCategory="Breaking">
              <Issue>
               <Item>Project.LoadSystem(Int32):Void</Item>
              </Issue>
             </Message>
             <Message Id="index" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2006-08-05 09:39:03Z" FixCategory="Breaking">
              <Issue>
               <Item>index</Item>
               <Item>Project.LoadSystem(Int32):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="Scanner">
          <Members>
           <Member Name="ExistsPort(MathNet.Symbolics.Core.Port,System.Predicate`1&lt;MathNet.Symbolics.Core.Port&gt;,System.Boolean,MathNet.Symbolics.Core.Port&amp;,MathNet.Symbolics.Core.Signal&amp;):System.Boolean">
            <Messages>
             <Message Id="3#" TypeName="AvoidOutParameters" Category="Microsoft.Design" CheckId="CA1021" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>foundPort</Item>
              </Issue>
             </Message>
             <Message Id="4#" TypeName="AvoidOutParameters" Category="Microsoft.Design" CheckId="CA1021" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>foundPortTarget</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="ExistsPort(MathNet.Symbolics.Core.Signal,System.Predicate`1&lt;MathNet.Symbolics.Core.Port&gt;,System.Boolean,MathNet.Symbolics.Core.Port&amp;,MathNet.Symbolics.Core.Signal&amp;):System.Boolean">
            <Messages>
             <Message Id="3#" TypeName="AvoidOutParameters" Category="Microsoft.Design" CheckId="CA1021" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>foundPort</Item>
              </Issue>
             </Message>
             <Message Id="4#" TypeName="AvoidOutParameters" Category="Microsoft.Design" CheckId="CA1021" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>foundPortTarget</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="ExistsPort(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Core.Signal&gt;,System.Predicate`1&lt;MathNet.Symbolics.Core.Port&gt;,System.Boolean,MathNet.Symbolics.Core.Port&amp;,MathNet.Symbolics.Core.Signal&amp;):System.Boolean">
            <Messages>
             <Message Id="3#" TypeName="AvoidOutParameters" Category="Microsoft.Design" CheckId="CA1021" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>foundPort</Item>
              </Issue>
             </Message>
             <Message Id="4#" TypeName="AvoidOutParameters" Category="Microsoft.Design" CheckId="CA1021" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>foundPortTarget</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="ExistsSignal(MathNet.Symbolics.Core.Port,System.Predicate`1&lt;MathNet.Symbolics.Core.Signal&gt;,System.Boolean,MathNet.Symbolics.Core.Signal&amp;,MathNet.Symbolics.Core.Port&amp;):System.Boolean">
            <Messages>
             <Message Id="3#" TypeName="AvoidOutParameters" Category="Microsoft.Design" CheckId="CA1021" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>foundSignal</Item>
              </Issue>
             </Message>
             <Message Id="4#" TypeName="AvoidOutParameters" Category="Microsoft.Design" CheckId="CA1021" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>foundSignalTarget</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="ExistsSignal(MathNet.Symbolics.Core.Signal,System.Predicate`1&lt;MathNet.Symbolics.Core.Signal&gt;,System.Boolean,MathNet.Symbolics.Core.Signal&amp;,MathNet.Symbolics.Core.Port&amp;):System.Boolean">
            <Messages>
             <Message Id="3#" TypeName="AvoidOutParameters" Category="Microsoft.Design" CheckId="CA1021" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>foundSignal</Item>
              </Issue>
             </Message>
             <Message Id="4#" TypeName="AvoidOutParameters" Category="Microsoft.Design" CheckId="CA1021" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>foundSignalTarget</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="ExistsSignal(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Core.Signal&gt;,System.Predicate`1&lt;MathNet.Symbolics.Core.Signal&gt;,System.Boolean,MathNet.Symbolics.Core.Signal&amp;,MathNet.Symbolics.Core.Port&amp;):System.Boolean">
            <Messages>
             <Message Id="3#" TypeName="AvoidOutParameters" Category="Microsoft.Design" CheckId="CA1021" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>foundSignal</Item>
              </Issue>
             </Message>
             <Message Id="4#" TypeName="AvoidOutParameters" Category="Microsoft.Design" CheckId="CA1021" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>foundSignalTarget</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="FindAll(MathNet.Symbolics.Core.Port,System.Boolean,MathNet.Symbolics.Backend.Containers.SignalSet&amp;,MathNet.Symbolics.Backend.Containers.PortSet&amp;):System.Void">
            <Messages>
             <Message Id="2#" TypeName="AvoidOutParameters" Category="Microsoft.Design" CheckId="CA1021" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>signals</Item>
              </Issue>
             </Message>
             <Message Id="3#" TypeName="AvoidOutParameters" Category="Microsoft.Design" CheckId="CA1021" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>ports</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="FindAll(MathNet.Symbolics.Core.Signal,System.Boolean,MathNet.Symbolics.Backend.Containers.SignalSet&amp;,MathNet.Symbolics.Backend.Containers.PortSet&amp;):System.Void">
            <Messages>
             <Message Id="2#" TypeName="AvoidOutParameters" Category="Microsoft.Design" CheckId="CA1021" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>signals</Item>
              </Issue>
             </Message>
             <Message Id="3#" TypeName="AvoidOutParameters" Category="Microsoft.Design" CheckId="CA1021" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>ports</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="FindAll(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Core.Signal&gt;,System.Boolean,MathNet.Symbolics.Backend.Containers.SignalSet&amp;,MathNet.Symbolics.Backend.Containers.PortSet&amp;):System.Void">
            <Messages>
             <Message Id="2#" TypeName="AvoidOutParameters" Category="Microsoft.Design" CheckId="CA1021" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>signals</Item>
              </Issue>
             </Message>
             <Message Id="3#" TypeName="AvoidOutParameters" Category="Microsoft.Design" CheckId="CA1021" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>ports</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="FindAllPortPathsFrom(MathNet.Symbolics.Core.Port,MathNet.Symbolics.Core.Port,System.Boolean):System.Collections.Generic.List`1&lt;System.Collections.Generic.List`1&lt;MathNet.Symbolics.Core.Port&gt;&gt;">
            <Messages>
             <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>System.Collections.Generic.List`1&lt;System.Collections.Generic.List`1&lt;MathNet.Symbolics.Core.Port&gt;&gt;</Item>
               <Item>Scanner.FindAllPortPathsFrom(Port, Port, Boolean):List`1&lt;System.Collections.Generic.List`1&lt;MathNet.Symbolics.Core.Port&gt;&gt;</Item>
              </Issue>
             </Message>
             <Message TypeName="DoNotNestGenericTypesInMemberSignatures" Category="Microsoft.Design" CheckId="CA1006" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>Scanner.FindAllPortPathsFrom(Port, Port, Boolean):List`1&lt;System.Collections.Generic.List`1&lt;MathNet.Symbolics.Core.Port&gt;&gt;</Item>
               <Item>System.Collections.Generic.List`1&lt;System.Collections.Generic.List`1&lt;MathNet.Symbolics.Core.Port&gt;&gt;</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="FindAllPortPathsFrom(MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Port,System.Boolean):System.Collections.Generic.List`1&lt;System.Collections.Generic.List`1&lt;MathNet.Symbolics.Core.Port&gt;&gt;">
            <Messages>
             <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>System.Collections.Generic.List`1&lt;System.Collections.Generic.List`1&lt;MathNet.Symbolics.Core.Port&gt;&gt;</Item>
               <Item>Scanner.FindAllPortPathsFrom(Signal, Port, Boolean):List`1&lt;System.Collections.Generic.List`1&lt;MathNet.Symbolics.Core.Port&gt;&gt;</Item>
              </Issue>
             </Message>
             <Message TypeName="DoNotNestGenericTypesInMemberSignatures" Category="Microsoft.Design" CheckId="CA1006" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>Scanner.FindAllPortPathsFrom(Signal, Port, Boolean):List`1&lt;System.Collections.Generic.List`1&lt;MathNet.Symbolics.Core.Port&gt;&gt;</Item>
               <Item>System.Collections.Generic.List`1&lt;System.Collections.Generic.List`1&lt;MathNet.Symbolics.Core.Port&gt;&gt;</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="FindAllPortPathsFrom(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Core.Signal&gt;,MathNet.Symbolics.Core.Port,System.Boolean):System.Collections.Generic.List`1&lt;System.Collections.Generic.List`1&lt;MathNet.Symbolics.Core.Port&gt;&gt;">
            <Messages>
             <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>System.Collections.Generic.List`1&lt;System.Collections.Generic.List`1&lt;MathNet.Symbolics.Core.Port&gt;&gt;</Item>
               <Item>Scanner.FindAllPortPathsFrom(IEnumerable`1&lt;MathNet.Symbolics.Core.Signal&gt;, Port, Boolean):List`1&lt;System.Collections.Generic.List`1&lt;MathNet.Symbolics.Core.Port&gt;&gt;</Item>
              </Issue>
             </Message>
             <Message TypeName="DoNotNestGenericTypesInMemberSignatures" Category="Microsoft.Design" CheckId="CA1006" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>Scanner.FindAllPortPathsFrom(IEnumerable`1&lt;MathNet.Symbolics.Core.Signal&gt;, Port, Boolean):List`1&lt;System.Collections.Generic.List`1&lt;MathNet.Symbolics.Core.Port&gt;&gt;</Item>
               <Item>System.Collections.Generic.List`1&lt;System.Collections.Generic.List`1&lt;MathNet.Symbolics.Core.Port&gt;&gt;</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="FindAllSignalPathsFrom(MathNet.Symbolics.Core.Port,MathNet.Symbolics.Core.Signal,System.Boolean):System.Collections.Generic.List`1&lt;System.Collections.Generic.List`1&lt;MathNet.Symbolics.Core.Signal&gt;&gt;">
            <Messages>
             <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>System.Collections.Generic.List`1&lt;System.Collections.Generic.List`1&lt;MathNet.Symbolics.Core.Signal&gt;&gt;</Item>
               <Item>Scanner.FindAllSignalPathsFrom(Port, Signal, Boolean):List`1&lt;System.Collections.Generic.List`1&lt;MathNet.Symbolics.Core.Signal&gt;&gt;</Item>
              </Issue>
             </Message>
             <Message TypeName="DoNotNestGenericTypesInMemberSignatures" Category="Microsoft.Design" CheckId="CA1006" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>Scanner.FindAllSignalPathsFrom(Port, Signal, Boolean):List`1&lt;System.Collections.Generic.List`1&lt;MathNet.Symbolics.Core.Signal&gt;&gt;</Item>
               <Item>System.Collections.Generic.List`1&lt;System.Collections.Generic.List`1&lt;MathNet.Symbolics.Core.Signal&gt;&gt;</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="FindAllSignalPathsFrom(MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Signal,System.Boolean):System.Collections.Generic.List`1&lt;System.Collections.Generic.List`1&lt;MathNet.Symbolics.Core.Signal&gt;&gt;">
            <Messages>
             <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>System.Collections.Generic.List`1&lt;System.Collections.Generic.List`1&lt;MathNet.Symbolics.Core.Signal&gt;&gt;</Item>
               <Item>Scanner.FindAllSignalPathsFrom(Signal, Signal, Boolean):List`1&lt;System.Collections.Generic.List`1&lt;MathNet.Symbolics.Core.Signal&gt;&gt;</Item>
              </Issue>
             </Message>
             <Message TypeName="DoNotNestGenericTypesInMemberSignatures" Category="Microsoft.Design" CheckId="CA1006" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>Scanner.FindAllSignalPathsFrom(Signal, Signal, Boolean):List`1&lt;System.Collections.Generic.List`1&lt;MathNet.Symbolics.Core.Signal&gt;&gt;</Item>
               <Item>System.Collections.Generic.List`1&lt;System.Collections.Generic.List`1&lt;MathNet.Symbolics.Core.Signal&gt;&gt;</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="FindAllSignalPathsFrom(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Core.Signal&gt;,MathNet.Symbolics.Core.Signal,System.Boolean):System.Collections.Generic.List`1&lt;System.Collections.Generic.List`1&lt;MathNet.Symbolics.Core.Signal&gt;&gt;">
            <Messages>
             <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>System.Collections.Generic.List`1&lt;System.Collections.Generic.List`1&lt;MathNet.Symbolics.Core.Signal&gt;&gt;</Item>
               <Item>Scanner.FindAllSignalPathsFrom(IEnumerable`1&lt;MathNet.Symbolics.Core.Signal&gt;, Signal, Boolean):List`1&lt;System.Collections.Generic.List`1&lt;MathNet.Symbolics.Core.Signal&gt;&gt;</Item>
              </Issue>
             </Message>
             <Message TypeName="DoNotNestGenericTypesInMemberSignatures" Category="Microsoft.Design" CheckId="CA1006" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>Scanner.FindAllSignalPathsFrom(IEnumerable`1&lt;MathNet.Symbolics.Core.Signal&gt;, Signal, Boolean):List`1&lt;System.Collections.Generic.List`1&lt;MathNet.Symbolics.Core.Signal&gt;&gt;</Item>
               <Item>System.Collections.Generic.List`1&lt;System.Collections.Generic.List`1&lt;MathNet.Symbolics.Core.Signal&gt;&gt;</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="MatchAll(MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Port,MathNet.Symbolics.Backend.Patterns.CoalescedTreeNode):MathNet.Symbolics.Backend.Patterns.MatchCollection">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'tree'</Item>
               <Item>Scanner.MatchAll(Signal, Port, CoalescedTreeNode):MatchCollection</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="MatchFirst(MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Port,MathNet.Symbolics.Backend.Patterns.CoalescedTreeNode):MathNet.Symbolics.Backend.Patterns.Match">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'tree'</Item>
               <Item>Scanner.MatchFirst(Signal, Port, CoalescedTreeNode):Match</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Transform(MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Backend.Context,MathNet.Symbolics.Core.MathIdentifier,MathNet.Symbolics.Backend.Theorems.ConfigureTransformation,System.Boolean):MathNet.Symbolics.Core.Signal">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'context'</Item>
               <Item>Scanner.Transform(Signal, Context, MathIdentifier, ConfigureTransformation, Boolean):Signal</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Transform(MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Backend.Context,MathNet.Symbolics.Core.MathIdentifier,System.Boolean):MathNet.Symbolics.Core.Signal">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'context'</Item>
               <Item>Scanner.Transform(Signal, Context, MathIdentifier, Boolean):Signal</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="TrueForAllPorts(MathNet.Symbolics.Core.Port,System.Predicate`1&lt;MathNet.Symbolics.Core.Port&gt;,System.Boolean,MathNet.Symbolics.Core.Port&amp;,MathNet.Symbolics.Core.Signal&amp;):System.Boolean">
            <Messages>
             <Message Id="3#" TypeName="AvoidOutParameters" Category="Microsoft.Design" CheckId="CA1021" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>failedPort</Item>
              </Issue>
             </Message>
             <Message Id="4#" TypeName="AvoidOutParameters" Category="Microsoft.Design" CheckId="CA1021" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>failedPortTarget</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="TrueForAllPorts(MathNet.Symbolics.Core.Signal,System.Predicate`1&lt;MathNet.Symbolics.Core.Port&gt;,System.Boolean,MathNet.Symbolics.Core.Port&amp;,MathNet.Symbolics.Core.Signal&amp;):System.Boolean">
            <Messages>
             <Message Id="3#" TypeName="AvoidOutParameters" Category="Microsoft.Design" CheckId="CA1021" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>failedPort</Item>
              </Issue>
             </Message>
             <Message Id="4#" TypeName="AvoidOutParameters" Category="Microsoft.Design" CheckId="CA1021" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>failedPortTarget</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="TrueForAllPorts(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Core.Signal&gt;,System.Predicate`1&lt;MathNet.Symbolics.Core.Port&gt;,System.Boolean,MathNet.Symbolics.Core.Port&amp;,MathNet.Symbolics.Core.Signal&amp;):System.Boolean">
            <Messages>
             <Message Id="3#" TypeName="AvoidOutParameters" Category="Microsoft.Design" CheckId="CA1021" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>failedPort</Item>
              </Issue>
             </Message>
             <Message Id="4#" TypeName="AvoidOutParameters" Category="Microsoft.Design" CheckId="CA1021" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>failedPortTarget</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="TrueForAllSignals(MathNet.Symbolics.Core.Port,System.Predicate`1&lt;MathNet.Symbolics.Core.Signal&gt;,System.Boolean,MathNet.Symbolics.Core.Signal&amp;,MathNet.Symbolics.Core.Port&amp;):System.Boolean">
            <Messages>
             <Message Id="3#" TypeName="AvoidOutParameters" Category="Microsoft.Design" CheckId="CA1021" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>failedSignal</Item>
              </Issue>
             </Message>
             <Message Id="4#" TypeName="AvoidOutParameters" Category="Microsoft.Design" CheckId="CA1021" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>failedSignalTarget</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="TrueForAllSignals(MathNet.Symbolics.Core.Signal,System.Predicate`1&lt;MathNet.Symbolics.Core.Signal&gt;,System.Boolean,MathNet.Symbolics.Core.Signal&amp;,MathNet.Symbolics.Core.Port&amp;):System.Boolean">
            <Messages>
             <Message Id="3#" TypeName="AvoidOutParameters" Category="Microsoft.Design" CheckId="CA1021" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>failedSignal</Item>
              </Issue>
             </Message>
             <Message Id="4#" TypeName="AvoidOutParameters" Category="Microsoft.Design" CheckId="CA1021" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>failedSignalTarget</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="TrueForAllSignals(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Core.Signal&gt;,System.Predicate`1&lt;MathNet.Symbolics.Core.Signal&gt;,System.Boolean,MathNet.Symbolics.Core.Signal&amp;,MathNet.Symbolics.Core.Port&amp;):System.Boolean">
            <Messages>
             <Message Id="3#" TypeName="AvoidOutParameters" Category="Microsoft.Design" CheckId="CA1021" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>failedSignal</Item>
              </Issue>
             </Message>
             <Message Id="4#" TypeName="AvoidOutParameters" Category="Microsoft.Design" CheckId="CA1021" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>failedSignalTarget</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="TryMatchFirst(MathNet.Symbolics.Core.Signal,MathNet.Symbolics.Core.Port,MathNet.Symbolics.Backend.Patterns.CoalescedTreeNode,MathNet.Symbolics.Backend.Patterns.Match&amp;):System.Boolean">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'tree'</Item>
               <Item>Scanner.TryMatchFirst(Signal, Port, CoalescedTreeNode, Match&amp;):Boolean</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
        </Types>
       </Namespace>
      </Namespaces>
     </Module>
    </Modules>
   </Target>
  </Targets>
  <Rules>
   <Rule TypeName="AssembliesShouldHaveValidStrongNames" Category="Microsoft.Design" CheckId="CA2210">
    <Resolution Name="NoStrongName">Sign '{0}' with a strong name key.</Resolution>
   </Rule>
   <Rule TypeName="AvoidNamespacesWithFewTypes" Category="Microsoft.Design" CheckId="CA1020">
    <Resolution Name="Default">Consider merging the types defined in '{0}' with another namespace.</Resolution>
   </Rule>
   <Rule TypeName="AvoidOutParameters" Category="Microsoft.Design" CheckId="CA1021">
    <Resolution Name="Default">Consider a design that does not require that '{0}' be an out parameter.</Resolution>
   </Rule>
   <Rule TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811">
    <Resolution Name="Default">'{0}' appears to have no upstream public or protected callers.</Resolution>
   </Rule>
   <Rule TypeName="AvoidUninstantiatedInternalClasses" Category="Microsoft.Performance" CheckId="CA1812">
    <Resolution Name="Default">'{0}' is an internal class that is apparently never instantiated. If so, remove the code from the assembly. If this class is intended to contain only static methods, consider adding a private constructor to prevent the compiler from generating a default constructor.</Resolution>
   </Rule>
   <Rule TypeName="AvoidUnusedPrivateFields" Category="Microsoft.Performance" CheckId="CA1823">
    <Resolution Name="Default">It appears that field '{0}' is never used or is only ever assigned to. Use this field or remove it.</Resolution>
   </Rule>
   <Rule TypeName="ConsiderPassingBaseTypesAsParameters" Category="Microsoft.Design" CheckId="CA1011">
    <Resolution Name="Default">Consider changing the type of parameter '{0}' in {1} from {2} to its base type {3}. This method appears to only require base class members in its implementation. Suppress this violation if there is a compelling reason to require the more derived type in the method signature.</Resolution>
   </Rule>
   <Rule TypeName="DefineAccessorsForAttributeArguments" Category="Microsoft.Design" CheckId="CA1019">
    <Resolution Name="Default">Add a read-only property accessor for positional argument '{0}' of Attribute '{1}'.</Resolution>
   </Rule>
   <Rule TypeName="DoNotCallOverridableMethodsInConstructors" Category="Microsoft.Usage" CheckId="CA2214">
    <Resolution Name="Default">'{0}' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: {1}</Resolution>
   </Rule>
   <Rule TypeName="DoNotCastUnnecessarily" Category="Microsoft.Performance" CheckId="CA1800">
    <Resolution Name="Local">'{0}', a local, is cast to type '{1}' multiple times in method {2}. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant {3} instruction.</Resolution>
   </Rule>
   <Rule TypeName="DoNotDeclareStaticMembersOnGenericTypes" Category="Microsoft.Design" CheckId="CA1000">
    <Resolution Name="Default">Remove {0} from '{1}' or make it an instance member.</Resolution>
   </Rule>
   <Rule TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051">
    <Resolution Name="Default">Make '{0}' private or internal (Friend in VB, public private in C++) and provide a public or protected property to access it.</Resolution>
   </Rule>
   <Rule TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002">
    <Resolution Name="Default">Change '{0}' in {1} to use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt;</Resolution>
   </Rule>
   <Rule TypeName="DoNotMarkEnumsWithFlags" Category="Microsoft.Usage" CheckId="CA2217">
    <Resolution Name="Default">{0} is marked with FlagsAttribute but a discrete member cannot be found for every settable bit that is used across the range of enum values. Remove FlagsAttribute from the type or define new members for the following (currently missing) values: {1}</Resolution>
   </Rule>
   <Rule TypeName="DoNotNestGenericTypesInMemberSignatures" Category="Microsoft.Design" CheckId="CA1006">
    <Resolution Name="Default">Consider a design where {0} doesn't nest generic type '{1}'.</Resolution>
   </Rule>
   <Rule TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303">
    <Resolution Name="Default">{0} passes a literal as parameter {1} of a call to {2}. Retrieve the following string argument from a resource table instead: '{3}'</Resolution>
   </Rule>
   <Rule TypeName="EnumsShouldHaveZeroValue" Category="Microsoft.Design" CheckId="CA1008">
    <Resolution Name="FlagsRename">In enum '{0}', change the name of '{1}' to 'None'.</Resolution>
   </Rule>
   <Rule TypeName="FlagsEnumsShouldHavePluralNames" Category="Microsoft.Naming" CheckId="CA1714">
    <Resolution Name="Default">If enumeration name '{0}' is singular, change it to a plural form.</Resolution>
   </Rule>
   <Rule TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704">
    <Resolution Name="MemberOneLetter">Consider providing a more meaningful name than the one-letter token '{0}' in member name '{1}'.</Resolution>
    <Resolution Name="ParameterOneLetter">In method {0}, consider providing a more meaningful name than the one-letter parameter name '{1}'.</Resolution>
   </Rule>
   <Rule TypeName="IdentifiersShouldHaveCorrectSuffix" Category="Microsoft.Naming" CheckId="CA1710">
    <Resolution Name="Default">Rename '{0}' to end in '{1}'.</Resolution>
   </Rule>
   <Rule TypeName="IdentifiersShouldNotHaveIncorrectSuffix" Category="Microsoft.Naming" CheckId="CA1711">
    <Resolution Name="Default">Rename '{0}' so that it does not end in '{1}'.</Resolution>
   </Rule>
   <Rule TypeName="IdentifiersShouldNotMatchKeywords" Category="Microsoft.Naming" CheckId="CA1716">
    <Resolution Name="Type">Change type name '{0}' so that it does not conflict with reserved keyword:'{1}'.</Resolution>
   </Rule>
   <Rule TypeName="ImplementISerializableCorrectly" Category="Microsoft.Usage" CheckId="CA2240">
    <Resolution Name="Default">Add an implementation of GetObjectData to type '{0}'.</Resolution>
   </Rule>
   <Rule TypeName="ImplementSerializationConstructors" Category="Microsoft.Usage" CheckId="CA2229">
    <Resolution Name="CreateMagicConstructor">Add a constructor to '{0}' with the following signature: 'protected {0}(SerializationInfo info, StreamingContext context)'.</Resolution>
   </Rule>
   <Rule TypeName="ImplementStandardExceptionConstructors" Category="Microsoft.Design" CheckId="CA1032">
    <Resolution Name="Default">Add the following constructor to {0}: {1}.</Resolution>
   </Rule>
   <Rule TypeName="MarkISerializableTypesWithSerializable" Category="Microsoft.Usage" CheckId="CA2237">
    <Resolution Name="Default">Add [Serializable] to '{0}' as this type implements ISerializable.</Resolution>
   </Rule>
   <Rule TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822">
    <Resolution Name="Default">The 'this' parameter (or 'Me' in VB) of {0} is never used. Mark the member as static (or Shared in VB) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Resolution>
   </Rule>
   <Rule TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034">
    <Resolution Name="Default">Do not nest type '{0}'. Alternatively, change its accessibility so that it is not externally visible.</Resolution>
   </Rule>
   <Rule TypeName="OperationsShouldNotOverflow" Category="Microsoft.Usage" CheckId="CA2233">
    <Resolution Name="Default">Correct the potential overflow in the operation '{0}' in '{1}'.</Resolution>
   </Rule>
   <Rule TypeName="OperatorOverloadsHaveNamedAlternates" Category="Microsoft.Usage" CheckId="CA2225">
    <Resolution Name="Default">Provide a method named '{0}' as a friendly alternate for operator {1}.</Resolution>
   </Rule>
   <Rule TypeName="OverloadOperatorEqualsOnOverloadingAddAndSubtract" Category="Microsoft.Design" CheckId="CA1013">
    <Resolution Name="Default">Consider adding an overload of the equality operator for '{0}' that takes the same parameters as {1}.</Resolution>
   </Rule>
   <Rule TypeName="OverrideEqualsAndOperatorEqualsOnValueTypes" Category="Microsoft.Performance" CheckId="CA1815">
    <Resolution Name="Equals">'{0}' should override Equals.</Resolution>
    <Resolution Name="op_Equality">'{0}' should override the equality (==) and inequality (!=) operators.</Resolution>
   </Rule>
   <Rule TypeName="OverrideGetHashCodeOnOverridingEquals" Category="Microsoft.Usage" CheckId="CA2218">
    <Resolution Name="Default">Since '{0}' redefines Equals, it should also redefine GetHashCode.</Resolution>
   </Rule>
   <Rule TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725">
    <Resolution Name="Default">Change parameter name '{0}' of method {1} to '{2}' in order to match the identifier as it has been declared in {3}.</Resolution>
   </Rule>
   <Rule TypeName="PropertiesShouldNotReturnArrays" Category="Microsoft.Performance" CheckId="CA1819">
    <Resolution Name="Default">Change {0} to return a collection or make it a method.</Resolution>
   </Rule>
   <Rule TypeName="ProvideObsoleteAttributeMessage" Category="Microsoft.Design" CheckId="CA1041">
    <Resolution Name="Default">Provide a message for the ObsoleteAttribute that marks '{0}'.</Resolution>
   </Rule>
   <Rule TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804">
    <Resolution Name="Default">{0} declares a local, '{1}', of type {2}, which is never used or is only assigned to. Use this local or remove it.</Resolution>
   </Rule>
   <Rule TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801">
    <Resolution Name="Default">Parameter '{0}' of {1} is never used. Remove the parameter or use it in the method body.</Resolution>
   </Rule>
   <Rule TypeName="ShortAcronymsShouldBeUppercase" Category="Microsoft.Naming" CheckId="CA1706">
    <Resolution Name="Parameter">Correct the capitalization of '{0}' in parameter name '{1}'.</Resolution>
    <Resolution Name="Type">Correct the capitalization of '{0}' in type name '{1}'.</Resolution>
   </Rule>
   <Rule TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305">
    <Resolution Name="Default">{0} makes a call to {1} that does not explicitly provide an IFormatProvider. This should be replaced with a call to {2}.</Resolution>
   </Rule>
   <Rule TypeName="UseIntegralOrStringArgumentForIndexers" Category="Microsoft.Design" CheckId="CA1043">
    <Resolution Name="Default">Use an integral value or string as the parameter to indexer {0}.</Resolution>
   </Rule>
   <Rule TypeName="UsePropertiesWhereAppropriate" Category="Microsoft.Design" CheckId="CA1024">
    <Resolution Name="Default">Change '{0}' to a property if appropriate.</Resolution>
   </Rule>
   <Rule TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062">
    <Resolution Name="Default">Validate parameter {0} passed to externally visible method {1}.</Resolution>
   </Rule>
  </Rules>
 </FxCopReport>
</FxCopProject>
