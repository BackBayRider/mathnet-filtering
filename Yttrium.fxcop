<?xml version="1.0" encoding="utf-8"?>
<FxCopProject Version="1.35" Name="YttriumAnalysis">
 <ProjectOptions>
  <SharedProject>True</SharedProject>
  <Stylesheet Apply="False">http://www.gotdotnet.com/team/fxcop//xsl/1.35/FxCopReport.xsl</Stylesheet>
  <SaveMessages>
   <Project Status="Active, Excluded" NewOnly="False" />
   <Report Status="Active" NewOnly="False" />
  </SaveMessages>
  <ProjectFile Compress="False" DefaultTargetCheck="True" DefaultRuleCheck="True" SaveByRuleGroup="" Deterministic="True" />
  <EnableMultithreadedLoad>True</EnableMultithreadedLoad>
  <EnableMultithreadedAnalysis>True</EnableMultithreadedAnalysis>
  <SourceLookup>True</SourceLookup>
  <AnalysisExceptionsThreshold>10</AnalysisExceptionsThreshold>
  <RuleExceptionsThreshold>1</RuleExceptionsThreshold>
  <Spelling Locale="en-us" />
  <VersionAware>False</VersionAware>
  <OverrideRuleVisibilities>False</OverrideRuleVisibilities>
  <CustomDictionaries SearchFxCopDir="True" SearchUserProfile="True" SearchProjectDir="True" />
  <SearchGlobalAssemblyCache>False</SearchGlobalAssemblyCache>
  <DeadlockDetectionTimeout>120</DeadlockDetectionTimeout>
 </ProjectOptions>
 <Targets>
  <AssemblyReferenceDirectories>
   <Directory>$(ProjectDir)/../build/checkout/src/app/MathNet.Yttrium/Library/bin/Debug/</Directory>
   <Directory>$(ProjectDir)/../build/checkout/src/test/MathNet.Yttrium.Test/bin/Debug/</Directory>
  </AssemblyReferenceDirectories>
  <Target Name="$(ProjectDir)/src/app/MathNet.Yttrium/Builder.Service/bin/Debug/MathNet.Yttrium.Builder.Service.dll" Analyze="True">
   <Modules>
    <Module Name="mathnet.yttrium.builder.service.dll" Analyze="True">
     <Namespaces>
      <Namespace Name="" Analyze="True">
       <Types>
        <Type Name="&lt;Module&gt;" Analyze="True" />
       </Types>
      </Namespace>
      <Namespace Name="MathNet.Symbolics" Analyze="True">
       <Types>
        <Type Name="BuilderFactory" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="MathNet.Symbolics.IFactory&lt;MathNet.Symbolics.IBuilder&gt;.GetInstance():MathNet.Symbolics.IBuilder" Analyze="True" />
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="MathNet.Symbolics.Builder" Analyze="True">
       <Types>
        <Type Name="Builder" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="_library" Analyze="True" />
          <Member Name="EncapsulateAsList(MathNet.Symbolics.Signal[]):MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="EncapsulateAsList(System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Signal&gt;):MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="EncapsulateAsScalar(MathNet.Symbolics.Signal[]):MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="EncapsulateAsScalar(System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Signal&gt;):MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="EncapsulateAsSet(MathNet.Symbolics.Signal[]):MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="EncapsulateAsSet(System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Signal&gt;):MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="EncapsulateAsVector(MathNet.Symbolics.Signal[]):MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="EncapsulateAsVector(System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Signal&gt;):MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="Function(MathNet.Symbolics.IEntity,MathNet.Symbolics.Signal):MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="Function(MathNet.Symbolics.IEntity,MathNet.Symbolics.Signal,MathNet.Symbolics.Signal):MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="Function(MathNet.Symbolics.IEntity,MathNet.Symbolics.Signal[]):MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="Function(MathNet.Symbolics.IEntity,System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Signal&gt;):MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="Function(MathNet.Symbolics.MathIdentifier,MathNet.Symbolics.Signal):MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="Function(MathNet.Symbolics.MathIdentifier,MathNet.Symbolics.Signal,MathNet.Symbolics.Signal):MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="Function(MathNet.Symbolics.MathIdentifier,MathNet.Symbolics.Signal[]):MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="Function(MathNet.Symbolics.MathIdentifier,System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Signal&gt;):MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="Function(System.String,MathNet.Symbolics.InfixNotation,MathNet.Symbolics.Signal):MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="Function(System.String,MathNet.Symbolics.InfixNotation,MathNet.Symbolics.Signal,MathNet.Symbolics.Signal):MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="Function(System.String,MathNet.Symbolics.InfixNotation,MathNet.Symbolics.Signal[]):MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="Function(System.String,MathNet.Symbolics.InfixNotation,System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Signal&gt;):MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="Function(System.String,MathNet.Symbolics.Signal):MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="Function(System.String,MathNet.Symbolics.Signal,MathNet.Symbolics.Signal):MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="Function(System.String,MathNet.Symbolics.Signal[]):MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="Function(System.String,System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Signal&gt;):MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="Functions(MathNet.Symbolics.IEntity,MathNet.Symbolics.Signal):MathNet.Symbolics.Backend.Containers.ReadOnlySignalSet" Analyze="True" />
          <Member Name="Functions(MathNet.Symbolics.IEntity,MathNet.Symbolics.Signal,MathNet.Symbolics.Signal):MathNet.Symbolics.Backend.Containers.ReadOnlySignalSet" Analyze="True" />
          <Member Name="Functions(MathNet.Symbolics.IEntity,MathNet.Symbolics.Signal[]):MathNet.Symbolics.Backend.Containers.ReadOnlySignalSet" Analyze="True" />
          <Member Name="Functions(MathNet.Symbolics.IEntity,System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Signal&gt;):MathNet.Symbolics.Backend.Containers.ReadOnlySignalSet" Analyze="True" />
          <Member Name="Functions(MathNet.Symbolics.MathIdentifier,MathNet.Symbolics.Signal):MathNet.Symbolics.Backend.Containers.ReadOnlySignalSet" Analyze="True" />
          <Member Name="Functions(MathNet.Symbolics.MathIdentifier,MathNet.Symbolics.Signal,MathNet.Symbolics.Signal):MathNet.Symbolics.Backend.Containers.ReadOnlySignalSet" Analyze="True" />
          <Member Name="Functions(MathNet.Symbolics.MathIdentifier,MathNet.Symbolics.Signal[]):MathNet.Symbolics.Backend.Containers.ReadOnlySignalSet" Analyze="True" />
          <Member Name="Functions(MathNet.Symbolics.MathIdentifier,System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Signal&gt;):MathNet.Symbolics.Backend.Containers.ReadOnlySignalSet" Analyze="True" />
          <Member Name="Functions(System.String,MathNet.Symbolics.InfixNotation,MathNet.Symbolics.Signal):MathNet.Symbolics.Backend.Containers.ReadOnlySignalSet" Analyze="True" />
          <Member Name="Functions(System.String,MathNet.Symbolics.InfixNotation,MathNet.Symbolics.Signal,MathNet.Symbolics.Signal):MathNet.Symbolics.Backend.Containers.ReadOnlySignalSet" Analyze="True" />
          <Member Name="Functions(System.String,MathNet.Symbolics.InfixNotation,MathNet.Symbolics.Signal[]):MathNet.Symbolics.Backend.Containers.ReadOnlySignalSet" Analyze="True" />
          <Member Name="Functions(System.String,MathNet.Symbolics.InfixNotation,System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Signal&gt;):MathNet.Symbolics.Backend.Containers.ReadOnlySignalSet" Analyze="True" />
          <Member Name="Functions(System.String,MathNet.Symbolics.Signal):MathNet.Symbolics.Backend.Containers.ReadOnlySignalSet" Analyze="True" />
          <Member Name="Functions(System.String,MathNet.Symbolics.Signal,MathNet.Symbolics.Signal):MathNet.Symbolics.Backend.Containers.ReadOnlySignalSet" Analyze="True" />
          <Member Name="Functions(System.String,MathNet.Symbolics.Signal[]):MathNet.Symbolics.Backend.Containers.ReadOnlySignalSet" Analyze="True" />
          <Member Name="Functions(System.String,System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Signal&gt;):MathNet.Symbolics.Backend.Containers.ReadOnlySignalSet" Analyze="True" />
          <Member Name="MapSignals(MathNet.Symbolics.Signal,MathNet.Symbolics.Signal):MathNet.Symbolics.Port" Analyze="True" />
          <Member Name="MapSignalsSynchronized(MathNet.Symbolics.Signal,MathNet.Symbolics.Signal,MathNet.Symbolics.Signal):MathNet.Symbolics.Port" Analyze="True" />
          <Member Name="Synchronize(MathNet.Symbolics.Signal,MathNet.Symbolics.Signal):MathNet.Symbolics.Signal" Analyze="True" />
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="MathNet.Symbolics.Properties" Analyze="True">
       <Types>
        <Type Name="Resources" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="Culture" Analyze="True">
           <Accessors>
            <Accessor Name="get_Culture():System.Globalization.CultureInfo" Analyze="True" />
            <Accessor Name="set_Culture(System.Globalization.CultureInfo):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ex_NotImplementedYet" Analyze="True">
           <Accessors>
            <Accessor Name="get_ex_NotImplementedYet():System.String" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="resourceCulture" Analyze="True" />
          <Member Name="resourceMan" Analyze="True" />
          <Member Name="ResourceManager" Analyze="True">
           <Accessors>
            <Accessor Name="get_ResourceManager():System.Resources.ResourceManager" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
     </Namespaces>
     <Resources>
      <Resource Name="MathNet.Symbolics.Properties.Resources.resources" Analyze="True" />
     </Resources>
    </Module>
   </Modules>
  </Target>
  <Target Name="$(ProjectDir)/src/app/MathNet.Yttrium/Contracts/bin/Debug/MathNet.Yttrium.Contracts.dll" Analyze="True">
   <Modules>
    <Module Name="mathnet.yttrium.contracts.dll" Analyze="True">
     <Namespaces>
      <Namespace Name="" Analyze="True">
       <Types>
        <Type Name="&lt;Module&gt;" Analyze="True" />
       </Types>
      </Namespace>
      <Namespace Name="MathNet.Symbolics" Analyze="True">
       <Types>
        <Type Name="Bus" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name=".ctor(MathNet.Symbolics.IValueStructure)" Analyze="True" />
          <Member Name="Equals(MathNet.Symbolics.Bus):System.Boolean" Analyze="True" />
         </Members>
        </Type>
        <Type Name="CategoryMembershipLevel" Analyze="True">
         <Members>
          <Member Name="Member" Analyze="True" />
          <Member Name="NotMember" Analyze="True" />
          <Member Name="Unknown" Analyze="True" />
          <Member Name="value__" Analyze="True" />
         </Members>
        </Type>
        <Type Name="IArchitecture" Analyze="True">
         <Members>
          <Member Name="ArchitectureId" Analyze="True">
           <Accessors>
            <Accessor Name="get_ArchitectureId():MathNet.Symbolics.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="EntityId" Analyze="True">
           <Accessors>
            <Accessor Name="get_EntityId():MathNet.Symbolics.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ExecuteMathematicalOperator():MathNet.Symbolics.Backend.Containers.ISignalSet" Analyze="True" />
          <Member Name="IsInstance" Analyze="True">
           <Accessors>
            <Accessor Name="get_IsInstance():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="IsMathematicalOperator" Analyze="True">
           <Accessors>
            <Accessor Name="get_IsMathematicalOperator():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Port" Analyze="True">
           <Accessors>
            <Accessor Name="get_Port():MathNet.Symbolics.Port" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="RebindToPortIfSupported(MathNet.Symbolics.Port):System.Boolean" Analyze="True" />
          <Member Name="SupportsPort(MathNet.Symbolics.Port):System.Boolean" Analyze="True" />
          <Member Name="UnregisterArchitecture():System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="IArchitectureFactory" Analyze="True">
         <Members>
          <Member Name="EntityId" Analyze="True">
           <Accessors>
            <Accessor Name="get_EntityId():MathNet.Symbolics.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="InstantiateToPort(MathNet.Symbolics.Port):MathNet.Symbolics.IArchitecture" Analyze="True" />
          <Member Name="SupportsPort(MathNet.Symbolics.Port):System.Boolean" Analyze="True" />
         </Members>
        </Type>
        <Type Name="IBuilder" Analyze="True">
         <Members>
          <Member Name="EncapsulateAsList(MathNet.Symbolics.Signal[]):MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="EncapsulateAsList(System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Signal&gt;):MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="EncapsulateAsScalar(MathNet.Symbolics.Signal[]):MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="EncapsulateAsScalar(System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Signal&gt;):MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="EncapsulateAsSet(MathNet.Symbolics.Signal[]):MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="EncapsulateAsSet(System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Signal&gt;):MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="EncapsulateAsVector(MathNet.Symbolics.Signal[]):MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="EncapsulateAsVector(System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Signal&gt;):MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="Function(MathNet.Symbolics.IEntity,MathNet.Symbolics.Signal):MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="Function(MathNet.Symbolics.IEntity,MathNet.Symbolics.Signal,MathNet.Symbolics.Signal):MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="Function(MathNet.Symbolics.IEntity,MathNet.Symbolics.Signal[]):MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="Function(MathNet.Symbolics.IEntity,System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Signal&gt;):MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="Function(MathNet.Symbolics.MathIdentifier,MathNet.Symbolics.Signal):MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="Function(MathNet.Symbolics.MathIdentifier,MathNet.Symbolics.Signal,MathNet.Symbolics.Signal):MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="Function(MathNet.Symbolics.MathIdentifier,MathNet.Symbolics.Signal[]):MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="Function(MathNet.Symbolics.MathIdentifier,System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Signal&gt;):MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="Function(System.String,MathNet.Symbolics.InfixNotation,MathNet.Symbolics.Signal):MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="Function(System.String,MathNet.Symbolics.InfixNotation,MathNet.Symbolics.Signal,MathNet.Symbolics.Signal):MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="Function(System.String,MathNet.Symbolics.InfixNotation,MathNet.Symbolics.Signal[]):MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="Function(System.String,MathNet.Symbolics.InfixNotation,System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Signal&gt;):MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="Function(System.String,MathNet.Symbolics.Signal):MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="Function(System.String,MathNet.Symbolics.Signal,MathNet.Symbolics.Signal):MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="Function(System.String,MathNet.Symbolics.Signal[]):MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="Function(System.String,System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Signal&gt;):MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="Functions(MathNet.Symbolics.IEntity,MathNet.Symbolics.Signal):MathNet.Symbolics.Backend.Containers.ReadOnlySignalSet" Analyze="True" />
          <Member Name="Functions(MathNet.Symbolics.IEntity,MathNet.Symbolics.Signal,MathNet.Symbolics.Signal):MathNet.Symbolics.Backend.Containers.ReadOnlySignalSet" Analyze="True" />
          <Member Name="Functions(MathNet.Symbolics.IEntity,MathNet.Symbolics.Signal[]):MathNet.Symbolics.Backend.Containers.ReadOnlySignalSet" Analyze="True" />
          <Member Name="Functions(MathNet.Symbolics.IEntity,System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Signal&gt;):MathNet.Symbolics.Backend.Containers.ReadOnlySignalSet" Analyze="True" />
          <Member Name="Functions(MathNet.Symbolics.MathIdentifier,MathNet.Symbolics.Signal):MathNet.Symbolics.Backend.Containers.ReadOnlySignalSet" Analyze="True" />
          <Member Name="Functions(MathNet.Symbolics.MathIdentifier,MathNet.Symbolics.Signal,MathNet.Symbolics.Signal):MathNet.Symbolics.Backend.Containers.ReadOnlySignalSet" Analyze="True" />
          <Member Name="Functions(MathNet.Symbolics.MathIdentifier,MathNet.Symbolics.Signal[]):MathNet.Symbolics.Backend.Containers.ReadOnlySignalSet" Analyze="True" />
          <Member Name="Functions(MathNet.Symbolics.MathIdentifier,System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Signal&gt;):MathNet.Symbolics.Backend.Containers.ReadOnlySignalSet" Analyze="True" />
          <Member Name="Functions(System.String,MathNet.Symbolics.InfixNotation,MathNet.Symbolics.Signal):MathNet.Symbolics.Backend.Containers.ReadOnlySignalSet" Analyze="True" />
          <Member Name="Functions(System.String,MathNet.Symbolics.InfixNotation,MathNet.Symbolics.Signal,MathNet.Symbolics.Signal):MathNet.Symbolics.Backend.Containers.ReadOnlySignalSet" Analyze="True" />
          <Member Name="Functions(System.String,MathNet.Symbolics.InfixNotation,MathNet.Symbolics.Signal[]):MathNet.Symbolics.Backend.Containers.ReadOnlySignalSet" Analyze="True" />
          <Member Name="Functions(System.String,MathNet.Symbolics.InfixNotation,System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Signal&gt;):MathNet.Symbolics.Backend.Containers.ReadOnlySignalSet" Analyze="True" />
          <Member Name="Functions(System.String,MathNet.Symbolics.Signal):MathNet.Symbolics.Backend.Containers.ReadOnlySignalSet" Analyze="True" />
          <Member Name="Functions(System.String,MathNet.Symbolics.Signal,MathNet.Symbolics.Signal):MathNet.Symbolics.Backend.Containers.ReadOnlySignalSet" Analyze="True" />
          <Member Name="Functions(System.String,MathNet.Symbolics.Signal[]):MathNet.Symbolics.Backend.Containers.ReadOnlySignalSet" Analyze="True" />
          <Member Name="Functions(System.String,System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Signal&gt;):MathNet.Symbolics.Backend.Containers.ReadOnlySignalSet" Analyze="True" />
          <Member Name="MapSignals(MathNet.Symbolics.Signal,MathNet.Symbolics.Signal):MathNet.Symbolics.Port" Analyze="True" />
          <Member Name="MapSignalsSynchronized(MathNet.Symbolics.Signal,MathNet.Symbolics.Signal,MathNet.Symbolics.Signal):MathNet.Symbolics.Port" Analyze="True" />
          <Member Name="Synchronize(MathNet.Symbolics.Signal,MathNet.Symbolics.Signal):MathNet.Symbolics.Signal" Analyze="True" />
         </Members>
        </Type>
        <Type Name="IBus_BuilderAdapter" Analyze="True">
         <Members>
          <Member Name="AcceptSystemBuilderAfter(MathNet.Symbolics.ISystemBuilder,System.Collections.Generic.Dictionary`2&lt;System.Guid,System.Guid&gt;,System.Collections.Generic.Dictionary`2&lt;System.Guid,System.Guid&gt;):System.Void" Analyze="True" />
          <Member Name="AcceptSystemBuilderBefore(MathNet.Symbolics.ISystemBuilder):System.Guid" Analyze="True" />
         </Members>
        </Type>
        <Type Name="ICategory" Analyze="True">
         <Members>
          <Member Name="EqualsById(MathNet.Symbolics.ICategory):System.Boolean" Analyze="True" />
          <Member Name="EqualsById(MathNet.Symbolics.MathIdentifier):System.Boolean" Analyze="True" />
          <Member Name="IsMember(MathNet.Symbolics.Port):MathNet.Symbolics.CategoryMembershipLevel" Analyze="True" />
          <Member Name="IsMember(MathNet.Symbolics.Signal,System.Boolean):MathNet.Symbolics.CategoryMembershipLevel" Analyze="True" />
         </Members>
        </Type>
        <Type Name="ICustomData" Analyze="True">
         <Members>
          <Member Name="CollectBuses():System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Bus&gt;" Analyze="True" />
          <Member Name="CollectSignals():System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Signal&gt;" Analyze="True" />
          <Member Name="ReferencesCoreObjects" Analyze="True">
           <Accessors>
            <Accessor Name="get_ReferencesCoreObjects():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Serialize(System.Xml.XmlWriter,System.Collections.Generic.IDictionary`2&lt;System.Guid,System.Guid&gt;,System.Collections.Generic.IDictionary`2&lt;System.Guid,System.Guid&gt;):System.Void" Analyze="True" />
          <Member Name="TypeId" Analyze="True">
           <Accessors>
            <Accessor Name="get_TypeId():MathNet.Symbolics.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="ICustomDataPack`1" Analyze="True">
         <Members>
          <Member Name="SerializedXmlFragment" Analyze="True">
           <Accessors>
            <Accessor Name="get_SerializedXmlFragment():System.String" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Unpack(System.Collections.Generic.IDictionary`2&lt;System.Guid,MathNet.Symbolics.Signal&gt;,System.Collections.Generic.IDictionary`2&lt;System.Guid,MathNet.Symbolics.Bus&gt;):T" Analyze="True" />
         </Members>
        </Type>
        <Type Name="IEntity" Analyze="True">
         <Members>
          <Member Name="Buses" Analyze="True">
           <Accessors>
            <Accessor Name="get_Buses():System.String[]" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="CompileGenericEntity(System.Int32,System.Int32):MathNet.Symbolics.IEntity" Analyze="True" />
          <Member Name="EntityId" Analyze="True">
           <Accessors>
            <Accessor Name="get_EntityId():MathNet.Symbolics.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="EqualsById(MathNet.Symbolics.IEntity):System.Boolean" Analyze="True" />
          <Member Name="EqualsById(MathNet.Symbolics.MathIdentifier):System.Boolean" Analyze="True" />
          <Member Name="InputSignals" Analyze="True">
           <Accessors>
            <Accessor Name="get_InputSignals():System.String[]" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="InstantiatePort(MathNet.Symbolics.Signal[]):MathNet.Symbolics.Port" Analyze="True" />
          <Member Name="InstantiatePort(System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Signal&gt;):MathNet.Symbolics.Port" Analyze="True" />
          <Member Name="InstantiatePort(System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Signal&gt;,System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Signal&gt;):MathNet.Symbolics.Port" Analyze="True" />
          <Member Name="InstantiatePort(System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Signal&gt;,System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Signal&gt;,System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Bus&gt;):MathNet.Symbolics.Port" Analyze="True" />
          <Member Name="InstantiateUnboundPort():MathNet.Symbolics.Port" Analyze="True" />
          <Member Name="IsGeneric" Analyze="True">
           <Accessors>
            <Accessor Name="get_IsGeneric():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Notation" Analyze="True">
           <Accessors>
            <Accessor Name="get_Notation():MathNet.Symbolics.InfixNotation" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="OutputSignals" Analyze="True">
           <Accessors>
            <Accessor Name="get_OutputSignals():System.String[]" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="PrecedenceGroup" Analyze="True">
           <Accessors>
            <Accessor Name="get_PrecedenceGroup():System.Int32" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Symbol" Analyze="True">
           <Accessors>
            <Accessor Name="get_Symbol():System.String" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="IFactory`1" Analyze="True">
         <Members>
          <Member Name="GetInstance():T" Analyze="True" />
         </Members>
        </Type>
        <Type Name="IFactory`2" Analyze="True">
         <Members>
          <Member Name="GetInstance(T1):T" Analyze="True" />
         </Members>
        </Type>
        <Type Name="IFactory`3" Analyze="True">
         <Members>
          <Member Name="GetInstance(T1,T2):T" Analyze="True" />
         </Members>
        </Type>
        <Type Name="IFactory`4" Analyze="True">
         <Members>
          <Member Name="GetInstance(T1,T2,T3):T" Analyze="True" />
         </Members>
        </Type>
        <Type Name="IFactory`5" Analyze="True">
         <Members>
          <Member Name="GetInstance(T1,T2,T3,T4):T" Analyze="True" />
         </Members>
        </Type>
        <Type Name="IFactory`6" Analyze="True">
         <Members>
          <Member Name="GetInstance(T1,T2,T3,T4,T5):T" Analyze="True" />
         </Members>
        </Type>
        <Type Name="IFactory`7" Analyze="True">
         <Members>
          <Member Name="GetInstance(T1,T2,T3,T4,T5,T6):T" Analyze="True" />
         </Members>
        </Type>
        <Type Name="IFactory`8" Analyze="True">
         <Members>
          <Member Name="GetInstance(T1,T2,T3,T4,T5,T6,T7):T" Analyze="True" />
         </Members>
        </Type>
        <Type Name="IFactory`9" Analyze="True">
         <Members>
          <Member Name="GetInstance(T1,T2,T3,T4,T5,T6,T7,T8):T" Analyze="True" />
         </Members>
        </Type>
        <Type Name="IIdentifierDictionary`1" Analyze="True">
         <Members>
          <Member Name="Add(MathNet.Symbolics.MathIdentifier,T):System.Void" Analyze="True" />
          <Member Name="ContainsKey(MathNet.Symbolics.MathIdentifier):System.Boolean" Analyze="True" />
          <Member Name="FindDomainOfLabel(System.String):System.String" Analyze="True" />
          <Member Name="FindValue(System.Predicate`1&lt;T&gt;):T" Analyze="True" />
          <Member Name="GetValue(MathNet.Symbolics.MathIdentifier):T" Analyze="True" />
          <Member Name="Remove(MathNet.Symbolics.MathIdentifier):System.Void" Analyze="True" />
          <Member Name="SelectAll():System.Collections.Generic.IEnumerable`1&lt;T&gt;" Analyze="True" />
          <Member Name="TryFindDomainOfLabel(System.String,System.String&amp;):System.Boolean" Analyze="True" />
          <Member Name="TryFindValue(System.Predicate`1&lt;T&gt;,T&amp;):System.Boolean" Analyze="True" />
          <Member Name="TryGetValue(MathNet.Symbolics.MathIdentifier,T&amp;):System.Boolean" Analyze="True" />
          <Member Name="TryGetValue(MathNet.Symbolics.MathIdentifier,TSub&amp;):System.Boolean" Analyze="True" />
         </Members>
        </Type>
        <Type Name="IKeyedCollection`2" Analyze="True">
         <Members>
          <Member Name="Comparer" Analyze="True">
           <Accessors>
            <Accessor Name="get_Comparer():System.Collections.Generic.IEqualityComparer`1&lt;TKey&gt;" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Contains(TKey):System.Boolean" Analyze="True" />
          <Member Name="Item[System.Int32]" Analyze="True">
           <Accessors>
            <Accessor Name="get_Item(System.Int32):TItem" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Item[TKey]" Analyze="True">
           <Accessors>
            <Accessor Name="get_Item(TKey):TItem" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Remove(TKey):System.Boolean" Analyze="True" />
          <Member Name="TryGetValue(TKey,TItem&amp;):System.Boolean" Analyze="True" />
         </Members>
        </Type>
        <Type Name="IMathFunction" Analyze="True" />
        <Type Name="IMathSystem" Analyze="True">
         <Members>
          <Member Name="AcceptSystemBuilder(MathNet.Symbolics.ISystemBuilder):System.Void" Analyze="True" />
          <Member Name="AddBus(MathNet.Symbolics.Bus):System.Void" Analyze="True" />
          <Member Name="AddBusRange(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Bus&gt;):System.Void" Analyze="True" />
          <Member Name="AddNamedBus(System.String,MathNet.Symbolics.Bus):System.Void" Analyze="True" />
          <Member Name="AddNamedSignal(System.String,MathNet.Symbolics.IValueStructure):MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="AddNamedSignal(System.String,MathNet.Symbolics.Signal):MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="AddPort(MathNet.Symbolics.Port):System.Void" Analyze="True" />
          <Member Name="AddPortTree(MathNet.Symbolics.Port,System.Boolean,System.Boolean):System.Void" Analyze="True" />
          <Member Name="AddSignal(MathNet.Symbolics.Signal):System.Void" Analyze="True" />
          <Member Name="AddSignalRange(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Signal&gt;):System.Void" Analyze="True" />
          <Member Name="AddSignalTree(MathNet.Symbolics.Signal,System.Boolean,System.Boolean):System.Void" Analyze="True" />
          <Member Name="AddSignalTree(MathNet.Symbolics.Signal,System.Collections.Generic.ICollection`1&lt;MathNet.Symbolics.Signal&gt;,System.Boolean,System.Boolean):System.Void" Analyze="True" />
          <Member Name="AddSignalTreeRange(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Signal&gt;,System.Boolean,System.Boolean):System.Void" Analyze="True" />
          <Member Name="AddSignalTreeRange(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Signal&gt;,System.Collections.Generic.ICollection`1&lt;MathNet.Symbolics.Signal&gt;,System.Boolean,System.Boolean):System.Void" Analyze="True" />
          <Member Name="BusCount" Analyze="True">
           <Accessors>
            <Accessor Name="get_BusCount():System.Int32" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ContainsBus(MathNet.Symbolics.Bus):System.Boolean" Analyze="True" />
          <Member Name="ContainsNamedBus(System.String):System.Boolean" Analyze="True" />
          <Member Name="ContainsNamedSignal(System.String):System.Boolean" Analyze="True" />
          <Member Name="ContainsPort(MathNet.Symbolics.Port):System.Boolean" Analyze="True" />
          <Member Name="ContainsSignal(MathNet.Symbolics.Signal):System.Boolean" Analyze="True" />
          <Member Name="CreateNamedBus(System.String):MathNet.Symbolics.Bus" Analyze="True" />
          <Member Name="CreateNamedSignal(System.String):MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="OutputValueChanged" Kind="Event" Analyze="True">
           <Accessors>
            <Accessor Name="add_OutputValueChanged(System.EventHandler`1&lt;MathNet.Symbolics.Events.IndexedSignalEventArgs&gt;):System.Void" Analyze="True" />
            <Accessor Name="remove_OutputValueChanged(System.EventHandler`1&lt;MathNet.Symbolics.Events.IndexedSignalEventArgs&gt;):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Evaluate(MathNet.Symbolics.IValueStructure[]):MathNet.Symbolics.IValueStructure[]" Analyze="True" />
          <Member Name="Evaluate(System.Double[]):System.Double[]" Analyze="True" />
          <Member Name="GetAllBuses():MathNet.Symbolics.Backend.Containers.ReadOnlyBusSet" Analyze="True" />
          <Member Name="GetAllInputs():MathNet.Symbolics.Backend.Containers.ReadOnlySignalSet" Analyze="True" />
          <Member Name="GetAllLeafSignals():MathNet.Symbolics.Backend.Containers.ReadOnlySignalSet" Analyze="True" />
          <Member Name="GetAllOutputs():MathNet.Symbolics.Backend.Containers.ReadOnlySignalSet" Analyze="True" />
          <Member Name="GetAllPorts():MathNet.Symbolics.Backend.Containers.ReadOnlyPortSet" Analyze="True" />
          <Member Name="GetAllSignals():MathNet.Symbolics.Backend.Containers.ReadOnlySignalSet" Analyze="True" />
          <Member Name="GetBus(System.Int32):MathNet.Symbolics.Bus" Analyze="True" />
          <Member Name="GetInput(System.Int32):MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="GetOutput(System.Int32):MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="GetPort(System.Int32):MathNet.Symbolics.Port" Analyze="True" />
          <Member Name="GetSignal(System.Int32):MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="InputCount" Analyze="True">
           <Accessors>
            <Accessor Name="get_InputCount():System.Int32" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="InstanceId" Analyze="True">
           <Accessors>
            <Accessor Name="get_InstanceId():System.Guid" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="LookupNamedBus(System.String):MathNet.Symbolics.Bus" Analyze="True" />
          <Member Name="LookupNamedSignal(System.String):MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="OutputCount" Analyze="True">
           <Accessors>
            <Accessor Name="get_OutputCount():System.Int32" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="PortCount" Analyze="True">
           <Accessors>
            <Accessor Name="get_PortCount():System.Int32" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="PromoteAsInput(MathNet.Symbolics.Signal):System.Int32" Analyze="True" />
          <Member Name="PromoteAsOutput(MathNet.Symbolics.Signal):System.Int32" Analyze="True" />
          <Member Name="PublishToLibrary(MathNet.Symbolics.MathIdentifier,MathNet.Symbolics.MathIdentifier):System.Void" Analyze="True" />
          <Member Name="PublishToLibrary(System.String,System.String):MathNet.Symbolics.IEntity" Analyze="True" />
          <Member Name="PublishToLibraryAnonymous():MathNet.Symbolics.IEntity" Analyze="True" />
          <Member Name="PushInputValue(System.Int32,MathNet.Symbolics.IValueStructure):System.Void" Analyze="True" />
          <Member Name="PushInputValue(System.Int32,MathNet.Symbolics.IValueStructure,System.TimeSpan):System.Void" Analyze="True" />
          <Member Name="PushInputValueRange(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.IValueStructure&gt;):System.Void" Analyze="True" />
          <Member Name="PushInputValueRange(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.IValueStructure&gt;,System.TimeSpan):System.Void" Analyze="True" />
          <Member Name="PushInputValueRange(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Signal&gt;):System.Void" Analyze="True" />
          <Member Name="PushInputValueRange(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Signal&gt;,System.TimeSpan):System.Void" Analyze="True" />
          <Member Name="RemoveBus(MathNet.Symbolics.Bus):System.Void" Analyze="True" />
          <Member Name="RemoveNamedBus(System.String):System.Void" Analyze="True" />
          <Member Name="RemoveNamedSignal(System.String):System.Void" Analyze="True" />
          <Member Name="RemovePort(MathNet.Symbolics.Port,System.Boolean):System.Void" Analyze="True" />
          <Member Name="RemoveSignal(MathNet.Symbolics.Signal,System.Boolean):System.Void" Analyze="True" />
          <Member Name="RemoveUnusedObjects():System.Boolean" Analyze="True" />
          <Member Name="SignalCount" Analyze="True">
           <Accessors>
            <Accessor Name="get_SignalCount():System.Int32" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="TryLookupNamedBus(System.String,MathNet.Symbolics.Bus&amp;):System.Boolean" Analyze="True" />
          <Member Name="TryLookupNamedSignal(System.String,MathNet.Symbolics.Signal&amp;):System.Boolean" Analyze="True" />
          <Member Name="UnpromoteAsInput(MathNet.Symbolics.Signal):System.Void" Analyze="True" />
          <Member Name="UnpromoteAsOutput(MathNet.Symbolics.Signal):System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="InfixNotation" Analyze="True">
         <Members>
          <Member Name="LeftAssociativeInnerOperator" Analyze="True" />
          <Member Name="None" Analyze="True" />
          <Member Name="PostOperator" Analyze="True" />
          <Member Name="PreOperator" Analyze="True" />
          <Member Name="RightAssociativeInnerOperator" Analyze="True" />
          <Member Name="value__" Analyze="True" />
         </Members>
        </Type>
        <Type Name="IPort_BuilderAdapter" Analyze="True">
         <Members>
          <Member Name="AcceptSystemBuilder(MathNet.Symbolics.ISystemBuilder,System.Collections.Generic.Dictionary`2&lt;System.Guid,System.Guid&gt;,System.Collections.Generic.Dictionary`2&lt;System.Guid,System.Guid&gt;):System.Guid" Analyze="True" />
         </Members>
        </Type>
        <Type Name="IPort_CycleAnalysis" Analyze="True">
         <Members>
          <Member Name="DeTag(System.Int32):System.Void" Analyze="True" />
          <Member Name="TagWasTagged(System.Int32):System.Boolean" Analyze="True" />
         </Members>
        </Type>
        <Type Name="IProperty" Analyze="True">
         <Members>
          <Member Name="EqualsById(MathNet.Symbolics.IProperty):System.Boolean" Analyze="True" />
          <Member Name="EqualsById(MathNet.Symbolics.MathIdentifier):System.Boolean" Analyze="True" />
          <Member Name="StillValidAfterDrive(MathNet.Symbolics.Signal):System.Boolean" Analyze="True" />
          <Member Name="StillValidAfterEvent(MathNet.Symbolics.Signal):System.Boolean" Analyze="True" />
          <Member Name="StillValidAfterUndrive(MathNet.Symbolics.Signal):System.Boolean" Analyze="True" />
         </Members>
        </Type>
        <Type Name="ISignal_BuilderAdapter" Analyze="True">
         <Members>
          <Member Name="AcceptSystemBuilderAfter(MathNet.Symbolics.ISystemBuilder,System.Collections.Generic.Dictionary`2&lt;System.Guid,System.Guid&gt;,System.Collections.Generic.Dictionary`2&lt;System.Guid,System.Guid&gt;):System.Void" Analyze="True" />
          <Member Name="AcceptSystemBuilderBefore(MathNet.Symbolics.ISystemBuilder):System.Guid" Analyze="True" />
          <Member Name="BuilderAppendConstraint(MathNet.Symbolics.IProperty):System.Void" Analyze="True" />
          <Member Name="BuilderAppendProperty(MathNet.Symbolics.IProperty):System.Void" Analyze="True" />
          <Member Name="BuilderSetValue(MathNet.Symbolics.IValueStructure):System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="ISignal_CycleAnalysis" Analyze="True">
         <Members>
          <Member Name="AddCycles(MathNet.Symbolics.Signal,System.Int32):System.Int32" Analyze="True" />
          <Member Name="RemoveCycles(MathNet.Symbolics.Signal,System.Int32):System.Int32" Analyze="True" />
         </Members>
        </Type>
        <Type Name="ISignal_Drive" Analyze="True">
         <Members>
          <Member Name="DriveSignal(MathNet.Symbolics.Port,System.Int32):System.Void" Analyze="True" />
          <Member Name="UndriveSignal(System.Int32):System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="ISystemBuilder" Analyze="True">
         <Members>
          <Member Name="AppendSignalConstraint(System.Guid,MathNet.Symbolics.ICustomDataPack`1&lt;MathNet.Symbolics.IProperty&gt;):System.Void" Analyze="True" />
          <Member Name="AppendSignalProperty(System.Guid,MathNet.Symbolics.ICustomDataPack`1&lt;MathNet.Symbolics.IProperty&gt;):System.Void" Analyze="True" />
          <Member Name="AppendSignalValue(System.Guid,MathNet.Symbolics.ICustomDataPack`1&lt;MathNet.Symbolics.IValueStructure&gt;):System.Void" Analyze="True" />
          <Member Name="AppendSystemInputSignal(System.Guid):System.Void" Analyze="True" />
          <Member Name="AppendSystemNamedBus(System.Guid,System.String):System.Void" Analyze="True" />
          <Member Name="AppendSystemNamedSignal(System.Guid,System.String):System.Void" Analyze="True" />
          <Member Name="AppendSystemOutputSignal(System.Guid):System.Void" Analyze="True" />
          <Member Name="BeginBuildSystem(System.Int32,System.Int32,System.Int32):System.Void" Analyze="True" />
          <Member Name="BuildBus(System.String):System.Guid" Analyze="True" />
          <Member Name="BuildPort(MathNet.Symbolics.MathIdentifier,MathNet.Symbolics.Backend.Containers.InstanceIdSet,MathNet.Symbolics.Backend.Containers.InstanceIdSet,MathNet.Symbolics.Backend.Containers.InstanceIdSet):System.Guid" Analyze="True" />
          <Member Name="BuildSignal(System.String,System.Boolean,System.Boolean):System.Guid" Analyze="True" />
          <Member Name="EndBuildSystem():System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="IValueStructure" Analyze="True">
         <Members>
          <Member Name="EqualsById(MathNet.Symbolics.IValueStructure):System.Boolean" Analyze="True" />
          <Member Name="EqualsById(MathNet.Symbolics.MathIdentifier):System.Boolean" Analyze="True" />
         </Members>
        </Type>
        <Type Name="MathIdentifier" Analyze="True">
         <Members>
          <Member Name=".ctor(System.String,System.String)" Analyze="True" />
          <Member Name="CompareTo(MathNet.Symbolics.MathIdentifier):System.Int32" Analyze="True" />
          <Member Name="DerivePostfix(System.String):MathNet.Symbolics.MathIdentifier" Analyze="True" />
          <Member Name="DerivePrefix(System.String):MathNet.Symbolics.MathIdentifier" Analyze="True" />
          <Member Name="domain" Analyze="True" />
          <Member Name="Domain" Analyze="True">
           <Accessors>
            <Accessor Name="get_Domain():System.String" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Equals(MathNet.Symbolics.MathIdentifier):System.Boolean" Analyze="True" />
          <Member Name="Equals(System.Object):System.Boolean" Analyze="True" />
          <Member Name="Equals(System.String,System.String):System.Boolean" Analyze="True" />
          <Member Name="GetHashCode():System.Int32" Analyze="True" />
          <Member Name="label" Analyze="True" />
          <Member Name="Label" Analyze="True">
           <Accessors>
            <Accessor Name="get_Label():System.String" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="op_Equality(MathNet.Symbolics.MathIdentifier,MathNet.Symbolics.MathIdentifier):System.Boolean" Analyze="True" />
          <Member Name="op_Inequality(MathNet.Symbolics.MathIdentifier,MathNet.Symbolics.MathIdentifier):System.Boolean" Analyze="True" />
          <Member Name="Parse(System.String):MathNet.Symbolics.MathIdentifier" Analyze="True" />
          <Member Name="ToString():System.String" Analyze="True" />
         </Members>
        </Type>
        <Type Name="Node" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="_iid" Analyze="True" />
          <Member Name="_label" Analyze="True" />
          <Member Name="Equals(MathNet.Symbolics.Node):System.Boolean" Analyze="True" />
          <Member Name="InstanceId" Analyze="True">
           <Accessors>
            <Accessor Name="get_InstanceId():System.Guid" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Label" Analyze="True">
           <Accessors>
            <Accessor Name="get_Label():System.String" Analyze="True" />
            <Accessor Name="set_Label(System.String):System.Void" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="Port" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="AddBusBinding(System.Int32,MathNet.Symbolics.Bus):System.Void" Analyze="True" />
          <Member Name="AddInputSignalBinding(System.Int32,MathNet.Symbolics.Signal):System.Void" Analyze="True" />
          <Member Name="AddOutputSignalBinding(System.Int32,MathNet.Symbolics.Signal):System.Void" Analyze="True" />
          <Member Name="BindBuses(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Bus&gt;):System.Void" Analyze="True" />
          <Member Name="BindInputSignals(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Signal&gt;):System.Void" Analyze="True" />
          <Member Name="BusCount" Analyze="True">
           <Accessors>
            <Accessor Name="get_BusCount():System.Int32" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Buses" Analyze="True">
           <Accessors>
            <Accessor Name="get_Buses():MathNet.Symbolics.Backend.Containers.ReadOnlyBusSet" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="CloneWithNewInputs(System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Signal&gt;):MathNet.Symbolics.Port" Analyze="True" />
          <Member Name="CurrentArchitecture" Analyze="True">
           <Accessors>
            <Accessor Name="get_CurrentArchitecture():MathNet.Symbolics.IArchitecture" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="DependsOn(MathNet.Symbolics.MathIdentifier):System.Boolean" Analyze="True" />
          <Member Name="DependsOn(MathNet.Symbolics.Port):System.Boolean" Analyze="True" />
          <Member Name="DependsOn(MathNet.Symbolics.Signal):System.Boolean" Analyze="True" />
          <Member Name="EnsureArchitectureLink():System.Boolean" Analyze="True" />
          <Member Name="Entity" Analyze="True">
           <Accessors>
            <Accessor Name="get_Entity():MathNet.Symbolics.IEntity" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Equals(MathNet.Symbolics.Port):System.Boolean" Analyze="True" />
          <Member Name="HasArchitectureLink" Analyze="True">
           <Accessors>
            <Accessor Name="get_HasArchitectureLink():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="IndexOfOutputSignal(MathNet.Symbolics.Signal):System.Int32" Analyze="True" />
          <Member Name="InputSignalCount" Analyze="True">
           <Accessors>
            <Accessor Name="get_InputSignalCount():System.Int32" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="InputSignals" Analyze="True">
           <Accessors>
            <Accessor Name="get_InputSignals():MathNet.Symbolics.Backend.Containers.ReadOnlySignalSet" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="IsCompletelyConnected" Analyze="True">
           <Accessors>
            <Accessor Name="get_IsCompletelyConnected():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Item[System.Int32]" Analyze="True">
           <Accessors>
            <Accessor Name="get_Item(System.Int32):MathNet.Symbolics.Signal" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="OutputSignalCount" Analyze="True">
           <Accessors>
            <Accessor Name="get_OutputSignalCount():System.Int32" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="OutputSignals" Analyze="True">
           <Accessors>
            <Accessor Name="get_OutputSignals():MathNet.Symbolics.Backend.Containers.ReadOnlySignalSet" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="RemoveAllBindings():System.Void" Analyze="True" />
          <Member Name="RemoveBusBinding(System.Int32):System.Void" Analyze="True" />
          <Member Name="RemoveInputSignalBinding(System.Int32):System.Void" Analyze="True" />
          <Member Name="RemoveLinkedArchitecture():System.Void" Analyze="True" />
          <Member Name="RemoveOutputSignalBinding(System.Int32):System.Void" Analyze="True" />
          <Member Name="ReplaceBusBinding(System.Int32,MathNet.Symbolics.Bus):System.Void" Analyze="True" />
          <Member Name="ReplaceInputSignalBinding(System.Int32,MathNet.Symbolics.Signal):System.Void" Analyze="True" />
          <Member Name="ReplaceOutputSignalBinding(System.Int32,MathNet.Symbolics.Signal):System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="Signal" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name=".ctor(MathNet.Symbolics.IValueStructure)" Analyze="True" />
          <Member Name="AddConstraint(MathNet.Symbolics.IProperty):System.Void" Analyze="True" />
          <Member Name="AddSignalCore(MathNet.Symbolics.Signal):MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="AskForProperty(MathNet.Symbolics.MathIdentifier):System.Boolean" Analyze="True" />
          <Member Name="AskForProperty(System.String,System.String):System.Boolean" Analyze="True" />
          <Member Name="BehavesAsBeingDriven(System.Boolean):System.Boolean" Analyze="True" />
          <Member Name="BehavesAsSourceSignal" Analyze="True">
           <Accessors>
            <Accessor Name="get_BehavesAsSourceSignal():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Cycles" Analyze="True">
           <Accessors>
            <Accessor Name="get_Cycles():System.Int32" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="DependsOn(MathNet.Symbolics.MathIdentifier):System.Boolean" Analyze="True" />
          <Member Name="DependsOn(MathNet.Symbolics.Port):System.Boolean" Analyze="True" />
          <Member Name="DependsOn(MathNet.Symbolics.Signal):System.Boolean" Analyze="True" />
          <Member Name="DivideSignalCore(MathNet.Symbolics.Signal):MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="DrivenByPort" Analyze="True">
           <Accessors>
            <Accessor Name="get_DrivenByPort():MathNet.Symbolics.Port" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Equals(MathNet.Symbolics.Signal):System.Boolean" Analyze="True" />
          <Member Name="HasProperty(MathNet.Symbolics.MathIdentifier):System.Boolean" Analyze="True" />
          <Member Name="Hold" Analyze="True">
           <Accessors>
            <Accessor Name="get_Hold():System.Boolean" Analyze="True" />
            <Accessor Name="set_Hold(System.Boolean):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="IsCyclic" Analyze="True">
           <Accessors>
            <Accessor Name="get_IsCyclic():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="IsDriven" Analyze="True">
           <Accessors>
            <Accessor Name="get_IsDriven():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="IsDrivenByPortEntity(MathNet.Symbolics.MathIdentifier):System.Boolean" Analyze="True" />
          <Member Name="IsDrivenByPortEntity(System.String,System.String):System.Boolean" Analyze="True" />
          <Member Name="IsSourceSignal" Analyze="True">
           <Accessors>
            <Accessor Name="get_IsSourceSignal():System.Boolean" Analyze="True" />
            <Accessor Name="set_IsSourceSignal(System.Boolean):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="MultiplySignalCore(MathNet.Symbolics.Signal):MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="NegateSignalCore():MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="op_Addition(MathNet.Symbolics.Signal,MathNet.Symbolics.Signal):MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="op_Division(MathNet.Symbolics.Signal,MathNet.Symbolics.Signal):MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="op_Multiply(MathNet.Symbolics.Signal,MathNet.Symbolics.Signal):MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="op_Subtraction(MathNet.Symbolics.Signal,MathNet.Symbolics.Signal):MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="op_UnaryNegation(MathNet.Symbolics.Signal):MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="op_UnaryPlus(MathNet.Symbolics.Signal):MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="RemoveAllConstraints():System.Void" Analyze="True" />
          <Member Name="SubtractSignalCore(MathNet.Symbolics.Signal):MathNet.Symbolics.Signal" Analyze="True" />
         </Members>
        </Type>
        <Type Name="ValueNode" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name=".ctor(MathNet.Symbolics.IValueStructure)" Analyze="True" />
          <Member Name="_hasEvent" Analyze="True" />
          <Member Name="_presentStructure" Analyze="True" />
          <Member Name="ValueChanged" Kind="Event" Analyze="True">
           <Accessors>
            <Accessor Name="add_ValueChanged(System.EventHandler`1&lt;MathNet.Symbolics.Events.ValueNodeEventArgs&gt;):System.Void" Analyze="True" />
            <Accessor Name="remove_ValueChanged(System.EventHandler`1&lt;MathNet.Symbolics.Events.ValueNodeEventArgs&gt;):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="HasEvent" Analyze="True">
           <Accessors>
            <Accessor Name="get_HasEvent():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="OnValueChanged():System.Void" Analyze="True" />
          <Member Name="PostNewValue(MathNet.Symbolics.IValueStructure):System.Void" Analyze="True" />
          <Member Name="PostNewValue(MathNet.Symbolics.IValueStructure,System.TimeSpan):System.Void" Analyze="True" />
          <Member Name="SetHasEvent(System.Boolean):System.Void" Analyze="True" />
          <Member Name="SetPresentValue(MathNet.Symbolics.IValueStructure):System.Void" Analyze="True" />
          <Member Name="Value" Analyze="True">
           <Accessors>
            <Accessor Name="get_Value():MathNet.Symbolics.IValueStructure" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ValueChanged" Analyze="True" />
          <Member Name="ValueTypeId" Analyze="True">
           <Accessors>
            <Accessor Name="get_ValueTypeId():MathNet.Symbolics.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="MathNet.Symbolics.Backend.Containers" Analyze="True">
       <Types>
        <Type Name="BusSet" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name=".ctor(MathNet.Symbolics.Bus[])" Analyze="True" />
          <Member Name=".ctor(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Bus&gt;)" Analyze="True" />
          <Member Name=".ctor(System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Bus&gt;)" Analyze="True" />
          <Member Name=".ctor(System.Int32)" Analyze="True" />
          <Member Name="AsReadOnly" Analyze="True">
           <Accessors>
            <Accessor Name="get_AsReadOnly():MathNet.Symbolics.Backend.Containers.ReadOnlyBusSet" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ConvertAllFromInstanceIds(MathNet.Symbolics.Backend.Containers.InstanceIdSet,System.Converter`2&lt;System.Guid,MathNet.Symbolics.Bus&gt;):MathNet.Symbolics.Backend.Containers.BusSet" Analyze="True" />
          <Member Name="ConvertAllToInstanceIds():MathNet.Symbolics.Backend.Containers.InstanceIdSet" Analyze="True" />
          <Member Name="ConvertAllToInstanceIds(System.Converter`2&lt;MathNet.Symbolics.Bus,System.Guid&gt;):MathNet.Symbolics.Backend.Containers.InstanceIdSet" Analyze="True" />
          <Member Name="ConvertFrom(MathNet.Numerics.Set`1&lt;MathNet.Symbolics.Bus&gt;):MathNet.Symbolics.Backend.Containers.BusSet" Analyze="True" />
          <Member Name="CreateNewReadOnlyWrapper(System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Bus&gt;):MathNet.Numerics.ReadOnlySet`1&lt;MathNet.Symbolics.Bus&gt;" Analyze="True" />
          <Member Name="CreateNewSet():MathNet.Numerics.Set`1&lt;MathNet.Symbolics.Bus&gt;" Analyze="True" />
         </Members>
        </Type>
        <Type Name="IBusSet" Analyze="True">
         <Members>
          <Member Name="ConvertAllToInstanceIds():MathNet.Symbolics.Backend.Containers.InstanceIdSet" Analyze="True" />
          <Member Name="ConvertAllToInstanceIds(System.Converter`2&lt;MathNet.Symbolics.Bus,System.Guid&gt;):MathNet.Symbolics.Backend.Containers.InstanceIdSet" Analyze="True" />
         </Members>
        </Type>
        <Type Name="IInstanceIdSet" Analyze="True" />
        <Type Name="InstanceIdSet" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name=".ctor(System.Collections.Generic.IEnumerable`1&lt;System.Guid&gt;)" Analyze="True" />
          <Member Name=".ctor(System.Collections.Generic.IList`1&lt;System.Guid&gt;)" Analyze="True" />
          <Member Name=".ctor(System.Guid[])" Analyze="True" />
          <Member Name=".ctor(System.Int32)" Analyze="True" />
          <Member Name="AsReadOnly" Analyze="True">
           <Accessors>
            <Accessor Name="get_AsReadOnly():MathNet.Symbolics.Backend.Containers.ReadOnlyInstanceIdSet" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ConvertFrom(MathNet.Numerics.Set`1&lt;System.Guid&gt;):MathNet.Symbolics.Backend.Containers.InstanceIdSet" Analyze="True" />
          <Member Name="CreateNewReadOnlyWrapper(System.Collections.Generic.IList`1&lt;System.Guid&gt;):MathNet.Numerics.ReadOnlySet`1&lt;System.Guid&gt;" Analyze="True" />
          <Member Name="CreateNewSet():MathNet.Numerics.Set`1&lt;System.Guid&gt;" Analyze="True" />
         </Members>
        </Type>
        <Type Name="IPortSet" Analyze="True">
         <Members>
          <Member Name="ConvertAllToInstanceIds():MathNet.Symbolics.Backend.Containers.InstanceIdSet" Analyze="True" />
          <Member Name="ConvertAllToInstanceIds(System.Converter`2&lt;MathNet.Symbolics.Port,System.Guid&gt;):MathNet.Symbolics.Backend.Containers.InstanceIdSet" Analyze="True" />
         </Members>
        </Type>
        <Type Name="ISignalSet" Analyze="True">
         <Members>
          <Member Name="ConvertAllToInstanceIds():MathNet.Symbolics.Backend.Containers.InstanceIdSet" Analyze="True" />
          <Member Name="ConvertAllToInstanceIds(System.Converter`2&lt;MathNet.Symbolics.Signal,System.Guid&gt;):MathNet.Symbolics.Backend.Containers.InstanceIdSet" Analyze="True" />
          <Member Name="PostNewValues(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.IValueStructure&gt;):System.Void" Analyze="True" />
          <Member Name="PostNewValues(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.IValueStructure&gt;,System.Collections.Generic.IEnumerable`1&lt;System.TimeSpan&gt;):System.Void" Analyze="True" />
          <Member Name="PostNewValues(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.IValueStructure&gt;,System.TimeSpan):System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="PortSet" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name=".ctor(MathNet.Symbolics.Port[])" Analyze="True" />
          <Member Name=".ctor(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Port&gt;)" Analyze="True" />
          <Member Name=".ctor(System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Port&gt;)" Analyze="True" />
          <Member Name=".ctor(System.Int32)" Analyze="True" />
          <Member Name="AsReadOnly" Analyze="True">
           <Accessors>
            <Accessor Name="get_AsReadOnly():MathNet.Symbolics.Backend.Containers.ReadOnlyPortSet" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ConvertAllFromInstanceIds(MathNet.Symbolics.Backend.Containers.InstanceIdSet,System.Converter`2&lt;System.Guid,MathNet.Symbolics.Port&gt;):MathNet.Symbolics.Backend.Containers.PortSet" Analyze="True" />
          <Member Name="ConvertAllToInstanceIds():MathNet.Symbolics.Backend.Containers.InstanceIdSet" Analyze="True" />
          <Member Name="ConvertAllToInstanceIds(System.Converter`2&lt;MathNet.Symbolics.Port,System.Guid&gt;):MathNet.Symbolics.Backend.Containers.InstanceIdSet" Analyze="True" />
          <Member Name="ConvertFrom(MathNet.Numerics.Set`1&lt;MathNet.Symbolics.Port&gt;):MathNet.Symbolics.Backend.Containers.PortSet" Analyze="True" />
          <Member Name="CreateNewReadOnlyWrapper(System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Port&gt;):MathNet.Numerics.ReadOnlySet`1&lt;MathNet.Symbolics.Port&gt;" Analyze="True" />
          <Member Name="CreateNewSet():MathNet.Numerics.Set`1&lt;MathNet.Symbolics.Port&gt;" Analyze="True" />
         </Members>
        </Type>
        <Type Name="ReadOnlyBusSet" Analyze="True">
         <Members>
          <Member Name=".ctor(System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Bus&gt;)" Analyze="True" />
          <Member Name="ConvertAllToInstanceIds():MathNet.Symbolics.Backend.Containers.InstanceIdSet" Analyze="True" />
          <Member Name="ConvertAllToInstanceIds(System.Converter`2&lt;MathNet.Symbolics.Bus,System.Guid&gt;):MathNet.Symbolics.Backend.Containers.InstanceIdSet" Analyze="True" />
          <Member Name="CreateNewSet():MathNet.Numerics.Set`1&lt;MathNet.Symbolics.Bus&gt;" Analyze="True" />
         </Members>
        </Type>
        <Type Name="ReadOnlyInstanceIdSet" Analyze="True">
         <Members>
          <Member Name=".ctor(System.Collections.Generic.IList`1&lt;System.Guid&gt;)" Analyze="True" />
          <Member Name="CreateNewSet():MathNet.Numerics.Set`1&lt;System.Guid&gt;" Analyze="True" />
         </Members>
        </Type>
        <Type Name="ReadOnlyPortSet" Analyze="True">
         <Members>
          <Member Name=".ctor(System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Port&gt;)" Analyze="True" />
          <Member Name="ConvertAllToInstanceIds():MathNet.Symbolics.Backend.Containers.InstanceIdSet" Analyze="True" />
          <Member Name="ConvertAllToInstanceIds(System.Converter`2&lt;MathNet.Symbolics.Port,System.Guid&gt;):MathNet.Symbolics.Backend.Containers.InstanceIdSet" Analyze="True" />
          <Member Name="CreateNewSet():MathNet.Numerics.Set`1&lt;MathNet.Symbolics.Port&gt;" Analyze="True" />
         </Members>
        </Type>
        <Type Name="ReadOnlySignalSet" Analyze="True">
         <Members>
          <Member Name=".ctor(System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Signal&gt;)" Analyze="True" />
          <Member Name="ConvertAllToInstanceIds():MathNet.Symbolics.Backend.Containers.InstanceIdSet" Analyze="True" />
          <Member Name="ConvertAllToInstanceIds(System.Converter`2&lt;MathNet.Symbolics.Signal,System.Guid&gt;):MathNet.Symbolics.Backend.Containers.InstanceIdSet" Analyze="True" />
          <Member Name="CreateNewSet():MathNet.Numerics.Set`1&lt;MathNet.Symbolics.Signal&gt;" Analyze="True" />
          <Member Name="PostNewValues(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.IValueStructure&gt;):System.Void" Analyze="True" />
          <Member Name="PostNewValues(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.IValueStructure&gt;,System.Collections.Generic.IEnumerable`1&lt;System.TimeSpan&gt;):System.Void" Analyze="True" />
          <Member Name="PostNewValues(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.IValueStructure&gt;,System.TimeSpan):System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="SignalSet" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name=".ctor(MathNet.Symbolics.Signal[])" Analyze="True" />
          <Member Name=".ctor(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Signal&gt;)" Analyze="True" />
          <Member Name=".ctor(System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Signal&gt;)" Analyze="True" />
          <Member Name=".ctor(System.Int32)" Analyze="True" />
          <Member Name="AsReadOnly" Analyze="True">
           <Accessors>
            <Accessor Name="get_AsReadOnly():MathNet.Symbolics.Backend.Containers.ReadOnlySignalSet" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ConvertAllFromInstanceIds(MathNet.Symbolics.Backend.Containers.InstanceIdSet,System.Converter`2&lt;System.Guid,MathNet.Symbolics.Signal&gt;):MathNet.Symbolics.Backend.Containers.SignalSet" Analyze="True" />
          <Member Name="ConvertAllToInstanceIds():MathNet.Symbolics.Backend.Containers.InstanceIdSet" Analyze="True" />
          <Member Name="ConvertAllToInstanceIds(System.Converter`2&lt;MathNet.Symbolics.Signal,System.Guid&gt;):MathNet.Symbolics.Backend.Containers.InstanceIdSet" Analyze="True" />
          <Member Name="ConvertFrom(MathNet.Numerics.Set`1&lt;MathNet.Symbolics.Signal&gt;):MathNet.Symbolics.Backend.Containers.SignalSet" Analyze="True" />
          <Member Name="CreateNewReadOnlyWrapper(System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Signal&gt;):MathNet.Numerics.ReadOnlySet`1&lt;MathNet.Symbolics.Signal&gt;" Analyze="True" />
          <Member Name="CreateNewSet():MathNet.Numerics.Set`1&lt;MathNet.Symbolics.Signal&gt;" Analyze="True" />
          <Member Name="PostNewValues(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.IValueStructure&gt;):System.Void" Analyze="True" />
          <Member Name="PostNewValues(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.IValueStructure&gt;,System.Collections.Generic.IEnumerable`1&lt;System.TimeSpan&gt;):System.Void" Analyze="True" />
          <Member Name="PostNewValues(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.IValueStructure&gt;,System.TimeSpan):System.Void" Analyze="True" />
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="MathNet.Symbolics.Events" Analyze="True">
       <Types>
        <Type Name="BusEventArgs" Analyze="True">
         <Members>
          <Member Name=".ctor(MathNet.Symbolics.Bus)" Analyze="True" />
          <Member Name="bus" Analyze="True" />
          <Member Name="Bus" Analyze="True">
           <Accessors>
            <Accessor Name="get_Bus():MathNet.Symbolics.Bus" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="BusIndexChangedEventArgs" Analyze="True">
         <Members>
          <Member Name=".ctor(MathNet.Symbolics.Bus,System.Int32,System.Int32)" Analyze="True" />
          <Member Name="bus" Analyze="True" />
          <Member Name="Bus" Analyze="True">
           <Accessors>
            <Accessor Name="get_Bus():MathNet.Symbolics.Bus" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="indexAfter" Analyze="True" />
          <Member Name="IndexAfter" Analyze="True">
           <Accessors>
            <Accessor Name="get_IndexAfter():System.Int32" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="indexBefore" Analyze="True" />
          <Member Name="IndexBefore" Analyze="True">
           <Accessors>
            <Accessor Name="get_IndexBefore():System.Int32" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="BusIndexEventArgs" Analyze="True">
         <Members>
          <Member Name=".ctor(MathNet.Symbolics.Bus,System.Int32)" Analyze="True" />
          <Member Name="bus" Analyze="True" />
          <Member Name="Bus" Analyze="True">
           <Accessors>
            <Accessor Name="get_Bus():MathNet.Symbolics.Bus" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="index" Analyze="True" />
          <Member Name="Index" Analyze="True">
           <Accessors>
            <Accessor Name="get_Index():System.Int32" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="BusPortIndexEventArgs" Analyze="True">
         <Members>
          <Member Name=".ctor(MathNet.Symbolics.Bus,MathNet.Symbolics.Port,System.Int32)" Analyze="True" />
          <Member Name="bus" Analyze="True" />
          <Member Name="Bus" Analyze="True">
           <Accessors>
            <Accessor Name="get_Bus():MathNet.Symbolics.Bus" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="index" Analyze="True" />
          <Member Name="Index" Analyze="True">
           <Accessors>
            <Accessor Name="get_Index():System.Int32" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="port" Analyze="True" />
          <Member Name="Port" Analyze="True">
           <Accessors>
            <Accessor Name="get_Port():MathNet.Symbolics.Port" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="IndexedSignalEventArgs" Analyze="True">
         <Members>
          <Member Name=".ctor(MathNet.Symbolics.Signal,System.Int32)" Analyze="True" />
          <Member Name="index" Analyze="True" />
          <Member Name="Index" Analyze="True">
           <Accessors>
            <Accessor Name="get_Index():System.Int32" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="signal" Analyze="True" />
          <Member Name="Signal" Analyze="True">
           <Accessors>
            <Accessor Name="get_Signal():MathNet.Symbolics.Signal" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="PortEventArgs" Analyze="True">
         <Members>
          <Member Name=".ctor(MathNet.Symbolics.Port)" Analyze="True" />
          <Member Name="port" Analyze="True" />
          <Member Name="Port" Analyze="True">
           <Accessors>
            <Accessor Name="get_Port():MathNet.Symbolics.Port" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="PortIndexChangedEventArgs" Analyze="True">
         <Members>
          <Member Name=".ctor(MathNet.Symbolics.Port,System.Int32,System.Int32)" Analyze="True" />
          <Member Name="indexAfter" Analyze="True" />
          <Member Name="IndexAfter" Analyze="True">
           <Accessors>
            <Accessor Name="get_IndexAfter():System.Int32" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="indexBefore" Analyze="True" />
          <Member Name="IndexBefore" Analyze="True">
           <Accessors>
            <Accessor Name="get_IndexBefore():System.Int32" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="port" Analyze="True" />
          <Member Name="Port" Analyze="True">
           <Accessors>
            <Accessor Name="get_Port():MathNet.Symbolics.Port" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="PortIndexEventArgs" Analyze="True">
         <Members>
          <Member Name=".ctor(MathNet.Symbolics.Port,System.Int32)" Analyze="True" />
          <Member Name="index" Analyze="True" />
          <Member Name="Index" Analyze="True">
           <Accessors>
            <Accessor Name="get_Index():System.Int32" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="port" Analyze="True" />
          <Member Name="Port" Analyze="True">
           <Accessors>
            <Accessor Name="get_Port():MathNet.Symbolics.Port" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="SignalEventArgs" Analyze="True">
         <Members>
          <Member Name=".ctor(MathNet.Symbolics.Signal)" Analyze="True" />
          <Member Name="signal" Analyze="True" />
          <Member Name="Signal" Analyze="True">
           <Accessors>
            <Accessor Name="get_Signal():MathNet.Symbolics.Signal" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="SignalIndexChangedEventArgs" Analyze="True">
         <Members>
          <Member Name=".ctor(MathNet.Symbolics.Signal,System.Int32,System.Int32)" Analyze="True" />
          <Member Name="indexAfter" Analyze="True" />
          <Member Name="IndexAfter" Analyze="True">
           <Accessors>
            <Accessor Name="get_IndexAfter():System.Int32" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="indexBefore" Analyze="True" />
          <Member Name="IndexBefore" Analyze="True">
           <Accessors>
            <Accessor Name="get_IndexBefore():System.Int32" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="signal" Analyze="True" />
          <Member Name="Signal" Analyze="True">
           <Accessors>
            <Accessor Name="get_Signal():MathNet.Symbolics.Signal" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="SignalIndexEventArgs" Analyze="True">
         <Members>
          <Member Name=".ctor(MathNet.Symbolics.Signal,System.Int32)" Analyze="True" />
          <Member Name="index" Analyze="True" />
          <Member Name="Index" Analyze="True">
           <Accessors>
            <Accessor Name="get_Index():System.Int32" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="signal" Analyze="True" />
          <Member Name="Signal" Analyze="True">
           <Accessors>
            <Accessor Name="get_Signal():MathNet.Symbolics.Signal" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="SignalPortEventArgs" Analyze="True">
         <Members>
          <Member Name=".ctor(MathNet.Symbolics.Signal,MathNet.Symbolics.Port)" Analyze="True" />
          <Member Name="port" Analyze="True" />
          <Member Name="Port" Analyze="True">
           <Accessors>
            <Accessor Name="get_Port():MathNet.Symbolics.Port" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="signal" Analyze="True" />
          <Member Name="Signal" Analyze="True">
           <Accessors>
            <Accessor Name="get_Signal():MathNet.Symbolics.Signal" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="SignalPortIndexEventArgs" Analyze="True">
         <Members>
          <Member Name=".ctor(MathNet.Symbolics.Signal,MathNet.Symbolics.Port,System.Int32)" Analyze="True" />
          <Member Name="index" Analyze="True" />
          <Member Name="Index" Analyze="True">
           <Accessors>
            <Accessor Name="get_Index():System.Int32" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="port" Analyze="True" />
          <Member Name="Port" Analyze="True">
           <Accessors>
            <Accessor Name="get_Port():MathNet.Symbolics.Port" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="signal" Analyze="True" />
          <Member Name="Signal" Analyze="True">
           <Accessors>
            <Accessor Name="get_Signal():MathNet.Symbolics.Signal" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="SimulationTimeEventArgs" Analyze="True">
         <Members>
          <Member Name=".ctor(System.TimeSpan)" Analyze="True" />
          <Member Name="_timeSpan" Analyze="True" />
          <Member Name="TimeSpan" Analyze="True">
           <Accessors>
            <Accessor Name="get_TimeSpan():System.TimeSpan" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="ValueNodeEventArgs" Analyze="True">
         <Members>
          <Member Name=".ctor(MathNet.Symbolics.ValueNode)" Analyze="True" />
          <Member Name="_node" Analyze="True" />
          <Member Name="ValueNode" Analyze="True">
           <Accessors>
            <Accessor Name="get_ValueNode():MathNet.Symbolics.ValueNode" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="MathNet.Symbolics.Exceptions" Analyze="True">
       <Types>
        <Type Name="ArchitectureNotAvailableException" Analyze="True">
         <Members>
          <Member Name=".ctor(MathNet.Symbolics.Port)" Analyze="True" />
          <Member Name=".ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" Analyze="True" />
          <Member Name="_port" Analyze="True" />
          <Member Name="GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext):System.Void" Analyze="True" />
          <Member Name="Port" Analyze="True">
           <Accessors>
            <Accessor Name="get_Port():MathNet.Symbolics.Port" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="CommandException" Analyze="True">
         <Members>
          <Member Name=".ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" Analyze="True" />
          <Member Name=".ctor(System.String)" Analyze="True" />
         </Members>
        </Type>
        <Type Name="CyclicSignalsNotSupportedException" Analyze="True">
         <Members>
          <Member Name=".ctor(MathNet.Symbolics.Signal,System.String)" Analyze="True" />
          <Member Name=".ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" Analyze="True" />
          <Member Name="_signal" Analyze="True" />
          <Member Name="GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext):System.Void" Analyze="True" />
          <Member Name="Signal" Analyze="True">
           <Accessors>
            <Accessor Name="get_Signal():MathNet.Symbolics.Signal" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="DeserializationException" Analyze="True">
         <Members>
          <Member Name=".ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" Analyze="True" />
          <Member Name=".ctor(System.String)" Analyze="True" />
         </Members>
        </Type>
        <Type Name="DomainNotAvailableException" Analyze="True">
         <Members>
          <Member Name=".ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" Analyze="True" />
          <Member Name=".ctor(System.String)" Analyze="True" />
          <Member Name="domain" Analyze="True" />
          <Member Name="Domain" Analyze="True">
           <Accessors>
            <Accessor Name="get_Domain():System.String" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext):System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="EntityNotAvailableException" Analyze="True">
         <Members>
          <Member Name=".ctor(MathNet.Symbolics.IEntity)" Analyze="True" />
          <Member Name=".ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" Analyze="True" />
          <Member Name="_entity" Analyze="True" />
          <Member Name="Entity" Analyze="True">
           <Accessors>
            <Accessor Name="get_Entity():MathNet.Symbolics.IEntity" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext):System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="EntitySignalCountUnexpectedException" Analyze="True">
         <Members>
          <Member Name=".ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" Analyze="True" />
          <Member Name=".ctor(System.String,System.String)" Analyze="True" />
         </Members>
        </Type>
        <Type Name="EntitySignalMismatchException" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name=".ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" Analyze="True" />
         </Members>
        </Type>
        <Type Name="GenericEntityPortNotInstantiableException" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name=".ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" Analyze="True" />
         </Members>
        </Type>
        <Type Name="IncompatibleStructureException" Analyze="True">
         <Members>
          <Member Name=".ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" Analyze="True" />
          <Member Name=".ctor(System.String,System.String)" Analyze="True" />
          <Member Name="domain" Analyze="True" />
          <Member Name="Domain" Analyze="True">
           <Accessors>
            <Accessor Name="get_Domain():System.String" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext):System.Void" Analyze="True" />
          <Member Name="label" Analyze="True" />
          <Member Name="Label" Analyze="True">
           <Accessors>
            <Accessor Name="get_Label():System.String" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="LabelNotAvailableException" Analyze="True">
         <Members>
          <Member Name=".ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" Analyze="True" />
          <Member Name=".ctor(System.String,System.String)" Analyze="True" />
          <Member Name="domain" Analyze="True" />
          <Member Name="Domain" Analyze="True">
           <Accessors>
            <Accessor Name="get_Domain():System.String" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext):System.Void" Analyze="True" />
          <Member Name="label" Analyze="True" />
          <Member Name="Label" Analyze="True">
           <Accessors>
            <Accessor Name="get_Label():System.String" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="MathNetSymbolicsException" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name=".ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" Analyze="True" />
          <Member Name=".ctor(System.String)" Analyze="True" />
          <Member Name=".ctor(System.String,System.Exception)" Analyze="True" />
         </Members>
        </Type>
        <Type Name="MutualExclusiveStrategyAlreadyActiveException" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name=".ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" Analyze="True" />
         </Members>
        </Type>
        <Type Name="NotFoundException" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name=".ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" Analyze="True" />
          <Member Name="GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext):System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="StructureNotSupportedException" Analyze="True">
         <Members>
          <Member Name=".ctor(MathNet.Symbolics.IValueStructure)" Analyze="True" />
          <Member Name=".ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" Analyze="True" />
          <Member Name="GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext):System.Void" Analyze="True" />
          <Member Name="structure" Analyze="True" />
          <Member Name="Structure" Analyze="True">
           <Accessors>
            <Accessor Name="get_Structure():MathNet.Symbolics.IValueStructure" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="SymbolNotAvailableException" Analyze="True">
         <Members>
          <Member Name=".ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" Analyze="True" />
          <Member Name=".ctor(System.String)" Analyze="True" />
          <Member Name="GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext):System.Void" Analyze="True" />
          <Member Name="symbol" Analyze="True" />
          <Member Name="Symbol" Analyze="True">
           <Accessors>
            <Accessor Name="get_Symbol():System.String" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="TheoremMismatchException" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name=".ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" Analyze="True" />
          <Member Name="GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext):System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="YttriumException" Analyze="True">
         <Members>
          <Member Name=".ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" Analyze="True" />
          <Member Name=".ctor(System.String)" Analyze="True" />
          <Member Name=".ctor(System.String,System.Exception)" Analyze="True" />
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="MathNet.Symbolics.Properties" Analyze="True">
       <Types>
        <Type Name="Resources" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="Culture" Analyze="True">
           <Accessors>
            <Accessor Name="get_Culture():System.Globalization.CultureInfo" Analyze="True" />
            <Accessor Name="set_Culture(System.Globalization.CultureInfo):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ex_CyclicSignalsNotSupportes" Analyze="True">
           <Accessors>
            <Accessor Name="get_ex_CyclicSignalsNotSupportes():System.String" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ex_Deserialize_Failed_GenericEntity" Analyze="True">
           <Accessors>
            <Accessor Name="get_ex_Deserialize_Failed_GenericEntity():System.String" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ex_Deserialize_Failed_UnexpectedPosition" Analyze="True">
           <Accessors>
            <Accessor Name="get_ex_Deserialize_Failed_UnexpectedPosition():System.String" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ex_Deserialize_Failed_UnsupportedCategory" Analyze="True">
           <Accessors>
            <Accessor Name="get_ex_Deserialize_Failed_UnsupportedCategory():System.String" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ex_Deserialize_Failed_UnsupportedStructure" Analyze="True">
           <Accessors>
            <Accessor Name="get_ex_Deserialize_Failed_UnsupportedStructure():System.String" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ex_Entity_Unexpected_SignalCount" Analyze="True">
           <Accessors>
            <Accessor Name="get_ex_Entity_Unexpected_SignalCount():System.String" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ex_NotAvailable_Architecture" Analyze="True">
           <Accessors>
            <Accessor Name="get_ex_NotAvailable_Architecture():System.String" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ex_NotAvailable_Domain" Analyze="True">
           <Accessors>
            <Accessor Name="get_ex_NotAvailable_Domain():System.String" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ex_NotAvailable_Entity" Analyze="True">
           <Accessors>
            <Accessor Name="get_ex_NotAvailable_Entity():System.String" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ex_NotFound" Analyze="True">
           <Accessors>
            <Accessor Name="get_ex_NotFound():System.String" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ex_NotImplementedYet" Analyze="True">
           <Accessors>
            <Accessor Name="get_ex_NotImplementedYet():System.String" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ex_Parsing_Failed_TokenMismatch" Analyze="True">
           <Accessors>
            <Accessor Name="get_ex_Parsing_Failed_TokenMismatch():System.String" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ex_Parsing_Failed_TokenMismatchEx" Analyze="True">
           <Accessors>
            <Accessor Name="get_ex_Parsing_Failed_TokenMismatchEx():System.String" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ex_Theorem_Mismatch" Analyze="True">
           <Accessors>
            <Accessor Name="get_ex_Theorem_Mismatch():System.String" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ex_Traversing_Failed_ReserveMutex" Analyze="True">
           <Accessors>
            <Accessor Name="get_ex_Traversing_Failed_ReserveMutex():System.String" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="resourceCulture" Analyze="True" />
          <Member Name="resourceMan" Analyze="True" />
          <Member Name="ResourceManager" Analyze="True">
           <Accessors>
            <Accessor Name="get_ResourceManager():System.Resources.ResourceManager" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
     </Namespaces>
     <Resources>
      <Resource Name="MathNet.Symbolics.Properties.Resources.resources" Analyze="True" />
     </Resources>
    </Module>
   </Modules>
  </Target>
  <Target Name="$(ProjectDir)/src/app/MathNet.Yttrium/Conversion.Contracts/bin/Debug/MathNet.Yttrium.Conversion.Contracts.dll" Analyze="True">
   <Modules>
    <Module Name="mathnet.yttrium.conversion.contracts.dll" Analyze="True">
     <Namespaces>
      <Namespace Name="" Analyze="True">
       <Types>
        <Type Name="&lt;Module&gt;" Analyze="True" />
       </Types>
      </Namespace>
      <Namespace Name="MathNet.Symbolics.Conversion" Analyze="True">
       <Types>
        <Type Name="IConversionRouter" Analyze="True">
         <Members>
          <Member Name="AddSourceNeighbor(MathNet.Symbolics.Conversion.IConversionRouter,System.Boolean,System.Converter`2&lt;MathNet.Symbolics.ICustomData,MathNet.Symbolics.ICustomData&gt;):System.Void" Analyze="True" />
          <Member Name="AddTargetNeighbor(MathNet.Symbolics.Conversion.IConversionRouter):System.Void" Analyze="True" />
          <Member Name="BroadcastDistanceVector():System.Void" Analyze="True" />
          <Member Name="BroadcastDistanceVector(MathNet.Symbolics.Conversion.IConversionRouter):System.Void" Analyze="True" />
          <Member Name="Propose(MathNet.Symbolics.Conversion.IRouteDistance,MathNet.Symbolics.Conversion.IConversionRouter):System.Boolean" Analyze="True" />
          <Member Name="Propose(System.Collections.Generic.Dictionary`2&lt;MathNet.Symbolics.MathIdentifier,MathNet.Symbolics.Conversion.IRouteDistance&gt;,MathNet.Symbolics.Conversion.IConversionRouter):System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="IRouteDistance" Analyze="True">
         <Members>
          <Member Name="CanConvertFrom" Analyze="True">
           <Accessors>
            <Accessor Name="get_CanConvertFrom():MathNet.Symbolics.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Convert" Analyze="True">
           <Accessors>
            <Accessor Name="get_Convert():System.Converter`2&lt;MathNet.Symbolics.ICustomData,MathNet.Symbolics.ICustomData&gt;" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Cost" Analyze="True">
           <Accessors>
            <Accessor Name="get_Cost():System.Int32" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Lossless" Analyze="True">
           <Accessors>
            <Accessor Name="get_Lossless():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="NextHop" Analyze="True">
           <Accessors>
            <Accessor Name="get_NextHop():MathNet.Symbolics.Conversion.IConversionRouter" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="IValueConverter" Analyze="True">
         <Members>
          <Member Name="BuildConverterFrom(MathNet.Symbolics.MathIdentifier):System.Converter`2&lt;MathNet.Symbolics.ICustomData,MathNet.Symbolics.ICustomData&gt;" Analyze="True" />
          <Member Name="CanConvertFrom(MathNet.Symbolics.MathIdentifier,System.Boolean):System.Boolean" Analyze="True" />
          <Member Name="CanConvertLosslessFrom(MathNet.Symbolics.ICustomData):System.Boolean" Analyze="True" />
          <Member Name="CanConvertLossyFrom(MathNet.Symbolics.ICustomData):System.Boolean" Analyze="True" />
          <Member Name="ConvertFrom(MathNet.Symbolics.ICustomData):MathNet.Symbolics.ICustomData" Analyze="True" />
          <Member Name="TryConvertFrom(MathNet.Symbolics.ICustomData,MathNet.Symbolics.ICustomData&amp;):System.Boolean" Analyze="True" />
          <Member Name="TypeIdentifier" Analyze="True">
           <Accessors>
            <Accessor Name="get_TypeIdentifier():MathNet.Symbolics.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
     </Namespaces>
    </Module>
   </Modules>
  </Target>
  <Target Name="$(ProjectDir)/src/app/MathNet.Yttrium/Conversion.Service/bin/Debug/MathNet.Yttrium.Conversion.Service.dll" Analyze="True">
   <Modules>
    <Module Name="mathnet.yttrium.conversion.service.dll" Analyze="True">
     <Namespaces>
      <Namespace Name="" Analyze="True">
       <Types>
        <Type Name="&lt;Module&gt;" Analyze="True" />
       </Types>
      </Namespace>
      <Namespace Name="MathNet.Symbolics" Analyze="True">
       <Types>
        <Type Name="ConversionFactory" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="MathNet.Symbolics.IFactory&lt;MathNet.Symbolics.Conversion.IConversionRouter,MathNet.Symbolics.MathIdentifier&gt;.GetInstance(MathNet.Symbolics.MathIdentifier):MathNet.Symbolics.Conversion.IConversionRouter" Analyze="True" />
          <Member Name="MathNet.Symbolics.IFactory&lt;MathNet.Symbolics.Conversion.IConversionRouter,System.Type&gt;.GetInstance(System.Type):MathNet.Symbolics.Conversion.IConversionRouter" Analyze="True" />
          <Member Name="MathNet.Symbolics.IFactory&lt;MathNet.Symbolics.Conversion.IConversionRouter&gt;.GetInstance():MathNet.Symbolics.Conversion.IConversionRouter" Analyze="True" />
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="MathNet.Symbolics.Conversion" Analyze="True">
       <Types>
        <Type Name="ConversionRouter" Analyze="True">
         <Members>
          <Member Name=".ctor(MathNet.Symbolics.MathIdentifier)" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate4" Analyze="True" />
          <Member Name="&lt;BuildConverterFrom&gt;b__3(MathNet.Symbolics.ICustomData):MathNet.Symbolics.ICustomData" Analyze="True" />
          <Member Name="AddSourceNeighbor(MathNet.Symbolics.Conversion.IConversionRouter,System.Boolean,System.Converter`2&lt;MathNet.Symbolics.ICustomData,MathNet.Symbolics.ICustomData&gt;):System.Void" Analyze="True" />
          <Member Name="AddTargetNeighbor(MathNet.Symbolics.Conversion.IConversionRouter):System.Void" Analyze="True" />
          <Member Name="BroadcastDistanceVector():System.Void" Analyze="True" />
          <Member Name="BroadcastDistanceVector(MathNet.Symbolics.Conversion.IConversionRouter):System.Void" Analyze="True" />
          <Member Name="BuildConverterFrom(MathNet.Symbolics.MathIdentifier):System.Converter`2&lt;MathNet.Symbolics.ICustomData,MathNet.Symbolics.ICustomData&gt;" Analyze="True" />
          <Member Name="CanConvertFrom(MathNet.Symbolics.MathIdentifier,System.Boolean):System.Boolean" Analyze="True" />
          <Member Name="CanConvertLosslessFrom(MathNet.Symbolics.ICustomData):System.Boolean" Analyze="True" />
          <Member Name="CanConvertLossyFrom(MathNet.Symbolics.ICustomData):System.Boolean" Analyze="True" />
          <Member Name="ConvertFrom(MathNet.Symbolics.ICustomData):MathNet.Symbolics.ICustomData" Analyze="True" />
          <Member Name="losslessNeighbors" Analyze="True" />
          <Member Name="lossyNeighbors" Analyze="True" />
          <Member Name="Propose(MathNet.Symbolics.Conversion.IRouteDistance,MathNet.Symbolics.Conversion.IConversionRouter):System.Boolean" Analyze="True" />
          <Member Name="Propose(System.Collections.Generic.Dictionary`2&lt;MathNet.Symbolics.MathIdentifier,MathNet.Symbolics.Conversion.IRouteDistance&gt;,MathNet.Symbolics.Conversion.IConversionRouter):System.Void" Analyze="True" />
          <Member Name="structureId" Analyze="True" />
          <Member Name="targetNeighbors" Analyze="True" />
          <Member Name="ToString():System.String" Analyze="True" />
          <Member Name="TryConvertFrom(MathNet.Symbolics.ICustomData,MathNet.Symbolics.ICustomData&amp;):System.Boolean" Analyze="True" />
          <Member Name="TypeIdentifier" Analyze="True">
           <Accessors>
            <Accessor Name="get_TypeIdentifier():MathNet.Symbolics.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="vector" Analyze="True" />
         </Members>
        </Type>
        <Type Name="ConversionRouter+&lt;&gt;c__DisplayClass1" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="&lt;Propose&gt;b__0(MathNet.Symbolics.ICustomData):MathNet.Symbolics.ICustomData" Analyze="True" />
          <Member Name="distanceC" Analyze="True" />
          <Member Name="localC" Analyze="True" />
         </Members>
        </Type>
        <Type Name="ConversionRouter+ConversionDistance" Analyze="True">
         <Members>
          <Member Name=".ctor(MathNet.Symbolics.MathIdentifier,System.Int32,System.Boolean,MathNet.Symbolics.Conversion.IConversionRouter,System.Converter`2&lt;MathNet.Symbolics.ICustomData,MathNet.Symbolics.ICustomData&gt;)" Analyze="True" />
          <Member Name="_canConvertFrom" Analyze="True" />
          <Member Name="_convert" Analyze="True" />
          <Member Name="_cost" Analyze="True" />
          <Member Name="_lossless" Analyze="True" />
          <Member Name="_nextHop" Analyze="True" />
          <Member Name="CanConvertFrom" Analyze="True">
           <Accessors>
            <Accessor Name="get_CanConvertFrom():MathNet.Symbolics.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Convert" Analyze="True">
           <Accessors>
            <Accessor Name="get_Convert():System.Converter`2&lt;MathNet.Symbolics.ICustomData,MathNet.Symbolics.ICustomData&gt;" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Cost" Analyze="True">
           <Accessors>
            <Accessor Name="get_Cost():System.Int32" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Lossless" Analyze="True">
           <Accessors>
            <Accessor Name="get_Lossless():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="NextHop" Analyze="True">
           <Accessors>
            <Accessor Name="get_NextHop():MathNet.Symbolics.Conversion.IConversionRouter" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="ConversionRouter+ConversionRoute" Analyze="True">
         <Members>
          <Member Name=".ctor(MathNet.Symbolics.MathIdentifier,System.Converter`2&lt;MathNet.Symbolics.ICustomData,MathNet.Symbolics.ICustomData&gt;)" Analyze="True" />
          <Member Name="CanConvertFrom" Analyze="True" />
          <Member Name="Convert" Analyze="True" />
         </Members>
        </Type>
       </Types>
      </Namespace>
     </Namespaces>
    </Module>
   </Modules>
  </Target>
  <Target Name="$(ProjectDir)/src/app/MathNet.Yttrium/Conversion.Toolkit/bin/Debug/MathNet.Yttrium.Conversion.Toolkit.dll" Analyze="True">
   <Modules>
    <Module Name="mathnet.yttrium.conversion.toolkit.dll" Analyze="True">
     <Namespaces>
      <Namespace Name="" Analyze="True">
       <Types>
        <Type Name="&lt;Module&gt;" Analyze="True" />
       </Types>
      </Namespace>
      <Namespace Name="MathNet.Symbolics.Conversion" Analyze="True">
       <Types>
        <Type Name="ValueConverter`1" Analyze="True">
         <Members>
          <Member Name=".cctor()" Analyze="True" />
          <Member Name="_router" Analyze="True" />
          <Member Name="AddConverterFrom(MathNet.Symbolics.Conversion.IConversionRouter,System.Boolean,System.Converter`2&lt;MathNet.Symbolics.ICustomData,MathNet.Symbolics.ICustomData&gt;):System.Void" Analyze="True" />
          <Member Name="AddConverterFrom(System.Boolean,System.Converter`2&lt;TSource,TTarget&gt;):System.Void" Analyze="True" />
          <Member Name="AddConverterTo(MathNet.Symbolics.Conversion.IConversionRouter,System.Boolean,System.Converter`2&lt;MathNet.Symbolics.ICustomData,MathNet.Symbolics.ICustomData&gt;):System.Void" Analyze="True" />
          <Member Name="AddConverterTo(MathNet.Symbolics.Conversion.IConversionRouter,System.Boolean,System.Converter`2&lt;TTarget,TDestination&gt;):System.Void" Analyze="True" />
          <Member Name="ConvertFrom(MathNet.Symbolics.ICustomData):TTarget" Analyze="True" />
          <Member Name="Router" Analyze="True">
           <Accessors>
            <Accessor Name="get_Router():MathNet.Symbolics.Conversion.IConversionRouter" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="ValueConverter`1+&lt;&gt;c__DisplayClass1`1" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="&lt;AddConverterFrom&gt;b__0(MathNet.Symbolics.ICustomData):MathNet.Symbolics.ICustomData" Analyze="True" />
          <Member Name="directConvert" Analyze="True" />
         </Members>
        </Type>
        <Type Name="ValueConverter`1+&lt;&gt;c__DisplayClass4`1" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="&lt;AddConverterTo&gt;b__3(MathNet.Symbolics.ICustomData):MathNet.Symbolics.ICustomData" Analyze="True" />
          <Member Name="directConvert" Analyze="True" />
         </Members>
        </Type>
       </Types>
      </Namespace>
     </Namespaces>
    </Module>
   </Modules>
  </Target>
  <Target Name="$(ProjectDir)/src/app/MathNet.Yttrium/Interpreter.Contracts/bin/Debug/MathNet.Yttrium.Interpreter.Contracts.dll" Analyze="True">
   <Modules>
    <Module Name="mathnet.yttrium.interpreter.contracts.dll" Analyze="True">
     <Namespaces>
      <Namespace Name="" Analyze="True">
       <Types>
        <Type Name="&lt;Module&gt;" Analyze="True" />
       </Types>
      </Namespace>
      <Namespace Name="MathNet.Symbolics.Exceptions" Analyze="True">
       <Types>
        <Type Name="ParsingException" Analyze="True">
         <Members>
          <Member Name=".ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" Analyze="True" />
          <Member Name=".ctor(System.String)" Analyze="True" />
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="MathNet.Symbolics.Interpreter" Analyze="True">
       <Types>
        <Type Name="IParser" Analyze="True">
         <Members>
          <Member Name="Interpret(System.IO.FileInfo,MathNet.Symbolics.IMathSystem):System.Void" Analyze="True" />
          <Member Name="Interpret(System.IO.TextReader,MathNet.Symbolics.IMathSystem):System.Void" Analyze="True" />
          <Member Name="Interpret(System.String,MathNet.Symbolics.IMathSystem):System.Void" Analyze="True" />
         </Members>
        </Type>
       </Types>
      </Namespace>
     </Namespaces>
    </Module>
   </Modules>
  </Target>
  <Target Name="$(ProjectDir)/src/app/MathNet.Yttrium/Interpreter.Service/bin/Debug/MathNet.Yttrium.Interpreter.Service.dll" Analyze="True">
   <Modules>
    <Module Name="mathnet.yttrium.interpreter.service.dll" Analyze="True">
     <Namespaces>
      <Namespace Name="" Analyze="True">
       <Types>
        <Type Name="&lt;Module&gt;" Analyze="True" />
       </Types>
      </Namespace>
      <Namespace Name="MathNet.Symbolics" Analyze="True">
       <Types>
        <Type Name="InterpreterFactory" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="MathNet.Symbolics.IFactory&lt;MathNet.Symbolics.Interpreter.IParser&gt;.GetInstance():MathNet.Symbolics.Interpreter.IParser" Analyze="True" />
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="MathNet.Symbolics.Interpreter" Analyze="True">
       <Types>
        <Type Name="EntityStack" Analyze="True">
         <Members>
          <Member Name=".ctor(System.Int32,System.Int32)" Analyze="True" />
          <Member Name="count" Analyze="True" />
          <Member Name="Count" Analyze="True">
           <Accessors>
            <Accessor Name="get_Count():System.Int32" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Expand():System.Void" Analyze="True" />
          <Member Name="Init(System.Int32):System.Void" Analyze="True" />
          <Member Name="Item[System.Int32]" Analyze="True">
           <Accessors>
            <Accessor Name="get_Item(System.Int32):MathNet.Symbolics.IEntity" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="maxSize" Analyze="True" />
          <Member Name="Peek():MathNet.Symbolics.IEntity" Analyze="True" />
          <Member Name="Pop():MathNet.Symbolics.IEntity" Analyze="True" />
          <Member Name="PopPeek():MathNet.Symbolics.IEntity" Analyze="True" />
          <Member Name="Push(MathNet.Symbolics.IEntity):System.Void" Analyze="True" />
          <Member Name="Remove():System.Void" Analyze="True" />
          <Member Name="Reset():System.Void" Analyze="True" />
          <Member Name="Size" Analyze="True">
           <Accessors>
            <Accessor Name="get_Size():System.Int32" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="stack" Analyze="True" />
         </Members>
        </Type>
        <Type Name="Int32Stack" Analyze="True">
         <Members>
          <Member Name=".ctor(System.Int32,System.Int32)" Analyze="True" />
          <Member Name="count" Analyze="True" />
          <Member Name="Count" Analyze="True">
           <Accessors>
            <Accessor Name="get_Count():System.Int32" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Expand():System.Void" Analyze="True" />
          <Member Name="Init(System.Int32):System.Void" Analyze="True" />
          <Member Name="Item[System.Int32]" Analyze="True">
           <Accessors>
            <Accessor Name="get_Item(System.Int32):System.Int32" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="maxSize" Analyze="True" />
          <Member Name="Peek():System.Int32" Analyze="True" />
          <Member Name="Pop():System.Int32" Analyze="True" />
          <Member Name="PopPeek():System.Int32" Analyze="True" />
          <Member Name="Push(System.Int32):System.Void" Analyze="True" />
          <Member Name="Remove():System.Void" Analyze="True" />
          <Member Name="Reset():System.Void" Analyze="True" />
          <Member Name="Size" Analyze="True">
           <Accessors>
            <Accessor Name="get_Size():System.Int32" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="stack" Analyze="True" />
         </Members>
        </Type>
        <Type Name="LexerBuffer" Analyze="True">
         <Members>
          <Member Name=".ctor(System.Int32,System.Int32,System.IO.TextReader)" Analyze="True" />
          <Member Name="Append(System.Char):System.Void" Analyze="True" />
          <Member Name="buffer" Analyze="True" />
          <Member Name="count" Analyze="True" />
          <Member Name="Count" Analyze="True">
           <Accessors>
            <Accessor Name="get_Count():System.Int32" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ElementAt(System.Int32):System.Char" Analyze="True" />
          <Member Name="Expand():System.Void" Analyze="True" />
          <Member Name="FillBufferEof(System.Int32):System.Void" Analyze="True" />
          <Member Name="Init(System.Int32):System.Void" Analyze="True" />
          <Member Name="maxSize" Analyze="True" />
          <Member Name="offset" Analyze="True" />
          <Member Name="reader" Analyze="True" />
          <Member Name="RefillBuffer(System.Int32):System.Void" Analyze="True" />
          <Member Name="RemoveBlock(System.Int32):System.Void" Analyze="True" />
          <Member Name="RemoveFirst():System.Void" Analyze="True" />
          <Member Name="Reset():System.Void" Analyze="True" />
          <Member Name="Reset(System.IO.TextReader):System.Void" Analyze="True" />
          <Member Name="Size" Analyze="True">
           <Accessors>
            <Accessor Name="get_Size():System.Int32" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="sizeLessOne" Analyze="True" />
         </Members>
        </Type>
        <Type Name="LexerMarker" Analyze="True">
         <Members>
          <Member Name=".ctor(System.IO.TextReader)" Analyze="True" />
          <Member Name="buffer" Analyze="True" />
          <Member Name="CommitMark():System.Void" Analyze="True" />
          <Member Name="Consume():System.Void" Analyze="True" />
          <Member Name="consumeOffset" Analyze="True" />
          <Member Name="LookaheadCharacter(System.Int32):System.Char" Analyze="True" />
          <Member Name="LookaheadFistCharacter" Analyze="True">
           <Accessors>
            <Accessor Name="get_LookaheadFistCharacter():System.Char" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Mark():System.Void" Analyze="True" />
          <Member Name="markerCount" Analyze="True" />
          <Member Name="markerOffset" Analyze="True" />
          <Member Name="markers" Analyze="True" />
          <Member Name="Reset():System.Void" Analyze="True" />
          <Member Name="Reset(System.IO.TextReader):System.Void" Analyze="True" />
          <Member Name="RollbackMark():System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="LexerScanner" Analyze="True">
         <Members>
          <Member Name=".ctor(System.IO.TextReader)" Analyze="True" />
          <Member Name="eof" Analyze="True" />
          <Member Name="executorCharacter" Analyze="True" />
          <Member Name="IsBeginTextIdentifierCharacter(System.Char):System.Boolean" Analyze="True" />
          <Member Name="IsClosingLiteralCharacter(System.Char):System.Boolean" Analyze="True" />
          <Member Name="IsClosingPunctuationCharacter(System.Char):System.Boolean" Analyze="True" />
          <Member Name="IsEndOfFileCharacter(System.Char):System.Boolean" Analyze="True" />
          <Member Name="IsEndOfLineCharacter(System.Char):System.Boolean" Analyze="True" />
          <Member Name="IsMarkerCharacter(System.Char):System.Boolean" Analyze="True" />
          <Member Name="IsNumberCharacter(System.Char):System.Boolean" Analyze="True" />
          <Member Name="IsOpeningLiteralCharacter(System.Char):System.Boolean" Analyze="True" />
          <Member Name="IsOpeningPunctuationCharacter(System.Char):System.Boolean" Analyze="True" />
          <Member Name="IsSeparatorExecutorCharacter(System.Char):System.Boolean" Analyze="True" />
          <Member Name="IsSymbolIdentifierCharacter(System.Char):System.Boolean" Analyze="True" />
          <Member Name="IsTextIdentifierCharacter(System.Char):System.Boolean" Analyze="True" />
          <Member Name="IsWhitespaceCharacter(System.Char):System.Boolean" Analyze="True" />
          <Member Name="lexer" Analyze="True" />
          <Member Name="library" Analyze="True" />
          <Member Name="listEncapsulation" Analyze="True" />
          <Member Name="literalEncapsulation" Analyze="True" />
          <Member Name="NextToken():MathNet.Symbolics.Interpreter.LexerToken" Analyze="True" />
          <Member Name="numberFormat" Analyze="True" />
          <Member Name="Reset():System.Void" Analyze="True" />
          <Member Name="Reset(System.IO.TextReader):System.Void" Analyze="True" />
          <Member Name="scalarEncapsulation" Analyze="True" />
          <Member Name="ScanClosingPunctuation():MathNet.Symbolics.Interpreter.LexerToken" Analyze="True" />
          <Member Name="ScanEndOfFile():MathNet.Symbolics.Interpreter.LexerToken" Analyze="True" />
          <Member Name="ScanEndOfLine():MathNet.Symbolics.Interpreter.LexerToken" Analyze="True" />
          <Member Name="ScanIntegerHelper():System.String" Analyze="True" />
          <Member Name="ScanLiteral():MathNet.Symbolics.Interpreter.LexerToken" Analyze="True" />
          <Member Name="ScanMarkers():MathNet.Symbolics.Interpreter.LexerToken" Analyze="True" />
          <Member Name="ScanNumber():MathNet.Symbolics.Interpreter.LexerToken" Analyze="True" />
          <Member Name="ScanOpeningPunctuation():MathNet.Symbolics.Interpreter.LexerToken" Analyze="True" />
          <Member Name="ScanSeparatorExecutor():MathNet.Symbolics.Interpreter.LexerToken" Analyze="True" />
          <Member Name="ScanSkipWhiteSpace():System.Void" Analyze="True" />
          <Member Name="ScanSymbolIdentifier():MathNet.Symbolics.Interpreter.LexerToken" Analyze="True" />
          <Member Name="ScanTextIdentifier():MathNet.Symbolics.Interpreter.LexerToken" Analyze="True" />
          <Member Name="seperatorCharacter" Analyze="True" />
          <Member Name="setEncapsulation" Analyze="True" />
          <Member Name="vectorEncapsulation" Analyze="True" />
         </Members>
        </Type>
        <Type Name="LexerToken" Analyze="True">
         <Members>
          <Member Name=".ctor(System.String)" Analyze="True" />
          <Member Name=".ctor(System.String,MathNet.Symbolics.Interpreter.TokenTypes)" Analyze="True" />
          <Member Name="IsType(MathNet.Symbolics.Interpreter.TokenTypes):System.Boolean" Analyze="True" />
          <Member Name="text" Analyze="True" />
          <Member Name="Text" Analyze="True">
           <Accessors>
            <Accessor Name="get_Text():System.String" Analyze="True" />
            <Accessor Name="set_Text(System.String):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ToString():System.String" Analyze="True" />
          <Member Name="types" Analyze="True" />
          <Member Name="Types" Analyze="True">
           <Accessors>
            <Accessor Name="get_Types():MathNet.Symbolics.Interpreter.TokenTypes" Analyze="True" />
            <Accessor Name="set_Types(MathNet.Symbolics.Interpreter.TokenTypes):System.Void" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="Parser" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="Interpret(System.IO.FileInfo,MathNet.Symbolics.IMathSystem):System.Void" Analyze="True" />
          <Member Name="Interpret(System.IO.TextReader,MathNet.Symbolics.IMathSystem):System.Void" Analyze="True" />
          <Member Name="Interpret(System.String,MathNet.Symbolics.IMathSystem):System.Void" Analyze="True" />
          <Member Name="scanner" Analyze="True" />
         </Members>
        </Type>
        <Type Name="ParserBuffer" Analyze="True">
         <Members>
          <Member Name=".ctor(System.Int32,System.Int32,System.IO.TextReader)" Analyze="True" />
          <Member Name="Append(MathNet.Symbolics.Interpreter.LexerToken):System.Void" Analyze="True" />
          <Member Name="buffer" Analyze="True" />
          <Member Name="count" Analyze="True" />
          <Member Name="Count" Analyze="True">
           <Accessors>
            <Accessor Name="get_Count():System.Int32" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ElementAt(System.Int32):MathNet.Symbolics.Interpreter.LexerToken" Analyze="True" />
          <Member Name="Expand():System.Void" Analyze="True" />
          <Member Name="Init(System.Int32):System.Void" Analyze="True" />
          <Member Name="maxSize" Analyze="True" />
          <Member Name="offset" Analyze="True" />
          <Member Name="RefillBuffer(System.Int32):System.Void" Analyze="True" />
          <Member Name="RemoveBlock(System.Int32):System.Void" Analyze="True" />
          <Member Name="RemoveFirst():System.Void" Analyze="True" />
          <Member Name="Reset():System.Void" Analyze="True" />
          <Member Name="Reset(System.IO.TextReader):System.Void" Analyze="True" />
          <Member Name="scanner" Analyze="True" />
          <Member Name="Size" Analyze="True">
           <Accessors>
            <Accessor Name="get_Size():System.Int32" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="sizeLessOne" Analyze="True" />
         </Members>
        </Type>
        <Type Name="ParserMarker" Analyze="True">
         <Members>
          <Member Name=".ctor(System.IO.TextReader)" Analyze="True" />
          <Member Name="buffer" Analyze="True" />
          <Member Name="CommitMark():System.Void" Analyze="True" />
          <Member Name="Consume():System.Void" Analyze="True" />
          <Member Name="ConsumeGet():MathNet.Symbolics.Interpreter.LexerToken" Analyze="True" />
          <Member Name="consumeOffset" Analyze="True" />
          <Member Name="CurrentTokenNeighbourhood():System.String" Analyze="True" />
          <Member Name="IsEndOfFile" Analyze="True">
           <Accessors>
            <Accessor Name="get_IsEndOfFile():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="LookaheadFistToken" Analyze="True">
           <Accessors>
            <Accessor Name="get_LookaheadFistToken():MathNet.Symbolics.Interpreter.LexerToken" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="LookaheadToken(System.Int32):MathNet.Symbolics.Interpreter.LexerToken" Analyze="True" />
          <Member Name="Mark():System.Void" Analyze="True" />
          <Member Name="markerCount" Analyze="True" />
          <Member Name="markerOffset" Analyze="True" />
          <Member Name="markers" Analyze="True" />
          <Member Name="Match(MathNet.Symbolics.Interpreter.TokenTypes):System.Void" Analyze="True" />
          <Member Name="Match(MathNet.Symbolics.Interpreter.TokenTypes,System.String):System.Void" Analyze="True" />
          <Member Name="Match(System.String):System.Void" Analyze="True" />
          <Member Name="MatchGet(MathNet.Symbolics.Interpreter.TokenTypes):MathNet.Symbolics.Interpreter.LexerToken" Analyze="True" />
          <Member Name="Reset():System.Void" Analyze="True" />
          <Member Name="Reset(System.IO.TextReader):System.Void" Analyze="True" />
          <Member Name="RollbackMark():System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="ParserScanner" Analyze="True">
         <Members>
          <Member Name=".ctor(System.IO.TextReader,MathNet.Symbolics.IMathSystem)" Analyze="True" />
          <Member Name="AllStatements():System.Void" Analyze="True" />
          <Member Name="builder" Analyze="True" />
          <Member Name="IsBeginningEncapsulation(MathNet.Symbolics.Interpreter.LexerToken):System.Boolean" Analyze="True" />
          <Member Name="IsBinary(MathNet.Symbolics.Interpreter.LexerToken):System.Boolean" Analyze="True" />
          <Member Name="IsLeftUnary(MathNet.Symbolics.Interpreter.LexerToken):System.Boolean" Analyze="True" />
          <Member Name="IsPrecedenceLeftFirst(MathNet.Symbolics.IEntity,MathNet.Symbolics.IEntity):System.Boolean" Analyze="True" />
          <Member Name="IsRightUnary(MathNet.Symbolics.Interpreter.LexerToken):System.Boolean" Analyze="True" />
          <Member Name="library" Analyze="True" />
          <Member Name="NextStatement():System.Void" Analyze="True" />
          <Member Name="Reset():System.Void" Analyze="True" />
          <Member Name="Reset(System.IO.TextReader,MathNet.Symbolics.IMathSystem):System.Void" Analyze="True" />
          <Member Name="ScanBus():MathNet.Symbolics.Bus" Analyze="True" />
          <Member Name="ScanBusAssociation():MathNet.Symbolics.Interpreter.ParserScanner+BusAssociation" Analyze="True" />
          <Member Name="ScanBusAssociationList():System.Collections.Generic.List`1&lt;MathNet.Symbolics.Interpreter.ParserScanner+BusAssociation&gt;" Analyze="True" />
          <Member Name="ScanBusDeclaration():MathNet.Symbolics.Bus" Analyze="True" />
          <Member Name="ScanBusList():System.Collections.Generic.List`1&lt;MathNet.Symbolics.Bus&gt;" Analyze="True" />
          <Member Name="ScanCommand():System.Void" Analyze="True" />
          <Member Name="ScanDefine():System.Void" Analyze="True" />
          <Member Name="ScanDefineArchitecture():System.Void" Analyze="True" />
          <Member Name="ScanDefineEntity():MathNet.Symbolics.IEntity" Analyze="True" />
          <Member Name="ScanEncapsulation():MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="ScanEntity():MathNet.Symbolics.IEntity" Analyze="True" />
          <Member Name="ScanEntity(MathNet.Symbolics.Interpreter.LexerToken,MathNet.Symbolics.InfixNotation,System.Int32):MathNet.Symbolics.IEntity" Analyze="True" />
          <Member Name="ScanEntityMathIdentifierOrLabel(System.Boolean):MathNet.Symbolics.MathIdentifier" Analyze="True" />
          <Member Name="ScanEntitySymbol():System.String" Analyze="True" />
          <Member Name="ScanEntitySymbolLiteral():System.String" Analyze="True" />
          <Member Name="ScanFunction():MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="ScanIdentifierInExpression():MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="ScanInstantiate():MathNet.Symbolics.Port" Analyze="True" />
          <Member Name="ScanInteger():System.Int64" Analyze="True" />
          <Member Name="ScanIntegerSignal():MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="ScanLeftUnary():MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="ScanList():System.Collections.Generic.List`1&lt;MathNet.Symbolics.Signal&gt;" Analyze="True" />
          <Member Name="ScanLiteral():System.String" Analyze="True" />
          <Member Name="ScanLiteralList():System.Collections.Generic.List`1&lt;System.String&gt;" Analyze="True" />
          <Member Name="ScanLiteralSignal():MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="ScanMathIdentifier():MathNet.Symbolics.MathIdentifier" Analyze="True" />
          <Member Name="ScanOperand():MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="ScanOperandPart():MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="ScanParenthesisSignal():MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="ScanRealSignal():MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="ScanScalar():System.Collections.Generic.List`1&lt;MathNet.Symbolics.Signal&gt;" Analyze="True" />
          <Member Name="ScanScalarSignal():MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="ScanSet():System.Collections.Generic.List`1&lt;MathNet.Symbolics.Signal&gt;" Analyze="True" />
          <Member Name="ScanSetSignal():MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="ScanSignal():MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="ScanSignalAssignment():MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="ScanSignalAssociation():MathNet.Symbolics.Interpreter.ParserScanner+SignalAssociation" Analyze="True" />
          <Member Name="ScanSignalAssociationList():System.Collections.Generic.List`1&lt;MathNet.Symbolics.Interpreter.ParserScanner+SignalAssociation&gt;" Analyze="True" />
          <Member Name="ScanSignalDeclaration():MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="ScanSignalExpression():MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="ScanSignalExpressionAssociation():MathNet.Symbolics.Interpreter.ParserScanner+SignalAssociation" Analyze="True" />
          <Member Name="ScanSignalExpressionAssociationList():System.Collections.Generic.List`1&lt;MathNet.Symbolics.Interpreter.ParserScanner+SignalAssociation&gt;" Analyze="True" />
          <Member Name="ScanSignalExpressionList():System.Collections.Generic.List`1&lt;MathNet.Symbolics.Signal&gt;" Analyze="True" />
          <Member Name="ScanSignalList():System.Collections.Generic.List`1&lt;MathNet.Symbolics.Signal&gt;" Analyze="True" />
          <Member Name="ScanTextIdentifier():System.String" Analyze="True" />
          <Member Name="ScanTextIdentifierList():System.Collections.Generic.List`1&lt;System.String&gt;" Analyze="True" />
          <Member Name="ScanVector():System.Collections.Generic.List`1&lt;MathNet.Symbolics.Signal&gt;" Analyze="True" />
          <Member Name="ScanVectorSignal():MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="system" Analyze="True" />
          <Member Name="tokenizer" Analyze="True" />
         </Members>
        </Type>
        <Type Name="ParserScanner+BusAssociation" Analyze="True">
         <Members>
          <Member Name="Association" Analyze="True" />
          <Member Name="Label" Analyze="True" />
         </Members>
        </Type>
        <Type Name="ParserScanner+SignalAssociation" Analyze="True">
         <Members>
          <Member Name="Association" Analyze="True" />
          <Member Name="Label" Analyze="True" />
         </Members>
        </Type>
        <Type Name="SignalStack" Analyze="True">
         <Members>
          <Member Name=".ctor(System.Int32,System.Int32)" Analyze="True" />
          <Member Name="count" Analyze="True" />
          <Member Name="Count" Analyze="True">
           <Accessors>
            <Accessor Name="get_Count():System.Int32" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Expand():System.Void" Analyze="True" />
          <Member Name="Init(System.Int32):System.Void" Analyze="True" />
          <Member Name="Item[System.Int32]" Analyze="True">
           <Accessors>
            <Accessor Name="get_Item(System.Int32):MathNet.Symbolics.Signal" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="maxSize" Analyze="True" />
          <Member Name="Peek():MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="Pop():MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="PopPeek():MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="Push(MathNet.Symbolics.Signal):System.Void" Analyze="True" />
          <Member Name="Remove():System.Void" Analyze="True" />
          <Member Name="Reset():System.Void" Analyze="True" />
          <Member Name="Size" Analyze="True">
           <Accessors>
            <Accessor Name="get_Size():System.Int32" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="stack" Analyze="True" />
         </Members>
        </Type>
        <Type Name="TokenTypes" Analyze="True">
         <Members>
          <Member Name="Assignment" Analyze="True" />
          <Member Name="Association" Analyze="True" />
          <Member Name="BusKeyword" Analyze="True" />
          <Member Name="DefineKeyword" Analyze="True" />
          <Member Name="EndOfFile" Analyze="True" />
          <Member Name="EndOfLine" Analyze="True" />
          <Member Name="Executor" Analyze="True" />
          <Member Name="InstantiateKeyword" Analyze="True" />
          <Member Name="Integer" Analyze="True" />
          <Member Name="Left" Analyze="True" />
          <Member Name="LeftList" Analyze="True" />
          <Member Name="LeftScalar" Analyze="True" />
          <Member Name="LeftSet" Analyze="True" />
          <Member Name="LeftVector" Analyze="True" />
          <Member Name="ListEncapsulation" Analyze="True" />
          <Member Name="Literal" Analyze="True" />
          <Member Name="MathIdentifier" Analyze="True" />
          <Member Name="Real" Analyze="True" />
          <Member Name="Right" Analyze="True" />
          <Member Name="RightList" Analyze="True" />
          <Member Name="RightScalar" Analyze="True" />
          <Member Name="RightSet" Analyze="True" />
          <Member Name="RightVector" Analyze="True" />
          <Member Name="ScalarEncapsulation" Analyze="True" />
          <Member Name="Separator" Analyze="True" />
          <Member Name="SetEncapsulation" Analyze="True" />
          <Member Name="SignalKeyword" Analyze="True" />
          <Member Name="SymbolIdentifier" Analyze="True" />
          <Member Name="System" Analyze="True" />
          <Member Name="SystemSymbolIdentifier" Analyze="True" />
          <Member Name="SystemTextIdentifier" Analyze="True" />
          <Member Name="TextIdentifier" Analyze="True" />
          <Member Name="Unknown" Analyze="True" />
          <Member Name="value__" Analyze="True" />
          <Member Name="VectorEncapsulation" Analyze="True" />
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="MathNet.Symbolics.Properties" Analyze="True">
       <Types>
        <Type Name="Resources" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="Culture" Analyze="True">
           <Accessors>
            <Accessor Name="get_Culture():System.Globalization.CultureInfo" Analyze="True" />
            <Accessor Name="set_Culture(System.Globalization.CultureInfo):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ex_Parsing_Failed_TokenMismatch" Analyze="True">
           <Accessors>
            <Accessor Name="get_ex_Parsing_Failed_TokenMismatch():System.String" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ex_Parsing_Failed_TokenMismatchEx" Analyze="True">
           <Accessors>
            <Accessor Name="get_ex_Parsing_Failed_TokenMismatchEx():System.String" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="resourceCulture" Analyze="True" />
          <Member Name="resourceMan" Analyze="True" />
          <Member Name="ResourceManager" Analyze="True">
           <Accessors>
            <Accessor Name="get_ResourceManager():System.Resources.ResourceManager" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
     </Namespaces>
     <Resources>
      <Resource Name="MathNet.Symbolics.Properties.Resources.resources" Analyze="True" />
     </Resources>
    </Module>
   </Modules>
  </Target>
  <Target Name="$(ProjectDir)/src/app/MathNet.Yttrium/Library.Contracts/bin/Debug/MathNet.Yttrium.Library.Contracts.dll" Analyze="True">
   <Modules>
    <Module Name="mathnet.yttrium.library.contracts.dll" Analyze="True">
     <Namespaces>
      <Namespace Name="" Analyze="True">
       <Types>
        <Type Name="&lt;Module&gt;" Analyze="True" />
       </Types>
      </Namespace>
      <Namespace Name="MathNet.Symbolics.Library" Analyze="True">
       <Types>
        <Type Name="CustomDataRef" Analyze="True">
         <Members>
          <Member Name=".ctor(System.Type,MathNet.Symbolics.Conversion.IConversionRouter)" Analyze="True" />
          <Member Name=".ctor(System.Type,MathNet.Symbolics.Conversion.IConversionRouter,MathNet.Symbolics.ICustomData)" Analyze="True" />
          <Member Name="_instance" Analyze="True" />
          <Member Name="_instanceType" Analyze="True" />
          <Member Name="_router" Analyze="True" />
          <Member Name="_typeId" Analyze="True" />
          <Member Name="InstanceType" Analyze="True">
           <Accessors>
            <Accessor Name="get_InstanceType():System.Type" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="IsSingleton" Analyze="True">
           <Accessors>
            <Accessor Name="get_IsSingleton():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Router" Analyze="True">
           <Accessors>
            <Accessor Name="get_Router():MathNet.Symbolics.Conversion.IConversionRouter" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="SingletonInstance" Analyze="True">
           <Accessors>
            <Accessor Name="get_SingletonInstance():MathNet.Symbolics.ICustomData" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="TypeId" Analyze="True">
           <Accessors>
            <Accessor Name="get_TypeId():MathNet.Symbolics.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="ICustomDataRef" Analyze="True">
         <Members>
          <Member Name="InstanceType" Analyze="True">
           <Accessors>
            <Accessor Name="get_InstanceType():System.Type" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="IsSingleton" Analyze="True">
           <Accessors>
            <Accessor Name="get_IsSingleton():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Router" Analyze="True">
           <Accessors>
            <Accessor Name="get_Router():MathNet.Symbolics.Conversion.IConversionRouter" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="SingletonInstance" Analyze="True">
           <Accessors>
            <Accessor Name="get_SingletonInstance():MathNet.Symbolics.ICustomData" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="TypeId" Analyze="True">
           <Accessors>
            <Accessor Name="get_TypeId():MathNet.Symbolics.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="ILibrary" Analyze="True">
         <Members>
          <Member Name="AddArchitecture(MathNet.Symbolics.IArchitectureFactory):System.Void" Analyze="True" />
          <Member Name="AddCustomDataType():System.Void" Analyze="True" />
          <Member Name="AddCustomDataType(MathNet.Symbolics.Library.ICustomDataRef):System.Void" Analyze="True" />
          <Member Name="AddCustomDataType(TCustomType):System.Void" Analyze="True" />
          <Member Name="AddEntity(MathNet.Symbolics.IEntity):System.Void" Analyze="True" />
          <Member Name="AddTheoremType(MathNet.Symbolics.Library.ITheoremProvider):System.Void" Analyze="True" />
          <Member Name="ContainsArchitecture(MathNet.Symbolics.Port):System.Boolean" Analyze="True" />
          <Member Name="ContainsCustomDataType(MathNet.Symbolics.MathIdentifier):System.Boolean" Analyze="True" />
          <Member Name="ContainsEntity(MathNet.Symbolics.MathIdentifier):System.Boolean" Analyze="True" />
          <Member Name="ContainsEntity(System.String):System.Boolean" Analyze="True" />
          <Member Name="ContainsEntity(System.String,MathNet.Symbolics.InfixNotation):System.Boolean" Analyze="True" />
          <Member Name="ContainsEntity(System.String,MathNet.Symbolics.InfixNotation,System.Int32):System.Boolean" Analyze="True" />
          <Member Name="ContainsEntity(System.String,MathNet.Symbolics.InfixNotation,System.Int32,System.Int32,System.Int32):System.Boolean" Analyze="True" />
          <Member Name="ContainsEntity(System.String,System.Int32):System.Boolean" Analyze="True" />
          <Member Name="ContainsEntity(System.String,System.Int32,System.Int32,System.Int32):System.Boolean" Analyze="True" />
          <Member Name="ContainsEntity(System.String,System.Predicate`1&lt;MathNet.Symbolics.IEntity&gt;):System.Boolean" Analyze="True" />
          <Member Name="ContainsTheoremType(MathNet.Symbolics.MathIdentifier):System.Boolean" Analyze="True" />
          <Member Name="FindEntityByLabel(System.String):MathNet.Symbolics.MathIdentifier" Analyze="True" />
          <Member Name="LookupArchitecture(MathNet.Symbolics.Port):MathNet.Symbolics.IArchitectureFactory" Analyze="True" />
          <Member Name="LookupCustomDataType(MathNet.Symbolics.MathIdentifier):MathNet.Symbolics.Library.ICustomDataRef" Analyze="True" />
          <Member Name="LookupEntities(System.String):System.Collections.Generic.IList`1&lt;MathNet.Symbolics.IEntity&gt;" Analyze="True" />
          <Member Name="LookupEntities(System.String,MathNet.Symbolics.InfixNotation):System.Collections.Generic.IList`1&lt;MathNet.Symbolics.IEntity&gt;" Analyze="True" />
          <Member Name="LookupEntities(System.String,MathNet.Symbolics.InfixNotation,System.Int32):System.Collections.Generic.IList`1&lt;MathNet.Symbolics.IEntity&gt;" Analyze="True" />
          <Member Name="LookupEntities(System.String,MathNet.Symbolics.InfixNotation,System.Int32,System.Int32,System.Int32):System.Collections.Generic.IList`1&lt;MathNet.Symbolics.IEntity&gt;" Analyze="True" />
          <Member Name="LookupEntities(System.String,System.Int32):System.Collections.Generic.IList`1&lt;MathNet.Symbolics.IEntity&gt;" Analyze="True" />
          <Member Name="LookupEntities(System.String,System.Int32,System.Int32,System.Int32):System.Collections.Generic.IList`1&lt;MathNet.Symbolics.IEntity&gt;" Analyze="True" />
          <Member Name="LookupEntities(System.String,System.Predicate`1&lt;MathNet.Symbolics.IEntity&gt;):System.Collections.Generic.IList`1&lt;MathNet.Symbolics.IEntity&gt;" Analyze="True" />
          <Member Name="LookupEntity(MathNet.Symbolics.MathIdentifier):MathNet.Symbolics.IEntity" Analyze="True" />
          <Member Name="LookupEntity(System.String):MathNet.Symbolics.IEntity" Analyze="True" />
          <Member Name="LookupEntity(System.String,MathNet.Symbolics.InfixNotation):MathNet.Symbolics.IEntity" Analyze="True" />
          <Member Name="LookupEntity(System.String,MathNet.Symbolics.InfixNotation,System.Int32):MathNet.Symbolics.IEntity" Analyze="True" />
          <Member Name="LookupEntity(System.String,MathNet.Symbolics.InfixNotation,System.Int32,System.Int32,System.Int32):MathNet.Symbolics.IEntity" Analyze="True" />
          <Member Name="LookupEntity(System.String,System.Int32):MathNet.Symbolics.IEntity" Analyze="True" />
          <Member Name="LookupEntity(System.String,System.Int32,System.Int32,System.Int32):MathNet.Symbolics.IEntity" Analyze="True" />
          <Member Name="LookupEntity(System.String,System.Predicate`1&lt;MathNet.Symbolics.IEntity&gt;):MathNet.Symbolics.IEntity" Analyze="True" />
          <Member Name="LookupTheoremType(MathNet.Symbolics.MathIdentifier):MathNet.Symbolics.Library.ITheoremProvider" Analyze="True" />
          <Member Name="TryFindEntityByLabel(System.String,MathNet.Symbolics.MathIdentifier&amp;):System.Boolean" Analyze="True" />
          <Member Name="TryLookupArchitecture(MathNet.Symbolics.Port,MathNet.Symbolics.IArchitectureFactory&amp;):System.Boolean" Analyze="True" />
          <Member Name="TryLookupCustomDataType(MathNet.Symbolics.MathIdentifier,MathNet.Symbolics.Library.ICustomDataRef&amp;):System.Boolean" Analyze="True" />
          <Member Name="TryLookupEntity(MathNet.Symbolics.MathIdentifier,MathNet.Symbolics.IEntity&amp;):System.Boolean" Analyze="True" />
          <Member Name="TryLookupEntity(System.String,MathNet.Symbolics.InfixNotation,System.Int32,MathNet.Symbolics.IEntity&amp;):System.Boolean" Analyze="True" />
          <Member Name="TryLookupEntity(System.String,MathNet.Symbolics.InfixNotation,System.Int32,System.Int32,System.Int32,MathNet.Symbolics.IEntity&amp;):System.Boolean" Analyze="True" />
          <Member Name="TryLookupEntity(System.String,System.Predicate`1&lt;MathNet.Symbolics.IEntity&gt;,MathNet.Symbolics.IEntity&amp;):System.Boolean" Analyze="True" />
          <Member Name="TryLookupTheoremType(MathNet.Symbolics.MathIdentifier,MathNet.Symbolics.Library.ITheoremProvider&amp;):System.Boolean" Analyze="True" />
         </Members>
        </Type>
        <Type Name="IPackageLoader" Analyze="True">
         <Members>
          <Member Name="LoadDefaultPackages():System.Void" Analyze="True" />
          <Member Name="LoadPackage(System.String):System.Void" Analyze="True" />
          <Member Name="LoadStdPackage():System.Void" Analyze="True" />
          <Member Name="ReloadDefaultPackages():System.Void" Analyze="True" />
          <Member Name="ReloadPackage(System.String):System.Void" Analyze="True" />
          <Member Name="ReloadStdPackage():System.Void" Analyze="True" />
          <Member Name="UnloadDefaultPackages():System.Void" Analyze="True" />
          <Member Name="UnloadPackage(System.String):System.Void" Analyze="True" />
          <Member Name="UnloadStdPackage():System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="IPackageManager" Analyze="True">
         <Members>
          <Member Name="Domain" Analyze="True">
           <Accessors>
            <Accessor Name="get_Domain():System.String" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Register(MathNet.Symbolics.Library.ILibrary):System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="ITheoremProvider" Analyze="True">
         <Members>
          <Member Name="TheoremTypeId" Analyze="True">
           <Accessors>
            <Accessor Name="get_TheoremTypeId():MathNet.Symbolics.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
     </Namespaces>
    </Module>
   </Modules>
  </Target>
  <Target Name="$(ProjectDir)/src/app/MathNet.Yttrium/Library.Service/bin/Debug/MathNet.Yttrium.Library.Service.dll" Analyze="True">
   <Modules>
    <Module Name="mathnet.yttrium.library.service.dll" Analyze="True">
     <Namespaces>
      <Namespace Name="" Analyze="True">
       <Types>
        <Type Name="&lt;Module&gt;" Analyze="True" />
       </Types>
      </Namespace>
      <Namespace Name="MathNet.Symbolics" Analyze="True">
       <Types>
        <Type Name="LibraryFactory" Analyze="True">
         <Members>
          <Member Name=".cctor()" Analyze="True" />
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="_lib" Analyze="True" />
          <Member Name="MathNet.Symbolics.IFactory&lt;MathNet.Symbolics.Library.ILibrary&gt;.GetInstance():MathNet.Symbolics.Library.ILibrary" Analyze="True" />
          <Member Name="MathNet.Symbolics.IFactory&lt;MathNet.Symbolics.Library.IPackageLoader&gt;.GetInstance():MathNet.Symbolics.Library.IPackageLoader" Analyze="True" />
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="MathNet.Symbolics.Library" Analyze="True">
       <Types>
        <Type Name="ArchitectureFactoryCollection" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="Add(MathNet.Symbolics.IArchitectureFactory):System.Void" Analyze="True" />
          <Member Name="Contains(MathNet.Symbolics.IEntity):System.Boolean" Analyze="True" />
          <Member Name="GetKeyForItem(MathNet.Symbolics.Library.EntityArchitecturesRelation):MathNet.Symbolics.MathIdentifier" Analyze="True" />
          <Member Name="Remove(MathNet.Symbolics.IArchitectureFactory):System.Void" Analyze="True" />
          <Member Name="TryGetValue(MathNet.Symbolics.MathIdentifier,MathNet.Symbolics.Library.EntityArchitecturesRelation&amp;):System.Boolean" Analyze="True" />
         </Members>
        </Type>
        <Type Name="CustomDataCollection" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="GetKeyForItem(MathNet.Symbolics.Library.ICustomDataRef):MathNet.Symbolics.MathIdentifier" Analyze="True" />
          <Member Name="TryGetValue(MathNet.Symbolics.MathIdentifier,MathNet.Symbolics.Library.ICustomDataRef&amp;):System.Boolean" Analyze="True" />
         </Members>
        </Type>
        <Type Name="EntityArchitecturesRelation" Analyze="True">
         <Members>
          <Member Name=".ctor(MathNet.Symbolics.MathIdentifier)" Analyze="True" />
          <Member Name="_architectures" Analyze="True" />
          <Member Name="_entityId" Analyze="True" />
          <Member Name="Architectures" Analyze="True">
           <Accessors>
            <Accessor Name="get_Architectures():System.Collections.Generic.List`1&lt;MathNet.Symbolics.IArchitectureFactory&gt;" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ContainsArchitectureFor(MathNet.Symbolics.Port):System.Boolean" Analyze="True" />
          <Member Name="EntityId" Analyze="True">
           <Accessors>
            <Accessor Name="get_EntityId():MathNet.Symbolics.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="LookupArchitectureFor(MathNet.Symbolics.Port):MathNet.Symbolics.IArchitectureFactory" Analyze="True" />
          <Member Name="LookupArchitecturesFor(MathNet.Symbolics.Port):System.Collections.Generic.IList`1&lt;MathNet.Symbolics.IArchitectureFactory&gt;" Analyze="True" />
          <Member Name="TryLookupArchitectureFor(MathNet.Symbolics.Port,MathNet.Symbolics.IArchitectureFactory&amp;):System.Boolean" Analyze="True" />
         </Members>
        </Type>
        <Type Name="EntityArchitecturesRelation+&lt;&gt;c__DisplayClass1" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="&lt;ContainsArchitectureFor&gt;b__0(MathNet.Symbolics.IArchitectureFactory):System.Boolean" Analyze="True" />
          <Member Name="port" Analyze="True" />
         </Members>
        </Type>
        <Type Name="EntityArchitecturesRelation+&lt;&gt;c__DisplayClass4" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="&lt;LookupArchitecturesFor&gt;b__3(MathNet.Symbolics.IArchitectureFactory):System.Boolean" Analyze="True" />
          <Member Name="port" Analyze="True" />
         </Members>
        </Type>
        <Type Name="EntityArchitecturesRelation+&lt;&gt;c__DisplayClass7" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="&lt;LookupArchitectureFor&gt;b__6(MathNet.Symbolics.IArchitectureFactory):System.Boolean" Analyze="True" />
          <Member Name="port" Analyze="True" />
         </Members>
        </Type>
        <Type Name="EntityArchitecturesRelation+&lt;&gt;c__DisplayClassa" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="&lt;TryLookupArchitectureFor&gt;b__9(MathNet.Symbolics.IArchitectureFactory):System.Boolean" Analyze="True" />
          <Member Name="port" Analyze="True" />
         </Members>
        </Type>
        <Type Name="EntityCollection" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="_symbolTable" Analyze="True" />
          <Member Name="AddSymbolEntry(MathNet.Symbolics.IEntity):System.Void" Analyze="True" />
          <Member Name="ClearItems():System.Void" Analyze="True" />
          <Member Name="ContainsSymbol(System.String):System.Boolean" Analyze="True" />
          <Member Name="ContainsSymbol(System.String,MathNet.Symbolics.InfixNotation):System.Boolean" Analyze="True" />
          <Member Name="ContainsSymbol(System.String,MathNet.Symbolics.InfixNotation,System.Int32):System.Boolean" Analyze="True" />
          <Member Name="ContainsSymbol(System.String,MathNet.Symbolics.InfixNotation,System.Int32,System.Int32,System.Int32):System.Boolean" Analyze="True" />
          <Member Name="ContainsSymbol(System.String,System.Int32):System.Boolean" Analyze="True" />
          <Member Name="ContainsSymbol(System.String,System.Int32,System.Int32,System.Int32):System.Boolean" Analyze="True" />
          <Member Name="ContainsSymbol(System.String,System.Predicate`1&lt;MathNet.Symbolics.IEntity&gt;):System.Boolean" Analyze="True" />
          <Member Name="GetKeyForItem(MathNet.Symbolics.IEntity):MathNet.Symbolics.MathIdentifier" Analyze="True" />
          <Member Name="InsertItem(System.Int32,MathNet.Symbolics.IEntity):System.Void" Analyze="True" />
          <Member Name="LookupSymbol(System.String):MathNet.Symbolics.IEntity" Analyze="True" />
          <Member Name="LookupSymbol(System.String,MathNet.Symbolics.InfixNotation):MathNet.Symbolics.IEntity" Analyze="True" />
          <Member Name="LookupSymbol(System.String,MathNet.Symbolics.InfixNotation,System.Int32):MathNet.Symbolics.IEntity" Analyze="True" />
          <Member Name="LookupSymbol(System.String,MathNet.Symbolics.InfixNotation,System.Int32,System.Int32,System.Int32):MathNet.Symbolics.IEntity" Analyze="True" />
          <Member Name="LookupSymbol(System.String,System.Int32):MathNet.Symbolics.IEntity" Analyze="True" />
          <Member Name="LookupSymbol(System.String,System.Int32,System.Int32,System.Int32):MathNet.Symbolics.IEntity" Analyze="True" />
          <Member Name="LookupSymbol(System.String,System.Predicate`1&lt;MathNet.Symbolics.IEntity&gt;):MathNet.Symbolics.IEntity" Analyze="True" />
          <Member Name="LookupSymbols(System.String):System.Collections.Generic.IList`1&lt;MathNet.Symbolics.IEntity&gt;" Analyze="True" />
          <Member Name="LookupSymbols(System.String,MathNet.Symbolics.InfixNotation):System.Collections.Generic.IList`1&lt;MathNet.Symbolics.IEntity&gt;" Analyze="True" />
          <Member Name="LookupSymbols(System.String,MathNet.Symbolics.InfixNotation,System.Int32):System.Collections.Generic.IList`1&lt;MathNet.Symbolics.IEntity&gt;" Analyze="True" />
          <Member Name="LookupSymbols(System.String,MathNet.Symbolics.InfixNotation,System.Int32,System.Int32,System.Int32):System.Collections.Generic.IList`1&lt;MathNet.Symbolics.IEntity&gt;" Analyze="True" />
          <Member Name="LookupSymbols(System.String,System.Int32):System.Collections.Generic.IList`1&lt;MathNet.Symbolics.IEntity&gt;" Analyze="True" />
          <Member Name="LookupSymbols(System.String,System.Int32,System.Int32,System.Int32):System.Collections.Generic.IList`1&lt;MathNet.Symbolics.IEntity&gt;" Analyze="True" />
          <Member Name="LookupSymbols(System.String,System.Predicate`1&lt;MathNet.Symbolics.IEntity&gt;):System.Collections.Generic.IList`1&lt;MathNet.Symbolics.IEntity&gt;" Analyze="True" />
          <Member Name="RemoveItem(System.Int32):System.Void" Analyze="True" />
          <Member Name="RemoveSymbolEntry(MathNet.Symbolics.IEntity):System.Void" Analyze="True" />
          <Member Name="SetItem(System.Int32,MathNet.Symbolics.IEntity):System.Void" Analyze="True" />
          <Member Name="TryFindDomainOfLabel(System.String,MathNet.Symbolics.MathIdentifier&amp;):System.Boolean" Analyze="True" />
          <Member Name="TryGetValue(MathNet.Symbolics.MathIdentifier,MathNet.Symbolics.IEntity&amp;):System.Boolean" Analyze="True" />
          <Member Name="TryLookupSymbol(System.String,MathNet.Symbolics.InfixNotation,System.Int32,MathNet.Symbolics.IEntity&amp;):System.Boolean" Analyze="True" />
          <Member Name="TryLookupSymbol(System.String,MathNet.Symbolics.InfixNotation,System.Int32,System.Int32,System.Int32,MathNet.Symbolics.IEntity&amp;):System.Boolean" Analyze="True" />
          <Member Name="TryLookupSymbol(System.String,System.Predicate`1&lt;MathNet.Symbolics.IEntity&gt;,MathNet.Symbolics.IEntity&amp;):System.Boolean" Analyze="True" />
         </Members>
        </Type>
        <Type Name="EntityCollection+&lt;&gt;c__DisplayClass1" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="&lt;ContainsSymbol&gt;b__0(MathNet.Symbolics.IEntity):System.Boolean" Analyze="True" />
          <Member Name="notation" Analyze="True" />
         </Members>
        </Type>
        <Type Name="EntityCollection+&lt;&gt;c__DisplayClass10" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="&lt;LookupSymbols&gt;b__f(MathNet.Symbolics.IEntity):System.Boolean" Analyze="True" />
          <Member Name="notation" Analyze="True" />
         </Members>
        </Type>
        <Type Name="EntityCollection+&lt;&gt;c__DisplayClass13" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="&lt;LookupSymbols&gt;b__12(MathNet.Symbolics.IEntity):System.Boolean" Analyze="True" />
          <Member Name="inputSignals" Analyze="True" />
         </Members>
        </Type>
        <Type Name="EntityCollection+&lt;&gt;c__DisplayClass16" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="&lt;LookupSymbols&gt;b__15(MathNet.Symbolics.IEntity):System.Boolean" Analyze="True" />
          <Member Name="inputSignals" Analyze="True" />
          <Member Name="notation" Analyze="True" />
         </Members>
        </Type>
        <Type Name="EntityCollection+&lt;&gt;c__DisplayClass19" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="&lt;LookupSymbols&gt;b__18(MathNet.Symbolics.IEntity):System.Boolean" Analyze="True" />
          <Member Name="buses" Analyze="True" />
          <Member Name="inputSignals" Analyze="True" />
          <Member Name="outputSignals" Analyze="True" />
         </Members>
        </Type>
        <Type Name="EntityCollection+&lt;&gt;c__DisplayClass1c" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="&lt;LookupSymbols&gt;b__1b(MathNet.Symbolics.IEntity):System.Boolean" Analyze="True" />
          <Member Name="buses" Analyze="True" />
          <Member Name="inputSignals" Analyze="True" />
          <Member Name="notation" Analyze="True" />
          <Member Name="outputSignals" Analyze="True" />
         </Members>
        </Type>
        <Type Name="EntityCollection+&lt;&gt;c__DisplayClass1f" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="&lt;LookupSymbol&gt;b__1e(MathNet.Symbolics.IEntity):System.Boolean" Analyze="True" />
          <Member Name="notation" Analyze="True" />
         </Members>
        </Type>
        <Type Name="EntityCollection+&lt;&gt;c__DisplayClass22" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="&lt;LookupSymbol&gt;b__21(MathNet.Symbolics.IEntity):System.Boolean" Analyze="True" />
          <Member Name="inputSignals" Analyze="True" />
         </Members>
        </Type>
        <Type Name="EntityCollection+&lt;&gt;c__DisplayClass25" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="&lt;LookupSymbol&gt;b__24(MathNet.Symbolics.IEntity):System.Boolean" Analyze="True" />
          <Member Name="inputSignals" Analyze="True" />
          <Member Name="notation" Analyze="True" />
         </Members>
        </Type>
        <Type Name="EntityCollection+&lt;&gt;c__DisplayClass28" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="&lt;LookupSymbol&gt;b__27(MathNet.Symbolics.IEntity):System.Boolean" Analyze="True" />
          <Member Name="buses" Analyze="True" />
          <Member Name="inputSignals" Analyze="True" />
          <Member Name="outputSignals" Analyze="True" />
         </Members>
        </Type>
        <Type Name="EntityCollection+&lt;&gt;c__DisplayClass2b" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="&lt;LookupSymbol&gt;b__2a(MathNet.Symbolics.IEntity):System.Boolean" Analyze="True" />
          <Member Name="buses" Analyze="True" />
          <Member Name="inputSignals" Analyze="True" />
          <Member Name="notation" Analyze="True" />
          <Member Name="outputSignals" Analyze="True" />
         </Members>
        </Type>
        <Type Name="EntityCollection+&lt;&gt;c__DisplayClass2e" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="&lt;TryLookupSymbol&gt;b__2d(MathNet.Symbolics.IEntity):System.Boolean" Analyze="True" />
          <Member Name="inputSignals" Analyze="True" />
          <Member Name="notation" Analyze="True" />
         </Members>
        </Type>
        <Type Name="EntityCollection+&lt;&gt;c__DisplayClass31" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="&lt;TryLookupSymbol&gt;b__30(MathNet.Symbolics.IEntity):System.Boolean" Analyze="True" />
          <Member Name="buses" Analyze="True" />
          <Member Name="inputSignals" Analyze="True" />
          <Member Name="notation" Analyze="True" />
          <Member Name="outputSignals" Analyze="True" />
         </Members>
        </Type>
        <Type Name="EntityCollection+&lt;&gt;c__DisplayClass4" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="&lt;ContainsSymbol&gt;b__3(MathNet.Symbolics.IEntity):System.Boolean" Analyze="True" />
          <Member Name="inputSignals" Analyze="True" />
         </Members>
        </Type>
        <Type Name="EntityCollection+&lt;&gt;c__DisplayClass7" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="&lt;ContainsSymbol&gt;b__6(MathNet.Symbolics.IEntity):System.Boolean" Analyze="True" />
          <Member Name="inputSignals" Analyze="True" />
          <Member Name="notation" Analyze="True" />
         </Members>
        </Type>
        <Type Name="EntityCollection+&lt;&gt;c__DisplayClassa" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="&lt;ContainsSymbol&gt;b__9(MathNet.Symbolics.IEntity):System.Boolean" Analyze="True" />
          <Member Name="buses" Analyze="True" />
          <Member Name="inputSignals" Analyze="True" />
          <Member Name="outputSignals" Analyze="True" />
         </Members>
        </Type>
        <Type Name="EntityCollection+&lt;&gt;c__DisplayClassd" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="&lt;ContainsSymbol&gt;b__c(MathNet.Symbolics.IEntity):System.Boolean" Analyze="True" />
          <Member Name="buses" Analyze="True" />
          <Member Name="inputSignals" Analyze="True" />
          <Member Name="notation" Analyze="True" />
          <Member Name="outputSignals" Analyze="True" />
         </Members>
        </Type>
        <Type Name="Library" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="_architectures" Analyze="True" />
          <Member Name="_customData" Analyze="True" />
          <Member Name="_entities" Analyze="True" />
          <Member Name="_theorems" Analyze="True" />
          <Member Name="AddArchitecture(MathNet.Symbolics.IArchitectureFactory):System.Void" Analyze="True" />
          <Member Name="AddCustomDataType():System.Void" Analyze="True" />
          <Member Name="AddCustomDataType(MathNet.Symbolics.Library.ICustomDataRef):System.Void" Analyze="True" />
          <Member Name="AddCustomDataType(TCustomType):System.Void" Analyze="True" />
          <Member Name="AddEntity(MathNet.Symbolics.IEntity):System.Void" Analyze="True" />
          <Member Name="AddTheoremType(MathNet.Symbolics.Library.ITheoremProvider):System.Void" Analyze="True" />
          <Member Name="ContainsArchitecture(MathNet.Symbolics.Port):System.Boolean" Analyze="True" />
          <Member Name="ContainsCustomDataType(MathNet.Symbolics.MathIdentifier):System.Boolean" Analyze="True" />
          <Member Name="ContainsEntity(MathNet.Symbolics.MathIdentifier):System.Boolean" Analyze="True" />
          <Member Name="ContainsEntity(System.String):System.Boolean" Analyze="True" />
          <Member Name="ContainsEntity(System.String,MathNet.Symbolics.InfixNotation):System.Boolean" Analyze="True" />
          <Member Name="ContainsEntity(System.String,MathNet.Symbolics.InfixNotation,System.Int32):System.Boolean" Analyze="True" />
          <Member Name="ContainsEntity(System.String,MathNet.Symbolics.InfixNotation,System.Int32,System.Int32,System.Int32):System.Boolean" Analyze="True" />
          <Member Name="ContainsEntity(System.String,System.Int32):System.Boolean" Analyze="True" />
          <Member Name="ContainsEntity(System.String,System.Int32,System.Int32,System.Int32):System.Boolean" Analyze="True" />
          <Member Name="ContainsEntity(System.String,System.Predicate`1&lt;MathNet.Symbolics.IEntity&gt;):System.Boolean" Analyze="True" />
          <Member Name="ContainsTheoremType(MathNet.Symbolics.MathIdentifier):System.Boolean" Analyze="True" />
          <Member Name="FindEntityByLabel(System.String):MathNet.Symbolics.MathIdentifier" Analyze="True" />
          <Member Name="LookupArchitecture(MathNet.Symbolics.Port):MathNet.Symbolics.IArchitectureFactory" Analyze="True" />
          <Member Name="LookupCustomDataType(MathNet.Symbolics.MathIdentifier):MathNet.Symbolics.Library.ICustomDataRef" Analyze="True" />
          <Member Name="LookupEntities(System.String):System.Collections.Generic.IList`1&lt;MathNet.Symbolics.IEntity&gt;" Analyze="True" />
          <Member Name="LookupEntities(System.String,MathNet.Symbolics.InfixNotation):System.Collections.Generic.IList`1&lt;MathNet.Symbolics.IEntity&gt;" Analyze="True" />
          <Member Name="LookupEntities(System.String,MathNet.Symbolics.InfixNotation,System.Int32):System.Collections.Generic.IList`1&lt;MathNet.Symbolics.IEntity&gt;" Analyze="True" />
          <Member Name="LookupEntities(System.String,MathNet.Symbolics.InfixNotation,System.Int32,System.Int32,System.Int32):System.Collections.Generic.IList`1&lt;MathNet.Symbolics.IEntity&gt;" Analyze="True" />
          <Member Name="LookupEntities(System.String,System.Int32):System.Collections.Generic.IList`1&lt;MathNet.Symbolics.IEntity&gt;" Analyze="True" />
          <Member Name="LookupEntities(System.String,System.Int32,System.Int32,System.Int32):System.Collections.Generic.IList`1&lt;MathNet.Symbolics.IEntity&gt;" Analyze="True" />
          <Member Name="LookupEntities(System.String,System.Predicate`1&lt;MathNet.Symbolics.IEntity&gt;):System.Collections.Generic.IList`1&lt;MathNet.Symbolics.IEntity&gt;" Analyze="True" />
          <Member Name="LookupEntity(MathNet.Symbolics.MathIdentifier):MathNet.Symbolics.IEntity" Analyze="True" />
          <Member Name="LookupEntity(System.String):MathNet.Symbolics.IEntity" Analyze="True" />
          <Member Name="LookupEntity(System.String,MathNet.Symbolics.InfixNotation):MathNet.Symbolics.IEntity" Analyze="True" />
          <Member Name="LookupEntity(System.String,MathNet.Symbolics.InfixNotation,System.Int32):MathNet.Symbolics.IEntity" Analyze="True" />
          <Member Name="LookupEntity(System.String,MathNet.Symbolics.InfixNotation,System.Int32,System.Int32,System.Int32):MathNet.Symbolics.IEntity" Analyze="True" />
          <Member Name="LookupEntity(System.String,System.Int32):MathNet.Symbolics.IEntity" Analyze="True" />
          <Member Name="LookupEntity(System.String,System.Int32,System.Int32,System.Int32):MathNet.Symbolics.IEntity" Analyze="True" />
          <Member Name="LookupEntity(System.String,System.Predicate`1&lt;MathNet.Symbolics.IEntity&gt;):MathNet.Symbolics.IEntity" Analyze="True" />
          <Member Name="LookupTheoremType(MathNet.Symbolics.MathIdentifier):MathNet.Symbolics.Library.ITheoremProvider" Analyze="True" />
          <Member Name="TryFindEntityByLabel(System.String,MathNet.Symbolics.MathIdentifier&amp;):System.Boolean" Analyze="True" />
          <Member Name="TryLookupArchitecture(MathNet.Symbolics.Port,MathNet.Symbolics.IArchitectureFactory&amp;):System.Boolean" Analyze="True" />
          <Member Name="TryLookupCustomDataType(MathNet.Symbolics.MathIdentifier,MathNet.Symbolics.Library.ICustomDataRef&amp;):System.Boolean" Analyze="True" />
          <Member Name="TryLookupEntity(MathNet.Symbolics.MathIdentifier,MathNet.Symbolics.IEntity&amp;):System.Boolean" Analyze="True" />
          <Member Name="TryLookupEntity(System.String,MathNet.Symbolics.InfixNotation,System.Int32,MathNet.Symbolics.IEntity&amp;):System.Boolean" Analyze="True" />
          <Member Name="TryLookupEntity(System.String,MathNet.Symbolics.InfixNotation,System.Int32,System.Int32,System.Int32,MathNet.Symbolics.IEntity&amp;):System.Boolean" Analyze="True" />
          <Member Name="TryLookupEntity(System.String,System.Predicate`1&lt;MathNet.Symbolics.IEntity&gt;,MathNet.Symbolics.IEntity&amp;):System.Boolean" Analyze="True" />
          <Member Name="TryLookupTheoremType(MathNet.Symbolics.MathIdentifier,MathNet.Symbolics.Library.ITheoremProvider&amp;):System.Boolean" Analyze="True" />
         </Members>
        </Type>
        <Type Name="PackageInfo" Analyze="True">
         <Members>
          <Member Name=".ctor(System.String,System.String,System.String,System.String)" Analyze="True" />
          <Member Name="comment" Analyze="True" />
          <Member Name="domain" Analyze="True" />
          <Member Name="isdefault" Analyze="True" />
          <Member Name="managerType" Analyze="True" />
         </Members>
        </Type>
        <Type Name="PackageLoader" Analyze="True">
         <Members>
          <Member Name=".cctor()" Analyze="True" />
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="_library" Analyze="True" />
          <Member Name="_packagesOffline" Analyze="True" />
          <Member Name="_packagesOnline" Analyze="True" />
          <Member Name="LoadDefaultPackages():System.Void" Analyze="True" />
          <Member Name="LoadPackage(MathNet.Symbolics.Library.PackageInfo):System.Void" Analyze="True" />
          <Member Name="LoadPackage(System.String):System.Void" Analyze="True" />
          <Member Name="LoadPackageInfo():System.Void" Analyze="True" />
          <Member Name="LoadPackageInfo(System.String):System.Void" Analyze="True" />
          <Member Name="LoadStdPackage():System.Void" Analyze="True" />
          <Member Name="ReloadDefaultPackages():System.Void" Analyze="True" />
          <Member Name="ReloadPackage(System.String):System.Void" Analyze="True" />
          <Member Name="ReloadStdPackage():System.Void" Analyze="True" />
          <Member Name="UnloadDefaultPackages():System.Void" Analyze="True" />
          <Member Name="UnloadPackage(System.String):System.Void" Analyze="True" />
          <Member Name="UnloadStdPackage():System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="PackagesSectionHandler" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="Create(System.Object,System.Object,System.Xml.XmlNode):System.Object" Analyze="True" />
         </Members>
        </Type>
        <Type Name="TheoremProviderCollection" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="GetKeyForItem(MathNet.Symbolics.Library.ITheoremProvider):MathNet.Symbolics.MathIdentifier" Analyze="True" />
          <Member Name="TryGetValue(MathNet.Symbolics.MathIdentifier,MathNet.Symbolics.Library.ITheoremProvider&amp;):System.Boolean" Analyze="True" />
         </Members>
        </Type>
        <Type Name="XmlPackagesAdapter" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="CompileFromXml(System.Xml.XmlNode):System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Library.PackageInfo&gt;" Analyze="True" />
          <Member Name="GetXmlAttribute(System.Xml.XmlNode,System.String,System.String):System.String" Analyze="True" />
          <Member Name="Load(System.String):System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Library.PackageInfo&gt;" Analyze="True" />
          <Member Name="Load(System.Xml.XmlDocument):System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Library.PackageInfo&gt;" Analyze="True" />
         </Members>
        </Type>
       </Types>
      </Namespace>
     </Namespaces>
    </Module>
   </Modules>
  </Target>
  <Target Name="$(ProjectDir)/src/app/MathNet.Yttrium/Library/bin/Debug/MathNet.Yttrium.dll" Analyze="True">
   <Modules>
    <Module Name="mathnet.yttrium.dll" Analyze="True">
     <Namespaces>
      <Namespace Name="" Analyze="True">
       <Types>
        <Type Name="&lt;Module&gt;" Analyze="True" />
       </Types>
      </Namespace>
      <Namespace Name="MathNet.Symbolics" Analyze="True">
       <Types>
        <Type Name="CoreFactory" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="MathNet.Symbolics.IFactory&lt;MathNet.Symbolics.Bus,MathNet.Symbolics.IValueStructure&gt;.GetInstance(MathNet.Symbolics.IValueStructure):MathNet.Symbolics.Bus" Analyze="True" />
          <Member Name="MathNet.Symbolics.IFactory&lt;MathNet.Symbolics.Bus&gt;.GetInstance():MathNet.Symbolics.Bus" Analyze="True" />
          <Member Name="MathNet.Symbolics.IFactory&lt;MathNet.Symbolics.IMathSystem&gt;.GetInstance():MathNet.Symbolics.IMathSystem" Analyze="True" />
          <Member Name="MathNet.Symbolics.IFactory&lt;MathNet.Symbolics.Port,MathNet.Symbolics.IEntity,System.Collections.Generic.IEnumerable&lt;MathNet.Symbolics.Signal&gt;&gt;.GetInstance(MathNet.Symbolics.IEntity,System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Signal&gt;):MathNet.Symbolics.Port" Analyze="True" />
          <Member Name="MathNet.Symbolics.IFactory&lt;MathNet.Symbolics.Port,MathNet.Symbolics.IEntity&gt;.GetInstance(MathNet.Symbolics.IEntity):MathNet.Symbolics.Port" Analyze="True" />
          <Member Name="MathNet.Symbolics.IFactory&lt;MathNet.Symbolics.Port&gt;.GetInstance():MathNet.Symbolics.Port" Analyze="True" />
          <Member Name="MathNet.Symbolics.IFactory&lt;MathNet.Symbolics.Signal,MathNet.Symbolics.IValueStructure&gt;.GetInstance(MathNet.Symbolics.IValueStructure):MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="MathNet.Symbolics.IFactory&lt;MathNet.Symbolics.Signal&gt;.GetInstance():MathNet.Symbolics.Signal" Analyze="True" />
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="MathNet.Symbolics.Backend.Channels" Analyze="True">
       <Types>
        <Type Name="AbstractChannel`1" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="_enabled" Analyze="True" />
          <Member Name="_queue" Analyze="True" />
          <Member Name="AcceptsNewEntries" Analyze="True">
           <Accessors>
            <Accessor Name="get_AcceptsNewEntries():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="EntryAvailable" Kind="Event" Analyze="True">
           <Accessors>
            <Accessor Name="add_EntryAvailable(System.EventHandler):System.Void" Analyze="True" />
            <Accessor Name="remove_EntryAvailable(System.EventHandler):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Enabled" Analyze="True">
           <Accessors>
            <Accessor Name="get_Enabled():System.Boolean" Analyze="True" />
            <Accessor Name="set_Enabled(System.Boolean):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="EntryAvailable" Analyze="True" />
          <Member Name="HasEntries" Analyze="True">
           <Accessors>
            <Accessor Name="get_HasEntries():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="PeekEntry():EntryType" Analyze="True" />
          <Member Name="PopEntry():EntryType" Analyze="True" />
          <Member Name="PushEntry(EntryType):System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="CommandChannel" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
         </Members>
        </Type>
        <Type Name="CommandReference" Analyze="True">
         <Members>
          <Member Name=".ctor(System.Guid,System.Int32)" Analyze="True" />
          <Member Name="Deserialize(System.String,System.Runtime.Serialization.SerializationInfo):MathNet.Symbolics.Backend.Channels.CommandReference" Analyze="True" />
          <Member Name="Deserialize(System.String,System.Xml.XmlReader):MathNet.Symbolics.Backend.Channels.CommandReference" Analyze="True" />
          <Member Name="Index" Analyze="True" />
          <Member Name="InstanceId" Analyze="True" />
          <Member Name="Serialize(System.String,System.Runtime.Serialization.SerializationInfo):System.Void" Analyze="True" />
          <Member Name="Serialize(System.String,System.Xml.XmlWriter):System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="Hint" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="_type" Analyze="True" />
          <Member Name="Type" Analyze="True">
           <Accessors>
            <Accessor Name="get_Type():MathNet.Symbolics.Backend.Channels.HintType" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="HintChannel" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
         </Members>
        </Type>
        <Type Name="HintType" Analyze="True">
         <Members>
          <Member Name="Error" Analyze="True" />
          <Member Name="Hint" Analyze="True" />
          <Member Name="Information" Analyze="True" />
          <Member Name="value__" Analyze="True" />
          <Member Name="Warning" Analyze="True" />
         </Members>
        </Type>
        <Type Name="ICommand" Analyze="True">
         <Members>
          <Member Name="Done" Analyze="True">
           <Accessors>
            <Accessor Name="get_Done():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Executed" Kind="Event" Analyze="True">
           <Accessors>
            <Accessor Name="add_Executed(System.EventHandler):System.Void" Analyze="True" />
            <Accessor Name="remove_Executed(System.EventHandler):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Execute():System.Void" Analyze="True" />
          <Member Name="System" Analyze="True">
           <Accessors>
            <Accessor Name="get_System():MathNet.Symbolics.Workplace.MathSystem" Analyze="True" />
            <Accessor Name="set_System(MathNet.Symbolics.Workplace.MathSystem):System.Void" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="ILogWriter" Analyze="True">
         <Members>
          <Member Name="WriteEntry(System.DateTime,System.Guid,MathNet.Symbolics.Backend.Channels.LogAction,System.Guid,System.Guid,System.Guid,System.String,System.Int32):System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="LogAction" Analyze="True">
         <Members>
          <Member Name="BeginInitialize" Analyze="True" />
          <Member Name="BusAdded" Analyze="True" />
          <Member Name="BusAttachedToPort" Analyze="True" />
          <Member Name="BusDetachedFromPort" Analyze="True" />
          <Member Name="BusRemoved" Analyze="True" />
          <Member Name="EndInitialize" Analyze="True" />
          <Member Name="InputAdded" Analyze="True" />
          <Member Name="InputRemoved" Analyze="True" />
          <Member Name="OutputAdded" Analyze="True" />
          <Member Name="OutputRemoved" Analyze="True" />
          <Member Name="PortAdded" Analyze="True" />
          <Member Name="PortDrivesSignal" Analyze="True" />
          <Member Name="PortRemoved" Analyze="True" />
          <Member Name="PortUndrivesSignal" Analyze="True" />
          <Member Name="SignalAdded" Analyze="True" />
          <Member Name="SignalDrivesPort" Analyze="True" />
          <Member Name="SignalRemoved" Analyze="True" />
          <Member Name="SignalUndrivesPort" Analyze="True" />
          <Member Name="SystemChanged" Analyze="True" />
          <Member Name="value__" Analyze="True" />
         </Members>
        </Type>
        <Type Name="LogObserver" Analyze="True">
         <Members>
          <Member Name=".ctor(MathNet.Symbolics.Backend.Channels.ILogWriter)" Analyze="True" />
          <Member Name="_currentSysId" Analyze="True" />
          <Member Name="_emptyGuid" Analyze="True" />
          <Member Name="_emptyId" Analyze="True" />
          <Member Name="_writer" Analyze="True" />
          <Member Name="AttachedToSystem(MathNet.Symbolics.IMathSystem):System.Void" Analyze="True" />
          <Member Name="AutoDetachOnSystemChanged" Analyze="True">
           <Accessors>
            <Accessor Name="get_AutoDetachOnSystemChanged():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="AutoInitialize" Analyze="True">
           <Accessors>
            <Accessor Name="get_AutoInitialize():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="BeginInitialize():System.Void" Analyze="True" />
          <Member Name="DetachedFromSystem(MathNet.Symbolics.IMathSystem):System.Void" Analyze="True" />
          <Member Name="EndInitialize():System.Void" Analyze="True" />
          <Member Name="OnBusAdded(MathNet.Symbolics.Bus,System.Int32):System.Void" Analyze="True" />
          <Member Name="OnBusAttachedToPort(MathNet.Symbolics.Bus,MathNet.Symbolics.Port,System.Int32):System.Void" Analyze="True" />
          <Member Name="OnBusDetachedFromPort(MathNet.Symbolics.Bus,MathNet.Symbolics.Port,System.Int32):System.Void" Analyze="True" />
          <Member Name="OnBusMoved(MathNet.Symbolics.Bus,System.Int32,System.Int32):System.Void" Analyze="True" />
          <Member Name="OnBusRemoved(MathNet.Symbolics.Bus,System.Int32):System.Void" Analyze="True" />
          <Member Name="OnBusValueChanged(MathNet.Symbolics.Bus):System.Void" Analyze="True" />
          <Member Name="OnInputAdded(MathNet.Symbolics.Signal,System.Int32):System.Void" Analyze="True" />
          <Member Name="OnInputMoved(MathNet.Symbolics.Signal,System.Int32,System.Int32):System.Void" Analyze="True" />
          <Member Name="OnInputRemoved(MathNet.Symbolics.Signal,System.Int32):System.Void" Analyze="True" />
          <Member Name="OnOutputAdded(MathNet.Symbolics.Signal,System.Int32):System.Void" Analyze="True" />
          <Member Name="OnOutputMoved(MathNet.Symbolics.Signal,System.Int32,System.Int32):System.Void" Analyze="True" />
          <Member Name="OnOutputRemoved(MathNet.Symbolics.Signal,System.Int32):System.Void" Analyze="True" />
          <Member Name="OnPortAdded(MathNet.Symbolics.Port,System.Int32):System.Void" Analyze="True" />
          <Member Name="OnPortDrivesSignal(MathNet.Symbolics.Signal,MathNet.Symbolics.Port,System.Int32):System.Void" Analyze="True" />
          <Member Name="OnPortDrivesSignalNoLonger(MathNet.Symbolics.Signal,MathNet.Symbolics.Port,System.Int32):System.Void" Analyze="True" />
          <Member Name="OnPortMoved(MathNet.Symbolics.Port,System.Int32,System.Int32):System.Void" Analyze="True" />
          <Member Name="OnPortRemoved(MathNet.Symbolics.Port,System.Int32):System.Void" Analyze="True" />
          <Member Name="OnSignalAdded(MathNet.Symbolics.Signal,System.Int32):System.Void" Analyze="True" />
          <Member Name="OnSignalDrivesPort(MathNet.Symbolics.Signal,MathNet.Symbolics.Port,System.Int32):System.Void" Analyze="True" />
          <Member Name="OnSignalDrivesPortNoLonger(MathNet.Symbolics.Signal,MathNet.Symbolics.Port,System.Int32):System.Void" Analyze="True" />
          <Member Name="OnSignalMoved(MathNet.Symbolics.Signal,System.Int32,System.Int32):System.Void" Analyze="True" />
          <Member Name="OnSignalRemoved(MathNet.Symbolics.Signal,System.Int32):System.Void" Analyze="True" />
          <Member Name="OnSignalValueChanged(MathNet.Symbolics.Signal):System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="TextLogWriter" Analyze="True">
         <Members>
          <Member Name=".ctor(System.IO.TextWriter)" Analyze="True" />
          <Member Name="_writer" Analyze="True" />
          <Member Name="WriteEntry(System.DateTime,System.Guid,MathNet.Symbolics.Backend.Channels.LogAction,System.Guid,System.Guid,System.Guid,System.String,System.Int32):System.Void" Analyze="True" />
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="MathNet.Symbolics.Backend.Channels.Commands" Analyze="True">
       <Types>
        <Type Name="AbstractBusCommand" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name=".ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" Analyze="True" />
          <Member Name="_busRef" Analyze="True" />
          <Member Name="Action(MathNet.Symbolics.Bus):System.Void" Analyze="True" />
          <Member Name="BusReference" Analyze="True">
           <Accessors>
            <Accessor Name="get_BusReference():MathNet.Symbolics.Backend.Channels.CommandReference" Analyze="True" />
            <Accessor Name="set_BusReference(MathNet.Symbolics.Backend.Channels.CommandReference):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Execute():System.Void" Analyze="True" />
          <Member Name="GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext):System.Void" Analyze="True" />
          <Member Name="ReadXml(System.Xml.XmlReader):System.Void" Analyze="True" />
          <Member Name="WriteXml(System.Xml.XmlWriter):System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="AbstractCommand" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name=".ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" Analyze="True" />
          <Member Name="Action():System.Void" Analyze="True" />
          <Member Name="Execute():System.Void" Analyze="True" />
          <Member Name="GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext):System.Void" Analyze="True" />
          <Member Name="ReadXml(System.Xml.XmlReader):System.Void" Analyze="True" />
          <Member Name="WriteXml(System.Xml.XmlWriter):System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="AbstractNewCommand" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name=".ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" Analyze="True" />
          <Member Name="_ref" Analyze="True" />
          <Member Name="Action():MathNet.Symbolics.Backend.Channels.CommandReference" Analyze="True" />
          <Member Name="Execute():System.Void" Analyze="True" />
          <Member Name="GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext):System.Void" Analyze="True" />
          <Member Name="NewReference" Analyze="True">
           <Accessors>
            <Accessor Name="get_NewReference():MathNet.Symbolics.Backend.Channels.CommandReference" Analyze="True" />
            <Accessor Name="set_NewReference(MathNet.Symbolics.Backend.Channels.CommandReference):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ReadXml(System.Xml.XmlReader):System.Void" Analyze="True" />
          <Member Name="WriteXml(System.Xml.XmlWriter):System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="AbstractPortBusCommand" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name=".ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" Analyze="True" />
          <Member Name="_busRef" Analyze="True" />
          <Member Name="_portRef" Analyze="True" />
          <Member Name="Action(MathNet.Symbolics.Port,MathNet.Symbolics.Bus):System.Void" Analyze="True" />
          <Member Name="BusReference" Analyze="True">
           <Accessors>
            <Accessor Name="get_BusReference():MathNet.Symbolics.Backend.Channels.CommandReference" Analyze="True" />
            <Accessor Name="set_BusReference(MathNet.Symbolics.Backend.Channels.CommandReference):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Execute():System.Void" Analyze="True" />
          <Member Name="GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext):System.Void" Analyze="True" />
          <Member Name="PortReference" Analyze="True">
           <Accessors>
            <Accessor Name="get_PortReference():MathNet.Symbolics.Backend.Channels.CommandReference" Analyze="True" />
            <Accessor Name="set_PortReference(MathNet.Symbolics.Backend.Channels.CommandReference):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ReadXml(System.Xml.XmlReader):System.Void" Analyze="True" />
          <Member Name="WriteXml(System.Xml.XmlWriter):System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="AbstractPortBusIndexCommand" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name=".ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" Analyze="True" />
          <Member Name="_busRef" Analyze="True" />
          <Member Name="_index" Analyze="True" />
          <Member Name="_portRef" Analyze="True" />
          <Member Name="Action(MathNet.Symbolics.Port,MathNet.Symbolics.Bus,System.Int32):System.Void" Analyze="True" />
          <Member Name="BusReference" Analyze="True">
           <Accessors>
            <Accessor Name="get_BusReference():MathNet.Symbolics.Backend.Channels.CommandReference" Analyze="True" />
            <Accessor Name="set_BusReference(MathNet.Symbolics.Backend.Channels.CommandReference):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Execute():System.Void" Analyze="True" />
          <Member Name="GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext):System.Void" Analyze="True" />
          <Member Name="Index" Analyze="True">
           <Accessors>
            <Accessor Name="get_Index():System.Int32" Analyze="True" />
            <Accessor Name="set_Index(System.Int32):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="PortReference" Analyze="True">
           <Accessors>
            <Accessor Name="get_PortReference():MathNet.Symbolics.Backend.Channels.CommandReference" Analyze="True" />
            <Accessor Name="set_PortReference(MathNet.Symbolics.Backend.Channels.CommandReference):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ReadXml(System.Xml.XmlReader):System.Void" Analyze="True" />
          <Member Name="WriteXml(System.Xml.XmlWriter):System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="AbstractPortCommand" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name=".ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" Analyze="True" />
          <Member Name="_portRef" Analyze="True" />
          <Member Name="Action(MathNet.Symbolics.Port):System.Void" Analyze="True" />
          <Member Name="Execute():System.Void" Analyze="True" />
          <Member Name="GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext):System.Void" Analyze="True" />
          <Member Name="PortReference" Analyze="True">
           <Accessors>
            <Accessor Name="get_PortReference():MathNet.Symbolics.Backend.Channels.CommandReference" Analyze="True" />
            <Accessor Name="set_PortReference(MathNet.Symbolics.Backend.Channels.CommandReference):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ReadXml(System.Xml.XmlReader):System.Void" Analyze="True" />
          <Member Name="WriteXml(System.Xml.XmlWriter):System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="AbstractPortIndexCommand" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name=".ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" Analyze="True" />
          <Member Name="_index" Analyze="True" />
          <Member Name="_portRef" Analyze="True" />
          <Member Name="Action(MathNet.Symbolics.Port,System.Int32):System.Void" Analyze="True" />
          <Member Name="Execute():System.Void" Analyze="True" />
          <Member Name="GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext):System.Void" Analyze="True" />
          <Member Name="Index" Analyze="True">
           <Accessors>
            <Accessor Name="get_Index():System.Int32" Analyze="True" />
            <Accessor Name="set_Index(System.Int32):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="PortReference" Analyze="True">
           <Accessors>
            <Accessor Name="get_PortReference():MathNet.Symbolics.Backend.Channels.CommandReference" Analyze="True" />
            <Accessor Name="set_PortReference(MathNet.Symbolics.Backend.Channels.CommandReference):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ReadXml(System.Xml.XmlReader):System.Void" Analyze="True" />
          <Member Name="WriteXml(System.Xml.XmlWriter):System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="AbstractPortSignalCommand" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name=".ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" Analyze="True" />
          <Member Name="_portRef" Analyze="True" />
          <Member Name="_signalRef" Analyze="True" />
          <Member Name="Action(MathNet.Symbolics.Port,MathNet.Symbolics.Signal):System.Void" Analyze="True" />
          <Member Name="Execute():System.Void" Analyze="True" />
          <Member Name="GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext):System.Void" Analyze="True" />
          <Member Name="PortReference" Analyze="True">
           <Accessors>
            <Accessor Name="get_PortReference():MathNet.Symbolics.Backend.Channels.CommandReference" Analyze="True" />
            <Accessor Name="set_PortReference(MathNet.Symbolics.Backend.Channels.CommandReference):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ReadXml(System.Xml.XmlReader):System.Void" Analyze="True" />
          <Member Name="SignalReference" Analyze="True">
           <Accessors>
            <Accessor Name="get_SignalReference():MathNet.Symbolics.Backend.Channels.CommandReference" Analyze="True" />
            <Accessor Name="set_SignalReference(MathNet.Symbolics.Backend.Channels.CommandReference):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="WriteXml(System.Xml.XmlWriter):System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="AbstractPortSignalIndexCommand" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name=".ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" Analyze="True" />
          <Member Name="_index" Analyze="True" />
          <Member Name="_portRef" Analyze="True" />
          <Member Name="_signalRef" Analyze="True" />
          <Member Name="Action(MathNet.Symbolics.Port,MathNet.Symbolics.Signal,System.Int32):System.Void" Analyze="True" />
          <Member Name="Execute():System.Void" Analyze="True" />
          <Member Name="GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext):System.Void" Analyze="True" />
          <Member Name="Index" Analyze="True">
           <Accessors>
            <Accessor Name="get_Index():System.Int32" Analyze="True" />
            <Accessor Name="set_Index(System.Int32):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="PortReference" Analyze="True">
           <Accessors>
            <Accessor Name="get_PortReference():MathNet.Symbolics.Backend.Channels.CommandReference" Analyze="True" />
            <Accessor Name="set_PortReference(MathNet.Symbolics.Backend.Channels.CommandReference):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ReadXml(System.Xml.XmlReader):System.Void" Analyze="True" />
          <Member Name="SignalReference" Analyze="True">
           <Accessors>
            <Accessor Name="get_SignalReference():MathNet.Symbolics.Backend.Channels.CommandReference" Analyze="True" />
            <Accessor Name="set_SignalReference(MathNet.Symbolics.Backend.Channels.CommandReference):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="WriteXml(System.Xml.XmlWriter):System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="AbstractSignalCommand" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name=".ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" Analyze="True" />
          <Member Name="_signalRef" Analyze="True" />
          <Member Name="Action(MathNet.Symbolics.Signal):System.Void" Analyze="True" />
          <Member Name="Execute():System.Void" Analyze="True" />
          <Member Name="GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext):System.Void" Analyze="True" />
          <Member Name="ReadXml(System.Xml.XmlReader):System.Void" Analyze="True" />
          <Member Name="SignalReference" Analyze="True">
           <Accessors>
            <Accessor Name="get_SignalReference():MathNet.Symbolics.Backend.Channels.CommandReference" Analyze="True" />
            <Accessor Name="set_SignalReference(MathNet.Symbolics.Backend.Channels.CommandReference):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="WriteXml(System.Xml.XmlWriter):System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="BusDrivePortCommand" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name=".ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" Analyze="True" />
          <Member Name="Action(MathNet.Symbolics.Port,MathNet.Symbolics.Bus,System.Int32):System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="BusUnrivePortCommand" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name=".ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" Analyze="True" />
          <Member Name="Action(MathNet.Symbolics.Port,System.Int32):System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="CommandBase" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="_done" Analyze="True" />
          <Member Name="_system" Analyze="True" />
          <Member Name="BeginExecute():System.Boolean" Analyze="True" />
          <Member Name="Done" Analyze="True">
           <Accessors>
            <Accessor Name="get_Done():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Executed" Kind="Event" Analyze="True">
           <Accessors>
            <Accessor Name="add_Executed(System.EventHandler):System.Void" Analyze="True" />
            <Accessor Name="remove_Executed(System.EventHandler):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="EndExecute():System.Void" Analyze="True" />
          <Member Name="Executed" Analyze="True" />
          <Member Name="GetSchema():System.Xml.Schema.XmlSchema" Analyze="True" />
          <Member Name="GetVerifyBus(MathNet.Symbolics.Backend.Channels.CommandReference):MathNet.Symbolics.Bus" Analyze="True" />
          <Member Name="GetVerifyPort(MathNet.Symbolics.Backend.Channels.CommandReference):MathNet.Symbolics.Port" Analyze="True" />
          <Member Name="GetVerifySignal(MathNet.Symbolics.Backend.Channels.CommandReference):MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="LazyVerify(System.Guid,System.Guid):System.Void" Analyze="True" />
          <Member Name="System" Analyze="True">
           <Accessors>
            <Accessor Name="get_System():MathNet.Symbolics.Workplace.MathSystem" Analyze="True" />
            <Accessor Name="set_System(MathNet.Symbolics.Workplace.MathSystem):System.Void" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="NewBusCommand" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name=".ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" Analyze="True" />
          <Member Name="Action():MathNet.Symbolics.Backend.Channels.CommandReference" Analyze="True" />
         </Members>
        </Type>
        <Type Name="NewPortCommand" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name=".ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" Analyze="True" />
          <Member Name="_busCnt" Analyze="True" />
          <Member Name="_entityId" Analyze="True" />
          <Member Name="_inputCnt" Analyze="True" />
          <Member Name="Action():MathNet.Symbolics.Backend.Channels.CommandReference" Analyze="True" />
          <Member Name="EntityId" Analyze="True">
           <Accessors>
            <Accessor Name="get_EntityId():MathNet.Symbolics.MathIdentifier" Analyze="True" />
            <Accessor Name="set_EntityId(MathNet.Symbolics.MathIdentifier):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext):System.Void" Analyze="True" />
          <Member Name="NumberOfBuses" Analyze="True">
           <Accessors>
            <Accessor Name="get_NumberOfBuses():System.Int32" Analyze="True" />
            <Accessor Name="set_NumberOfBuses(System.Int32):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="NumberOfInputs" Analyze="True">
           <Accessors>
            <Accessor Name="get_NumberOfInputs():System.Int32" Analyze="True" />
            <Accessor Name="set_NumberOfInputs(System.Int32):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ReadXml(System.Xml.XmlReader):System.Void" Analyze="True" />
          <Member Name="WriteXml(System.Xml.XmlWriter):System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="NewSignalCommand" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name=".ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" Analyze="True" />
          <Member Name="Action():MathNet.Symbolics.Backend.Channels.CommandReference" Analyze="True" />
         </Members>
        </Type>
        <Type Name="PortDriveSignalCommand" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name=".ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" Analyze="True" />
          <Member Name="Action(MathNet.Symbolics.Port,MathNet.Symbolics.Signal,System.Int32):System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="PortUndriveSignalCommand" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name=".ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" Analyze="True" />
          <Member Name="Action(MathNet.Symbolics.Port,System.Int32):System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="RemoveBusCommand" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name=".ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" Analyze="True" />
          <Member Name="Action(MathNet.Symbolics.Bus):System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="RemovePortCommand" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name=".ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" Analyze="True" />
          <Member Name="_isolate" Analyze="True" />
          <Member Name="Action(MathNet.Symbolics.Port):System.Void" Analyze="True" />
          <Member Name="GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext):System.Void" Analyze="True" />
          <Member Name="Isolate" Analyze="True">
           <Accessors>
            <Accessor Name="get_Isolate():System.Boolean" Analyze="True" />
            <Accessor Name="set_Isolate(System.Boolean):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ReadXml(System.Xml.XmlReader):System.Void" Analyze="True" />
          <Member Name="WriteXml(System.Xml.XmlWriter):System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="RemoveSignalCommand" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name=".ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" Analyze="True" />
          <Member Name="_isolate" Analyze="True" />
          <Member Name="Action(MathNet.Symbolics.Signal):System.Void" Analyze="True" />
          <Member Name="GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext):System.Void" Analyze="True" />
          <Member Name="Isolate" Analyze="True">
           <Accessors>
            <Accessor Name="get_Isolate():System.Boolean" Analyze="True" />
            <Accessor Name="set_Isolate(System.Boolean):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ReadXml(System.Xml.XmlReader):System.Void" Analyze="True" />
          <Member Name="WriteXml(System.Xml.XmlWriter):System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="SignalDrivePortCommand" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name=".ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" Analyze="True" />
          <Member Name="Action(MathNet.Symbolics.Port,MathNet.Symbolics.Signal,System.Int32):System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="SignalUnrivePortCommand" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name=".ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" Analyze="True" />
          <Member Name="Action(MathNet.Symbolics.Port,System.Int32):System.Void" Analyze="True" />
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="MathNet.Symbolics.Backend.Containers" Analyze="True">
       <Types>
        <Type Name="IdentifierDictionary`1" Analyze="True">
         <Members>
          <Member Name=".ctor(System.Int32,System.Int32)" Analyze="True" />
          <Member Name="_labelCapacity" Analyze="True" />
          <Member Name="Add(MathNet.Symbolics.MathIdentifier,T):System.Void" Analyze="True" />
          <Member Name="ContainsKey(MathNet.Symbolics.MathIdentifier):System.Boolean" Analyze="True" />
          <Member Name="FindDomainOfLabel(System.String):System.String" Analyze="True" />
          <Member Name="FindValue(System.Predicate`1&lt;T&gt;):T" Analyze="True" />
          <Member Name="GetValue(MathNet.Symbolics.MathIdentifier):T" Analyze="True" />
          <Member Name="Remove(MathNet.Symbolics.MathIdentifier):System.Void" Analyze="True" />
          <Member Name="SelectAll():System.Collections.Generic.IEnumerable`1&lt;T&gt;" Analyze="True" />
          <Member Name="System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator():System.Collections.Generic.IEnumerator`1&lt;T&gt;" Analyze="True" />
          <Member Name="TryFindDomainOfLabel(System.String,System.String&amp;):System.Boolean" Analyze="True" />
          <Member Name="TryFindValue(System.Predicate`1&lt;T&gt;,T&amp;):System.Boolean" Analyze="True" />
          <Member Name="TryGetValue(MathNet.Symbolics.MathIdentifier,T&amp;):System.Boolean" Analyze="True" />
          <Member Name="TryGetValue(MathNet.Symbolics.MathIdentifier,TSub&amp;):System.Boolean" Analyze="True" />
         </Members>
        </Type>
        <Type Name="IdentifierDictionary`1+&lt;SelectAll&gt;d__0" Analyze="True">
         <Members>
          <Member Name=".ctor(System.Int32)" Analyze="True" />
          <Member Name="&lt;&gt;1__state" Analyze="True" />
          <Member Name="&lt;&gt;2__current" Analyze="True" />
          <Member Name="&lt;&gt;4__this" Analyze="True" />
          <Member Name="&lt;&gt;7__wrap3" Analyze="True" />
          <Member Name="&lt;&gt;7__wrap4" Analyze="True" />
          <Member Name="&lt;inner&gt;5__1" Analyze="True" />
          <Member Name="&lt;value&gt;5__2" Analyze="True" />
          <Member Name="MoveNext():System.Boolean" Analyze="True" />
          <Member Name="System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator():System.Collections.Generic.IEnumerator`1&lt;T&gt;" Analyze="True" />
          <Member Name="System.Collections.Generic.IEnumerator&lt;T&gt;.Current" Analyze="True">
           <Accessors>
            <Accessor Name="System.Collections.Generic.IEnumerator&lt;T&gt;.get_Current():T" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="System.Collections.IEnumerable.GetEnumerator():System.Collections.IEnumerator" Analyze="True" />
          <Member Name="System.Collections.IEnumerator.Current" Analyze="True">
           <Accessors>
            <Accessor Name="System.Collections.IEnumerator.get_Current():System.Object" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="System.Collections.IEnumerator.Reset():System.Void" Analyze="True" />
          <Member Name="System.IDisposable.Dispose():System.Void" Analyze="True" />
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="MathNet.Symbolics.Backend.Properties" Analyze="True">
       <Types>
        <Type Name="PropertyBag" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="_properties" Analyze="True" />
          <Member Name="_table" Analyze="True" />
          <Member Name="AddProperty(MathNet.Symbolics.IProperty):System.Void" Analyze="True" />
          <Member Name="AddPropertyRange(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.IProperty&gt;):System.Void" Analyze="True" />
          <Member Name="ContainsProperty(MathNet.Symbolics.MathIdentifier):System.Boolean" Analyze="True" />
          <Member Name="Count" Analyze="True">
           <Accessors>
            <Accessor Name="get_Count():System.Int32" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="GetEnumerator():System.Collections.Generic.IEnumerator`1&lt;MathNet.Symbolics.IProperty&gt;" Analyze="True" />
          <Member Name="Item[System.Int32]" Analyze="True">
           <Accessors>
            <Accessor Name="get_Item(System.Int32):MathNet.Symbolics.IProperty" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="LookupProperty(MathNet.Symbolics.MathIdentifier):MathNet.Symbolics.IProperty" Analyze="True" />
          <Member Name="RemoveAllProperties():System.Void" Analyze="True" />
          <Member Name="RemoveProperty(MathNet.Symbolics.IProperty):System.Void" Analyze="True" />
          <Member Name="RemoveProperty(MathNet.Symbolics.MathIdentifier):System.Void" Analyze="True" />
          <Member Name="System.Collections.IEnumerable.GetEnumerator():System.Collections.IEnumerator" Analyze="True" />
          <Member Name="TryLookupProperty(MathNet.Symbolics.MathIdentifier,MathNet.Symbolics.IProperty&amp;):System.Boolean" Analyze="True" />
          <Member Name="TryLookupProperty(MathNet.Symbolics.MathIdentifier,T&amp;):System.Boolean" Analyze="True" />
          <Member Name="ValidatePropertiesAfterDrive(MathNet.Symbolics.Signal):System.Void" Analyze="True" />
          <Member Name="ValidatePropertiesAfterEvent(MathNet.Symbolics.Signal):System.Void" Analyze="True" />
          <Member Name="ValidatePropertiesAfterUndrive(MathNet.Symbolics.Signal):System.Void" Analyze="True" />
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="MathNet.Symbolics.Backend.Templates" Analyze="True">
       <Types>
        <Type Name="CompoundArchitecture" Analyze="True">
         <Members>
          <Member Name=".ctor(MathNet.Symbolics.MathIdentifier,MathNet.Symbolics.MathIdentifier,MathNet.Symbolics.Port,MathNet.Symbolics.IMathSystem)" Analyze="True" />
          <Member Name="CompoundArchitecture_SignalValueChanged(System.Object,MathNet.Symbolics.Events.ValueNodeEventArgs):System.Void" Analyze="True" />
          <Member Name="inputSignals" Analyze="True" />
          <Member Name="outputSignals" Analyze="True" />
          <Member Name="ReregisterArchitecture(MathNet.Symbolics.Port,MathNet.Symbolics.Port):System.Void" Analyze="True" />
          <Member Name="SupportsPort(MathNet.Symbolics.Port):System.Boolean" Analyze="True" />
          <Member Name="system" Analyze="True" />
          <Member Name="system_OutputValueChanged(System.Object,MathNet.Symbolics.Events.IndexedSignalEventArgs):System.Void" Analyze="True" />
          <Member Name="UnregisterArchitecture():System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="CompoundArchitectureFactory" Analyze="True">
         <Members>
          <Member Name=".ctor(MathNet.Symbolics.MathIdentifier,MathNet.Symbolics.MathIdentifier,MathNet.Symbolics.Workplace.MathSystem)" Analyze="True" />
          <Member Name=".ctor(MathNet.Symbolics.MathIdentifier,MathNet.Symbolics.MathIdentifier,System.String)" Analyze="True" />
          <Member Name=".ctor(MathNet.Symbolics.MathIdentifier,MathNet.Symbolics.MathIdentifier,System.String,System.Int32,System.Int32,System.Int32)" Analyze="True" />
          <Member Name="_architectureId" Analyze="True" />
          <Member Name="_busCnt" Analyze="True" />
          <Member Name="_entityId" Analyze="True" />
          <Member Name="_inputCnt" Analyze="True" />
          <Member Name="_outputCnt" Analyze="True" />
          <Member Name="_xml" Analyze="True" />
          <Member Name="EntityId" Analyze="True">
           <Accessors>
            <Accessor Name="get_EntityId():MathNet.Symbolics.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="InstantiateToPort(MathNet.Symbolics.Port):MathNet.Symbolics.IArchitecture" Analyze="True" />
          <Member Name="SupportsPort(MathNet.Symbolics.Port):System.Boolean" Analyze="True" />
         </Members>
        </Type>
        <Type Name="CompoundProcess" Analyze="True">
         <Members>
          <Member Name=".ctor(MathNet.Symbolics.Workplace.MathSystem,System.Int32[],System.Int32[],System.Int32[])" Analyze="True" />
          <Member Name="Action(System.Boolean,MathNet.Symbolics.Signal):System.Void" Analyze="True" />
          <Member Name="buses" Analyze="True" />
          <Member Name="busIndexes" Analyze="True" />
          <Member Name="inputSignalIndexes" Analyze="True" />
          <Member Name="inputSignals" Analyze="True" />
          <Member Name="outputSignalIndexes" Analyze="True" />
          <Member Name="outputSignals" Analyze="True" />
          <Member Name="Register(System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Signal&gt;,System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Signal&gt;,System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Signal&gt;,System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Bus&gt;):System.Void" Analyze="True" />
          <Member Name="system" Analyze="True" />
          <Member Name="system_OutputValueChanged(System.Object,MathNet.Symbolics.Events.IndexedSignalEventArgs):System.Void" Analyze="True" />
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="MathNet.Symbolics.Core" Analyze="True">
       <Types>
        <Type Name="Architecture" Analyze="True">
         <Members>
          <Member Name=".ctor(MathNet.Symbolics.MathIdentifier,MathNet.Symbolics.MathIdentifier,System.Boolean)" Analyze="True" />
          <Member Name="_entityId" Analyze="True" />
          <Member Name="_id" Analyze="True" />
          <Member Name="_isInstance" Analyze="True" />
          <Member Name="_isMathematicalOperator" Analyze="True" />
          <Member Name="_port" Analyze="True" />
          <Member Name="ArchitectureId" Analyze="True">
           <Accessors>
            <Accessor Name="get_ArchitectureId():MathNet.Symbolics.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="EntityId" Analyze="True">
           <Accessors>
            <Accessor Name="get_EntityId():MathNet.Symbolics.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ExecuteMathematicalOperator():MathNet.Symbolics.Backend.Containers.ISignalSet" Analyze="True" />
          <Member Name="IsInstance" Analyze="True">
           <Accessors>
            <Accessor Name="get_IsInstance():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="IsMathematicalOperator" Analyze="True">
           <Accessors>
            <Accessor Name="get_IsMathematicalOperator():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Port" Analyze="True">
           <Accessors>
            <Accessor Name="get_Port():MathNet.Symbolics.Port" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="RebindToPortIfSupported(MathNet.Symbolics.Port):System.Boolean" Analyze="True" />
          <Member Name="ReregisterArchitecture(MathNet.Symbolics.Port,MathNet.Symbolics.Port):System.Void" Analyze="True" />
          <Member Name="SetPort(MathNet.Symbolics.Port):System.Void" Analyze="True" />
          <Member Name="SupportsPort(MathNet.Symbolics.Port):System.Boolean" Analyze="True" />
          <Member Name="ToString():System.String" Analyze="True" />
          <Member Name="UnregisterArchitecture():System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="Bus" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name=".ctor(MathNet.Symbolics.IValueStructure)" Analyze="True" />
          <Member Name="MathNet.Symbolics.IBus_BuilderAdapter.AcceptSystemBuilderAfter(MathNet.Symbolics.ISystemBuilder,System.Collections.Generic.Dictionary`2&lt;System.Guid,System.Guid&gt;,System.Collections.Generic.Dictionary`2&lt;System.Guid,System.Guid&gt;):System.Void" Analyze="True" />
          <Member Name="MathNet.Symbolics.IBus_BuilderAdapter.AcceptSystemBuilderBefore(MathNet.Symbolics.ISystemBuilder):System.Guid" Analyze="True" />
          <Member Name="MathNet.Symbolics.Simulation.ISchedulable.CurrentValue" Analyze="True">
           <Accessors>
            <Accessor Name="MathNet.Symbolics.Simulation.ISchedulable.get_CurrentValue():MathNet.Symbolics.IValueStructure" Analyze="True" />
            <Accessor Name="MathNet.Symbolics.Simulation.ISchedulable.set_CurrentValue(MathNet.Symbolics.IValueStructure):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="MathNet.Symbolics.Simulation.ISchedulable.get_InstanceId():System.Guid" Analyze="True" />
          <Member Name="MathNet.Symbolics.Simulation.ISchedulable.HasEvent" Analyze="True">
           <Accessors>
            <Accessor Name="MathNet.Symbolics.Simulation.ISchedulable.get_HasEvent():System.Boolean" Analyze="True" />
            <Accessor Name="MathNet.Symbolics.Simulation.ISchedulable.set_HasEvent(System.Boolean):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="MathNet.Symbolics.Simulation.ISchedulable.NotifyOutputsNewValue():System.Void" Analyze="True" />
          <Member Name="PostNewValue(MathNet.Symbolics.IValueStructure):System.Void" Analyze="True" />
          <Member Name="PostNewValue(MathNet.Symbolics.IValueStructure,System.TimeSpan):System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="Entity" Analyze="True">
         <Members>
          <Member Name=".ctor(System.String,MathNet.Symbolics.MathIdentifier,MathNet.Symbolics.InfixNotation,System.Int32,System.Boolean)" Analyze="True" />
          <Member Name=".ctor(System.String,MathNet.Symbolics.MathIdentifier,MathNet.Symbolics.InfixNotation,System.Int32,System.Boolean,System.String[])" Analyze="True" />
          <Member Name=".ctor(System.String,MathNet.Symbolics.MathIdentifier,MathNet.Symbolics.InfixNotation,System.Int32,System.String[],System.String[])" Analyze="True" />
          <Member Name=".ctor(System.String,MathNet.Symbolics.MathIdentifier,MathNet.Symbolics.InfixNotation,System.Int32,System.String[],System.String[],System.String[])" Analyze="True" />
          <Member Name=".ctor(System.String,System.String,System.String,MathNet.Symbolics.InfixNotation,System.Int32,System.Boolean)" Analyze="True" />
          <Member Name=".ctor(System.String,System.String,System.String,MathNet.Symbolics.InfixNotation,System.Int32,System.Boolean,System.String[])" Analyze="True" />
          <Member Name=".ctor(System.String,System.String,System.String,MathNet.Symbolics.InfixNotation,System.Int32,System.String[],System.String[])" Analyze="True" />
          <Member Name=".ctor(System.String,System.String,System.String,MathNet.Symbolics.InfixNotation,System.Int32,System.String[],System.String[],System.String[])" Analyze="True" />
          <Member Name="_busLabels" Analyze="True" />
          <Member Name="_id" Analyze="True" />
          <Member Name="_inputSignalLabels" Analyze="True" />
          <Member Name="_isGeneric" Analyze="True" />
          <Member Name="_notation" Analyze="True" />
          <Member Name="_outputSignalLabels" Analyze="True" />
          <Member Name="_precedenceGroup" Analyze="True" />
          <Member Name="_symbol" Analyze="True" />
          <Member Name="Buses" Analyze="True">
           <Accessors>
            <Accessor Name="get_Buses():System.String[]" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="CompileGenericEntity(System.Int32,System.Int32):MathNet.Symbolics.IEntity" Analyze="True" />
          <Member Name="EntityId" Analyze="True">
           <Accessors>
            <Accessor Name="get_EntityId():MathNet.Symbolics.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Equals(MathNet.Symbolics.Core.Entity):System.Boolean" Analyze="True" />
          <Member Name="Equals(MathNet.Symbolics.IEntity):System.Boolean" Analyze="True" />
          <Member Name="Equals(System.Object):System.Boolean" Analyze="True" />
          <Member Name="EqualsById(MathNet.Symbolics.IEntity):System.Boolean" Analyze="True" />
          <Member Name="EqualsById(MathNet.Symbolics.MathIdentifier):System.Boolean" Analyze="True" />
          <Member Name="GetHashCode():System.Int32" Analyze="True" />
          <Member Name="InputSignals" Analyze="True">
           <Accessors>
            <Accessor Name="get_InputSignals():System.String[]" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="InstantiatePort(MathNet.Symbolics.Signal[]):MathNet.Symbolics.Port" Analyze="True" />
          <Member Name="InstantiatePort(System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Signal&gt;):MathNet.Symbolics.Port" Analyze="True" />
          <Member Name="InstantiatePort(System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Signal&gt;,System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Signal&gt;):MathNet.Symbolics.Port" Analyze="True" />
          <Member Name="InstantiatePort(System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Signal&gt;,System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Signal&gt;,System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Bus&gt;):MathNet.Symbolics.Port" Analyze="True" />
          <Member Name="InstantiateUnboundPort():MathNet.Symbolics.Port" Analyze="True" />
          <Member Name="IsGeneric" Analyze="True">
           <Accessors>
            <Accessor Name="get_IsGeneric():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Notation" Analyze="True">
           <Accessors>
            <Accessor Name="get_Notation():MathNet.Symbolics.InfixNotation" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="OutputSignals" Analyze="True">
           <Accessors>
            <Accessor Name="get_OutputSignals():System.String[]" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="PrecedenceGroup" Analyze="True">
           <Accessors>
            <Accessor Name="get_PrecedenceGroup():System.Int32" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Symbol" Analyze="True">
           <Accessors>
            <Accessor Name="get_Symbol():System.String" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ToString():System.String" Analyze="True" />
         </Members>
        </Type>
        <Type Name="Port" Analyze="True">
         <Members>
          <Member Name=".ctor(MathNet.Symbolics.IEntity)" Analyze="True" />
          <Member Name=".ctor(MathNet.Symbolics.IEntity,System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Signal&gt;)" Analyze="True" />
          <Member Name="_busSet" Analyze="True" />
          <Member Name="_completelyConnected" Analyze="True" />
          <Member Name="_currentArchitecture" Analyze="True" />
          <Member Name="_entity" Analyze="True" />
          <Member Name="_inputSignalSet" Analyze="True" />
          <Member Name="_outputSignalSet" Analyze="True" />
          <Member Name="_tag" Analyze="True" />
          <Member Name="AddBusBinding(System.Int32,MathNet.Symbolics.Bus):System.Void" Analyze="True" />
          <Member Name="AddInputSignalBinding(System.Int32,MathNet.Symbolics.Signal):System.Void" Analyze="True" />
          <Member Name="AddOutputSignalBinding(System.Int32,MathNet.Symbolics.Signal):System.Void" Analyze="True" />
          <Member Name="BindBuses(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Bus&gt;):System.Void" Analyze="True" />
          <Member Name="BindInputSignals(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Signal&gt;):System.Void" Analyze="True" />
          <Member Name="BuilderMapBuses(MathNet.Symbolics.Backend.Containers.BusSet,System.Collections.Generic.Dictionary`2&lt;System.Guid,System.Guid&gt;):MathNet.Symbolics.Backend.Containers.InstanceIdSet" Analyze="True" />
          <Member Name="BuilderMapSignals(MathNet.Symbolics.Backend.Containers.SignalSet,System.Collections.Generic.Dictionary`2&lt;System.Guid,System.Guid&gt;):MathNet.Symbolics.Backend.Containers.InstanceIdSet" Analyze="True" />
          <Member Name="BusCount" Analyze="True">
           <Accessors>
            <Accessor Name="get_BusCount():System.Int32" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Buses" Analyze="True">
           <Accessors>
            <Accessor Name="get_Buses():MathNet.Symbolics.Backend.Containers.ReadOnlyBusSet" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="CloneWithNewInputs(System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Signal&gt;):MathNet.Symbolics.Port" Analyze="True" />
          <Member Name="CurrentArchitecture" Analyze="True">
           <Accessors>
            <Accessor Name="get_CurrentArchitecture():MathNet.Symbolics.IArchitecture" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="DependsOn(MathNet.Symbolics.MathIdentifier):System.Boolean" Analyze="True" />
          <Member Name="DependsOn(MathNet.Symbolics.Port):System.Boolean" Analyze="True" />
          <Member Name="DependsOn(MathNet.Symbolics.Signal):System.Boolean" Analyze="True" />
          <Member Name="EnsureArchitectureLink():System.Boolean" Analyze="True" />
          <Member Name="Entity" Analyze="True">
           <Accessors>
            <Accessor Name="get_Entity():MathNet.Symbolics.IEntity" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Equals(System.Object):System.Boolean" Analyze="True" />
          <Member Name="GetHashCode():System.Int32" Analyze="True" />
          <Member Name="HasArchitectureLink" Analyze="True">
           <Accessors>
            <Accessor Name="get_HasArchitectureLink():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="IndexOfOutputSignal(MathNet.Symbolics.Signal):System.Int32" Analyze="True" />
          <Member Name="InputSignalCount" Analyze="True">
           <Accessors>
            <Accessor Name="get_InputSignalCount():System.Int32" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="InputSignals" Analyze="True">
           <Accessors>
            <Accessor Name="get_InputSignals():MathNet.Symbolics.Backend.Containers.ReadOnlySignalSet" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="IsCompletelyConnected" Analyze="True">
           <Accessors>
            <Accessor Name="get_IsCompletelyConnected():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Item[System.Int32]" Analyze="True">
           <Accessors>
            <Accessor Name="get_Item(System.Int32):MathNet.Symbolics.Signal" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="LookupAndLinkNewArchitecture():System.Boolean" Analyze="True" />
          <Member Name="MathNet.Symbolics.IPort_BuilderAdapter.AcceptSystemBuilder(MathNet.Symbolics.ISystemBuilder,System.Collections.Generic.Dictionary`2&lt;System.Guid,System.Guid&gt;,System.Collections.Generic.Dictionary`2&lt;System.Guid,System.Guid&gt;):System.Guid" Analyze="True" />
          <Member Name="MathNet.Symbolics.IPort_CycleAnalysis.DeTag(System.Int32):System.Void" Analyze="True" />
          <Member Name="MathNet.Symbolics.IPort_CycleAnalysis.TagWasTagged(System.Int32):System.Boolean" Analyze="True" />
          <Member Name="OutputSignalCount" Analyze="True">
           <Accessors>
            <Accessor Name="get_OutputSignalCount():System.Int32" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="OutputSignals" Analyze="True">
           <Accessors>
            <Accessor Name="get_OutputSignals():MathNet.Symbolics.Backend.Containers.ReadOnlySignalSet" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Port_SignalValueChanged(System.Object,MathNet.Symbolics.Events.ValueNodeEventArgs):System.Void" Analyze="True" />
          <Member Name="RemoveAllBindings():System.Void" Analyze="True" />
          <Member Name="RemoveBusBinding(System.Int32):System.Void" Analyze="True" />
          <Member Name="RemoveInputSignalBinding(System.Int32):System.Void" Analyze="True" />
          <Member Name="RemoveLinkedArchitecture():System.Void" Analyze="True" />
          <Member Name="RemoveOutputSignalBinding(System.Int32):System.Void" Analyze="True" />
          <Member Name="ReplaceBusBinding(System.Int32,MathNet.Symbolics.Bus):System.Void" Analyze="True" />
          <Member Name="ReplaceInputSignalBinding(System.Int32,MathNet.Symbolics.Signal):System.Void" Analyze="True" />
          <Member Name="ReplaceOutputSignalBinding(System.Int32,MathNet.Symbolics.Signal):System.Void" Analyze="True" />
          <Member Name="ToString():System.String" Analyze="True" />
          <Member Name="UpdateIsCompletelyConnected():System.Boolean" Analyze="True" />
         </Members>
        </Type>
        <Type Name="Port+&lt;&gt;c__DisplayClass1" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="&lt;DependsOn&gt;b__0(MathNet.Symbolics.Port):System.Boolean" Analyze="True" />
          <Member Name="portEntity" Analyze="True" />
         </Members>
        </Type>
        <Type Name="Port+&lt;&gt;c__DisplayClass4" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="&lt;BuilderMapSignals&gt;b__3(MathNet.Symbolics.Signal):System.Guid" Analyze="True" />
          <Member Name="signalMappings" Analyze="True" />
         </Members>
        </Type>
        <Type Name="Port+&lt;&gt;c__DisplayClass7" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="&lt;BuilderMapBuses&gt;b__6(MathNet.Symbolics.Bus):System.Guid" Analyze="True" />
          <Member Name="busMappings" Analyze="True" />
         </Members>
        </Type>
        <Type Name="Process" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="Action(System.Boolean,MathNet.Symbolics.Signal):System.Void" Analyze="True" />
          <Member Name="Continue():System.Void" Analyze="True" />
          <Member Name="ForceUpdate():System.Void" Analyze="True" />
          <Member Name="Pause():System.Void" Analyze="True" />
          <Member Name="paused" Analyze="True" />
          <Member Name="Paused" Analyze="True">
           <Accessors>
            <Accessor Name="get_Paused():System.Boolean" Analyze="True" />
            <Accessor Name="set_Paused(System.Boolean):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Register(System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Signal&gt;,System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Signal&gt;,System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Signal&gt;,System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Bus&gt;):System.Void" Analyze="True" />
          <Member Name="SenseSignal(MathNet.Symbolics.Signal):System.Void" Analyze="True" />
          <Member Name="sensitiveSignals" Analyze="True" />
          <Member Name="signal_SignalValueChanged(System.Object,MathNet.Symbolics.Events.ValueNodeEventArgs):System.Void" Analyze="True" />
          <Member Name="StopSenseSignal(MathNet.Symbolics.Signal):System.Void" Analyze="True" />
          <Member Name="Unregister():System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="Signal" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name=".ctor(MathNet.Symbolics.IValueStructure)" Analyze="True" />
          <Member Name="_constraints" Analyze="True" />
          <Member Name="_cycleCount" Analyze="True" />
          <Member Name="_drivenByPort" Analyze="True" />
          <Member Name="_hold" Analyze="True" />
          <Member Name="_isSourceSignal" Analyze="True" />
          <Member Name="_properties" Analyze="True" />
          <Member Name="AddConstraint(MathNet.Symbolics.IProperty):System.Void" Analyze="True" />
          <Member Name="AddCycles(MathNet.Symbolics.Signal,System.Int32):System.Int32" Analyze="True" />
          <Member Name="AddSignalCore(MathNet.Symbolics.Signal):MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="AskForProperty(MathNet.Symbolics.MathIdentifier):System.Boolean" Analyze="True" />
          <Member Name="Constraints" Analyze="True">
           <Accessors>
            <Accessor Name="get_Constraints():MathNet.Symbolics.Backend.Properties.PropertyBag" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Cycles" Analyze="True">
           <Accessors>
            <Accessor Name="get_Cycles():System.Int32" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="DependsOn(MathNet.Symbolics.MathIdentifier):System.Boolean" Analyze="True" />
          <Member Name="DependsOn(MathNet.Symbolics.Port):System.Boolean" Analyze="True" />
          <Member Name="DependsOn(MathNet.Symbolics.Signal):System.Boolean" Analyze="True" />
          <Member Name="DivideSignalCore(MathNet.Symbolics.Signal):MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="DrivenByPort" Analyze="True">
           <Accessors>
            <Accessor Name="get_DrivenByPort():MathNet.Symbolics.Port" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="HasProperty(MathNet.Symbolics.MathIdentifier):System.Boolean" Analyze="True" />
          <Member Name="Hold" Analyze="True">
           <Accessors>
            <Accessor Name="get_Hold():System.Boolean" Analyze="True" />
            <Accessor Name="set_Hold(System.Boolean):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="IsCyclic" Analyze="True">
           <Accessors>
            <Accessor Name="get_IsCyclic():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="IsDriven" Analyze="True">
           <Accessors>
            <Accessor Name="get_IsDriven():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="IsSourceSignal" Analyze="True">
           <Accessors>
            <Accessor Name="get_IsSourceSignal():System.Boolean" Analyze="True" />
            <Accessor Name="set_IsSourceSignal(System.Boolean):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="MathNet.Symbolics.ISignal_BuilderAdapter.AcceptSystemBuilderAfter(MathNet.Symbolics.ISystemBuilder,System.Collections.Generic.Dictionary`2&lt;System.Guid,System.Guid&gt;,System.Collections.Generic.Dictionary`2&lt;System.Guid,System.Guid&gt;):System.Void" Analyze="True" />
          <Member Name="MathNet.Symbolics.ISignal_BuilderAdapter.AcceptSystemBuilderBefore(MathNet.Symbolics.ISystemBuilder):System.Guid" Analyze="True" />
          <Member Name="MathNet.Symbolics.ISignal_BuilderAdapter.BuilderAppendConstraint(MathNet.Symbolics.IProperty):System.Void" Analyze="True" />
          <Member Name="MathNet.Symbolics.ISignal_BuilderAdapter.BuilderAppendProperty(MathNet.Symbolics.IProperty):System.Void" Analyze="True" />
          <Member Name="MathNet.Symbolics.ISignal_BuilderAdapter.BuilderSetValue(MathNet.Symbolics.IValueStructure):System.Void" Analyze="True" />
          <Member Name="MathNet.Symbolics.ISignal_Drive.DriveSignal(MathNet.Symbolics.Port,System.Int32):System.Void" Analyze="True" />
          <Member Name="MathNet.Symbolics.ISignal_Drive.UndriveSignal(System.Int32):System.Void" Analyze="True" />
          <Member Name="MathNet.Symbolics.Simulation.ISchedulable.CurrentValue" Analyze="True">
           <Accessors>
            <Accessor Name="MathNet.Symbolics.Simulation.ISchedulable.get_CurrentValue():MathNet.Symbolics.IValueStructure" Analyze="True" />
            <Accessor Name="MathNet.Symbolics.Simulation.ISchedulable.set_CurrentValue(MathNet.Symbolics.IValueStructure):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="MathNet.Symbolics.Simulation.ISchedulable.get_InstanceId():System.Guid" Analyze="True" />
          <Member Name="MathNet.Symbolics.Simulation.ISchedulable.HasEvent" Analyze="True">
           <Accessors>
            <Accessor Name="MathNet.Symbolics.Simulation.ISchedulable.get_HasEvent():System.Boolean" Analyze="True" />
            <Accessor Name="MathNet.Symbolics.Simulation.ISchedulable.set_HasEvent(System.Boolean):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="MathNet.Symbolics.Simulation.ISchedulable.NotifyOutputsNewValue():System.Void" Analyze="True" />
          <Member Name="MultiplySignalCore(MathNet.Symbolics.Signal):MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="NegateSignalCore():MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="PostNewValue(MathNet.Symbolics.IValueStructure):System.Void" Analyze="True" />
          <Member Name="PostNewValue(MathNet.Symbolics.IValueStructure,System.TimeSpan):System.Void" Analyze="True" />
          <Member Name="Properties" Analyze="True">
           <Accessors>
            <Accessor Name="get_Properties():MathNet.Symbolics.Backend.Properties.PropertyBag" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="RemoveAllConstraints():System.Void" Analyze="True" />
          <Member Name="RemoveCycles(MathNet.Symbolics.Signal,System.Int32):System.Int32" Analyze="True" />
          <Member Name="SubtractSignalCore(MathNet.Symbolics.Signal):MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="ToString():System.String" Analyze="True" />
         </Members>
        </Type>
        <Type Name="Signal+&lt;&gt;c__DisplayClass1" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="&lt;DependsOn&gt;b__0(MathNet.Symbolics.Port):System.Boolean" Analyze="True" />
          <Member Name="portEntity" Analyze="True" />
         </Members>
        </Type>
        <Type Name="ValueStructure" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="CollectBuses():System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Bus&gt;" Analyze="True" />
          <Member Name="CollectSignals():System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Signal&gt;" Analyze="True" />
          <Member Name="Equals(MathNet.Symbolics.IValueStructure):System.Boolean" Analyze="True" />
          <Member Name="Equals(System.Object):System.Boolean" Analyze="True" />
          <Member Name="EqualsById(MathNet.Symbolics.IValueStructure):System.Boolean" Analyze="True" />
          <Member Name="EqualsById(MathNet.Symbolics.MathIdentifier):System.Boolean" Analyze="True" />
          <Member Name="ReferencesCoreObjects" Analyze="True">
           <Accessors>
            <Accessor Name="get_ReferencesCoreObjects():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Serialize(System.Xml.XmlWriter,System.Collections.Generic.IDictionary`2&lt;System.Guid,System.Guid&gt;,System.Collections.Generic.IDictionary`2&lt;System.Guid,System.Guid&gt;):System.Void" Analyze="True" />
          <Member Name="ToString():System.String" Analyze="True" />
          <Member Name="TypeId" Analyze="True">
           <Accessors>
            <Accessor Name="get_TypeId():MathNet.Symbolics.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="MathNet.Symbolics.Properties" Analyze="True">
       <Types>
        <Type Name="Resources" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="Culture" Analyze="True">
           <Accessors>
            <Accessor Name="get_Culture():System.Globalization.CultureInfo" Analyze="True" />
            <Accessor Name="set_Culture(System.Globalization.CultureInfo):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ex_CyclicSignalsNotSupportes" Analyze="True">
           <Accessors>
            <Accessor Name="get_ex_CyclicSignalsNotSupportes():System.String" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ex_Deserialize_Failed_GenericEntity" Analyze="True">
           <Accessors>
            <Accessor Name="get_ex_Deserialize_Failed_GenericEntity():System.String" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ex_Deserialize_Failed_UnexpectedPosition" Analyze="True">
           <Accessors>
            <Accessor Name="get_ex_Deserialize_Failed_UnexpectedPosition():System.String" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ex_Deserialize_Failed_UnsupportedCategory" Analyze="True">
           <Accessors>
            <Accessor Name="get_ex_Deserialize_Failed_UnsupportedCategory():System.String" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ex_Deserialize_Failed_UnsupportedStructure" Analyze="True">
           <Accessors>
            <Accessor Name="get_ex_Deserialize_Failed_UnsupportedStructure():System.String" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ex_Entity_Unexpected_SignalCount" Analyze="True">
           <Accessors>
            <Accessor Name="get_ex_Entity_Unexpected_SignalCount():System.String" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ex_NotAvailable_Architecture" Analyze="True">
           <Accessors>
            <Accessor Name="get_ex_NotAvailable_Architecture():System.String" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ex_NotAvailable_Domain" Analyze="True">
           <Accessors>
            <Accessor Name="get_ex_NotAvailable_Domain():System.String" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ex_NotAvailable_Entity" Analyze="True">
           <Accessors>
            <Accessor Name="get_ex_NotAvailable_Entity():System.String" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ex_NotFound" Analyze="True">
           <Accessors>
            <Accessor Name="get_ex_NotFound():System.String" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ex_NotImplementedYet" Analyze="True">
           <Accessors>
            <Accessor Name="get_ex_NotImplementedYet():System.String" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ex_Parsing_Failed_TokenMismatch" Analyze="True">
           <Accessors>
            <Accessor Name="get_ex_Parsing_Failed_TokenMismatch():System.String" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ex_Parsing_Failed_TokenMismatchEx" Analyze="True">
           <Accessors>
            <Accessor Name="get_ex_Parsing_Failed_TokenMismatchEx():System.String" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ex_Theorem_Mismatch" Analyze="True">
           <Accessors>
            <Accessor Name="get_ex_Theorem_Mismatch():System.String" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ex_Traversing_Failed_ReserveMutex" Analyze="True">
           <Accessors>
            <Accessor Name="get_ex_Traversing_Failed_ReserveMutex():System.String" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="resourceCulture" Analyze="True" />
          <Member Name="resourceMan" Analyze="True" />
          <Member Name="ResourceManager" Analyze="True">
           <Accessors>
            <Accessor Name="get_ResourceManager():System.Resources.ResourceManager" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="MathNet.Symbolics.Workplace" Analyze="True">
       <Types>
        <Type Name="MathFunction" Analyze="True">
         <Members>
          <Member Name=".ctor(MathNet.Symbolics.IEntity)" Analyze="True" />
          <Member Name=".ctor(MathNet.Symbolics.IEntity,MathNet.Symbolics.Workplace.MathSystem)" Analyze="True" />
          <Member Name=".ctor(MathNet.Symbolics.Signal,MathNet.Symbolics.Signal[])" Analyze="True" />
          <Member Name=".ctor(MathNet.Symbolics.Workplace.MathSystem)" Analyze="True" />
          <Member Name="Apply(MathNet.Symbolics.Signal[]):MathNet.Symbolics.Backend.Containers.ReadOnlySignalSet" Analyze="True" />
          <Member Name="BuildEntity():MathNet.Symbolics.IEntity" Analyze="True" />
          <Member Name="BuildSystem():MathNet.Symbolics.Workplace.MathSystem" Analyze="True" />
          <Member Name="entity" Analyze="True" />
          <Member Name="Entity" Analyze="True">
           <Accessors>
            <Accessor Name="get_Entity():MathNet.Symbolics.IEntity" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Evaluate(MathNet.Symbolics.IValueStructure[]):MathNet.Symbolics.IValueStructure[]" Analyze="True" />
          <Member Name="Evaluate(System.Double[]):System.Double[]" Analyze="True" />
          <Member Name="HasEntity" Analyze="True">
           <Accessors>
            <Accessor Name="get_HasEntity():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="HasSystem" Analyze="True">
           <Accessors>
            <Accessor Name="get_HasSystem():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="system" Analyze="True" />
          <Member Name="System" Analyze="True">
           <Accessors>
            <Accessor Name="get_System():MathNet.Symbolics.Workplace.MathSystem" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="MathSystem" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="_allBuses" Analyze="True" />
          <Member Name="_allPorts" Analyze="True" />
          <Member Name="_allSignals" Analyze="True" />
          <Member Name="_iid" Analyze="True" />
          <Member Name="_inputs" Analyze="True" />
          <Member Name="_namedBuses" Analyze="True" />
          <Member Name="_namedSignals" Analyze="True" />
          <Member Name="_outputs" Analyze="True" />
          <Member Name="_systemMediator" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate1" Analyze="True" />
          <Member Name="&lt;GetAllLeafSignals&gt;b__0(MathNet.Symbolics.Signal):System.Boolean" Analyze="True" />
          <Member Name="AcceptSystemBuilder(MathNet.Symbolics.ISystemBuilder):System.Void" Analyze="True" />
          <Member Name="AddBus(MathNet.Symbolics.Bus):System.Void" Analyze="True" />
          <Member Name="AddBusRange(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Bus&gt;):System.Void" Analyze="True" />
          <Member Name="AddNamedBus(System.String,MathNet.Symbolics.Bus):System.Void" Analyze="True" />
          <Member Name="AddNamedSignal(System.String,MathNet.Symbolics.IValueStructure):MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="AddNamedSignal(System.String,MathNet.Symbolics.Signal):MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="AddPort(MathNet.Symbolics.Port):System.Void" Analyze="True" />
          <Member Name="AddPortTree(MathNet.Symbolics.Port,System.Boolean,System.Boolean):System.Void" Analyze="True" />
          <Member Name="AddSignal(MathNet.Symbolics.Signal):System.Void" Analyze="True" />
          <Member Name="AddSignalRange(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Signal&gt;):System.Void" Analyze="True" />
          <Member Name="AddSignalTree(MathNet.Symbolics.Signal,System.Boolean,System.Boolean):System.Void" Analyze="True" />
          <Member Name="AddSignalTree(MathNet.Symbolics.Signal,System.Collections.Generic.ICollection`1&lt;MathNet.Symbolics.Signal&gt;,System.Boolean,System.Boolean):System.Void" Analyze="True" />
          <Member Name="AddSignalTreeRange(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Signal&gt;,System.Boolean,System.Boolean):System.Void" Analyze="True" />
          <Member Name="AddSignalTreeRange(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Signal&gt;,System.Collections.Generic.ICollection`1&lt;MathNet.Symbolics.Signal&gt;,System.Boolean,System.Boolean):System.Void" Analyze="True" />
          <Member Name="BuildArchitectureFactory(MathNet.Symbolics.MathIdentifier,MathNet.Symbolics.MathIdentifier):MathNet.Symbolics.IArchitectureFactory" Analyze="True" />
          <Member Name="BuildArchitectureFactory(System.String,MathNet.Symbolics.MathIdentifier,MathNet.Symbolics.MathIdentifier):MathNet.Symbolics.IArchitectureFactory" Analyze="True" />
          <Member Name="BuildArchitectureFactory(System.String,MathNet.Symbolics.MathIdentifier,MathNet.Symbolics.MathIdentifier,System.Int32,System.Int32,System.Int32):MathNet.Symbolics.IArchitectureFactory" Analyze="True" />
          <Member Name="BuildEntity(MathNet.Symbolics.MathIdentifier,System.String):MathNet.Symbolics.IEntity" Analyze="True" />
          <Member Name="BuildEntity(MathNet.Symbolics.MathIdentifier,System.String,MathNet.Symbolics.InfixNotation,System.Int32):MathNet.Symbolics.IEntity" Analyze="True" />
          <Member Name="BusCount" Analyze="True">
           <Accessors>
            <Accessor Name="get_BusCount():System.Int32" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Clone():MathNet.Symbolics.IMathSystem" Analyze="True" />
          <Member Name="ContainsBus(MathNet.Symbolics.Bus):System.Boolean" Analyze="True" />
          <Member Name="ContainsNamedBus(System.String):System.Boolean" Analyze="True" />
          <Member Name="ContainsNamedSignal(System.String):System.Boolean" Analyze="True" />
          <Member Name="ContainsPort(MathNet.Symbolics.Port):System.Boolean" Analyze="True" />
          <Member Name="ContainsSignal(MathNet.Symbolics.Signal):System.Boolean" Analyze="True" />
          <Member Name="CreateNamedBus(System.String):MathNet.Symbolics.Bus" Analyze="True" />
          <Member Name="CreateNamedSignal(System.String):MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="OutputValueChanged" Kind="Event" Analyze="True">
           <Accessors>
            <Accessor Name="add_OutputValueChanged(System.EventHandler`1&lt;MathNet.Symbolics.Events.IndexedSignalEventArgs&gt;):System.Void" Analyze="True" />
            <Accessor Name="remove_OutputValueChanged(System.EventHandler`1&lt;MathNet.Symbolics.Events.IndexedSignalEventArgs&gt;):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Evaluate(MathNet.Symbolics.IValueStructure[]):MathNet.Symbolics.IValueStructure[]" Analyze="True" />
          <Member Name="Evaluate(System.Double[]):System.Double[]" Analyze="True" />
          <Member Name="GetAllBuses():MathNet.Symbolics.Backend.Containers.ReadOnlyBusSet" Analyze="True" />
          <Member Name="GetAllInputs():MathNet.Symbolics.Backend.Containers.ReadOnlySignalSet" Analyze="True" />
          <Member Name="GetAllLeafSignals():MathNet.Symbolics.Backend.Containers.ReadOnlySignalSet" Analyze="True" />
          <Member Name="GetAllOutputs():MathNet.Symbolics.Backend.Containers.ReadOnlySignalSet" Analyze="True" />
          <Member Name="GetAllPorts():MathNet.Symbolics.Backend.Containers.ReadOnlyPortSet" Analyze="True" />
          <Member Name="GetAllSignals():MathNet.Symbolics.Backend.Containers.ReadOnlySignalSet" Analyze="True" />
          <Member Name="GetBus(System.Int32):MathNet.Symbolics.Bus" Analyze="True" />
          <Member Name="GetInput(System.Int32):MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="GetOutput(System.Int32):MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="GetPort(System.Int32):MathNet.Symbolics.Port" Analyze="True" />
          <Member Name="GetSignal(System.Int32):MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="HasSystemMediator" Analyze="True">
           <Accessors>
            <Accessor Name="get_HasSystemMediator():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="InputCount" Analyze="True">
           <Accessors>
            <Accessor Name="get_InputCount():System.Int32" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="InstanceId" Analyze="True">
           <Accessors>
            <Accessor Name="get_InstanceId():System.Guid" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="InternalAddBus(MathNet.Symbolics.Bus):System.Void" Analyze="True" />
          <Member Name="InternalAddInput(MathNet.Symbolics.Signal):System.Void" Analyze="True" />
          <Member Name="InternalAddOutput(MathNet.Symbolics.Signal):System.Void" Analyze="True" />
          <Member Name="InternalAddPort(MathNet.Symbolics.Port):System.Void" Analyze="True" />
          <Member Name="InternalAddSignal(MathNet.Symbolics.Signal):System.Void" Analyze="True" />
          <Member Name="InternalRemoveBus(MathNet.Symbolics.Bus):System.Void" Analyze="True" />
          <Member Name="InternalRemoveInput(MathNet.Symbolics.Signal):System.Void" Analyze="True" />
          <Member Name="InternalRemoveOutput(MathNet.Symbolics.Signal):System.Void" Analyze="True" />
          <Member Name="InternalRemovePort(MathNet.Symbolics.Port):System.Void" Analyze="True" />
          <Member Name="InternalRemoveSignal(MathNet.Symbolics.Signal):System.Void" Analyze="True" />
          <Member Name="LookupNamedBus(System.String):MathNet.Symbolics.Bus" Analyze="True" />
          <Member Name="LookupNamedSignal(System.String):MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="OutputCount" Analyze="True">
           <Accessors>
            <Accessor Name="get_OutputCount():System.Int32" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="OutputValueChanged" Analyze="True" />
          <Member Name="PortCount" Analyze="True">
           <Accessors>
            <Accessor Name="get_PortCount():System.Int32" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="PromoteAsInput(MathNet.Symbolics.Signal):System.Int32" Analyze="True" />
          <Member Name="PromoteAsOutput(MathNet.Symbolics.Signal):System.Int32" Analyze="True" />
          <Member Name="PublishToLibrary(MathNet.Symbolics.MathIdentifier,MathNet.Symbolics.MathIdentifier):System.Void" Analyze="True" />
          <Member Name="PublishToLibrary(System.String,MathNet.Symbolics.Library.ILibrary,MathNet.Symbolics.MathIdentifier,MathNet.Symbolics.MathIdentifier):System.Void" Analyze="True" />
          <Member Name="PublishToLibrary(System.String,MathNet.Symbolics.Library.ILibrary,System.String,System.String):MathNet.Symbolics.IEntity" Analyze="True" />
          <Member Name="PublishToLibrary(System.String,MathNet.Symbolics.Library.ILibrary,System.String,System.String,System.String,System.String):MathNet.Symbolics.IEntity" Analyze="True" />
          <Member Name="PublishToLibrary(System.String,System.String):MathNet.Symbolics.IEntity" Analyze="True" />
          <Member Name="PublishToLibrary(System.String,System.String,System.String,System.String):MathNet.Symbolics.IEntity" Analyze="True" />
          <Member Name="PublishToLibraryAnonymous():MathNet.Symbolics.IEntity" Analyze="True" />
          <Member Name="PublishToLibraryAnonymous(System.String,MathNet.Symbolics.Library.ILibrary):MathNet.Symbolics.IEntity" Analyze="True" />
          <Member Name="PushInputValue(System.Int32,MathNet.Symbolics.IValueStructure):System.Void" Analyze="True" />
          <Member Name="PushInputValue(System.Int32,MathNet.Symbolics.IValueStructure,System.TimeSpan):System.Void" Analyze="True" />
          <Member Name="PushInputValueRange(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.IValueStructure&gt;):System.Void" Analyze="True" />
          <Member Name="PushInputValueRange(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.IValueStructure&gt;,System.TimeSpan):System.Void" Analyze="True" />
          <Member Name="PushInputValueRange(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Signal&gt;):System.Void" Analyze="True" />
          <Member Name="PushInputValueRange(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Signal&gt;,System.TimeSpan):System.Void" Analyze="True" />
          <Member Name="ReadXml(System.IO.FileInfo):MathNet.Symbolics.IMathSystem" Analyze="True" />
          <Member Name="ReadXml(System.String):MathNet.Symbolics.IMathSystem" Analyze="True" />
          <Member Name="ReadXml(System.Xml.XmlReader):MathNet.Symbolics.IMathSystem" Analyze="True" />
          <Member Name="ReadXmlEntity(System.IO.FileInfo,MathNet.Symbolics.MathIdentifier,System.String):MathNet.Symbolics.IEntity" Analyze="True" />
          <Member Name="ReadXmlEntity(System.IO.FileInfo,MathNet.Symbolics.MathIdentifier,System.String,MathNet.Symbolics.InfixNotation,System.Int32):MathNet.Symbolics.IEntity" Analyze="True" />
          <Member Name="ReadXmlEntity(System.String,MathNet.Symbolics.MathIdentifier,System.String):MathNet.Symbolics.IEntity" Analyze="True" />
          <Member Name="ReadXmlEntity(System.String,MathNet.Symbolics.MathIdentifier,System.String,MathNet.Symbolics.InfixNotation,System.Int32):MathNet.Symbolics.IEntity" Analyze="True" />
          <Member Name="ReadXmlEntity(System.Xml.XmlReader,MathNet.Symbolics.MathIdentifier,System.String):MathNet.Symbolics.IEntity" Analyze="True" />
          <Member Name="ReadXmlEntity(System.Xml.XmlReader,MathNet.Symbolics.MathIdentifier,System.String,MathNet.Symbolics.InfixNotation,System.Int32):MathNet.Symbolics.IEntity" Analyze="True" />
          <Member Name="RegisterOutputSignal(MathNet.Symbolics.Signal):System.Void" Analyze="True" />
          <Member Name="RemoveBus(MathNet.Symbolics.Bus):System.Void" Analyze="True" />
          <Member Name="RemoveNamedBus(System.String):System.Void" Analyze="True" />
          <Member Name="RemoveNamedSignal(System.String):System.Void" Analyze="True" />
          <Member Name="RemovePort(MathNet.Symbolics.Port,System.Boolean):System.Void" Analyze="True" />
          <Member Name="RemoveSignal(MathNet.Symbolics.Signal,System.Boolean):System.Void" Analyze="True" />
          <Member Name="RemoveUnusedObjects():System.Boolean" Analyze="True" />
          <Member Name="s_SignalValueChanged(System.Object,MathNet.Symbolics.Events.ValueNodeEventArgs):System.Void" Analyze="True" />
          <Member Name="SignalCount" Analyze="True">
           <Accessors>
            <Accessor Name="get_SignalCount():System.Int32" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="SystemMediator" Analyze="True">
           <Accessors>
            <Accessor Name="get_SystemMediator():MathNet.Symbolics.Mediator.ISystemMediator" Analyze="True" />
            <Accessor Name="set_SystemMediator(MathNet.Symbolics.Mediator.ISystemMediator):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="TryLookupNamedBus(System.String,MathNet.Symbolics.Bus&amp;):System.Boolean" Analyze="True" />
          <Member Name="TryLookupNamedSignal(System.String,MathNet.Symbolics.Signal&amp;):System.Boolean" Analyze="True" />
          <Member Name="UnpromoteAsInput(MathNet.Symbolics.Signal):System.Void" Analyze="True" />
          <Member Name="UnpromoteAsOutput(MathNet.Symbolics.Signal):System.Void" Analyze="True" />
          <Member Name="UnregisterOutputSignal(MathNet.Symbolics.Signal):System.Void" Analyze="True" />
          <Member Name="WriteXml(System.Boolean):System.String" Analyze="True" />
          <Member Name="WriteXml(System.IO.FileInfo):System.Void" Analyze="True" />
          <Member Name="WriteXml(System.Xml.XmlWriter):System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="MathSystem+&lt;&gt;c__DisplayClass3" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="&lt;&gt;4__this" Analyze="True" />
          <Member Name="&lt;AddSignalTree&gt;b__2(MathNet.Symbolics.Signal):System.Boolean" Analyze="True" />
          <Member Name="autoAddInputs" Analyze="True" />
         </Members>
        </Type>
        <Type Name="MathSystem+&lt;&gt;c__DisplayClass6" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="&lt;&gt;4__this" Analyze="True" />
          <Member Name="&lt;AddSignalTree&gt;b__5(MathNet.Symbolics.Signal):System.Boolean" Analyze="True" />
          <Member Name="autoAddInputs" Analyze="True" />
          <Member Name="border" Analyze="True" />
         </Members>
        </Type>
        <Type Name="Project" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="_currentSystem" Analyze="True" />
          <Member Name="_keepTrack" Analyze="True" />
          <Member Name="_localObservers" Analyze="True" />
          <Member Name="_mediator" Analyze="True" />
          <Member Name="_namedSystems" Analyze="True" />
          <Member Name="_parser" Analyze="True" />
          <Member Name="AddSystem():MathNet.Symbolics.Workplace.MathSystem" Analyze="True" />
          <Member Name="AttachLocalObserver(MathNet.Symbolics.Mediator.ISystemObserver):System.Void" Analyze="True" />
          <Member Name="CurrentSystem" Analyze="True">
           <Accessors>
            <Accessor Name="get_CurrentSystem():MathNet.Symbolics.Workplace.MathSystem" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="DetachLocalObserver(MathNet.Symbolics.Mediator.ISystemObserver):System.Void" Analyze="True" />
          <Member Name="SystemLoaded" Kind="Event" Analyze="True">
           <Accessors>
            <Accessor Name="add_SystemLoaded(System.EventHandler):System.Void" Analyze="True" />
            <Accessor Name="remove_SystemLoaded(System.EventHandler):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ImportSystem(MathNet.Symbolics.Workplace.MathSystem):System.Void" Analyze="True" />
          <Member Name="Interpret(System.IO.FileInfo):System.Void" Analyze="True" />
          <Member Name="Interpret(System.IO.TextReader):System.Void" Analyze="True" />
          <Member Name="Interpret(System.String):System.Void" Analyze="True" />
          <Member Name="KeepTrack" Analyze="True">
           <Accessors>
            <Accessor Name="get_KeepTrack():System.Boolean" Analyze="True" />
            <Accessor Name="set_KeepTrack(System.Boolean):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="LoadSystem(MathNet.Symbolics.Workplace.MathSystem):System.Void" Analyze="True" />
          <Member Name="LoadSystem(System.Guid):System.Void" Analyze="True" />
          <Member Name="LoadSystem(System.Int32):System.Void" Analyze="True" />
          <Member Name="MathNet.Symbolics.Mediator.IObserver.OnBusAttachedToPort(MathNet.Symbolics.Bus,MathNet.Symbolics.Port,System.Int32):System.Void" Analyze="True" />
          <Member Name="MathNet.Symbolics.Mediator.IObserver.OnBusDetachedFromPort(MathNet.Symbolics.Bus,MathNet.Symbolics.Port,System.Int32):System.Void" Analyze="True" />
          <Member Name="MathNet.Symbolics.Mediator.IObserver.OnBusValueChanged(MathNet.Symbolics.Bus):System.Void" Analyze="True" />
          <Member Name="MathNet.Symbolics.Mediator.IObserver.OnNewBusCreated(MathNet.Symbolics.Bus):System.Void" Analyze="True" />
          <Member Name="MathNet.Symbolics.Mediator.IObserver.OnNewPortCreated(MathNet.Symbolics.Port):System.Void" Analyze="True" />
          <Member Name="MathNet.Symbolics.Mediator.IObserver.OnNewSignalCreated(MathNet.Symbolics.Signal):System.Void" Analyze="True" />
          <Member Name="MathNet.Symbolics.Mediator.IObserver.OnPortDrivesSignal(MathNet.Symbolics.Signal,MathNet.Symbolics.Port,System.Int32):System.Void" Analyze="True" />
          <Member Name="MathNet.Symbolics.Mediator.IObserver.OnPortDrivesSignalNoLonger(MathNet.Symbolics.Signal,MathNet.Symbolics.Port,System.Int32):System.Void" Analyze="True" />
          <Member Name="MathNet.Symbolics.Mediator.IObserver.OnSignalDrivesPort(MathNet.Symbolics.Signal,MathNet.Symbolics.Port,System.Int32):System.Void" Analyze="True" />
          <Member Name="MathNet.Symbolics.Mediator.IObserver.OnSignalDrivesPortNoLonger(MathNet.Symbolics.Signal,MathNet.Symbolics.Port,System.Int32):System.Void" Analyze="True" />
          <Member Name="MathNet.Symbolics.Mediator.IObserver.OnSignalValueChanged(MathNet.Symbolics.Signal):System.Void" Analyze="True" />
          <Member Name="Parser" Analyze="True">
           <Accessors>
            <Accessor Name="get_Parser():MathNet.Symbolics.Interpreter.IParser" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="SimulateFor(System.Int32):System.TimeSpan" Analyze="True" />
          <Member Name="SimulateFor(System.TimeSpan):System.TimeSpan" Analyze="True" />
          <Member Name="SimulateInstant():System.Boolean" Analyze="True" />
          <Member Name="SystemLoaded" Analyze="True" />
          <Member Name="Systems" Analyze="True">
           <Accessors>
            <Accessor Name="get_Systems():System.Collections.Generic.Dictionary`2&lt;System.Guid,MathNet.Symbolics.Workplace.MathSystem&gt;" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="UnloadSystem():System.Void" Analyze="True" />
         </Members>
        </Type>
       </Types>
      </Namespace>
     </Namespaces>
     <Resources>
      <Resource Name="MathNet.Symbolics.Properties.Resources.resources" Analyze="True" />
     </Resources>
    </Module>
   </Modules>
  </Target>
  <Target Name="$(ProjectDir)/src/app/MathNet.Yttrium/Manipulation.Contracts/bin/Debug/MathNet.Yttrium.Manipulation.Contracts.dll" Analyze="True">
   <Modules>
    <Module Name="mathnet.yttrium.manipulation.contracts.dll" Analyze="True">
     <Namespaces>
      <Namespace Name="" Analyze="True">
       <Types>
        <Type Name="&lt;Module&gt;" Analyze="True" />
       </Types>
      </Namespace>
      <Namespace Name="MathNet.Symbolics.Manipulation" Analyze="True">
       <Types>
        <Type Name="BasicManipulationVisitor" Analyze="True">
         <Members>
          <Member Name=".ctor(MathNet.Symbolics.Manipulation.EstimatePlan,MathNet.Symbolics.Manipulation.ManipulatePort,MathNet.Symbolics.Manipulation.ManipulateSignal)" Analyze="True" />
          <Member Name="_plan" Analyze="True" />
          <Member Name="_port" Analyze="True" />
          <Member Name="_signal" Analyze="True" />
          <Member Name="EstimatePlan(MathNet.Symbolics.Port):MathNet.Symbolics.Manipulation.ManipulationPlan" Analyze="True" />
          <Member Name="ManipulatePort(MathNet.Symbolics.Port,MathNet.Symbolics.Backend.Containers.SignalSet,System.Boolean):System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Signal&gt;" Analyze="True" />
          <Member Name="ManipulateSignal(MathNet.Symbolics.Signal,MathNet.Symbolics.Signal,System.Boolean):MathNet.Symbolics.Signal" Analyze="True" />
         </Members>
        </Type>
        <Type Name="BasicTransformation" Analyze="True">
         <Members>
          <Member Name=".ctor(MathNet.Symbolics.MathIdentifier,MathNet.Symbolics.MathIdentifier,MathNet.Symbolics.Manipulation.CreatePattern,MathNet.Symbolics.Manipulation.EstimatePlan,MathNet.Symbolics.Manipulation.ManipulatePort)" Analyze="True" />
          <Member Name="_id" Analyze="True" />
          <Member Name="_pattern" Analyze="True" />
          <Member Name="_plan" Analyze="True" />
          <Member Name="_transform" Analyze="True" />
          <Member Name="_transformationTypeId" Analyze="True" />
          <Member Name="CreatePattern():MathNet.Symbolics.Patterns.Toolkit.Pattern" Analyze="True" />
          <Member Name="EstimatePlan(MathNet.Symbolics.Port,MathNet.Symbolics.Patterns.Toolkit.GroupCollection):MathNet.Symbolics.Manipulation.ManipulationPlan" Analyze="True" />
          <Member Name="ManipulatePort(MathNet.Symbolics.Port,MathNet.Symbolics.Backend.Containers.SignalSet,System.Boolean,MathNet.Symbolics.Patterns.Toolkit.GroupCollection):System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Signal&gt;" Analyze="True" />
          <Member Name="ManipulateSignal(MathNet.Symbolics.Signal,MathNet.Symbolics.Signal,System.Boolean):MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="TheoremId" Analyze="True">
           <Accessors>
            <Accessor Name="get_TheoremId():MathNet.Symbolics.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="TransformationTypeId" Analyze="True">
           <Accessors>
            <Accessor Name="get_TransformationTypeId():MathNet.Symbolics.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="ConfigureTransformation" Analyze="True">
         <Members>
          <Member Name=".ctor(System.Object,System.IntPtr)" Analyze="True" />
          <Member Name="BeginInvoke(MathNet.Symbolics.Manipulation.ITransformationTheorem,System.AsyncCallback,System.Object):System.IAsyncResult" Analyze="True" />
          <Member Name="EndInvoke(System.IAsyncResult):System.Void" Analyze="True" />
          <Member Name="Invoke(MathNet.Symbolics.Manipulation.ITransformationTheorem):System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="CreatePattern" Analyze="True">
         <Members>
          <Member Name=".ctor(System.Object,System.IntPtr)" Analyze="True" />
          <Member Name="BeginInvoke(System.AsyncCallback,System.Object):System.IAsyncResult" Analyze="True" />
          <Member Name="EndInvoke(System.IAsyncResult):MathNet.Symbolics.Patterns.Toolkit.Pattern" Analyze="True" />
          <Member Name="Invoke():MathNet.Symbolics.Patterns.Toolkit.Pattern" Analyze="True" />
         </Members>
        </Type>
        <Type Name="EstimatePlan" Analyze="True">
         <Members>
          <Member Name=".ctor(System.Object,System.IntPtr)" Analyze="True" />
          <Member Name="BeginInvoke(MathNet.Symbolics.Port,System.AsyncCallback,System.Object):System.IAsyncResult" Analyze="True" />
          <Member Name="EndInvoke(System.IAsyncResult):MathNet.Symbolics.Manipulation.ManipulationPlan" Analyze="True" />
          <Member Name="Invoke(MathNet.Symbolics.Port):MathNet.Symbolics.Manipulation.ManipulationPlan" Analyze="True" />
         </Members>
        </Type>
        <Type Name="IManipulationVisitor" Analyze="True">
         <Members>
          <Member Name="EstimatePlan(MathNet.Symbolics.Port):MathNet.Symbolics.Manipulation.ManipulationPlan" Analyze="True" />
          <Member Name="ManipulatePort(MathNet.Symbolics.Port,MathNet.Symbolics.Backend.Containers.SignalSet,System.Boolean):System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Signal&gt;" Analyze="True" />
          <Member Name="ManipulateSignal(MathNet.Symbolics.Signal,MathNet.Symbolics.Signal,System.Boolean):MathNet.Symbolics.Signal" Analyze="True" />
         </Members>
        </Type>
        <Type Name="IManipulator" Analyze="True">
         <Members>
          <Member Name="Manipulate(MathNet.Symbolics.Signal,MathNet.Symbolics.Manipulation.IManipulationVisitor,System.Boolean):MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="Manipulate(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Signal&gt;,MathNet.Symbolics.Manipulation.IManipulationVisitor,System.Boolean):MathNet.Symbolics.Backend.Containers.SignalSet" Analyze="True" />
          <Member Name="Substitute(MathNet.Symbolics.Signal,MathNet.Symbolics.Signal,MathNet.Symbolics.Signal):MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="Substitute(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Signal&gt;,MathNet.Symbolics.Signal,MathNet.Symbolics.Signal):MathNet.Symbolics.Backend.Containers.SignalSet" Analyze="True" />
         </Members>
        </Type>
        <Type Name="ITransformationTheorem" Analyze="True">
         <Members>
          <Member Name="CreatePattern():MathNet.Symbolics.Patterns.Toolkit.Pattern" Analyze="True" />
          <Member Name="EstimatePlan(MathNet.Symbolics.Port,MathNet.Symbolics.Patterns.Toolkit.GroupCollection):MathNet.Symbolics.Manipulation.ManipulationPlan" Analyze="True" />
          <Member Name="ManipulatePort(MathNet.Symbolics.Port,MathNet.Symbolics.Backend.Containers.SignalSet,System.Boolean,MathNet.Symbolics.Patterns.Toolkit.GroupCollection):System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Signal&gt;" Analyze="True" />
          <Member Name="ManipulateSignal(MathNet.Symbolics.Signal,MathNet.Symbolics.Signal,System.Boolean):MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="TheoremId" Analyze="True">
           <Accessors>
            <Accessor Name="get_TheoremId():MathNet.Symbolics.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="TransformationTypeId" Analyze="True">
           <Accessors>
            <Accessor Name="get_TransformationTypeId():MathNet.Symbolics.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="ITransformationTheoremProvider" Analyze="True">
         <Members>
          <Member Name="Add(MathNet.Symbolics.Manipulation.ITransformationTheorem):System.Void" Analyze="True" />
          <Member Name="Default" Analyze="True">
           <Accessors>
            <Accessor Name="get_Default():MathNet.Symbolics.Manipulation.ITransformationTheorem" Analyze="True" />
            <Accessor Name="set_Default(MathNet.Symbolics.Manipulation.ITransformationTheorem):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Item[MathNet.Symbolics.MathIdentifier]" Analyze="True">
           <Accessors>
            <Accessor Name="get_Item(MathNet.Symbolics.MathIdentifier):MathNet.Symbolics.Manipulation.ITransformationTheorem" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="LookupBest(MathNet.Symbolics.Signal,MathNet.Symbolics.Port,MathNet.Symbolics.Patterns.Toolkit.GroupCollection&amp;):MathNet.Symbolics.Manipulation.ITransformationTheorem" Analyze="True" />
          <Member Name="LookupFirst(MathNet.Symbolics.Signal,MathNet.Symbolics.Port,MathNet.Symbolics.Patterns.Toolkit.GroupCollection&amp;):MathNet.Symbolics.Manipulation.ITransformationTheorem" Analyze="True" />
          <Member Name="Remove(MathNet.Symbolics.Manipulation.ITransformationTheorem):System.Boolean" Analyze="True" />
          <Member Name="TryLookupBest(MathNet.Symbolics.Signal,MathNet.Symbolics.Port,MathNet.Symbolics.Manipulation.ITransformationTheorem&amp;,MathNet.Symbolics.Patterns.Toolkit.GroupCollection&amp;):System.Boolean" Analyze="True" />
          <Member Name="TryLookupFirst(MathNet.Symbolics.Signal,MathNet.Symbolics.Port,MathNet.Symbolics.Manipulation.ITransformationTheorem&amp;,MathNet.Symbolics.Patterns.Toolkit.GroupCollection&amp;):System.Boolean" Analyze="True" />
         </Members>
        </Type>
        <Type Name="ITransformer" Analyze="True">
         <Members>
          <Member Name="Transform(MathNet.Symbolics.Signal,MathNet.Symbolics.MathIdentifier,MathNet.Symbolics.Manipulation.ConfigureTransformation,System.Boolean):MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="Transform(MathNet.Symbolics.Signal,MathNet.Symbolics.MathIdentifier,System.Boolean):MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="Transform(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Signal&gt;,MathNet.Symbolics.MathIdentifier,MathNet.Symbolics.Manipulation.ConfigureTransformation,System.Boolean):MathNet.Symbolics.Backend.Containers.SignalSet" Analyze="True" />
          <Member Name="Transform(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Signal&gt;,MathNet.Symbolics.MathIdentifier,System.Boolean):MathNet.Symbolics.Backend.Containers.SignalSet" Analyze="True" />
         </Members>
        </Type>
        <Type Name="ManipulatePort" Analyze="True">
         <Members>
          <Member Name=".ctor(System.Object,System.IntPtr)" Analyze="True" />
          <Member Name="BeginInvoke(MathNet.Symbolics.Port,MathNet.Symbolics.Backend.Containers.SignalSet,System.Boolean,System.AsyncCallback,System.Object):System.IAsyncResult" Analyze="True" />
          <Member Name="EndInvoke(System.IAsyncResult):System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Signal&gt;" Analyze="True" />
          <Member Name="Invoke(MathNet.Symbolics.Port,MathNet.Symbolics.Backend.Containers.SignalSet,System.Boolean):System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Signal&gt;" Analyze="True" />
         </Members>
        </Type>
        <Type Name="ManipulateSignal" Analyze="True">
         <Members>
          <Member Name=".ctor(System.Object,System.IntPtr)" Analyze="True" />
          <Member Name="BeginInvoke(MathNet.Symbolics.Signal,MathNet.Symbolics.Signal,System.Boolean,System.AsyncCallback,System.Object):System.IAsyncResult" Analyze="True" />
          <Member Name="EndInvoke(System.IAsyncResult):MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="Invoke(MathNet.Symbolics.Signal,MathNet.Symbolics.Signal,System.Boolean):MathNet.Symbolics.Signal" Analyze="True" />
         </Members>
        </Type>
        <Type Name="ManipulationPlan" Analyze="True">
         <Members>
          <Member Name="AlterIfChildsAltered" Analyze="True" />
          <Member Name="CloneIfChildsAltered" Analyze="True" />
          <Member Name="DoAlter" Analyze="True" />
          <Member Name="DontAlter" Analyze="True" />
          <Member Name="Unknown" Analyze="True" />
          <Member Name="value__" Analyze="True" />
         </Members>
        </Type>
       </Types>
      </Namespace>
     </Namespaces>
    </Module>
   </Modules>
  </Target>
  <Target Name="$(ProjectDir)/src/app/MathNet.Yttrium/Manipulation.Service/bin/Debug/MathNet.Yttrium.Manipulation.Service.dll" Analyze="True">
   <Modules>
    <Module Name="mathnet.yttrium.manipulation.service.dll" Analyze="True">
     <Namespaces>
      <Namespace Name="" Analyze="True">
       <Types>
        <Type Name="&lt;Module&gt;" Analyze="True" />
       </Types>
      </Namespace>
      <Namespace Name="MathNet.Symbolics" Analyze="True">
       <Types>
        <Type Name="ManipulationFactory" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="MathNet.Symbolics.IFactory&lt;MathNet.Symbolics.Manipulation.IManipulator&gt;.GetInstance():MathNet.Symbolics.Manipulation.IManipulator" Analyze="True" />
          <Member Name="MathNet.Symbolics.IFactory&lt;MathNet.Symbolics.Manipulation.ITransformationTheoremProvider,MathNet.Symbolics.MathIdentifier&gt;.GetInstance(MathNet.Symbolics.MathIdentifier):MathNet.Symbolics.Manipulation.ITransformationTheoremProvider" Analyze="True" />
          <Member Name="MathNet.Symbolics.IFactory&lt;MathNet.Symbolics.Manipulation.ITransformationTheoremProvider&gt;.GetInstance():MathNet.Symbolics.Manipulation.ITransformationTheoremProvider" Analyze="True" />
          <Member Name="MathNet.Symbolics.IFactory&lt;MathNet.Symbolics.Manipulation.ITransformer&gt;.GetInstance():MathNet.Symbolics.Manipulation.ITransformer" Analyze="True" />
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="MathNet.Symbolics.Manipulation" Analyze="True">
       <Types>
        <Type Name="Manipulator" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="_scanner" Analyze="True" />
          <Member Name="CreateSubstituteVisitor(MathNet.Symbolics.Signal,MathNet.Symbolics.Signal):MathNet.Symbolics.Manipulation.IManipulationVisitor" Analyze="True" />
          <Member Name="FixSentinel(MathNet.Symbolics.Signal&amp;,System.Collections.Generic.Dictionary`2&lt;System.Guid,MathNet.Symbolics.Signal&gt;,System.Collections.Generic.Dictionary`2&lt;System.Guid,MathNet.Symbolics.Signal&gt;):System.Boolean" Analyze="True" />
          <Member Name="Manipulate(MathNet.Symbolics.Signal,MathNet.Symbolics.Manipulation.IManipulationVisitor,System.Boolean):MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="Manipulate(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Signal&gt;,MathNet.Symbolics.Manipulation.IManipulationVisitor,System.Boolean):MathNet.Symbolics.Backend.Containers.SignalSet" Analyze="True" />
          <Member Name="Substitute(MathNet.Symbolics.Signal,MathNet.Symbolics.Signal,MathNet.Symbolics.Signal):MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="Substitute(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Signal&gt;,MathNet.Symbolics.Signal,MathNet.Symbolics.Signal):MathNet.Symbolics.Backend.Containers.SignalSet" Analyze="True" />
         </Members>
        </Type>
        <Type Name="Manipulator+&lt;&gt;c__DisplayClass2" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="&lt;&gt;4__this" Analyze="True" />
          <Member Name="&lt;Manipulate&gt;b__0(MathNet.Symbolics.Port):System.Boolean" Analyze="True" />
          <Member Name="&lt;Manipulate&gt;b__1(MathNet.Symbolics.Port):System.Boolean" Analyze="True" />
          <Member Name="plans" Analyze="True" />
          <Member Name="sentinels" Analyze="True" />
          <Member Name="signalReplacements" Analyze="True" />
          <Member Name="visitor" Analyze="True" />
         </Members>
        </Type>
        <Type Name="Manipulator+&lt;&gt;c__DisplayClass6" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="&lt;&gt;4__this" Analyze="True" />
          <Member Name="&lt;Manipulate&gt;b__4(MathNet.Symbolics.Port):System.Boolean" Analyze="True" />
          <Member Name="&lt;Manipulate&gt;b__5(MathNet.Symbolics.Port):System.Boolean" Analyze="True" />
          <Member Name="plans" Analyze="True" />
          <Member Name="sentinels" Analyze="True" />
          <Member Name="signalReplacements" Analyze="True" />
          <Member Name="visitor" Analyze="True" />
         </Members>
        </Type>
        <Type Name="Manipulator+&lt;&gt;c__DisplayClassb" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="&lt;CreateSubstituteVisitor&gt;b__8(MathNet.Symbolics.Port):MathNet.Symbolics.Manipulation.ManipulationPlan" Analyze="True" />
          <Member Name="&lt;CreateSubstituteVisitor&gt;b__9(MathNet.Symbolics.Port,MathNet.Symbolics.Backend.Containers.SignalSet,System.Boolean):System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Signal&gt;" Analyze="True" />
          <Member Name="&lt;CreateSubstituteVisitor&gt;b__a(MathNet.Symbolics.Signal,MathNet.Symbolics.Signal,System.Boolean):MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="replacement" Analyze="True" />
          <Member Name="subject" Analyze="True" />
         </Members>
        </Type>
        <Type Name="Manipulator+ManipulatorPlanExecutor" Analyze="True">
         <Members>
          <Member Name=".ctor(System.Collections.Generic.Dictionary`2&lt;System.Guid,MathNet.Symbolics.Manipulation.ManipulationPlan&gt;,System.Collections.Generic.Dictionary`2&lt;System.Guid,MathNet.Symbolics.Signal&gt;,System.Collections.Generic.Dictionary`2&lt;System.Guid,MathNet.Symbolics.Signal&gt;,MathNet.Symbolics.Manipulation.IManipulationVisitor)" Analyze="True" />
          <Member Name="_plans" Analyze="True" />
          <Member Name="_sentinels" Analyze="True" />
          <Member Name="_signalRep" Analyze="True" />
          <Member Name="_visitor" Analyze="True" />
          <Member Name="BuildManipulatedInputsList(MathNet.Symbolics.Port,System.Boolean&amp;):MathNet.Symbolics.Backend.Containers.SignalSet" Analyze="True" />
          <Member Name="DefaultStrategy" Analyze="True">
           <Accessors>
            <Accessor Name="get_DefaultStrategy():MathNet.Symbolics.Traversing.IScanStrategy" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="EnterPort(MathNet.Symbolics.Port,MathNet.Symbolics.Signal,System.Boolean,System.Boolean):System.Boolean" Analyze="True" />
          <Member Name="EnterSignal(MathNet.Symbolics.Signal,MathNet.Symbolics.Port,System.Boolean,System.Boolean):System.Boolean" Analyze="True" />
          <Member Name="LeavePort(MathNet.Symbolics.Port,MathNet.Symbolics.Signal,System.Boolean,System.Boolean):System.Boolean" Analyze="True" />
          <Member Name="LeaveSignal(MathNet.Symbolics.Signal,MathNet.Symbolics.Port,System.Boolean,System.Boolean):System.Boolean" Analyze="True" />
          <Member Name="VisitCycle(MathNet.Symbolics.Port,MathNet.Symbolics.Signal,MathNet.Symbolics.Signal):System.Boolean" Analyze="True" />
         </Members>
        </Type>
        <Type Name="Manipulator+ManipulatorPlanReducer" Analyze="True">
         <Members>
          <Member Name=".ctor(System.Collections.Generic.Dictionary`2&lt;System.Guid,MathNet.Symbolics.Manipulation.ManipulationPlan&gt;,System.Boolean)" Analyze="True" />
          <Member Name="_ignoreHold" Analyze="True" />
          <Member Name="_plans" Analyze="True" />
          <Member Name="&lt;VisitCycle&gt;b__d(MathNet.Symbolics.Port):System.Boolean" Analyze="True" />
          <Member Name="DefaultStrategy" Analyze="True">
           <Accessors>
            <Accessor Name="get_DefaultStrategy():MathNet.Symbolics.Traversing.IScanStrategy" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="EnterPort(MathNet.Symbolics.Port,MathNet.Symbolics.Signal,System.Boolean,System.Boolean):System.Boolean" Analyze="True" />
          <Member Name="LeavePort(MathNet.Symbolics.Port,MathNet.Symbolics.Signal,System.Boolean,System.Boolean):System.Boolean" Analyze="True" />
          <Member Name="VisitCycle(MathNet.Symbolics.Port,MathNet.Symbolics.Signal,MathNet.Symbolics.Signal):System.Boolean" Analyze="True" />
          <Member Name="VisitLeaf(MathNet.Symbolics.Port,System.Boolean):System.Boolean" Analyze="True" />
         </Members>
        </Type>
        <Type Name="TransformationManipulationVisitor" Analyze="True">
         <Members>
          <Member Name=".ctor(MathNet.Symbolics.Manipulation.ITransformationTheoremProvider)" Analyze="True" />
          <Member Name=".ctor(MathNet.Symbolics.Manipulation.ITransformationTheoremProvider,MathNet.Symbolics.Manipulation.ConfigureTransformation)" Analyze="True" />
          <Member Name="_configure" Analyze="True" />
          <Member Name="_transformations" Analyze="True" />
          <Member Name="EstimatePlan(MathNet.Symbolics.Port):MathNet.Symbolics.Manipulation.ManipulationPlan" Analyze="True" />
          <Member Name="ManipulatePort(MathNet.Symbolics.Port,MathNet.Symbolics.Backend.Containers.SignalSet,System.Boolean):System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Signal&gt;" Analyze="True" />
          <Member Name="ManipulateSignal(MathNet.Symbolics.Signal,MathNet.Symbolics.Signal,System.Boolean):MathNet.Symbolics.Signal" Analyze="True" />
         </Members>
        </Type>
        <Type Name="TransformationTheoremProvider" Analyze="True">
         <Members>
          <Member Name=".ctor(MathNet.Symbolics.MathIdentifier)" Analyze="True" />
          <Member Name="_default" Analyze="True" />
          <Member Name="_root" Analyze="True" />
          <Member Name="_transformationTypeId" Analyze="True" />
          <Member Name="_tree" Analyze="True" />
          <Member Name="Default" Analyze="True">
           <Accessors>
            <Accessor Name="get_Default():MathNet.Symbolics.Manipulation.ITransformationTheorem" Analyze="True" />
            <Accessor Name="set_Default(MathNet.Symbolics.Manipulation.ITransformationTheorem):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="GetKeyForItem(MathNet.Symbolics.Manipulation.ITransformationTheorem):MathNet.Symbolics.MathIdentifier" Analyze="True" />
          <Member Name="InsertItem(System.Int32,MathNet.Symbolics.Manipulation.ITransformationTheorem):System.Void" Analyze="True" />
          <Member Name="LookupBest(MathNet.Symbolics.Signal,MathNet.Symbolics.Port,MathNet.Symbolics.Patterns.Toolkit.GroupCollection&amp;):MathNet.Symbolics.Manipulation.ITransformationTheorem" Analyze="True" />
          <Member Name="LookupFirst(MathNet.Symbolics.Signal,MathNet.Symbolics.Port,MathNet.Symbolics.Patterns.Toolkit.GroupCollection&amp;):MathNet.Symbolics.Manipulation.ITransformationTheorem" Analyze="True" />
          <Member Name="MatchAll(MathNet.Symbolics.Signal,MathNet.Symbolics.Port):MathNet.Symbolics.Patterns.Toolkit.MatchCollection" Analyze="True" />
          <Member Name="MatchBest(MathNet.Symbolics.Signal,MathNet.Symbolics.Port):MathNet.Symbolics.Patterns.Toolkit.Match" Analyze="True" />
          <Member Name="MatchFirst(MathNet.Symbolics.Signal,MathNet.Symbolics.Port):MathNet.Symbolics.Patterns.Toolkit.Match" Analyze="True" />
          <Member Name="MathNet.Symbolics.Manipulation.ITransformationTheoremProvider.get_Item(MathNet.Symbolics.MathIdentifier):MathNet.Symbolics.Manipulation.ITransformationTheorem" Analyze="True" />
          <Member Name="Root" Analyze="True">
           <Accessors>
            <Accessor Name="get_Root():MathNet.Symbolics.Patterns.Toolkit.CoalescedTreeNode" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="TheoremTypeId" Analyze="True">
           <Accessors>
            <Accessor Name="get_TheoremTypeId():MathNet.Symbolics.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="TryGetValue(MathNet.Symbolics.MathIdentifier,MathNet.Symbolics.Manipulation.ITransformationTheorem&amp;):System.Boolean" Analyze="True" />
          <Member Name="TryLookupBest(MathNet.Symbolics.Signal,MathNet.Symbolics.Port,MathNet.Symbolics.Manipulation.ITransformationTheorem&amp;,MathNet.Symbolics.Patterns.Toolkit.GroupCollection&amp;):System.Boolean" Analyze="True" />
          <Member Name="TryLookupFirst(MathNet.Symbolics.Signal,MathNet.Symbolics.Port,MathNet.Symbolics.Manipulation.ITransformationTheorem&amp;,MathNet.Symbolics.Patterns.Toolkit.GroupCollection&amp;):System.Boolean" Analyze="True" />
          <Member Name="TryMatchBest(MathNet.Symbolics.Signal,MathNet.Symbolics.Port,MathNet.Symbolics.Patterns.Toolkit.Match&amp;):System.Boolean" Analyze="True" />
          <Member Name="TryMatchFirst(MathNet.Symbolics.Signal,MathNet.Symbolics.Port,MathNet.Symbolics.Patterns.Toolkit.Match&amp;):System.Boolean" Analyze="True" />
         </Members>
        </Type>
        <Type Name="Transformer" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="_library" Analyze="True" />
          <Member Name="_manipulator" Analyze="True" />
          <Member Name="Transform(MathNet.Symbolics.Signal,MathNet.Symbolics.MathIdentifier,MathNet.Symbolics.Manipulation.ConfigureTransformation,System.Boolean):MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="Transform(MathNet.Symbolics.Signal,MathNet.Symbolics.MathIdentifier,System.Boolean):MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="Transform(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Signal&gt;,MathNet.Symbolics.MathIdentifier,MathNet.Symbolics.Manipulation.ConfigureTransformation,System.Boolean):MathNet.Symbolics.Backend.Containers.SignalSet" Analyze="True" />
          <Member Name="Transform(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Signal&gt;,MathNet.Symbolics.MathIdentifier,System.Boolean):MathNet.Symbolics.Backend.Containers.SignalSet" Analyze="True" />
         </Members>
        </Type>
       </Types>
      </Namespace>
     </Namespaces>
    </Module>
   </Modules>
  </Target>
  <Target Name="$(ProjectDir)/src/app/MathNet.Yttrium/Mediator.Contracts/bin/Debug/MathNet.Yttrium.Mediator.Contracts.dll" Analyze="True">
   <Modules>
    <Module Name="mathnet.yttrium.mediator.contracts.dll" Analyze="True">
     <Namespaces>
      <Namespace Name="" Analyze="True">
       <Types>
        <Type Name="&lt;Module&gt;" Analyze="True" />
       </Types>
      </Namespace>
      <Namespace Name="MathNet.Symbolics.Mediator" Analyze="True">
       <Types>
        <Type Name="IMediator" Analyze="True">
         <Members>
          <Member Name="AttachObserver(MathNet.Symbolics.Mediator.IObserver):System.Void" Analyze="True" />
          <Member Name="DetachObserver(MathNet.Symbolics.Mediator.IObserver):System.Void" Analyze="True" />
          <Member Name="BusAttachedToPort" Kind="Event" Analyze="True">
           <Accessors>
            <Accessor Name="add_BusAttachedToPort(System.EventHandler`1&lt;MathNet.Symbolics.Events.BusPortIndexEventArgs&gt;):System.Void" Analyze="True" />
            <Accessor Name="remove_BusAttachedToPort(System.EventHandler`1&lt;MathNet.Symbolics.Events.BusPortIndexEventArgs&gt;):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="BusDetachedFromPort" Kind="Event" Analyze="True">
           <Accessors>
            <Accessor Name="add_BusDetachedFromPort(System.EventHandler`1&lt;MathNet.Symbolics.Events.BusPortIndexEventArgs&gt;):System.Void" Analyze="True" />
            <Accessor Name="remove_BusDetachedFromPort(System.EventHandler`1&lt;MathNet.Symbolics.Events.BusPortIndexEventArgs&gt;):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="BusValueChanged" Kind="Event" Analyze="True">
           <Accessors>
            <Accessor Name="add_BusValueChanged(System.EventHandler`1&lt;MathNet.Symbolics.Events.BusEventArgs&gt;):System.Void" Analyze="True" />
            <Accessor Name="remove_BusValueChanged(System.EventHandler`1&lt;MathNet.Symbolics.Events.BusEventArgs&gt;):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="NewBusCreated" Kind="Event" Analyze="True">
           <Accessors>
            <Accessor Name="add_NewBusCreated(System.EventHandler`1&lt;MathNet.Symbolics.Events.BusEventArgs&gt;):System.Void" Analyze="True" />
            <Accessor Name="remove_NewBusCreated(System.EventHandler`1&lt;MathNet.Symbolics.Events.BusEventArgs&gt;):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="NewPortCreated" Kind="Event" Analyze="True">
           <Accessors>
            <Accessor Name="add_NewPortCreated(System.EventHandler`1&lt;MathNet.Symbolics.Events.PortEventArgs&gt;):System.Void" Analyze="True" />
            <Accessor Name="remove_NewPortCreated(System.EventHandler`1&lt;MathNet.Symbolics.Events.PortEventArgs&gt;):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="NewSignalCreated" Kind="Event" Analyze="True">
           <Accessors>
            <Accessor Name="add_NewSignalCreated(System.EventHandler`1&lt;MathNet.Symbolics.Events.SignalEventArgs&gt;):System.Void" Analyze="True" />
            <Accessor Name="remove_NewSignalCreated(System.EventHandler`1&lt;MathNet.Symbolics.Events.SignalEventArgs&gt;):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="PortDrivesSignal" Kind="Event" Analyze="True">
           <Accessors>
            <Accessor Name="add_PortDrivesSignal(System.EventHandler`1&lt;MathNet.Symbolics.Events.SignalPortIndexEventArgs&gt;):System.Void" Analyze="True" />
            <Accessor Name="remove_PortDrivesSignal(System.EventHandler`1&lt;MathNet.Symbolics.Events.SignalPortIndexEventArgs&gt;):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="PortDrivesSignalNoLonger" Kind="Event" Analyze="True">
           <Accessors>
            <Accessor Name="add_PortDrivesSignalNoLonger(System.EventHandler`1&lt;MathNet.Symbolics.Events.SignalPortIndexEventArgs&gt;):System.Void" Analyze="True" />
            <Accessor Name="remove_PortDrivesSignalNoLonger(System.EventHandler`1&lt;MathNet.Symbolics.Events.SignalPortIndexEventArgs&gt;):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="SignalDrivesPort" Kind="Event" Analyze="True">
           <Accessors>
            <Accessor Name="add_SignalDrivesPort(System.EventHandler`1&lt;MathNet.Symbolics.Events.SignalPortIndexEventArgs&gt;):System.Void" Analyze="True" />
            <Accessor Name="remove_SignalDrivesPort(System.EventHandler`1&lt;MathNet.Symbolics.Events.SignalPortIndexEventArgs&gt;):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="SignalDrivesPortNoLonger" Kind="Event" Analyze="True">
           <Accessors>
            <Accessor Name="add_SignalDrivesPortNoLonger(System.EventHandler`1&lt;MathNet.Symbolics.Events.SignalPortIndexEventArgs&gt;):System.Void" Analyze="True" />
            <Accessor Name="remove_SignalDrivesPortNoLonger(System.EventHandler`1&lt;MathNet.Symbolics.Events.SignalPortIndexEventArgs&gt;):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="SignalValueChanged" Kind="Event" Analyze="True">
           <Accessors>
            <Accessor Name="add_SignalValueChanged(System.EventHandler`1&lt;MathNet.Symbolics.Events.SignalEventArgs&gt;):System.Void" Analyze="True" />
            <Accessor Name="remove_SignalValueChanged(System.EventHandler`1&lt;MathNet.Symbolics.Events.SignalEventArgs&gt;):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="NotifyBusAttachedToPort(MathNet.Symbolics.Bus,MathNet.Symbolics.Port,System.Int32):System.Void" Analyze="True" />
          <Member Name="NotifyBusDetachedFromPort(MathNet.Symbolics.Bus,MathNet.Symbolics.Port,System.Int32):System.Void" Analyze="True" />
          <Member Name="NotifyBusValueChanged(MathNet.Symbolics.Bus):System.Void" Analyze="True" />
          <Member Name="NotifyNewBusCreated(MathNet.Symbolics.Bus):System.Void" Analyze="True" />
          <Member Name="NotifyNewPortCreated(MathNet.Symbolics.Port):System.Void" Analyze="True" />
          <Member Name="NotifyNewSignalCreated(MathNet.Symbolics.Signal):System.Void" Analyze="True" />
          <Member Name="NotifyPortDrivesSignal(MathNet.Symbolics.Signal,MathNet.Symbolics.Port,System.Int32):System.Void" Analyze="True" />
          <Member Name="NotifyPortDrivesSignalNoLonger(MathNet.Symbolics.Signal,MathNet.Symbolics.Port,System.Int32):System.Void" Analyze="True" />
          <Member Name="NotifySignalDrivesPort(MathNet.Symbolics.Signal,MathNet.Symbolics.Port,System.Int32):System.Void" Analyze="True" />
          <Member Name="NotifySignalDrivesPortNoLonger(MathNet.Symbolics.Signal,MathNet.Symbolics.Port,System.Int32):System.Void" Analyze="True" />
          <Member Name="NotifySignalValueChanged(MathNet.Symbolics.Signal):System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="IObserver" Analyze="True">
         <Members>
          <Member Name="OnBusAttachedToPort(MathNet.Symbolics.Bus,MathNet.Symbolics.Port,System.Int32):System.Void" Analyze="True" />
          <Member Name="OnBusDetachedFromPort(MathNet.Symbolics.Bus,MathNet.Symbolics.Port,System.Int32):System.Void" Analyze="True" />
          <Member Name="OnBusValueChanged(MathNet.Symbolics.Bus):System.Void" Analyze="True" />
          <Member Name="OnNewBusCreated(MathNet.Symbolics.Bus):System.Void" Analyze="True" />
          <Member Name="OnNewPortCreated(MathNet.Symbolics.Port):System.Void" Analyze="True" />
          <Member Name="OnNewSignalCreated(MathNet.Symbolics.Signal):System.Void" Analyze="True" />
          <Member Name="OnPortDrivesSignal(MathNet.Symbolics.Signal,MathNet.Symbolics.Port,System.Int32):System.Void" Analyze="True" />
          <Member Name="OnPortDrivesSignalNoLonger(MathNet.Symbolics.Signal,MathNet.Symbolics.Port,System.Int32):System.Void" Analyze="True" />
          <Member Name="OnSignalDrivesPort(MathNet.Symbolics.Signal,MathNet.Symbolics.Port,System.Int32):System.Void" Analyze="True" />
          <Member Name="OnSignalDrivesPortNoLonger(MathNet.Symbolics.Signal,MathNet.Symbolics.Port,System.Int32):System.Void" Analyze="True" />
          <Member Name="OnSignalValueChanged(MathNet.Symbolics.Signal):System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="ISystemMediator" Analyze="True">
         <Members>
          <Member Name="AttachObserver(MathNet.Symbolics.Mediator.ISystemObserver):System.Void" Analyze="True" />
          <Member Name="DetachObserver(MathNet.Symbolics.Mediator.ISystemObserver):System.Void" Analyze="True" />
          <Member Name="BusAdded" Kind="Event" Analyze="True">
           <Accessors>
            <Accessor Name="add_BusAdded(System.EventHandler`1&lt;MathNet.Symbolics.Events.BusIndexEventArgs&gt;):System.Void" Analyze="True" />
            <Accessor Name="remove_BusAdded(System.EventHandler`1&lt;MathNet.Symbolics.Events.BusIndexEventArgs&gt;):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="BusAttachedToPort" Kind="Event" Analyze="True">
           <Accessors>
            <Accessor Name="add_BusAttachedToPort(System.EventHandler`1&lt;MathNet.Symbolics.Events.BusPortIndexEventArgs&gt;):System.Void" Analyze="True" />
            <Accessor Name="remove_BusAttachedToPort(System.EventHandler`1&lt;MathNet.Symbolics.Events.BusPortIndexEventArgs&gt;):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="BusDetachedFromPort" Kind="Event" Analyze="True">
           <Accessors>
            <Accessor Name="add_BusDetachedFromPort(System.EventHandler`1&lt;MathNet.Symbolics.Events.BusPortIndexEventArgs&gt;):System.Void" Analyze="True" />
            <Accessor Name="remove_BusDetachedFromPort(System.EventHandler`1&lt;MathNet.Symbolics.Events.BusPortIndexEventArgs&gt;):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="BusMoved" Kind="Event" Analyze="True">
           <Accessors>
            <Accessor Name="add_BusMoved(System.EventHandler`1&lt;MathNet.Symbolics.Events.BusIndexChangedEventArgs&gt;):System.Void" Analyze="True" />
            <Accessor Name="remove_BusMoved(System.EventHandler`1&lt;MathNet.Symbolics.Events.BusIndexChangedEventArgs&gt;):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="BusRemoved" Kind="Event" Analyze="True">
           <Accessors>
            <Accessor Name="add_BusRemoved(System.EventHandler`1&lt;MathNet.Symbolics.Events.BusIndexEventArgs&gt;):System.Void" Analyze="True" />
            <Accessor Name="remove_BusRemoved(System.EventHandler`1&lt;MathNet.Symbolics.Events.BusIndexEventArgs&gt;):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="BusValueChanged" Kind="Event" Analyze="True">
           <Accessors>
            <Accessor Name="add_BusValueChanged(System.EventHandler`1&lt;MathNet.Symbolics.Events.BusEventArgs&gt;):System.Void" Analyze="True" />
            <Accessor Name="remove_BusValueChanged(System.EventHandler`1&lt;MathNet.Symbolics.Events.BusEventArgs&gt;):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="InputAdded" Kind="Event" Analyze="True">
           <Accessors>
            <Accessor Name="add_InputAdded(System.EventHandler`1&lt;MathNet.Symbolics.Events.SignalIndexEventArgs&gt;):System.Void" Analyze="True" />
            <Accessor Name="remove_InputAdded(System.EventHandler`1&lt;MathNet.Symbolics.Events.SignalIndexEventArgs&gt;):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="InputMoved" Kind="Event" Analyze="True">
           <Accessors>
            <Accessor Name="add_InputMoved(System.EventHandler`1&lt;MathNet.Symbolics.Events.SignalIndexChangedEventArgs&gt;):System.Void" Analyze="True" />
            <Accessor Name="remove_InputMoved(System.EventHandler`1&lt;MathNet.Symbolics.Events.SignalIndexChangedEventArgs&gt;):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="InputRemoved" Kind="Event" Analyze="True">
           <Accessors>
            <Accessor Name="add_InputRemoved(System.EventHandler`1&lt;MathNet.Symbolics.Events.SignalIndexEventArgs&gt;):System.Void" Analyze="True" />
            <Accessor Name="remove_InputRemoved(System.EventHandler`1&lt;MathNet.Symbolics.Events.SignalIndexEventArgs&gt;):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="OutputAdded" Kind="Event" Analyze="True">
           <Accessors>
            <Accessor Name="add_OutputAdded(System.EventHandler`1&lt;MathNet.Symbolics.Events.SignalIndexEventArgs&gt;):System.Void" Analyze="True" />
            <Accessor Name="remove_OutputAdded(System.EventHandler`1&lt;MathNet.Symbolics.Events.SignalIndexEventArgs&gt;):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="OutputMoved" Kind="Event" Analyze="True">
           <Accessors>
            <Accessor Name="add_OutputMoved(System.EventHandler`1&lt;MathNet.Symbolics.Events.SignalIndexChangedEventArgs&gt;):System.Void" Analyze="True" />
            <Accessor Name="remove_OutputMoved(System.EventHandler`1&lt;MathNet.Symbolics.Events.SignalIndexChangedEventArgs&gt;):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="OutputRemoved" Kind="Event" Analyze="True">
           <Accessors>
            <Accessor Name="add_OutputRemoved(System.EventHandler`1&lt;MathNet.Symbolics.Events.SignalIndexEventArgs&gt;):System.Void" Analyze="True" />
            <Accessor Name="remove_OutputRemoved(System.EventHandler`1&lt;MathNet.Symbolics.Events.SignalIndexEventArgs&gt;):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="PortAdded" Kind="Event" Analyze="True">
           <Accessors>
            <Accessor Name="add_PortAdded(System.EventHandler`1&lt;MathNet.Symbolics.Events.PortIndexEventArgs&gt;):System.Void" Analyze="True" />
            <Accessor Name="remove_PortAdded(System.EventHandler`1&lt;MathNet.Symbolics.Events.PortIndexEventArgs&gt;):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="PortDrivesSignal" Kind="Event" Analyze="True">
           <Accessors>
            <Accessor Name="add_PortDrivesSignal(System.EventHandler`1&lt;MathNet.Symbolics.Events.SignalPortIndexEventArgs&gt;):System.Void" Analyze="True" />
            <Accessor Name="remove_PortDrivesSignal(System.EventHandler`1&lt;MathNet.Symbolics.Events.SignalPortIndexEventArgs&gt;):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="PortDrivesSignalNoLonger" Kind="Event" Analyze="True">
           <Accessors>
            <Accessor Name="add_PortDrivesSignalNoLonger(System.EventHandler`1&lt;MathNet.Symbolics.Events.SignalPortIndexEventArgs&gt;):System.Void" Analyze="True" />
            <Accessor Name="remove_PortDrivesSignalNoLonger(System.EventHandler`1&lt;MathNet.Symbolics.Events.SignalPortIndexEventArgs&gt;):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="PortMoved" Kind="Event" Analyze="True">
           <Accessors>
            <Accessor Name="add_PortMoved(System.EventHandler`1&lt;MathNet.Symbolics.Events.PortIndexChangedEventArgs&gt;):System.Void" Analyze="True" />
            <Accessor Name="remove_PortMoved(System.EventHandler`1&lt;MathNet.Symbolics.Events.PortIndexChangedEventArgs&gt;):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="PortRemoved" Kind="Event" Analyze="True">
           <Accessors>
            <Accessor Name="add_PortRemoved(System.EventHandler`1&lt;MathNet.Symbolics.Events.PortIndexEventArgs&gt;):System.Void" Analyze="True" />
            <Accessor Name="remove_PortRemoved(System.EventHandler`1&lt;MathNet.Symbolics.Events.PortIndexEventArgs&gt;):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="SignalAdded" Kind="Event" Analyze="True">
           <Accessors>
            <Accessor Name="add_SignalAdded(System.EventHandler`1&lt;MathNet.Symbolics.Events.SignalIndexEventArgs&gt;):System.Void" Analyze="True" />
            <Accessor Name="remove_SignalAdded(System.EventHandler`1&lt;MathNet.Symbolics.Events.SignalIndexEventArgs&gt;):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="SignalDrivesPort" Kind="Event" Analyze="True">
           <Accessors>
            <Accessor Name="add_SignalDrivesPort(System.EventHandler`1&lt;MathNet.Symbolics.Events.SignalPortIndexEventArgs&gt;):System.Void" Analyze="True" />
            <Accessor Name="remove_SignalDrivesPort(System.EventHandler`1&lt;MathNet.Symbolics.Events.SignalPortIndexEventArgs&gt;):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="SignalDrivesPortNoLonger" Kind="Event" Analyze="True">
           <Accessors>
            <Accessor Name="add_SignalDrivesPortNoLonger(System.EventHandler`1&lt;MathNet.Symbolics.Events.SignalPortIndexEventArgs&gt;):System.Void" Analyze="True" />
            <Accessor Name="remove_SignalDrivesPortNoLonger(System.EventHandler`1&lt;MathNet.Symbolics.Events.SignalPortIndexEventArgs&gt;):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="SignalMoved" Kind="Event" Analyze="True">
           <Accessors>
            <Accessor Name="add_SignalMoved(System.EventHandler`1&lt;MathNet.Symbolics.Events.SignalIndexChangedEventArgs&gt;):System.Void" Analyze="True" />
            <Accessor Name="remove_SignalMoved(System.EventHandler`1&lt;MathNet.Symbolics.Events.SignalIndexChangedEventArgs&gt;):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="SignalRemoved" Kind="Event" Analyze="True">
           <Accessors>
            <Accessor Name="add_SignalRemoved(System.EventHandler`1&lt;MathNet.Symbolics.Events.SignalIndexEventArgs&gt;):System.Void" Analyze="True" />
            <Accessor Name="remove_SignalRemoved(System.EventHandler`1&lt;MathNet.Symbolics.Events.SignalIndexEventArgs&gt;):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="SignalValueChanged" Kind="Event" Analyze="True">
           <Accessors>
            <Accessor Name="add_SignalValueChanged(System.EventHandler`1&lt;MathNet.Symbolics.Events.SignalEventArgs&gt;):System.Void" Analyze="True" />
            <Accessor Name="remove_SignalValueChanged(System.EventHandler`1&lt;MathNet.Symbolics.Events.SignalEventArgs&gt;):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="NotifyBusAdded(MathNet.Symbolics.Bus,System.Int32):System.Void" Analyze="True" />
          <Member Name="NotifyBusMoved(MathNet.Symbolics.Bus,System.Int32,System.Int32):System.Void" Analyze="True" />
          <Member Name="NotifyBusRemoved(MathNet.Symbolics.Bus,System.Int32):System.Void" Analyze="True" />
          <Member Name="NotifyInputAdded(MathNet.Symbolics.Signal,System.Int32):System.Void" Analyze="True" />
          <Member Name="NotifyInputMoved(MathNet.Symbolics.Signal,System.Int32,System.Int32):System.Void" Analyze="True" />
          <Member Name="NotifyInputRemoved(MathNet.Symbolics.Signal,System.Int32):System.Void" Analyze="True" />
          <Member Name="NotifyOutputAdded(MathNet.Symbolics.Signal,System.Int32):System.Void" Analyze="True" />
          <Member Name="NotifyOutputMoved(MathNet.Symbolics.Signal,System.Int32,System.Int32):System.Void" Analyze="True" />
          <Member Name="NotifyOutputRemoved(MathNet.Symbolics.Signal,System.Int32):System.Void" Analyze="True" />
          <Member Name="NotifyPortAdded(MathNet.Symbolics.Port,System.Int32):System.Void" Analyze="True" />
          <Member Name="NotifyPortMoved(MathNet.Symbolics.Port,System.Int32,System.Int32):System.Void" Analyze="True" />
          <Member Name="NotifyPortRemoved(MathNet.Symbolics.Port,System.Int32):System.Void" Analyze="True" />
          <Member Name="NotifySignalAdded(MathNet.Symbolics.Signal,System.Int32):System.Void" Analyze="True" />
          <Member Name="NotifySignalMoved(MathNet.Symbolics.Signal,System.Int32,System.Int32):System.Void" Analyze="True" />
          <Member Name="NotifySignalRemoved(MathNet.Symbolics.Signal,System.Int32):System.Void" Analyze="True" />
          <Member Name="SubscribeSystem(MathNet.Symbolics.IMathSystem):System.Void" Analyze="True" />
          <Member Name="UnsubscribeSystem(MathNet.Symbolics.IMathSystem):System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="ISystemObserver" Analyze="True">
         <Members>
          <Member Name="AttachedToSystem(MathNet.Symbolics.IMathSystem):System.Void" Analyze="True" />
          <Member Name="AutoDetachOnSystemChanged" Analyze="True">
           <Accessors>
            <Accessor Name="get_AutoDetachOnSystemChanged():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="AutoInitialize" Analyze="True">
           <Accessors>
            <Accessor Name="get_AutoInitialize():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="BeginInitialize():System.Void" Analyze="True" />
          <Member Name="DetachedFromSystem(MathNet.Symbolics.IMathSystem):System.Void" Analyze="True" />
          <Member Name="EndInitialize():System.Void" Analyze="True" />
          <Member Name="OnBusAdded(MathNet.Symbolics.Bus,System.Int32):System.Void" Analyze="True" />
          <Member Name="OnBusAttachedToPort(MathNet.Symbolics.Bus,MathNet.Symbolics.Port,System.Int32):System.Void" Analyze="True" />
          <Member Name="OnBusDetachedFromPort(MathNet.Symbolics.Bus,MathNet.Symbolics.Port,System.Int32):System.Void" Analyze="True" />
          <Member Name="OnBusMoved(MathNet.Symbolics.Bus,System.Int32,System.Int32):System.Void" Analyze="True" />
          <Member Name="OnBusRemoved(MathNet.Symbolics.Bus,System.Int32):System.Void" Analyze="True" />
          <Member Name="OnBusValueChanged(MathNet.Symbolics.Bus):System.Void" Analyze="True" />
          <Member Name="OnInputAdded(MathNet.Symbolics.Signal,System.Int32):System.Void" Analyze="True" />
          <Member Name="OnInputMoved(MathNet.Symbolics.Signal,System.Int32,System.Int32):System.Void" Analyze="True" />
          <Member Name="OnInputRemoved(MathNet.Symbolics.Signal,System.Int32):System.Void" Analyze="True" />
          <Member Name="OnOutputAdded(MathNet.Symbolics.Signal,System.Int32):System.Void" Analyze="True" />
          <Member Name="OnOutputMoved(MathNet.Symbolics.Signal,System.Int32,System.Int32):System.Void" Analyze="True" />
          <Member Name="OnOutputRemoved(MathNet.Symbolics.Signal,System.Int32):System.Void" Analyze="True" />
          <Member Name="OnPortAdded(MathNet.Symbolics.Port,System.Int32):System.Void" Analyze="True" />
          <Member Name="OnPortDrivesSignal(MathNet.Symbolics.Signal,MathNet.Symbolics.Port,System.Int32):System.Void" Analyze="True" />
          <Member Name="OnPortDrivesSignalNoLonger(MathNet.Symbolics.Signal,MathNet.Symbolics.Port,System.Int32):System.Void" Analyze="True" />
          <Member Name="OnPortMoved(MathNet.Symbolics.Port,System.Int32,System.Int32):System.Void" Analyze="True" />
          <Member Name="OnPortRemoved(MathNet.Symbolics.Port,System.Int32):System.Void" Analyze="True" />
          <Member Name="OnSignalAdded(MathNet.Symbolics.Signal,System.Int32):System.Void" Analyze="True" />
          <Member Name="OnSignalDrivesPort(MathNet.Symbolics.Signal,MathNet.Symbolics.Port,System.Int32):System.Void" Analyze="True" />
          <Member Name="OnSignalDrivesPortNoLonger(MathNet.Symbolics.Signal,MathNet.Symbolics.Port,System.Int32):System.Void" Analyze="True" />
          <Member Name="OnSignalMoved(MathNet.Symbolics.Signal,System.Int32,System.Int32):System.Void" Analyze="True" />
          <Member Name="OnSignalRemoved(MathNet.Symbolics.Signal,System.Int32):System.Void" Analyze="True" />
          <Member Name="OnSignalValueChanged(MathNet.Symbolics.Signal):System.Void" Analyze="True" />
         </Members>
        </Type>
       </Types>
      </Namespace>
     </Namespaces>
    </Module>
   </Modules>
  </Target>
  <Target Name="$(ProjectDir)/src/app/MathNet.Yttrium/Mediator.Service/bin/Debug/MathNet.Yttrium.Mediator.Service.dll" Analyze="True">
   <Modules>
    <Module Name="mathnet.yttrium.mediator.service.dll" Analyze="True">
     <Namespaces>
      <Namespace Name="" Analyze="True">
       <Types>
        <Type Name="&lt;Module&gt;" Analyze="True" />
       </Types>
      </Namespace>
      <Namespace Name="MathNet.Symbolics" Analyze="True">
       <Types>
        <Type Name="MediatorFactory" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="GetInstance():MathNet.Symbolics.Mediator.ISystemMediator" Analyze="True" />
          <Member Name="MathNet.Symbolics.IFactory&lt;MathNet.Symbolics.Mediator.IMediator&gt;.GetInstance():MathNet.Symbolics.Mediator.IMediator" Analyze="True" />
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="MathNet.Symbolics.Mediator" Analyze="True">
       <Types>
        <Type Name="Mediator" Analyze="True">
         <Members>
          <Member Name=".cctor()" Analyze="True" />
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="_instance" Analyze="True" />
          <Member Name="_observers" Analyze="True" />
          <Member Name="AttachObserver(MathNet.Symbolics.Mediator.IObserver):System.Void" Analyze="True" />
          <Member Name="BusAttachedToPort" Analyze="True" />
          <Member Name="BusDetachedFromPort" Analyze="True" />
          <Member Name="BusValueChanged" Analyze="True" />
          <Member Name="DetachObserver(MathNet.Symbolics.Mediator.IObserver):System.Void" Analyze="True" />
          <Member Name="BusAttachedToPort" Kind="Event" Analyze="True">
           <Accessors>
            <Accessor Name="add_BusAttachedToPort(System.EventHandler`1&lt;MathNet.Symbolics.Events.BusPortIndexEventArgs&gt;):System.Void" Analyze="True" />
            <Accessor Name="remove_BusAttachedToPort(System.EventHandler`1&lt;MathNet.Symbolics.Events.BusPortIndexEventArgs&gt;):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="BusDetachedFromPort" Kind="Event" Analyze="True">
           <Accessors>
            <Accessor Name="add_BusDetachedFromPort(System.EventHandler`1&lt;MathNet.Symbolics.Events.BusPortIndexEventArgs&gt;):System.Void" Analyze="True" />
            <Accessor Name="remove_BusDetachedFromPort(System.EventHandler`1&lt;MathNet.Symbolics.Events.BusPortIndexEventArgs&gt;):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="BusValueChanged" Kind="Event" Analyze="True">
           <Accessors>
            <Accessor Name="add_BusValueChanged(System.EventHandler`1&lt;MathNet.Symbolics.Events.BusEventArgs&gt;):System.Void" Analyze="True" />
            <Accessor Name="remove_BusValueChanged(System.EventHandler`1&lt;MathNet.Symbolics.Events.BusEventArgs&gt;):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="NewBusCreated" Kind="Event" Analyze="True">
           <Accessors>
            <Accessor Name="add_NewBusCreated(System.EventHandler`1&lt;MathNet.Symbolics.Events.BusEventArgs&gt;):System.Void" Analyze="True" />
            <Accessor Name="remove_NewBusCreated(System.EventHandler`1&lt;MathNet.Symbolics.Events.BusEventArgs&gt;):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="NewPortCreated" Kind="Event" Analyze="True">
           <Accessors>
            <Accessor Name="add_NewPortCreated(System.EventHandler`1&lt;MathNet.Symbolics.Events.PortEventArgs&gt;):System.Void" Analyze="True" />
            <Accessor Name="remove_NewPortCreated(System.EventHandler`1&lt;MathNet.Symbolics.Events.PortEventArgs&gt;):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="NewSignalCreated" Kind="Event" Analyze="True">
           <Accessors>
            <Accessor Name="add_NewSignalCreated(System.EventHandler`1&lt;MathNet.Symbolics.Events.SignalEventArgs&gt;):System.Void" Analyze="True" />
            <Accessor Name="remove_NewSignalCreated(System.EventHandler`1&lt;MathNet.Symbolics.Events.SignalEventArgs&gt;):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="PortDrivesSignal" Kind="Event" Analyze="True">
           <Accessors>
            <Accessor Name="add_PortDrivesSignal(System.EventHandler`1&lt;MathNet.Symbolics.Events.SignalPortIndexEventArgs&gt;):System.Void" Analyze="True" />
            <Accessor Name="remove_PortDrivesSignal(System.EventHandler`1&lt;MathNet.Symbolics.Events.SignalPortIndexEventArgs&gt;):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="PortDrivesSignalNoLonger" Kind="Event" Analyze="True">
           <Accessors>
            <Accessor Name="add_PortDrivesSignalNoLonger(System.EventHandler`1&lt;MathNet.Symbolics.Events.SignalPortIndexEventArgs&gt;):System.Void" Analyze="True" />
            <Accessor Name="remove_PortDrivesSignalNoLonger(System.EventHandler`1&lt;MathNet.Symbolics.Events.SignalPortIndexEventArgs&gt;):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="SignalDrivesPort" Kind="Event" Analyze="True">
           <Accessors>
            <Accessor Name="add_SignalDrivesPort(System.EventHandler`1&lt;MathNet.Symbolics.Events.SignalPortIndexEventArgs&gt;):System.Void" Analyze="True" />
            <Accessor Name="remove_SignalDrivesPort(System.EventHandler`1&lt;MathNet.Symbolics.Events.SignalPortIndexEventArgs&gt;):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="SignalDrivesPortNoLonger" Kind="Event" Analyze="True">
           <Accessors>
            <Accessor Name="add_SignalDrivesPortNoLonger(System.EventHandler`1&lt;MathNet.Symbolics.Events.SignalPortIndexEventArgs&gt;):System.Void" Analyze="True" />
            <Accessor Name="remove_SignalDrivesPortNoLonger(System.EventHandler`1&lt;MathNet.Symbolics.Events.SignalPortIndexEventArgs&gt;):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="SignalValueChanged" Kind="Event" Analyze="True">
           <Accessors>
            <Accessor Name="add_SignalValueChanged(System.EventHandler`1&lt;MathNet.Symbolics.Events.SignalEventArgs&gt;):System.Void" Analyze="True" />
            <Accessor Name="remove_SignalValueChanged(System.EventHandler`1&lt;MathNet.Symbolics.Events.SignalEventArgs&gt;):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Instance" Analyze="True">
           <Accessors>
            <Accessor Name="get_Instance():MathNet.Symbolics.Mediator.Mediator" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="NewBusCreated" Analyze="True" />
          <Member Name="NewPortCreated" Analyze="True" />
          <Member Name="NewSignalCreated" Analyze="True" />
          <Member Name="NotifyBusAttachedToPort(MathNet.Symbolics.Bus,MathNet.Symbolics.Port,System.Int32):System.Void" Analyze="True" />
          <Member Name="NotifyBusDetachedFromPort(MathNet.Symbolics.Bus,MathNet.Symbolics.Port,System.Int32):System.Void" Analyze="True" />
          <Member Name="NotifyBusValueChanged(MathNet.Symbolics.Bus):System.Void" Analyze="True" />
          <Member Name="NotifyNewBusCreated(MathNet.Symbolics.Bus):System.Void" Analyze="True" />
          <Member Name="NotifyNewPortCreated(MathNet.Symbolics.Port):System.Void" Analyze="True" />
          <Member Name="NotifyNewSignalCreated(MathNet.Symbolics.Signal):System.Void" Analyze="True" />
          <Member Name="NotifyPortDrivesSignal(MathNet.Symbolics.Signal,MathNet.Symbolics.Port,System.Int32):System.Void" Analyze="True" />
          <Member Name="NotifyPortDrivesSignalNoLonger(MathNet.Symbolics.Signal,MathNet.Symbolics.Port,System.Int32):System.Void" Analyze="True" />
          <Member Name="NotifySignalDrivesPort(MathNet.Symbolics.Signal,MathNet.Symbolics.Port,System.Int32):System.Void" Analyze="True" />
          <Member Name="NotifySignalDrivesPortNoLonger(MathNet.Symbolics.Signal,MathNet.Symbolics.Port,System.Int32):System.Void" Analyze="True" />
          <Member Name="NotifySignalValueChanged(MathNet.Symbolics.Signal):System.Void" Analyze="True" />
          <Member Name="PortDrivesSignal" Analyze="True" />
          <Member Name="PortDrivesSignalNoLonger" Analyze="True" />
          <Member Name="SignalDrivesPort" Analyze="True" />
          <Member Name="SignalDrivesPortNoLonger" Analyze="True" />
          <Member Name="SignalValueChanged" Analyze="True" />
         </Members>
        </Type>
        <Type Name="SystemMediator" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="_observers" Analyze="True" />
          <Member Name="_system" Analyze="True" />
          <Member Name="AttachObserver(MathNet.Symbolics.Mediator.ISystemObserver):System.Void" Analyze="True" />
          <Member Name="BusAdded" Analyze="True" />
          <Member Name="BusAttachedToPort" Analyze="True" />
          <Member Name="BusDetachedFromPort" Analyze="True" />
          <Member Name="BusMoved" Analyze="True" />
          <Member Name="BusRemoved" Analyze="True" />
          <Member Name="BusValueChanged" Analyze="True" />
          <Member Name="DetachObserver(MathNet.Symbolics.Mediator.ISystemObserver):System.Void" Analyze="True" />
          <Member Name="BusAdded" Kind="Event" Analyze="True">
           <Accessors>
            <Accessor Name="add_BusAdded(System.EventHandler`1&lt;MathNet.Symbolics.Events.BusIndexEventArgs&gt;):System.Void" Analyze="True" />
            <Accessor Name="remove_BusAdded(System.EventHandler`1&lt;MathNet.Symbolics.Events.BusIndexEventArgs&gt;):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="BusAttachedToPort" Kind="Event" Analyze="True">
           <Accessors>
            <Accessor Name="add_BusAttachedToPort(System.EventHandler`1&lt;MathNet.Symbolics.Events.BusPortIndexEventArgs&gt;):System.Void" Analyze="True" />
            <Accessor Name="remove_BusAttachedToPort(System.EventHandler`1&lt;MathNet.Symbolics.Events.BusPortIndexEventArgs&gt;):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="BusDetachedFromPort" Kind="Event" Analyze="True">
           <Accessors>
            <Accessor Name="add_BusDetachedFromPort(System.EventHandler`1&lt;MathNet.Symbolics.Events.BusPortIndexEventArgs&gt;):System.Void" Analyze="True" />
            <Accessor Name="remove_BusDetachedFromPort(System.EventHandler`1&lt;MathNet.Symbolics.Events.BusPortIndexEventArgs&gt;):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="BusMoved" Kind="Event" Analyze="True">
           <Accessors>
            <Accessor Name="add_BusMoved(System.EventHandler`1&lt;MathNet.Symbolics.Events.BusIndexChangedEventArgs&gt;):System.Void" Analyze="True" />
            <Accessor Name="remove_BusMoved(System.EventHandler`1&lt;MathNet.Symbolics.Events.BusIndexChangedEventArgs&gt;):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="BusRemoved" Kind="Event" Analyze="True">
           <Accessors>
            <Accessor Name="add_BusRemoved(System.EventHandler`1&lt;MathNet.Symbolics.Events.BusIndexEventArgs&gt;):System.Void" Analyze="True" />
            <Accessor Name="remove_BusRemoved(System.EventHandler`1&lt;MathNet.Symbolics.Events.BusIndexEventArgs&gt;):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="BusValueChanged" Kind="Event" Analyze="True">
           <Accessors>
            <Accessor Name="add_BusValueChanged(System.EventHandler`1&lt;MathNet.Symbolics.Events.BusEventArgs&gt;):System.Void" Analyze="True" />
            <Accessor Name="remove_BusValueChanged(System.EventHandler`1&lt;MathNet.Symbolics.Events.BusEventArgs&gt;):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="InputAdded" Kind="Event" Analyze="True">
           <Accessors>
            <Accessor Name="add_InputAdded(System.EventHandler`1&lt;MathNet.Symbolics.Events.SignalIndexEventArgs&gt;):System.Void" Analyze="True" />
            <Accessor Name="remove_InputAdded(System.EventHandler`1&lt;MathNet.Symbolics.Events.SignalIndexEventArgs&gt;):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="InputMoved" Kind="Event" Analyze="True">
           <Accessors>
            <Accessor Name="add_InputMoved(System.EventHandler`1&lt;MathNet.Symbolics.Events.SignalIndexChangedEventArgs&gt;):System.Void" Analyze="True" />
            <Accessor Name="remove_InputMoved(System.EventHandler`1&lt;MathNet.Symbolics.Events.SignalIndexChangedEventArgs&gt;):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="InputRemoved" Kind="Event" Analyze="True">
           <Accessors>
            <Accessor Name="add_InputRemoved(System.EventHandler`1&lt;MathNet.Symbolics.Events.SignalIndexEventArgs&gt;):System.Void" Analyze="True" />
            <Accessor Name="remove_InputRemoved(System.EventHandler`1&lt;MathNet.Symbolics.Events.SignalIndexEventArgs&gt;):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="OutputAdded" Kind="Event" Analyze="True">
           <Accessors>
            <Accessor Name="add_OutputAdded(System.EventHandler`1&lt;MathNet.Symbolics.Events.SignalIndexEventArgs&gt;):System.Void" Analyze="True" />
            <Accessor Name="remove_OutputAdded(System.EventHandler`1&lt;MathNet.Symbolics.Events.SignalIndexEventArgs&gt;):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="OutputMoved" Kind="Event" Analyze="True">
           <Accessors>
            <Accessor Name="add_OutputMoved(System.EventHandler`1&lt;MathNet.Symbolics.Events.SignalIndexChangedEventArgs&gt;):System.Void" Analyze="True" />
            <Accessor Name="remove_OutputMoved(System.EventHandler`1&lt;MathNet.Symbolics.Events.SignalIndexChangedEventArgs&gt;):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="OutputRemoved" Kind="Event" Analyze="True">
           <Accessors>
            <Accessor Name="add_OutputRemoved(System.EventHandler`1&lt;MathNet.Symbolics.Events.SignalIndexEventArgs&gt;):System.Void" Analyze="True" />
            <Accessor Name="remove_OutputRemoved(System.EventHandler`1&lt;MathNet.Symbolics.Events.SignalIndexEventArgs&gt;):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="PortAdded" Kind="Event" Analyze="True">
           <Accessors>
            <Accessor Name="add_PortAdded(System.EventHandler`1&lt;MathNet.Symbolics.Events.PortIndexEventArgs&gt;):System.Void" Analyze="True" />
            <Accessor Name="remove_PortAdded(System.EventHandler`1&lt;MathNet.Symbolics.Events.PortIndexEventArgs&gt;):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="PortDrivesSignal" Kind="Event" Analyze="True">
           <Accessors>
            <Accessor Name="add_PortDrivesSignal(System.EventHandler`1&lt;MathNet.Symbolics.Events.SignalPortIndexEventArgs&gt;):System.Void" Analyze="True" />
            <Accessor Name="remove_PortDrivesSignal(System.EventHandler`1&lt;MathNet.Symbolics.Events.SignalPortIndexEventArgs&gt;):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="PortDrivesSignalNoLonger" Kind="Event" Analyze="True">
           <Accessors>
            <Accessor Name="add_PortDrivesSignalNoLonger(System.EventHandler`1&lt;MathNet.Symbolics.Events.SignalPortIndexEventArgs&gt;):System.Void" Analyze="True" />
            <Accessor Name="remove_PortDrivesSignalNoLonger(System.EventHandler`1&lt;MathNet.Symbolics.Events.SignalPortIndexEventArgs&gt;):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="PortMoved" Kind="Event" Analyze="True">
           <Accessors>
            <Accessor Name="add_PortMoved(System.EventHandler`1&lt;MathNet.Symbolics.Events.PortIndexChangedEventArgs&gt;):System.Void" Analyze="True" />
            <Accessor Name="remove_PortMoved(System.EventHandler`1&lt;MathNet.Symbolics.Events.PortIndexChangedEventArgs&gt;):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="PortRemoved" Kind="Event" Analyze="True">
           <Accessors>
            <Accessor Name="add_PortRemoved(System.EventHandler`1&lt;MathNet.Symbolics.Events.PortIndexEventArgs&gt;):System.Void" Analyze="True" />
            <Accessor Name="remove_PortRemoved(System.EventHandler`1&lt;MathNet.Symbolics.Events.PortIndexEventArgs&gt;):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="SignalAdded" Kind="Event" Analyze="True">
           <Accessors>
            <Accessor Name="add_SignalAdded(System.EventHandler`1&lt;MathNet.Symbolics.Events.SignalIndexEventArgs&gt;):System.Void" Analyze="True" />
            <Accessor Name="remove_SignalAdded(System.EventHandler`1&lt;MathNet.Symbolics.Events.SignalIndexEventArgs&gt;):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="SignalDrivesPort" Kind="Event" Analyze="True">
           <Accessors>
            <Accessor Name="add_SignalDrivesPort(System.EventHandler`1&lt;MathNet.Symbolics.Events.SignalPortIndexEventArgs&gt;):System.Void" Analyze="True" />
            <Accessor Name="remove_SignalDrivesPort(System.EventHandler`1&lt;MathNet.Symbolics.Events.SignalPortIndexEventArgs&gt;):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="SignalDrivesPortNoLonger" Kind="Event" Analyze="True">
           <Accessors>
            <Accessor Name="add_SignalDrivesPortNoLonger(System.EventHandler`1&lt;MathNet.Symbolics.Events.SignalPortIndexEventArgs&gt;):System.Void" Analyze="True" />
            <Accessor Name="remove_SignalDrivesPortNoLonger(System.EventHandler`1&lt;MathNet.Symbolics.Events.SignalPortIndexEventArgs&gt;):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="SignalMoved" Kind="Event" Analyze="True">
           <Accessors>
            <Accessor Name="add_SignalMoved(System.EventHandler`1&lt;MathNet.Symbolics.Events.SignalIndexChangedEventArgs&gt;):System.Void" Analyze="True" />
            <Accessor Name="remove_SignalMoved(System.EventHandler`1&lt;MathNet.Symbolics.Events.SignalIndexChangedEventArgs&gt;):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="SignalRemoved" Kind="Event" Analyze="True">
           <Accessors>
            <Accessor Name="add_SignalRemoved(System.EventHandler`1&lt;MathNet.Symbolics.Events.SignalIndexEventArgs&gt;):System.Void" Analyze="True" />
            <Accessor Name="remove_SignalRemoved(System.EventHandler`1&lt;MathNet.Symbolics.Events.SignalIndexEventArgs&gt;):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="SignalValueChanged" Kind="Event" Analyze="True">
           <Accessors>
            <Accessor Name="add_SignalValueChanged(System.EventHandler`1&lt;MathNet.Symbolics.Events.SignalEventArgs&gt;):System.Void" Analyze="True" />
            <Accessor Name="remove_SignalValueChanged(System.EventHandler`1&lt;MathNet.Symbolics.Events.SignalEventArgs&gt;):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="SystemChanged" Kind="Event" Analyze="True">
           <Accessors>
            <Accessor Name="add_SystemChanged(System.EventHandler):System.Void" Analyze="True" />
            <Accessor Name="remove_SystemChanged(System.EventHandler):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="InitializeObserverWithCurrentSystem(MathNet.Symbolics.Mediator.ISystemObserver):System.Void" Analyze="True" />
          <Member Name="InputAdded" Analyze="True" />
          <Member Name="InputMoved" Analyze="True" />
          <Member Name="InputRemoved" Analyze="True" />
          <Member Name="MathNet.Symbolics.Mediator.IObserver.OnBusAttachedToPort(MathNet.Symbolics.Bus,MathNet.Symbolics.Port,System.Int32):System.Void" Analyze="True" />
          <Member Name="MathNet.Symbolics.Mediator.IObserver.OnBusDetachedFromPort(MathNet.Symbolics.Bus,MathNet.Symbolics.Port,System.Int32):System.Void" Analyze="True" />
          <Member Name="MathNet.Symbolics.Mediator.IObserver.OnBusValueChanged(MathNet.Symbolics.Bus):System.Void" Analyze="True" />
          <Member Name="MathNet.Symbolics.Mediator.IObserver.OnNewBusCreated(MathNet.Symbolics.Bus):System.Void" Analyze="True" />
          <Member Name="MathNet.Symbolics.Mediator.IObserver.OnNewPortCreated(MathNet.Symbolics.Port):System.Void" Analyze="True" />
          <Member Name="MathNet.Symbolics.Mediator.IObserver.OnNewSignalCreated(MathNet.Symbolics.Signal):System.Void" Analyze="True" />
          <Member Name="MathNet.Symbolics.Mediator.IObserver.OnPortDrivesSignal(MathNet.Symbolics.Signal,MathNet.Symbolics.Port,System.Int32):System.Void" Analyze="True" />
          <Member Name="MathNet.Symbolics.Mediator.IObserver.OnPortDrivesSignalNoLonger(MathNet.Symbolics.Signal,MathNet.Symbolics.Port,System.Int32):System.Void" Analyze="True" />
          <Member Name="MathNet.Symbolics.Mediator.IObserver.OnSignalDrivesPort(MathNet.Symbolics.Signal,MathNet.Symbolics.Port,System.Int32):System.Void" Analyze="True" />
          <Member Name="MathNet.Symbolics.Mediator.IObserver.OnSignalDrivesPortNoLonger(MathNet.Symbolics.Signal,MathNet.Symbolics.Port,System.Int32):System.Void" Analyze="True" />
          <Member Name="MathNet.Symbolics.Mediator.IObserver.OnSignalValueChanged(MathNet.Symbolics.Signal):System.Void" Analyze="True" />
          <Member Name="NotifyBusAdded(MathNet.Symbolics.Bus,System.Int32):System.Void" Analyze="True" />
          <Member Name="NotifyBusAttachedToPort(MathNet.Symbolics.Bus,MathNet.Symbolics.Port,System.Int32):System.Void" Analyze="True" />
          <Member Name="NotifyBusDetachedFromPort(MathNet.Symbolics.Bus,MathNet.Symbolics.Port,System.Int32):System.Void" Analyze="True" />
          <Member Name="NotifyBusMoved(MathNet.Symbolics.Bus,System.Int32,System.Int32):System.Void" Analyze="True" />
          <Member Name="NotifyBusRemoved(MathNet.Symbolics.Bus,System.Int32):System.Void" Analyze="True" />
          <Member Name="NotifyBusValueChanged(MathNet.Symbolics.Bus):System.Void" Analyze="True" />
          <Member Name="NotifyInputAdded(MathNet.Symbolics.Signal,System.Int32):System.Void" Analyze="True" />
          <Member Name="NotifyInputMoved(MathNet.Symbolics.Signal,System.Int32,System.Int32):System.Void" Analyze="True" />
          <Member Name="NotifyInputRemoved(MathNet.Symbolics.Signal,System.Int32):System.Void" Analyze="True" />
          <Member Name="NotifyOutputAdded(MathNet.Symbolics.Signal,System.Int32):System.Void" Analyze="True" />
          <Member Name="NotifyOutputMoved(MathNet.Symbolics.Signal,System.Int32,System.Int32):System.Void" Analyze="True" />
          <Member Name="NotifyOutputRemoved(MathNet.Symbolics.Signal,System.Int32):System.Void" Analyze="True" />
          <Member Name="NotifyPortAdded(MathNet.Symbolics.Port,System.Int32):System.Void" Analyze="True" />
          <Member Name="NotifyPortDrivesSignal(MathNet.Symbolics.Signal,MathNet.Symbolics.Port,System.Int32):System.Void" Analyze="True" />
          <Member Name="NotifyPortDrivesSignalNoLonger(MathNet.Symbolics.Signal,MathNet.Symbolics.Port,System.Int32):System.Void" Analyze="True" />
          <Member Name="NotifyPortMoved(MathNet.Symbolics.Port,System.Int32,System.Int32):System.Void" Analyze="True" />
          <Member Name="NotifyPortRemoved(MathNet.Symbolics.Port,System.Int32):System.Void" Analyze="True" />
          <Member Name="NotifySignalAdded(MathNet.Symbolics.Signal,System.Int32):System.Void" Analyze="True" />
          <Member Name="NotifySignalDrivesPort(MathNet.Symbolics.Signal,MathNet.Symbolics.Port,System.Int32):System.Void" Analyze="True" />
          <Member Name="NotifySignalDrivesPortNoLonger(MathNet.Symbolics.Signal,MathNet.Symbolics.Port,System.Int32):System.Void" Analyze="True" />
          <Member Name="NotifySignalMoved(MathNet.Symbolics.Signal,System.Int32,System.Int32):System.Void" Analyze="True" />
          <Member Name="NotifySignalRemoved(MathNet.Symbolics.Signal,System.Int32):System.Void" Analyze="True" />
          <Member Name="NotifySignalValueChanged(MathNet.Symbolics.Signal):System.Void" Analyze="True" />
          <Member Name="OutputAdded" Analyze="True" />
          <Member Name="OutputMoved" Analyze="True" />
          <Member Name="OutputRemoved" Analyze="True" />
          <Member Name="PortAdded" Analyze="True" />
          <Member Name="PortDrivesSignal" Analyze="True" />
          <Member Name="PortDrivesSignalNoLonger" Analyze="True" />
          <Member Name="PortMoved" Analyze="True" />
          <Member Name="PortRemoved" Analyze="True" />
          <Member Name="SignalAdded" Analyze="True" />
          <Member Name="SignalDrivesPort" Analyze="True" />
          <Member Name="SignalDrivesPortNoLonger" Analyze="True" />
          <Member Name="SignalMoved" Analyze="True" />
          <Member Name="SignalRemoved" Analyze="True" />
          <Member Name="SignalValueChanged" Analyze="True" />
          <Member Name="SubscribeSystem(MathNet.Symbolics.IMathSystem):System.Void" Analyze="True" />
          <Member Name="SystemChanged" Analyze="True" />
          <Member Name="UnsubscribeSystem(MathNet.Symbolics.IMathSystem):System.Void" Analyze="True" />
         </Members>
        </Type>
       </Types>
      </Namespace>
     </Namespaces>
    </Module>
   </Modules>
  </Target>
  <Target Name="$(ProjectDir)/src/app/MathNet.Yttrium/Microkernel/bin/Debug/MathNet.Yttrium.Microkernel.dll" Analyze="True">
   <Modules>
    <Module Name="mathnet.yttrium.microkernel.dll" Analyze="True">
     <Namespaces>
      <Namespace Name="" Analyze="True">
       <Types>
        <Type Name="&lt;Module&gt;" Analyze="True" />
       </Types>
      </Namespace>
      <Namespace Name="MathNet.Symbolics" Analyze="True">
       <Types>
        <Type Name="Binder" Analyze="True">
         <Members>
          <Member Name=".cctor()" Analyze="True" />
          <Member Name="_cacheBus" Analyze="True" />
          <Member Name="_cacheBus2" Analyze="True" />
          <Member Name="_cachePort" Analyze="True" />
          <Member Name="_cachePort2" Analyze="True" />
          <Member Name="_cacheSignal" Analyze="True" />
          <Member Name="_cacheSignal2" Analyze="True" />
          <Member Name="_cacheSystem" Analyze="True" />
          <Member Name="_mapper" Analyze="True" />
          <Member Name="CreateBus():MathNet.Symbolics.Bus" Analyze="True" />
          <Member Name="CreateBus(MathNet.Symbolics.IValueStructure):MathNet.Symbolics.Bus" Analyze="True" />
          <Member Name="CreatePort(MathNet.Symbolics.IEntity):MathNet.Symbolics.Port" Analyze="True" />
          <Member Name="CreatePort(MathNet.Symbolics.IEntity,System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Signal&gt;):MathNet.Symbolics.Port" Analyze="True" />
          <Member Name="CreateSignal():MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="CreateSignal(MathNet.Symbolics.IValueStructure):MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="CreateSystem():MathNet.Symbolics.IMathSystem" Analyze="True" />
          <Member Name="GetInstance():T" Analyze="True" />
          <Member Name="GetInstance(T1):T" Analyze="True" />
          <Member Name="GetInstance(T1,T2):T" Analyze="True" />
          <Member Name="GetInstance(T1,T2,T3):T" Analyze="True" />
          <Member Name="GetInstance(T1,T2,T3,T4):T" Analyze="True" />
          <Member Name="GetInstance(T1,T2,T3,T4,T5):T" Analyze="True" />
          <Member Name="GetInstance(T1,T2,T3,T4,T5,T6):T" Analyze="True" />
          <Member Name="GetInstance(T1,T2,T3,T4,T5,T6,T7):T" Analyze="True" />
          <Member Name="GetInstance(T1,T2,T3,T4,T5,T6,T7,T8):T" Analyze="True" />
          <Member Name="GetSpecificInstance(MathNet.Symbolics.MathIdentifier):T" Analyze="True" />
          <Member Name="GetSpecificInstance(MathNet.Symbolics.MathIdentifier,T1):T" Analyze="True" />
          <Member Name="GetSpecificInstance(MathNet.Symbolics.MathIdentifier,T1,T2):T" Analyze="True" />
          <Member Name="GetSpecificInstance(MathNet.Symbolics.MathIdentifier,T1,T2,T3):T" Analyze="True" />
          <Member Name="GetSpecificInstance(MathNet.Symbolics.MathIdentifier,T1,T2,T3,T4):T" Analyze="True" />
          <Member Name="GetSpecificInstance(MathNet.Symbolics.MathIdentifier,T1,T2,T3,T4,T5):T" Analyze="True" />
          <Member Name="GetSpecificInstance(MathNet.Symbolics.MathIdentifier,T1,T2,T3,T4,T5,T6):T" Analyze="True" />
          <Member Name="GetSpecificInstance(MathNet.Symbolics.MathIdentifier,T1,T2,T3,T4,T5,T6,T7):T" Analyze="True" />
          <Member Name="GetSpecificInstance(MathNet.Symbolics.MathIdentifier,T1,T2,T3,T4,T5,T6,T7,T8):T" Analyze="True" />
          <Member Name="LoadBindings():System.Void" Analyze="True" />
          <Member Name="LoadBindings(System.String):System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="Config" Analyze="True">
         <Members>
          <Member Name=".cctor()" Analyze="True" />
          <Member Name="_random" Analyze="True" />
          <Member Name="executorCharacter" Analyze="True" />
          <Member Name="ExecutorCharacter" Analyze="True">
           <Accessors>
            <Accessor Name="get_ExecutorCharacter():System.Char" Analyze="True" />
            <Accessor Name="set_ExecutorCharacter(System.Char):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="GenerateInstanceId():System.Guid" Analyze="True" />
          <Member Name="GenerateTag():System.Int32" Analyze="True" />
          <Member Name="IdentifierComparer" Analyze="True">
           <Accessors>
            <Accessor Name="get_IdentifierComparer():System.StringComparer" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="InternalCulture" Analyze="True">
           <Accessors>
            <Accessor Name="get_InternalCulture():System.Globalization.CultureInfo" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="InternalEncoding" Analyze="True">
           <Accessors>
            <Accessor Name="get_InternalEncoding():System.Text.Encoding" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="InternalNumberFormat" Analyze="True">
           <Accessors>
            <Accessor Name="get_InternalNumberFormat():System.Globalization.NumberFormatInfo" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="listEncapsulation" Analyze="True" />
          <Member Name="ListEncapsulation" Analyze="True">
           <Accessors>
            <Accessor Name="get_ListEncapsulation():MathNet.Symbolics.EncapsulationFormat" Analyze="True" />
            <Accessor Name="set_ListEncapsulation(MathNet.Symbolics.EncapsulationFormat):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="literalEncapsulation" Analyze="True" />
          <Member Name="LiteralEncapsulation" Analyze="True">
           <Accessors>
            <Accessor Name="get_LiteralEncapsulation():MathNet.Symbolics.EncapsulationFormat" Analyze="True" />
            <Accessor Name="set_LiteralEncapsulation(MathNet.Symbolics.EncapsulationFormat):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="scalarEncapsulation" Analyze="True" />
          <Member Name="ScalarEncapsulation" Analyze="True">
           <Accessors>
            <Accessor Name="get_ScalarEncapsulation():MathNet.Symbolics.EncapsulationFormat" Analyze="True" />
            <Accessor Name="set_ScalarEncapsulation(MathNet.Symbolics.EncapsulationFormat):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="separatorCharacter" Analyze="True" />
          <Member Name="SeparatorCharacter" Analyze="True">
           <Accessors>
            <Accessor Name="get_SeparatorCharacter():System.Char" Analyze="True" />
            <Accessor Name="set_SeparatorCharacter(System.Char):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="setEncapsulation" Analyze="True" />
          <Member Name="SetEncapsulation" Analyze="True">
           <Accessors>
            <Accessor Name="get_SetEncapsulation():MathNet.Symbolics.EncapsulationFormat" Analyze="True" />
            <Accessor Name="set_SetEncapsulation(MathNet.Symbolics.EncapsulationFormat):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="vectorEncapsulation" Analyze="True" />
          <Member Name="VectorEncapsulation" Analyze="True">
           <Accessors>
            <Accessor Name="get_VectorEncapsulation():MathNet.Symbolics.EncapsulationFormat" Analyze="True" />
            <Accessor Name="set_VectorEncapsulation(MathNet.Symbolics.EncapsulationFormat):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="YttriumNamespace" Analyze="True">
           <Accessors>
            <Accessor Name="get_YttriumNamespace():System.String" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="EncapsulationFormat" Analyze="True">
         <Members>
          <Member Name=".ctor(System.Char,System.Char)" Analyze="True" />
          <Member Name="distinguishable" Analyze="True" />
          <Member Name="Distinguishable" Analyze="True">
           <Accessors>
            <Accessor Name="get_Distinguishable():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="postfix" Analyze="True" />
          <Member Name="Postfix" Analyze="True">
           <Accessors>
            <Accessor Name="get_Postfix():System.Char" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="prefix" Analyze="True" />
          <Member Name="Prefix" Analyze="True">
           <Accessors>
            <Accessor Name="get_Prefix():System.Char" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="MathContext" Analyze="True">
         <Members>
          <Member Name=".cctor()" Analyze="True" />
          <Member Name=".ctor(MathNet.Symbolics.MathContext,System.Collections.Generic.Stack`1&lt;MathNet.Symbolics.MathContext&gt;)" Analyze="True" />
          <Member Name="_iid" Analyze="True" />
          <Member Name="_parent" Analyze="True" />
          <Member Name="_root" Analyze="True" />
          <Member Name="_stack" Analyze="True" />
          <Member Name="_table" Analyze="True" />
          <Member Name="ContextExpired" Analyze="True" />
          <Member Name="Create():MathNet.Symbolics.MathContext" Analyze="True" />
          <Member Name="Current" Analyze="True">
           <Accessors>
            <Accessor Name="get_Current():MathNet.Symbolics.MathContext" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="CurrentInstanceId" Analyze="True">
           <Accessors>
            <Accessor Name="get_CurrentInstanceId():System.Guid" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ContextExpired" Kind="Event" Analyze="True">
           <Accessors>
            <Accessor Name="add_ContextExpired(System.EventHandler`1&lt;MathNet.Symbolics.Events.MathContextEventArgs&gt;):System.Void" Analyze="True" />
            <Accessor Name="remove_ContextExpired(System.EventHandler`1&lt;MathNet.Symbolics.Events.MathContextEventArgs&gt;):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="HasParent" Analyze="True">
           <Accessors>
            <Accessor Name="get_HasParent():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="InstanceId" Analyze="True">
           <Accessors>
            <Accessor Name="get_InstanceId():System.Guid" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="IsRoot" Analyze="True">
           <Accessors>
            <Accessor Name="get_IsRoot():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ParentContext" Analyze="True">
           <Accessors>
            <Accessor Name="get_ParentContext():MathNet.Symbolics.MathContext" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Root" Analyze="True">
           <Accessors>
            <Accessor Name="get_Root():MathNet.Symbolics.MathContext" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="System.IDisposable.Dispose():System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="Service`1" Analyze="True">
         <Members>
          <Member Name=".cctor()" Analyze="True" />
          <Member Name="_instance" Analyze="True" />
          <Member Name="Instance" Analyze="True">
           <Accessors>
            <Accessor Name="get_Instance():T" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="MathNet.Symbolics.Backend.Mapping" Analyze="True">
       <Types>
        <Type Name="Mapper" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="_factoryById" Analyze="True" />
          <Member Name="_factoryByType" Analyze="True" />
          <Member Name="AddBinding(MathNet.Symbolics.IFactory`1&lt;T&gt;,MathNet.Symbolics.MathIdentifier):System.Void" Analyze="True" />
          <Member Name="AddBinding(System.Object,System.Type,MathNet.Symbolics.MathIdentifier):System.Void" Analyze="True" />
          <Member Name="GetFactory():MathNet.Symbolics.IFactory`1&lt;T&gt;" Analyze="True" />
          <Member Name="GetFactory():MathNet.Symbolics.IFactory`2&lt;T,T1&gt;" Analyze="True" />
          <Member Name="GetFactory():MathNet.Symbolics.IFactory`3&lt;T,T1,T2&gt;" Analyze="True" />
          <Member Name="GetFactory():MathNet.Symbolics.IFactory`4&lt;T,T1,T2,T3&gt;" Analyze="True" />
          <Member Name="GetFactory():MathNet.Symbolics.IFactory`5&lt;T,T1,T2,T3,T4&gt;" Analyze="True" />
          <Member Name="GetFactory():MathNet.Symbolics.IFactory`6&lt;T,T1,T2,T3,T4,T5&gt;" Analyze="True" />
          <Member Name="GetFactory():MathNet.Symbolics.IFactory`7&lt;T,T1,T2,T3,T4,T5,T6&gt;" Analyze="True" />
          <Member Name="GetFactory():MathNet.Symbolics.IFactory`8&lt;T,T1,T2,T3,T4,T5,T6,T7&gt;" Analyze="True" />
          <Member Name="GetFactory():MathNet.Symbolics.IFactory`9&lt;T,T1,T2,T3,T4,T5,T6,T7,T8&gt;" Analyze="True" />
          <Member Name="GetFactory(MathNet.Symbolics.MathIdentifier):MathNet.Symbolics.IFactory`1&lt;T&gt;" Analyze="True" />
          <Member Name="GetFactory(MathNet.Symbolics.MathIdentifier):MathNet.Symbolics.IFactory`2&lt;T,T1&gt;" Analyze="True" />
          <Member Name="GetFactory(MathNet.Symbolics.MathIdentifier):MathNet.Symbolics.IFactory`3&lt;T,T1,T2&gt;" Analyze="True" />
          <Member Name="GetFactory(MathNet.Symbolics.MathIdentifier):MathNet.Symbolics.IFactory`4&lt;T,T1,T2,T3&gt;" Analyze="True" />
          <Member Name="GetFactory(MathNet.Symbolics.MathIdentifier):MathNet.Symbolics.IFactory`5&lt;T,T1,T2,T3,T4&gt;" Analyze="True" />
          <Member Name="GetFactory(MathNet.Symbolics.MathIdentifier):MathNet.Symbolics.IFactory`6&lt;T,T1,T2,T3,T4,T5&gt;" Analyze="True" />
          <Member Name="GetFactory(MathNet.Symbolics.MathIdentifier):MathNet.Symbolics.IFactory`7&lt;T,T1,T2,T3,T4,T5,T6&gt;" Analyze="True" />
          <Member Name="GetFactory(MathNet.Symbolics.MathIdentifier):MathNet.Symbolics.IFactory`8&lt;T,T1,T2,T3,T4,T5,T6,T7&gt;" Analyze="True" />
          <Member Name="GetFactory(MathNet.Symbolics.MathIdentifier):MathNet.Symbolics.IFactory`9&lt;T,T1,T2,T3,T4,T5,T6,T7,T8&gt;" Analyze="True" />
          <Member Name="ImportBindings(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Backend.Mapping.RawBinding&gt;):System.Void" Analyze="True" />
          <Member Name="LookupFactory(MathNet.Symbolics.MathIdentifier):System.Object" Analyze="True" />
          <Member Name="LookupFactory(System.Type):System.Object" Analyze="True" />
         </Members>
        </Type>
        <Type Name="MappingsSectionHandler" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="Create(System.Object,System.Object,System.Xml.XmlNode):System.Object" Analyze="True" />
         </Members>
        </Type>
        <Type Name="RawBinding" Analyze="True">
         <Members>
          <Member Name=".ctor(System.String,System.String,System.String,System.String)" Analyze="True" />
          <Member Name="comment" Analyze="True" />
          <Member Name="contractType" Analyze="True" />
          <Member Name="factoryType" Analyze="True" />
          <Member Name="id" Analyze="True" />
         </Members>
        </Type>
        <Type Name="XmlMappingAdapter" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="CompileFromXml(System.Xml.XmlNode):System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Backend.Mapping.RawBinding&gt;" Analyze="True" />
          <Member Name="GetXmlAttribute(System.Xml.XmlNode,System.String,System.String):System.String" Analyze="True" />
          <Member Name="Load(System.String):System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Backend.Mapping.RawBinding&gt;" Analyze="True" />
          <Member Name="Load(System.Xml.XmlDocument):System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Backend.Mapping.RawBinding&gt;" Analyze="True" />
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="MathNet.Symbolics.Backend.Persistence" Analyze="True">
       <Types>
        <Type Name="Serializer" Analyze="True">
         <Members>
          <Member Name="DescriptionToType(System.String):System.Type" Analyze="True" />
          <Member Name="Deserialize(System.Xml.XmlReader,System.Collections.Generic.IDictionary`2&lt;System.Guid,MathNet.Symbolics.Signal&gt;,System.Collections.Generic.IDictionary`2&lt;System.Guid,MathNet.Symbolics.Bus&gt;):T" Analyze="True" />
          <Member Name="DeserializeFromString(System.String,System.Collections.Generic.IDictionary`2&lt;System.Guid,MathNet.Symbolics.Signal&gt;,System.Collections.Generic.IDictionary`2&lt;System.Guid,MathNet.Symbolics.Bus&gt;):T" Analyze="True" />
          <Member Name="DeserializeList(System.Xml.XmlReader,System.Collections.Generic.IDictionary`2&lt;System.Guid,MathNet.Symbolics.Signal&gt;,System.Collections.Generic.IDictionary`2&lt;System.Guid,MathNet.Symbolics.Bus&gt;,System.String):System.Collections.Generic.List`1&lt;T&gt;" Analyze="True" />
          <Member Name="DeserializeListFromString(System.String,System.Collections.Generic.IDictionary`2&lt;System.Guid,MathNet.Symbolics.Signal&gt;,System.Collections.Generic.IDictionary`2&lt;System.Guid,MathNet.Symbolics.Bus&gt;,System.String):System.Collections.Generic.List`1&lt;T&gt;" Analyze="True" />
          <Member Name="Serialize(MathNet.Symbolics.ICustomData,System.Xml.XmlWriter,System.Collections.Generic.IDictionary`2&lt;System.Guid,System.Guid&gt;,System.Collections.Generic.IDictionary`2&lt;System.Guid,System.Guid&gt;):System.Void" Analyze="True" />
          <Member Name="SerializeList(System.Collections.Generic.IEnumerable`1&lt;T&gt;,System.Xml.XmlWriter,System.Collections.Generic.IDictionary`2&lt;System.Guid,System.Guid&gt;,System.Collections.Generic.IDictionary`2&lt;System.Guid,System.Guid&gt;,System.String):System.Void" Analyze="True" />
          <Member Name="SerializeListToString(System.Collections.Generic.IEnumerable`1&lt;T&gt;,System.Collections.Generic.IDictionary`2&lt;System.Guid,System.Guid&gt;,System.Collections.Generic.IDictionary`2&lt;System.Guid,System.Guid&gt;,System.String):System.String" Analyze="True" />
          <Member Name="SerializeToString(MathNet.Symbolics.ICustomData,System.Collections.Generic.IDictionary`2&lt;System.Guid,System.Guid&gt;,System.Collections.Generic.IDictionary`2&lt;System.Guid,System.Guid&gt;):System.String" Analyze="True" />
          <Member Name="TypeToDescription(System.Type):System.String" Analyze="True" />
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="MathNet.Symbolics.Backend.Utils" Analyze="True">
       <Types>
        <Type Name="BindingSingletonProvider`1" Analyze="True">
         <Members>
          <Member Name=".cctor()" Analyze="True" />
          <Member Name="_instance" Analyze="True" />
          <Member Name="Instance" Analyze="True">
           <Accessors>
            <Accessor Name="get_Instance():T" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="EmptyIterator`1" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="Current" Analyze="True">
           <Accessors>
            <Accessor Name="get_Current():T" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Dispose():System.Void" Analyze="True" />
          <Member Name="GetEnumerator():System.Collections.Generic.IEnumerator`1&lt;T&gt;" Analyze="True" />
          <Member Name="MoveNext():System.Boolean" Analyze="True" />
          <Member Name="Reset():System.Void" Analyze="True" />
          <Member Name="System.Collections.IEnumerable.GetEnumerator():System.Collections.IEnumerator" Analyze="True" />
          <Member Name="System.Collections.IEnumerator.Current" Analyze="True">
           <Accessors>
            <Accessor Name="System.Collections.IEnumerator.get_Current():System.Object" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="SingletonProvider`1" Analyze="True">
         <Members>
          <Member Name=".cctor()" Analyze="True" />
          <Member Name="_instance" Analyze="True" />
          <Member Name="Instance" Analyze="True">
           <Accessors>
            <Accessor Name="get_Instance():T" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="MathNet.Symbolics.Events" Analyze="True">
       <Types>
        <Type Name="MathContextEventArgs" Analyze="True">
         <Members>
          <Member Name=".ctor(System.Guid)" Analyze="True" />
          <Member Name="_iid" Analyze="True" />
          <Member Name="InstanceId" Analyze="True">
           <Accessors>
            <Accessor Name="get_InstanceId():System.Guid" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="MathNet.Symbolics.Exceptions" Analyze="True">
       <Types>
        <Type Name="MicrokernelException" Analyze="True">
         <Members>
          <Member Name=".ctor(System.String)" Analyze="True" />
          <Member Name=".ctor(System.String,System.Exception)" Analyze="True" />
         </Members>
        </Type>
       </Types>
      </Namespace>
     </Namespaces>
    </Module>
   </Modules>
  </Target>
  <Target Name="$(ProjectDir)/src/app/MathNet.Yttrium/Packages.Helper/bin/Debug/MathNet.Yttrium.Packages.Helper.dll" Analyze="True">
   <Modules>
    <Module Name="mathnet.yttrium.packages.helper.dll" Analyze="True">
     <Namespaces>
      <Namespace Name="" Analyze="True">
       <Types>
        <Type Name="&lt;Module&gt;" Analyze="True" />
       </Types>
      </Namespace>
      <Namespace Name="MathNet.Symbolics.Packages.ObjectModel" Analyze="True">
       <Types>
        <Type Name="ArchitectureBase" Analyze="True">
         <Members>
          <Member Name=".ctor(MathNet.Symbolics.MathIdentifier,MathNet.Symbolics.MathIdentifier,System.Boolean)" Analyze="True" />
          <Member Name="_entityId" Analyze="True" />
          <Member Name="_id" Analyze="True" />
          <Member Name="_isInstance" Analyze="True" />
          <Member Name="_isMathematicalOperator" Analyze="True" />
          <Member Name="_port" Analyze="True" />
          <Member Name="ArchitectureId" Analyze="True">
           <Accessors>
            <Accessor Name="get_ArchitectureId():MathNet.Symbolics.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="EntityId" Analyze="True">
           <Accessors>
            <Accessor Name="get_EntityId():MathNet.Symbolics.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ExecuteMathematicalOperator():MathNet.Symbolics.Backend.Containers.ISignalSet" Analyze="True" />
          <Member Name="IsInstance" Analyze="True">
           <Accessors>
            <Accessor Name="get_IsInstance():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="IsMathematicalOperator" Analyze="True">
           <Accessors>
            <Accessor Name="get_IsMathematicalOperator():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Port" Analyze="True">
           <Accessors>
            <Accessor Name="get_Port():MathNet.Symbolics.Port" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="RebindToPortIfSupported(MathNet.Symbolics.Port):System.Boolean" Analyze="True" />
          <Member Name="ReregisterArchitecture(MathNet.Symbolics.Port,MathNet.Symbolics.Port):System.Void" Analyze="True" />
          <Member Name="SetPort(MathNet.Symbolics.Port):System.Void" Analyze="True" />
          <Member Name="SupportsPort(MathNet.Symbolics.Port):System.Boolean" Analyze="True" />
          <Member Name="ToString():System.String" Analyze="True" />
          <Member Name="UnregisterArchitecture():System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="CategoryBase" Analyze="True">
         <Members>
          <Member Name=".ctor(MathNet.Symbolics.MathIdentifier)" Analyze="True" />
          <Member Name=".ctor(System.String,System.String)" Analyze="True" />
          <Member Name="_id" Analyze="True" />
          <Member Name="AssociatedPropertyId" Analyze="True">
           <Accessors>
            <Accessor Name="get_AssociatedPropertyId():MathNet.Symbolics.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="CollectBuses():System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Bus&gt;" Analyze="True" />
          <Member Name="CollectSignals():System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Signal&gt;" Analyze="True" />
          <Member Name="Equals(MathNet.Symbolics.ICategory):System.Boolean" Analyze="True" />
          <Member Name="Equals(MathNet.Symbolics.Packages.ObjectModel.CategoryBase):System.Boolean" Analyze="True" />
          <Member Name="EqualsById(MathNet.Symbolics.ICategory):System.Boolean" Analyze="True" />
          <Member Name="EqualsById(MathNet.Symbolics.MathIdentifier):System.Boolean" Analyze="True" />
          <Member Name="EvaluateJointChildMembership(System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Signal&gt;):MathNet.Symbolics.CategoryMembershipLevel" Analyze="True" />
          <Member Name="IsMember(MathNet.Symbolics.Port):MathNet.Symbolics.CategoryMembershipLevel" Analyze="True" />
          <Member Name="IsMember(MathNet.Symbolics.Signal,System.Boolean):MathNet.Symbolics.CategoryMembershipLevel" Analyze="True" />
          <Member Name="ReferencesCoreObjects" Analyze="True">
           <Accessors>
            <Accessor Name="get_ReferencesCoreObjects():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Serialize(System.Xml.XmlWriter,System.Collections.Generic.IDictionary`2&lt;System.Guid,System.Guid&gt;,System.Collections.Generic.IDictionary`2&lt;System.Guid,System.Guid&gt;):System.Void" Analyze="True" />
          <Member Name="TryGetCachedMembership(MathNet.Symbolics.Signal,MathNet.Symbolics.CategoryMembershipLevel&amp;):System.Boolean" Analyze="True" />
          <Member Name="TypeId" Analyze="True">
           <Accessors>
            <Accessor Name="get_TypeId():MathNet.Symbolics.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="CategoryBase+&lt;CollectBuses&gt;d__3" Analyze="True">
         <Members>
          <Member Name=".ctor(System.Int32)" Analyze="True" />
          <Member Name="&lt;&gt;1__state" Analyze="True" />
          <Member Name="&lt;&gt;2__current" Analyze="True" />
          <Member Name="&lt;&gt;4__this" Analyze="True" />
          <Member Name="MoveNext():System.Boolean" Analyze="True" />
          <Member Name="System.Collections.Generic.IEnumerable&lt;MathNet.Symbolics.Bus&gt;.GetEnumerator():System.Collections.Generic.IEnumerator`1&lt;MathNet.Symbolics.Bus&gt;" Analyze="True" />
          <Member Name="System.Collections.Generic.IEnumerator&lt;MathNet.Symbolics.Bus&gt;.Current" Analyze="True">
           <Accessors>
            <Accessor Name="System.Collections.Generic.IEnumerator&lt;MathNet.Symbolics.Bus&gt;.get_Current():MathNet.Symbolics.Bus" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="System.Collections.IEnumerable.GetEnumerator():System.Collections.IEnumerator" Analyze="True" />
          <Member Name="System.Collections.IEnumerator.Current" Analyze="True">
           <Accessors>
            <Accessor Name="System.Collections.IEnumerator.get_Current():System.Object" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="System.Collections.IEnumerator.Reset():System.Void" Analyze="True" />
          <Member Name="System.IDisposable.Dispose():System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="CategoryBase+&lt;CollectSignals&gt;d__0" Analyze="True">
         <Members>
          <Member Name=".ctor(System.Int32)" Analyze="True" />
          <Member Name="&lt;&gt;1__state" Analyze="True" />
          <Member Name="&lt;&gt;2__current" Analyze="True" />
          <Member Name="&lt;&gt;4__this" Analyze="True" />
          <Member Name="MoveNext():System.Boolean" Analyze="True" />
          <Member Name="System.Collections.Generic.IEnumerable&lt;MathNet.Symbolics.Signal&gt;.GetEnumerator():System.Collections.Generic.IEnumerator`1&lt;MathNet.Symbolics.Signal&gt;" Analyze="True" />
          <Member Name="System.Collections.Generic.IEnumerator&lt;MathNet.Symbolics.Signal&gt;.Current" Analyze="True">
           <Accessors>
            <Accessor Name="System.Collections.Generic.IEnumerator&lt;MathNet.Symbolics.Signal&gt;.get_Current():MathNet.Symbolics.Signal" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="System.Collections.IEnumerable.GetEnumerator():System.Collections.IEnumerator" Analyze="True" />
          <Member Name="System.Collections.IEnumerator.Current" Analyze="True">
           <Accessors>
            <Accessor Name="System.Collections.IEnumerator.get_Current():System.Object" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="System.Collections.IEnumerator.Reset():System.Void" Analyze="True" />
          <Member Name="System.IDisposable.Dispose():System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="CategoryMembershipProperty" Analyze="True">
         <Members>
          <Member Name=".cctor()" Analyze="True" />
          <Member Name=".ctor(MathNet.Symbolics.ICategory,MathNet.Symbolics.CategoryMembershipLevel,System.Boolean)" Analyze="True" />
          <Member Name="_category" Analyze="True" />
          <Member Name="_categoryMembership" Analyze="True" />
          <Member Name="_customTypeId" Analyze="True" />
          <Member Name="_isSticky" Analyze="True" />
          <Member Name="Category" Analyze="True">
           <Accessors>
            <Accessor Name="get_Category():MathNet.Symbolics.ICategory" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="CategoryMembership" Analyze="True">
           <Accessors>
            <Accessor Name="get_CategoryMembership():MathNet.Symbolics.CategoryMembershipLevel" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Deserialize(System.Xml.XmlReader,System.Collections.Generic.IDictionary`2&lt;System.Guid,MathNet.Symbolics.Signal&gt;,System.Collections.Generic.IDictionary`2&lt;System.Guid,MathNet.Symbolics.Bus&gt;):MathNet.Symbolics.Packages.ObjectModel.CategoryMembershipProperty" Analyze="True" />
          <Member Name="Equals(MathNet.Symbolics.IProperty):System.Boolean" Analyze="True" />
          <Member Name="IsSticky" Analyze="True">
           <Accessors>
            <Accessor Name="get_IsSticky():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Serialize(System.Xml.XmlWriter,System.Collections.Generic.IDictionary`2&lt;System.Guid,System.Guid&gt;,System.Collections.Generic.IDictionary`2&lt;System.Guid,System.Guid&gt;):System.Void" Analyze="True" />
          <Member Name="StillValidAfterDrive(MathNet.Symbolics.Signal):System.Boolean" Analyze="True" />
          <Member Name="StillValidAfterEvent(MathNet.Symbolics.Signal):System.Boolean" Analyze="True" />
          <Member Name="StillValidAfterUndrive(MathNet.Symbolics.Signal):System.Boolean" Analyze="True" />
          <Member Name="TypeId" Analyze="True">
           <Accessors>
            <Accessor Name="get_TypeId():MathNet.Symbolics.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="TypeIdentifier" Analyze="True">
           <Accessors>
            <Accessor Name="get_TypeIdentifier():MathNet.Symbolics.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="ConvertFrom`1" Analyze="True">
         <Members>
          <Member Name=".ctor(System.Object,System.IntPtr)" Analyze="True" />
          <Member Name="BeginInvoke(MathNet.Symbolics.IValueStructure,System.AsyncCallback,System.Object):System.IAsyncResult" Analyze="True" />
          <Member Name="EndInvoke(System.IAsyncResult):T" Analyze="True" />
          <Member Name="Invoke(MathNet.Symbolics.IValueStructure):T" Analyze="True" />
         </Members>
        </Type>
        <Type Name="DefaultValue" Analyze="True">
         <Members>
          <Member Name=".ctor(System.Object,System.IntPtr)" Analyze="True" />
          <Member Name="BeginInvoke(System.AsyncCallback,System.Object):System.IAsyncResult" Analyze="True" />
          <Member Name="EndInvoke(System.IAsyncResult):MathNet.Symbolics.IValueStructure" Analyze="True" />
          <Member Name="Invoke():MathNet.Symbolics.IValueStructure" Analyze="True" />
         </Members>
        </Type>
        <Type Name="EntityBase" Analyze="True">
         <Members>
          <Member Name=".ctor(System.String,MathNet.Symbolics.MathIdentifier,MathNet.Symbolics.InfixNotation,System.Int32,System.Boolean)" Analyze="True" />
          <Member Name=".ctor(System.String,MathNet.Symbolics.MathIdentifier,MathNet.Symbolics.InfixNotation,System.Int32,System.Boolean,System.String[])" Analyze="True" />
          <Member Name=".ctor(System.String,MathNet.Symbolics.MathIdentifier,MathNet.Symbolics.InfixNotation,System.Int32,System.String[],System.String[])" Analyze="True" />
          <Member Name=".ctor(System.String,MathNet.Symbolics.MathIdentifier,MathNet.Symbolics.InfixNotation,System.Int32,System.String[],System.String[],System.String[])" Analyze="True" />
          <Member Name=".ctor(System.String,System.String,System.String,MathNet.Symbolics.InfixNotation,System.Int32,System.Boolean)" Analyze="True" />
          <Member Name=".ctor(System.String,System.String,System.String,MathNet.Symbolics.InfixNotation,System.Int32,System.Boolean,System.String[])" Analyze="True" />
          <Member Name=".ctor(System.String,System.String,System.String,MathNet.Symbolics.InfixNotation,System.Int32,System.String[],System.String[])" Analyze="True" />
          <Member Name=".ctor(System.String,System.String,System.String,MathNet.Symbolics.InfixNotation,System.Int32,System.String[],System.String[],System.String[])" Analyze="True" />
          <Member Name="_busLabels" Analyze="True" />
          <Member Name="_id" Analyze="True" />
          <Member Name="_inputSignalLabels" Analyze="True" />
          <Member Name="_isGeneric" Analyze="True" />
          <Member Name="_notation" Analyze="True" />
          <Member Name="_outputSignalLabels" Analyze="True" />
          <Member Name="_precedenceGroup" Analyze="True" />
          <Member Name="_symbol" Analyze="True" />
          <Member Name="Buses" Analyze="True">
           <Accessors>
            <Accessor Name="get_Buses():System.String[]" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="CompileGenericEntity(System.Int32,System.Int32):MathNet.Symbolics.IEntity" Analyze="True" />
          <Member Name="EntityId" Analyze="True">
           <Accessors>
            <Accessor Name="get_EntityId():MathNet.Symbolics.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Equals(MathNet.Symbolics.IEntity):System.Boolean" Analyze="True" />
          <Member Name="Equals(MathNet.Symbolics.Packages.ObjectModel.EntityBase):System.Boolean" Analyze="True" />
          <Member Name="Equals(System.Object):System.Boolean" Analyze="True" />
          <Member Name="EqualsById(MathNet.Symbolics.IEntity):System.Boolean" Analyze="True" />
          <Member Name="EqualsById(MathNet.Symbolics.MathIdentifier):System.Boolean" Analyze="True" />
          <Member Name="GetHashCode():System.Int32" Analyze="True" />
          <Member Name="InputSignals" Analyze="True">
           <Accessors>
            <Accessor Name="get_InputSignals():System.String[]" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="InstantiatePort(MathNet.Symbolics.Signal[]):MathNet.Symbolics.Port" Analyze="True" />
          <Member Name="InstantiatePort(System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Signal&gt;):MathNet.Symbolics.Port" Analyze="True" />
          <Member Name="InstantiatePort(System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Signal&gt;,System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Signal&gt;):MathNet.Symbolics.Port" Analyze="True" />
          <Member Name="InstantiatePort(System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Signal&gt;,System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Signal&gt;,System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Bus&gt;):MathNet.Symbolics.Port" Analyze="True" />
          <Member Name="InstantiateUnboundPort():MathNet.Symbolics.Port" Analyze="True" />
          <Member Name="IsGeneric" Analyze="True">
           <Accessors>
            <Accessor Name="get_IsGeneric():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Notation" Analyze="True">
           <Accessors>
            <Accessor Name="get_Notation():MathNet.Symbolics.InfixNotation" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="OutputSignals" Analyze="True">
           <Accessors>
            <Accessor Name="get_OutputSignals():System.String[]" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="PrecedenceGroup" Analyze="True">
           <Accessors>
            <Accessor Name="get_PrecedenceGroup():System.Int32" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Symbol" Analyze="True">
           <Accessors>
            <Accessor Name="get_Symbol():System.String" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ToString():System.String" Analyze="True" />
         </Members>
        </Type>
        <Type Name="GenerateInternalSignalCount" Analyze="True">
         <Members>
          <Member Name=".ctor(System.Object,System.IntPtr)" Analyze="True" />
          <Member Name="BeginInvoke(MathNet.Symbolics.Port,System.AsyncCallback,System.Object):System.IAsyncResult" Analyze="True" />
          <Member Name="EndInvoke(System.IAsyncResult):System.Int32" Analyze="True" />
          <Member Name="Invoke(MathNet.Symbolics.Port):System.Int32" Analyze="True" />
         </Members>
        </Type>
        <Type Name="GenerateProcesses" Analyze="True">
         <Members>
          <Member Name=".ctor(System.Object,System.IntPtr)" Analyze="True" />
          <Member Name="BeginInvoke(MathNet.Symbolics.Port,System.AsyncCallback,System.Object):System.IAsyncResult" Analyze="True" />
          <Member Name="EndInvoke(System.IAsyncResult):MathNet.Symbolics.Packages.ObjectModel.ProcessBase[]" Analyze="True" />
          <Member Name="Invoke(MathNet.Symbolics.Port):MathNet.Symbolics.Packages.ObjectModel.ProcessBase[]" Analyze="True" />
         </Members>
        </Type>
        <Type Name="GenericArchitecture" Analyze="True">
         <Members>
          <Member Name=".ctor(MathNet.Symbolics.MathIdentifier,MathNet.Symbolics.MathIdentifier,System.Boolean,MathNet.Symbolics.Port,System.Predicate`1&lt;MathNet.Symbolics.Port&gt;,System.Int32,MathNet.Symbolics.Packages.ObjectModel.ProcessBase[])" Analyze="True" />
          <Member Name="_internalSignals" Analyze="True" />
          <Member Name="_portSupport" Analyze="True" />
          <Member Name="_processes" Analyze="True" />
          <Member Name="ReregisterArchitecture(MathNet.Symbolics.Port,MathNet.Symbolics.Port):System.Void" Analyze="True" />
          <Member Name="SupportsPort(MathNet.Symbolics.Port):System.Boolean" Analyze="True" />
          <Member Name="UnregisterArchitecture():System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="GenericArchitectureFactory" Analyze="True">
         <Members>
          <Member Name=".ctor(MathNet.Symbolics.MathIdentifier)" Analyze="True" />
          <Member Name="_entityId" Analyze="True" />
          <Member Name="_items" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate1" Analyze="True" />
          <Member Name="&lt;AddArchitecture&gt;b__0(MathNet.Symbolics.Port):System.Int32" Analyze="True" />
          <Member Name="AddArchitecture(MathNet.Symbolics.MathIdentifier,System.Boolean,System.Predicate`1&lt;MathNet.Symbolics.Port&gt;,MathNet.Symbolics.Packages.ObjectModel.GenerateProcesses,MathNet.Symbolics.Packages.ObjectModel.GenerateInternalSignalCount):System.Void" Analyze="True" />
          <Member Name="AddArchitecture(MathNet.Symbolics.MathIdentifier,System.Predicate`1&lt;MathNet.Symbolics.Port&gt;,MathNet.Symbolics.Packages.ObjectModel.GenerateProcesses):System.Void" Analyze="True" />
          <Member Name="AddArchitecture(MathNet.Symbolics.MathIdentifier,System.Predicate`1&lt;MathNet.Symbolics.Port&gt;,MathNet.Symbolics.Packages.ObjectModel.GenerateProcesses,MathNet.Symbolics.Packages.ObjectModel.GenerateInternalSignalCount):System.Void" Analyze="True" />
          <Member Name="EntityId" Analyze="True">
           <Accessors>
            <Accessor Name="get_EntityId():MathNet.Symbolics.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="InstantiateToPort(MathNet.Symbolics.Port):MathNet.Symbolics.IArchitecture" Analyze="True" />
          <Member Name="SupportsPort(MathNet.Symbolics.Port):System.Boolean" Analyze="True" />
         </Members>
        </Type>
        <Type Name="GenericArchitectureFactory+ArchitectureItem" Analyze="True">
         <Members>
          <Member Name=".ctor(MathNet.Symbolics.MathIdentifier,System.Boolean,System.Predicate`1&lt;MathNet.Symbolics.Port&gt;,MathNet.Symbolics.Packages.ObjectModel.GenerateProcesses,MathNet.Symbolics.Packages.ObjectModel.GenerateInternalSignalCount)" Analyze="True" />
          <Member Name="Id" Analyze="True" />
          <Member Name="InternalSignals" Analyze="True" />
          <Member Name="IsMathematicalOperator" Analyze="True" />
          <Member Name="PortSupport" Analyze="True" />
          <Member Name="ProcessGenerator" Analyze="True" />
         </Members>
        </Type>
        <Type Name="GenericFunctionProcess" Analyze="True">
         <Members>
          <Member Name=".ctor(System.Boolean[],System.Boolean[],System.Boolean[],System.Boolean[])" Analyze="True" />
          <Member Name=".ctor(System.Int32,System.Int32,System.Int32)" Analyze="True" />
          <Member Name=".ctor(System.Int32,System.Int32,System.Int32,System.Int32)" Analyze="True" />
          <Member Name="inCount" Analyze="True" />
          <Member Name="InCount" Analyze="True">
           <Accessors>
            <Accessor Name="get_InCount():System.Int32" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="inInput" Analyze="True" />
          <Member Name="inInternal" Analyze="True" />
          <Member Name="inputs" Analyze="True" />
          <Member Name="Inputs" Analyze="True">
           <Accessors>
            <Accessor Name="get_Inputs():MathNet.Symbolics.Signal[]" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="outCount" Analyze="True" />
          <Member Name="OutCount" Analyze="True">
           <Accessors>
            <Accessor Name="get_OutCount():System.Int32" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="outInternal" Analyze="True" />
          <Member Name="outOutput" Analyze="True" />
          <Member Name="outputs" Analyze="True" />
          <Member Name="Outputs" Analyze="True">
           <Accessors>
            <Accessor Name="get_Outputs():MathNet.Symbolics.Signal[]" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="PublishToOutputs(MathNet.Symbolics.IValueStructure):System.Void" Analyze="True" />
          <Member Name="PublishToOutputs(MathNet.Symbolics.IValueStructure,System.TimeSpan):System.Void" Analyze="True" />
          <Member Name="Register(System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Signal&gt;,System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Signal&gt;,System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Signal&gt;,System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Bus&gt;):System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="GenericMathOpArchitecture" Analyze="True">
         <Members>
          <Member Name=".ctor(MathNet.Symbolics.MathIdentifier)" Analyze="True" />
          <Member Name=".ctor(MathNet.Symbolics.MathIdentifier,MathNet.Symbolics.MathIdentifier)" Analyze="True" />
          <Member Name=".ctor(MathNet.Symbolics.MathIdentifier,MathNet.Symbolics.MathIdentifier,MathNet.Symbolics.Port)" Analyze="True" />
          <Member Name=".ctor(MathNet.Symbolics.MathIdentifier,MathNet.Symbolics.Port)" Analyze="True" />
          <Member Name="InstantiateToPort(MathNet.Symbolics.Port):MathNet.Symbolics.IArchitecture" Analyze="True" />
          <Member Name="ReregisterArchitecture(MathNet.Symbolics.Port,MathNet.Symbolics.Port):System.Void" Analyze="True" />
          <Member Name="UnregisterArchitecture():System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="GenericParallelProcess" Analyze="True">
         <Members>
          <Member Name=".ctor(System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean)" Analyze="True" />
          <Member Name="Action(System.Boolean,MathNet.Symbolics.Signal):System.Void" Analyze="True" />
          <Member Name="count" Analyze="True" />
          <Member Name="firstInput" Analyze="True" />
          <Member Name="firstOutput" Analyze="True" />
          <Member Name="inputIsInternal" Analyze="True" />
          <Member Name="inputs" Analyze="True" />
          <Member Name="outputIsInternal" Analyze="True" />
          <Member Name="outputs" Analyze="True" />
          <Member Name="Process(MathNet.Symbolics.Signal,MathNet.Symbolics.Signal):System.Void" Analyze="True" />
          <Member Name="Register(System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Signal&gt;,System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Signal&gt;,System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Signal&gt;,System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Bus&gt;):System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="GenericSimpleArchitecture" Analyze="True">
         <Members>
          <Member Name=".ctor(MathNet.Symbolics.MathIdentifier,System.Boolean)" Analyze="True" />
          <Member Name=".ctor(MathNet.Symbolics.MathIdentifier,System.Boolean,MathNet.Symbolics.Port,System.Int32)" Analyze="True" />
          <Member Name="_internalSignals" Analyze="True" />
          <Member Name="_sensedSignals" Analyze="True" />
          <Member Name="Action(System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Signal&gt;,System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Signal&gt;,System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Signal&gt;,System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Bus&gt;):System.Void" Analyze="True" />
          <Member Name="InstantiateToPort(MathNet.Symbolics.Port):MathNet.Symbolics.IArchitecture" Analyze="True" />
          <Member Name="ReregisterArchitecture(MathNet.Symbolics.Port,MathNet.Symbolics.Port):System.Void" Analyze="True" />
          <Member Name="SenseSignal(MathNet.Symbolics.Signal):System.Void" Analyze="True" />
          <Member Name="SenseSignals(System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Signal&gt;,System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Signal&gt;,System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Bus&gt;,System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Signal&gt;):System.Void" Analyze="True" />
          <Member Name="signal_SignalValueChanged(System.Object,System.EventArgs):System.Void" Analyze="True" />
          <Member Name="StopSenseSignal(MathNet.Symbolics.Signal):System.Void" Analyze="True" />
          <Member Name="UnregisterArchitecture():System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="GenericStdFunctionProcess`1" Analyze="True">
         <Members>
          <Member Name=".ctor(MathNet.Symbolics.Packages.ObjectModel.DefaultValue,MathNet.Symbolics.Packages.ObjectModel.ConvertFrom`1&lt;T&gt;,MathNet.Symbolics.Packages.ObjectModel.ProcessAction`1&lt;T&gt;,System.Int32)" Analyze="True" />
          <Member Name=".ctor(MathNet.Symbolics.Packages.ObjectModel.DefaultValue,MathNet.Symbolics.Packages.ObjectModel.ProcessAction`1&lt;T&gt;,MathNet.Symbolics.Packages.ObjectModel.ConvertFrom`1&lt;T&gt;,System.Boolean[],System.Boolean[],System.Boolean[],System.Boolean[])" Analyze="True" />
          <Member Name=".ctor(MathNet.Symbolics.Packages.ObjectModel.DefaultValue,MathNet.Symbolics.Packages.ObjectModel.ProcessAction`1&lt;T&gt;,MathNet.Symbolics.Packages.ObjectModel.ConvertFrom`1&lt;T&gt;,System.Int32,System.Int32,System.Int32)" Analyze="True" />
          <Member Name=".ctor(MathNet.Symbolics.Packages.ObjectModel.DefaultValue,MathNet.Symbolics.Packages.ObjectModel.ProcessAction`1&lt;T&gt;,System.Boolean[],System.Boolean[],System.Boolean[],System.Boolean[])" Analyze="True" />
          <Member Name=".ctor(MathNet.Symbolics.Packages.ObjectModel.DefaultValue,MathNet.Symbolics.Packages.ObjectModel.ProcessAction`1&lt;T&gt;,System.Int32,System.Int32,System.Int32)" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__0(MathNet.Symbolics.IValueStructure):T" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__2(MathNet.Symbolics.IValueStructure):T" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate1" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate3" Analyze="True" />
          <Member Name="Action(System.Boolean,MathNet.Symbolics.Signal):System.Void" Analyze="True" />
          <Member Name="convertFrom" Analyze="True" />
          <Member Name="defaultValue" Analyze="True" />
          <Member Name="processAction" Analyze="True" />
         </Members>
        </Type>
        <Type Name="GenericStdParallelProcess`2" Analyze="True">
         <Members>
          <Member Name=".ctor(MathNet.Symbolics.Packages.ObjectModel.ProcessItem`2&lt;Tin,Tout&gt;,MathNet.Symbolics.Packages.ObjectModel.ConvertFrom`1&lt;Tin&gt;,System.Int32)" Analyze="True" />
          <Member Name=".ctor(MathNet.Symbolics.Packages.ObjectModel.ProcessItem`2&lt;Tin,Tout&gt;,MathNet.Symbolics.Packages.ObjectModel.ConvertFrom`1&lt;Tin&gt;,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean)" Analyze="True" />
          <Member Name=".ctor(MathNet.Symbolics.Packages.ObjectModel.ProcessItem`2&lt;Tin,Tout&gt;,System.Int32)" Analyze="True" />
          <Member Name=".ctor(MathNet.Symbolics.Packages.ObjectModel.ProcessItem`2&lt;Tin,Tout&gt;,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean)" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__0(MathNet.Symbolics.IValueStructure):Tin" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__2(MathNet.Symbolics.IValueStructure):Tin" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate1" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate3" Analyze="True" />
          <Member Name="convertFrom" Analyze="True" />
          <Member Name="Process(MathNet.Symbolics.Signal,MathNet.Symbolics.Signal):System.Void" Analyze="True" />
          <Member Name="processItem" Analyze="True" />
         </Members>
        </Type>
        <Type Name="NaryToOneGenericEntity" Analyze="True">
         <Members>
          <Member Name=".ctor(System.String,System.String,System.String)" Analyze="True" />
          <Member Name=".ctor(System.String,System.String,System.String,MathNet.Symbolics.InfixNotation,System.Int32)" Analyze="True" />
          <Member Name="CompileGenericEntity(System.Int32,System.Int32):MathNet.Symbolics.IEntity" Analyze="True" />
         </Members>
        </Type>
        <Type Name="NearlySymmetricGenericEntity" Analyze="True">
         <Members>
          <Member Name=".ctor(System.String,System.String,System.String,MathNet.Symbolics.InfixNotation,System.Int32,System.Int32,System.Int32)" Analyze="True" />
          <Member Name=".ctor(System.String,System.String,System.String,MathNet.Symbolics.InfixNotation,System.Int32,System.Int32,System.Int32,System.String[])" Analyze="True" />
          <Member Name=".ctor(System.String,System.String,System.String,System.Int32,System.Int32)" Analyze="True" />
          <Member Name=".ctor(System.String,System.String,System.String,System.Int32,System.Int32,System.String[])" Analyze="True" />
          <Member Name="additionalInputs" Analyze="True" />
          <Member Name="additionalOutputs" Analyze="True" />
          <Member Name="CompileGenericEntity(System.Int32,System.Int32):MathNet.Symbolics.IEntity" Analyze="True" />
         </Members>
        </Type>
        <Type Name="ProcessAction`1" Analyze="True">
         <Members>
          <Member Name=".ctor(System.Object,System.IntPtr)" Analyze="True" />
          <Member Name="BeginInvoke(T,T,System.AsyncCallback,System.Object):System.IAsyncResult" Analyze="True" />
          <Member Name="EndInvoke(System.IAsyncResult):T" Analyze="True" />
          <Member Name="Invoke(T,T):T" Analyze="True" />
         </Members>
        </Type>
        <Type Name="ProcessBase" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="Action(System.Boolean,MathNet.Symbolics.Signal):System.Void" Analyze="True" />
          <Member Name="Continue():System.Void" Analyze="True" />
          <Member Name="ForceUpdate():System.Void" Analyze="True" />
          <Member Name="Pause():System.Void" Analyze="True" />
          <Member Name="paused" Analyze="True" />
          <Member Name="Paused" Analyze="True">
           <Accessors>
            <Accessor Name="get_Paused():System.Boolean" Analyze="True" />
            <Accessor Name="set_Paused(System.Boolean):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Register(System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Signal&gt;,System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Signal&gt;,System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Signal&gt;,System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Bus&gt;):System.Void" Analyze="True" />
          <Member Name="SenseSignal(MathNet.Symbolics.Signal):System.Void" Analyze="True" />
          <Member Name="sensitiveSignals" Analyze="True" />
          <Member Name="signal_SignalValueChanged(System.Object,MathNet.Symbolics.Events.ValueNodeEventArgs):System.Void" Analyze="True" />
          <Member Name="StopSenseSignal(MathNet.Symbolics.Signal):System.Void" Analyze="True" />
          <Member Name="Unregister():System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="ProcessItem`2" Analyze="True">
         <Members>
          <Member Name=".ctor(System.Object,System.IntPtr)" Analyze="True" />
          <Member Name="BeginInvoke(Tin,System.AsyncCallback,System.Object):System.IAsyncResult" Analyze="True" />
          <Member Name="EndInvoke(System.IAsyncResult):Tout" Analyze="True" />
          <Member Name="Invoke(Tin):Tout" Analyze="True" />
         </Members>
        </Type>
        <Type Name="PropertyBase" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="CollectBuses():System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Bus&gt;" Analyze="True" />
          <Member Name="CollectSignals():System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Signal&gt;" Analyze="True" />
          <Member Name="Equals(MathNet.Symbolics.IProperty):System.Boolean" Analyze="True" />
          <Member Name="Equals(System.Object):System.Boolean" Analyze="True" />
          <Member Name="EqualsById(MathNet.Symbolics.IProperty):System.Boolean" Analyze="True" />
          <Member Name="EqualsById(MathNet.Symbolics.MathIdentifier):System.Boolean" Analyze="True" />
          <Member Name="ReferencesCoreObjects" Analyze="True">
           <Accessors>
            <Accessor Name="get_ReferencesCoreObjects():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Serialize(System.Xml.XmlWriter,System.Collections.Generic.IDictionary`2&lt;System.Guid,System.Guid&gt;,System.Collections.Generic.IDictionary`2&lt;System.Guid,System.Guid&gt;):System.Void" Analyze="True" />
          <Member Name="StillValidAfterDrive(MathNet.Symbolics.Signal):System.Boolean" Analyze="True" />
          <Member Name="StillValidAfterEvent(MathNet.Symbolics.Signal):System.Boolean" Analyze="True" />
          <Member Name="StillValidAfterUndrive(MathNet.Symbolics.Signal):System.Boolean" Analyze="True" />
          <Member Name="ToString():System.String" Analyze="True" />
          <Member Name="TypeId" Analyze="True">
           <Accessors>
            <Accessor Name="get_TypeId():MathNet.Symbolics.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="PropertyBase+&lt;CollectBuses&gt;d__3" Analyze="True">
         <Members>
          <Member Name=".ctor(System.Int32)" Analyze="True" />
          <Member Name="&lt;&gt;1__state" Analyze="True" />
          <Member Name="&lt;&gt;2__current" Analyze="True" />
          <Member Name="&lt;&gt;4__this" Analyze="True" />
          <Member Name="MoveNext():System.Boolean" Analyze="True" />
          <Member Name="System.Collections.Generic.IEnumerable&lt;MathNet.Symbolics.Bus&gt;.GetEnumerator():System.Collections.Generic.IEnumerator`1&lt;MathNet.Symbolics.Bus&gt;" Analyze="True" />
          <Member Name="System.Collections.Generic.IEnumerator&lt;MathNet.Symbolics.Bus&gt;.Current" Analyze="True">
           <Accessors>
            <Accessor Name="System.Collections.Generic.IEnumerator&lt;MathNet.Symbolics.Bus&gt;.get_Current():MathNet.Symbolics.Bus" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="System.Collections.IEnumerable.GetEnumerator():System.Collections.IEnumerator" Analyze="True" />
          <Member Name="System.Collections.IEnumerator.Current" Analyze="True">
           <Accessors>
            <Accessor Name="System.Collections.IEnumerator.get_Current():System.Object" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="System.Collections.IEnumerator.Reset():System.Void" Analyze="True" />
          <Member Name="System.IDisposable.Dispose():System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="PropertyBase+&lt;CollectSignals&gt;d__0" Analyze="True">
         <Members>
          <Member Name=".ctor(System.Int32)" Analyze="True" />
          <Member Name="&lt;&gt;1__state" Analyze="True" />
          <Member Name="&lt;&gt;2__current" Analyze="True" />
          <Member Name="&lt;&gt;4__this" Analyze="True" />
          <Member Name="MoveNext():System.Boolean" Analyze="True" />
          <Member Name="System.Collections.Generic.IEnumerable&lt;MathNet.Symbolics.Signal&gt;.GetEnumerator():System.Collections.Generic.IEnumerator`1&lt;MathNet.Symbolics.Signal&gt;" Analyze="True" />
          <Member Name="System.Collections.Generic.IEnumerator&lt;MathNet.Symbolics.Signal&gt;.Current" Analyze="True">
           <Accessors>
            <Accessor Name="System.Collections.Generic.IEnumerator&lt;MathNet.Symbolics.Signal&gt;.get_Current():MathNet.Symbolics.Signal" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="System.Collections.IEnumerable.GetEnumerator():System.Collections.IEnumerator" Analyze="True" />
          <Member Name="System.Collections.IEnumerator.Current" Analyze="True">
           <Accessors>
            <Accessor Name="System.Collections.IEnumerator.get_Current():System.Object" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="System.Collections.IEnumerator.Reset():System.Void" Analyze="True" />
          <Member Name="System.IDisposable.Dispose():System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="SymmetricGenericEntity" Analyze="True">
         <Members>
          <Member Name=".ctor(System.String,System.String,System.String)" Analyze="True" />
          <Member Name=".ctor(System.String,System.String,System.String,MathNet.Symbolics.InfixNotation,System.Int32)" Analyze="True" />
          <Member Name=".ctor(System.String,System.String,System.String,MathNet.Symbolics.InfixNotation,System.Int32,System.String[])" Analyze="True" />
          <Member Name=".ctor(System.String,System.String,System.String,System.String[])" Analyze="True" />
          <Member Name="CompileGenericEntity(System.Int32,System.Int32):MathNet.Symbolics.IEntity" Analyze="True" />
         </Members>
        </Type>
        <Type Name="ValueStructureBase" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="CollectBuses():System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Bus&gt;" Analyze="True" />
          <Member Name="CollectSignals():System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Signal&gt;" Analyze="True" />
          <Member Name="Equals(MathNet.Symbolics.IValueStructure):System.Boolean" Analyze="True" />
          <Member Name="Equals(System.Object):System.Boolean" Analyze="True" />
          <Member Name="EqualsById(MathNet.Symbolics.IValueStructure):System.Boolean" Analyze="True" />
          <Member Name="EqualsById(MathNet.Symbolics.MathIdentifier):System.Boolean" Analyze="True" />
          <Member Name="ReferencesCoreObjects" Analyze="True">
           <Accessors>
            <Accessor Name="get_ReferencesCoreObjects():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Serialize(System.Xml.XmlWriter,System.Collections.Generic.IDictionary`2&lt;System.Guid,System.Guid&gt;,System.Collections.Generic.IDictionary`2&lt;System.Guid,System.Guid&gt;):System.Void" Analyze="True" />
          <Member Name="ToString():System.String" Analyze="True" />
          <Member Name="TypeId" Analyze="True">
           <Accessors>
            <Accessor Name="get_TypeId():MathNet.Symbolics.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="ValueStructureBase+&lt;CollectBuses&gt;d__3" Analyze="True">
         <Members>
          <Member Name=".ctor(System.Int32)" Analyze="True" />
          <Member Name="&lt;&gt;1__state" Analyze="True" />
          <Member Name="&lt;&gt;2__current" Analyze="True" />
          <Member Name="&lt;&gt;4__this" Analyze="True" />
          <Member Name="MoveNext():System.Boolean" Analyze="True" />
          <Member Name="System.Collections.Generic.IEnumerable&lt;MathNet.Symbolics.Bus&gt;.GetEnumerator():System.Collections.Generic.IEnumerator`1&lt;MathNet.Symbolics.Bus&gt;" Analyze="True" />
          <Member Name="System.Collections.Generic.IEnumerator&lt;MathNet.Symbolics.Bus&gt;.Current" Analyze="True">
           <Accessors>
            <Accessor Name="System.Collections.Generic.IEnumerator&lt;MathNet.Symbolics.Bus&gt;.get_Current():MathNet.Symbolics.Bus" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="System.Collections.IEnumerable.GetEnumerator():System.Collections.IEnumerator" Analyze="True" />
          <Member Name="System.Collections.IEnumerator.Current" Analyze="True">
           <Accessors>
            <Accessor Name="System.Collections.IEnumerator.get_Current():System.Object" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="System.Collections.IEnumerator.Reset():System.Void" Analyze="True" />
          <Member Name="System.IDisposable.Dispose():System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="ValueStructureBase+&lt;CollectSignals&gt;d__0" Analyze="True">
         <Members>
          <Member Name=".ctor(System.Int32)" Analyze="True" />
          <Member Name="&lt;&gt;1__state" Analyze="True" />
          <Member Name="&lt;&gt;2__current" Analyze="True" />
          <Member Name="&lt;&gt;4__this" Analyze="True" />
          <Member Name="MoveNext():System.Boolean" Analyze="True" />
          <Member Name="System.Collections.Generic.IEnumerable&lt;MathNet.Symbolics.Signal&gt;.GetEnumerator():System.Collections.Generic.IEnumerator`1&lt;MathNet.Symbolics.Signal&gt;" Analyze="True" />
          <Member Name="System.Collections.Generic.IEnumerator&lt;MathNet.Symbolics.Signal&gt;.Current" Analyze="True">
           <Accessors>
            <Accessor Name="System.Collections.Generic.IEnumerator&lt;MathNet.Symbolics.Signal&gt;.get_Current():MathNet.Symbolics.Signal" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="System.Collections.IEnumerable.GetEnumerator():System.Collections.IEnumerator" Analyze="True" />
          <Member Name="System.Collections.IEnumerator.Current" Analyze="True">
           <Accessors>
            <Accessor Name="System.Collections.IEnumerator.get_Current():System.Object" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="System.Collections.IEnumerator.Reset():System.Void" Analyze="True" />
          <Member Name="System.IDisposable.Dispose():System.Void" Analyze="True" />
         </Members>
        </Type>
       </Types>
      </Namespace>
     </Namespaces>
    </Module>
   </Modules>
  </Target>
  <Target Name="$(ProjectDir)/src/app/MathNet.Yttrium/Packages.Standard/bin/Debug/MathNet.Yttrium.Packages.Standard.dll" Analyze="True">
   <Modules>
    <Module Name="mathnet.yttrium.packages.standard.dll" Analyze="True">
     <Namespaces>
      <Namespace Name="" Analyze="True">
       <Types>
        <Type Name="&lt;Module&gt;" Analyze="True" />
       </Types>
      </Namespace>
      <Namespace Name="MathNet.Symbolics.Packages.Standard" Analyze="True">
       <Types>
        <Type Name="AlgebraicExpressionCategory" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="_instance" Analyze="True" />
          <Member Name="Deserialize(System.Xml.XmlReader,System.Collections.Generic.IDictionary`2&lt;System.Guid,MathNet.Symbolics.Signal&gt;,System.Collections.Generic.IDictionary`2&lt;System.Guid,MathNet.Symbolics.Bus&gt;):MathNet.Symbolics.Packages.Standard.AlgebraicExpressionCategory" Analyze="True" />
          <Member Name="Instance" Analyze="True">
           <Accessors>
            <Accessor Name="get_Instance():MathNet.Symbolics.Packages.Standard.AlgebraicExpressionCategory" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="IsAlgebraicExpressionMember(MathNet.Symbolics.Port):System.Boolean" Analyze="True" />
          <Member Name="IsMember(MathNet.Symbolics.Port):MathNet.Symbolics.CategoryMembershipLevel" Analyze="True" />
          <Member Name="IsMember(MathNet.Symbolics.Signal,System.Boolean):MathNet.Symbolics.CategoryMembershipLevel" Analyze="True" />
          <Member Name="IsNotAlgebraicExpressionMember(MathNet.Symbolics.Port):System.Boolean" Analyze="True" />
         </Members>
        </Type>
        <Type Name="AlgebraicStructureCategory" Analyze="True">
         <Members>
          <Member Name=".ctor(MathNet.Symbolics.Packages.Standard.EAlgebraicStructure,MathNet.Symbolics.IEntity)" Analyze="True" />
          <Member Name=".ctor(MathNet.Symbolics.Packages.Standard.EAlgebraicStructure,MathNet.Symbolics.IEntity,MathNet.Symbolics.IEntity)" Analyze="True" />
          <Member Name="_additiveEntity" Analyze="True" />
          <Member Name="_multiplicativeEntity" Analyze="True" />
          <Member Name="_structure" Analyze="True" />
          <Member Name="AdditiveEntity" Analyze="True">
           <Accessors>
            <Accessor Name="get_AdditiveEntity():MathNet.Symbolics.IEntity" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Deserialize(System.Xml.XmlReader,System.Collections.Generic.IDictionary`2&lt;System.Guid,MathNet.Symbolics.Signal&gt;,System.Collections.Generic.IDictionary`2&lt;System.Guid,MathNet.Symbolics.Bus&gt;):MathNet.Symbolics.Packages.Standard.AlgebraicStructureCategory" Analyze="True" />
          <Member Name="Equals(MathNet.Symbolics.Packages.ObjectModel.CategoryBase):System.Boolean" Analyze="True" />
          <Member Name="IsMember(MathNet.Symbolics.Port):MathNet.Symbolics.CategoryMembershipLevel" Analyze="True" />
          <Member Name="IsMember(MathNet.Symbolics.Signal,System.Boolean):MathNet.Symbolics.CategoryMembershipLevel" Analyze="True" />
          <Member Name="MultiplicativeEntity" Analyze="True">
           <Accessors>
            <Accessor Name="get_MultiplicativeEntity():MathNet.Symbolics.IEntity" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Serialize(System.Xml.XmlWriter,System.Collections.Generic.IDictionary`2&lt;System.Guid,System.Guid&gt;,System.Collections.Generic.IDictionary`2&lt;System.Guid,System.Guid&gt;):System.Void" Analyze="True" />
          <Member Name="Structure" Analyze="True">
           <Accessors>
            <Accessor Name="get_Structure():MathNet.Symbolics.Packages.Standard.EAlgebraicStructure" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="EAlgebraicStructure" Analyze="True">
         <Members>
          <Member Name="AbelianGroup" Analyze="True" />
          <Member Name="AbelianMonoid" Analyze="True" />
          <Member Name="AbelianSemigroup" Analyze="True" />
          <Member Name="AdditiveAssociative" Analyze="True" />
          <Member Name="AdditiveClose" Analyze="True" />
          <Member Name="AdditiveCommutative" Analyze="True" />
          <Member Name="AdditiveIdentityElement" Analyze="True" />
          <Member Name="AdditiveInverseElement" Analyze="True" />
          <Member Name="BooleanAlgebra" Analyze="True" />
          <Member Name="CommutativeRing" Analyze="True" />
          <Member Name="CommutativeRingWithUnity" Analyze="True" />
          <Member Name="CommutativeSemiring" Analyze="True" />
          <Member Name="Complement" Analyze="True" />
          <Member Name="DistributiveAdditiveOverMultiplicative" Analyze="True" />
          <Member Name="DistributiveMultiplicativeOverAdditive" Analyze="True" />
          <Member Name="Field" Analyze="True" />
          <Member Name="Group" Analyze="True" />
          <Member Name="Monoid" Analyze="True" />
          <Member Name="MultiplicativeAssociative" Analyze="True" />
          <Member Name="MultiplicativeClose" Analyze="True" />
          <Member Name="MultiplicativeCommutative" Analyze="True" />
          <Member Name="MultiplicativeIdentityElement" Analyze="True" />
          <Member Name="MultiplicativeInverseElement" Analyze="True" />
          <Member Name="Ring" Analyze="True" />
          <Member Name="RingWithUnity" Analyze="True" />
          <Member Name="Semigroup" Analyze="True" />
          <Member Name="Semiring" Analyze="True" />
          <Member Name="SkewField" Analyze="True" />
          <Member Name="value__" Analyze="True" />
         </Members>
        </Type>
        <Type Name="IAlgebraicAbelianGroup`1" Analyze="True" />
        <Type Name="IAlgebraicAdditiveClose`1" Analyze="True">
         <Members>
          <Member Name="Add(T):T" Analyze="True" />
         </Members>
        </Type>
        <Type Name="IAlgebraicCommutativeRingWithUnity`1" Analyze="True" />
        <Type Name="IAlgebraicField`1" Analyze="True" />
        <Type Name="IAlgebraicGroup`1" Analyze="True">
         <Members>
          <Member Name="Negate():T" Analyze="True" />
          <Member Name="Subtract(T):T" Analyze="True" />
         </Members>
        </Type>
        <Type Name="IAlgebraicMonoid" Analyze="True">
         <Members>
          <Member Name="AdditiveIdentity" Analyze="True">
           <Accessors>
            <Accessor Name="get_AdditiveIdentity():MathNet.Symbolics.IValueStructure" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="IsAdditiveIdentity" Analyze="True">
           <Accessors>
            <Accessor Name="get_IsAdditiveIdentity():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="IAlgebraicMonoid`1" Analyze="True" />
        <Type Name="IAlgebraicMultiplicativeClose`1" Analyze="True">
         <Members>
          <Member Name="Multiply(T):T" Analyze="True" />
         </Members>
        </Type>
        <Type Name="IAlgebraicRingWithUnity" Analyze="True">
         <Members>
          <Member Name="IsMultiplicativeIdentity" Analyze="True">
           <Accessors>
            <Accessor Name="get_IsMultiplicativeIdentity():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="MultiplicativeIdentity" Analyze="True">
           <Accessors>
            <Accessor Name="get_MultiplicativeIdentity():MathNet.Symbolics.IValueStructure" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="IAlgebraicRingWithUnity`1" Analyze="True" />
        <Type Name="IAlgebraicSkewField`1" Analyze="True">
         <Members>
          <Member Name="Divide(T):T" Analyze="True" />
          <Member Name="Invert():T" Analyze="True" />
         </Members>
        </Type>
        <Type Name="IAlgebraicVectorSpace`2" Analyze="True">
         <Members>
          <Member Name="Scale(TScalar):TElement" Analyze="True" />
         </Members>
        </Type>
        <Type Name="Std" Analyze="True">
         <Members>
          <Member Name=".cctor()" Analyze="True" />
          <Member Name="_transformer" Analyze="True" />
          <Member Name="Add(MathNet.Symbolics.Backend.Containers.ISignalSet):MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="Add(MathNet.Symbolics.Signal,System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Signal&gt;):MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="Add(MathNet.Symbolics.Signal[]):MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="Add(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Signal&gt;):MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="AutoSimplify(MathNet.Symbolics.Signal):MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="AutoSimplify(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Signal&gt;):MathNet.Symbolics.Backend.Containers.SignalSet" Analyze="True" />
          <Member Name="Denominator(MathNet.Symbolics.Signal):MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="Derive(MathNet.Symbolics.Signal,MathNet.Symbolics.Signal):MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="Derive(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Signal&gt;,MathNet.Symbolics.Signal):MathNet.Symbolics.Backend.Containers.SignalSet" Analyze="True" />
          <Member Name="Divide(MathNet.Symbolics.Backend.Containers.ISignalSet):MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="Divide(MathNet.Symbolics.Signal,System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Signal&gt;):MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="Divide(MathNet.Symbolics.Signal[]):MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="Divide(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Signal&gt;):MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="IsAdditiveIdentity(MathNet.Symbolics.Signal):System.Boolean" Analyze="True" />
          <Member Name="IsAlwaysInteger(MathNet.Symbolics.Signal):System.Boolean" Analyze="True" />
          <Member Name="IsAlwaysNonnegativeInteger(MathNet.Symbolics.Signal):System.Boolean" Analyze="True" />
          <Member Name="IsAlwaysPositiveInteger(MathNet.Symbolics.Signal):System.Boolean" Analyze="True" />
          <Member Name="IsAlwaysRational(MathNet.Symbolics.Signal):System.Boolean" Analyze="True" />
          <Member Name="IsAlwaysReal(MathNet.Symbolics.Signal):System.Boolean" Analyze="True" />
          <Member Name="IsConstant(MathNet.Symbolics.Signal):System.Boolean" Analyze="True" />
          <Member Name="IsConstantAdditiveIdentity(MathNet.Symbolics.Signal):System.Boolean" Analyze="True" />
          <Member Name="IsConstantMultiplicativeIdentity(MathNet.Symbolics.Signal):System.Boolean" Analyze="True" />
          <Member Name="IsConstantUndefined(MathNet.Symbolics.Signal):System.Boolean" Analyze="True" />
          <Member Name="IsMonomial(MathNet.Symbolics.Signal,MathNet.Symbolics.Signal):System.Boolean" Analyze="True" />
          <Member Name="IsMonomial(MathNet.Symbolics.Signal,MathNet.Symbolics.Signal[]):System.Boolean" Analyze="True" />
          <Member Name="IsMonomialFactor(MathNet.Symbolics.Signal,MathNet.Symbolics.Signal[]):System.Boolean" Analyze="True" />
          <Member Name="IsMultiplicativeIdentity(MathNet.Symbolics.Signal):System.Boolean" Analyze="True" />
          <Member Name="IsPolynomial(MathNet.Symbolics.Signal,MathNet.Symbolics.Signal):System.Boolean" Analyze="True" />
          <Member Name="IsPolynomial(MathNet.Symbolics.Signal,MathNet.Symbolics.Signal[]):System.Boolean" Analyze="True" />
          <Member Name="IsRational(MathNet.Symbolics.Signal,MathNet.Symbolics.Signal):System.Boolean" Analyze="True" />
          <Member Name="IsUndefined(MathNet.Symbolics.Signal):System.Boolean" Analyze="True" />
          <Member Name="MonomialCoefficient(MathNet.Symbolics.Signal,MathNet.Symbolics.Signal,MathNet.Symbolics.IValueStructure&amp;):MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="MonomialDegree(MathNet.Symbolics.Signal,MathNet.Symbolics.Signal):MathNet.Symbolics.IValueStructure" Analyze="True" />
          <Member Name="MonomialDegree(MathNet.Symbolics.Signal,MathNet.Symbolics.Signal[]):MathNet.Symbolics.IValueStructure" Analyze="True" />
          <Member Name="Multiply(MathNet.Symbolics.Backend.Containers.ISignalSet):MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="Multiply(MathNet.Symbolics.Signal,System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Signal&gt;):MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="Multiply(MathNet.Symbolics.Signal[]):MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="Multiply(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Signal&gt;):MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="Numerator(MathNet.Symbolics.Signal):MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="PolynomialCoefficient(MathNet.Symbolics.Signal,MathNet.Symbolics.Signal,System.Int32):MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="PolynomialCoefficients(MathNet.Symbolics.Signal,MathNet.Symbolics.Signal):MathNet.Symbolics.Signal[]" Analyze="True" />
          <Member Name="PolynomialDegree(MathNet.Symbolics.Signal,MathNet.Symbolics.Signal):MathNet.Symbolics.IValueStructure" Analyze="True" />
          <Member Name="PolynomialDegree(MathNet.Symbolics.Signal,MathNet.Symbolics.Signal[]):MathNet.Symbolics.IValueStructure" Analyze="True" />
          <Member Name="PolynomialHeight(MathNet.Symbolics.Signal,MathNet.Symbolics.Signal):MathNet.Symbolics.IValueStructure" Analyze="True" />
          <Member Name="PolynomialLeadingCoefficient(MathNet.Symbolics.Signal,MathNet.Symbolics.Signal):MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="PolynomialTotalDegree(MathNet.Symbolics.Signal):MathNet.Symbolics.IValueStructure" Analyze="True" />
          <Member Name="PolynomialVariables(MathNet.Symbolics.Signal):MathNet.Symbolics.Signal[]" Analyze="True" />
          <Member Name="SeparateFactors(MathNet.Symbolics.Signal,MathNet.Symbolics.Signal):MathNet.Symbolics.Signal[]" Analyze="True" />
          <Member Name="Subtract(MathNet.Symbolics.Backend.Containers.ISignalSet):MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="Subtract(MathNet.Symbolics.Signal,System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Signal&gt;):MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="Subtract(MathNet.Symbolics.Signal[]):MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="Subtract(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Signal&gt;):MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="TrigonometricSubstitute(MathNet.Symbolics.Signal):MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="TrigonometricSubstitute(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Signal&gt;):MathNet.Symbolics.Backend.Containers.SignalSet" Analyze="True" />
         </Members>
        </Type>
        <Type Name="Std+&lt;&gt;c__DisplayClass1" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="&lt;IsPolynomial&gt;b__0(MathNet.Symbolics.Signal):System.Boolean" Analyze="True" />
          <Member Name="variable" Analyze="True" />
         </Members>
        </Type>
        <Type Name="Std+&lt;&gt;c__DisplayClass4" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="&lt;IsMonomial&gt;b__3(MathNet.Symbolics.Signal):System.Boolean" Analyze="True" />
          <Member Name="generalizedVariables" Analyze="True" />
         </Members>
        </Type>
        <Type Name="Std+&lt;&gt;c__DisplayClass7" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="&lt;IsPolynomial&gt;b__6(MathNet.Symbolics.Signal):System.Boolean" Analyze="True" />
          <Member Name="generalizedVariables" Analyze="True" />
         </Members>
        </Type>
        <Type Name="Std+&lt;&gt;c__DisplayClassa" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="&lt;Derive&gt;b__9(MathNet.Symbolics.Manipulation.ITransformationTheorem):System.Void" Analyze="True" />
          <Member Name="variable" Analyze="True" />
         </Members>
        </Type>
        <Type Name="Std+&lt;&gt;c__DisplayClassd" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="&lt;Derive&gt;b__c(MathNet.Symbolics.Manipulation.ITransformationTheorem):System.Void" Analyze="True" />
          <Member Name="variable" Analyze="True" />
         </Members>
        </Type>
        <Type Name="StdBuilder" Analyze="True">
         <Members>
          <Member Name=".cctor()" Analyze="True" />
          <Member Name="_builder" Analyze="True" />
          <Member Name="Absolute(MathNet.Symbolics.Signal):MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="Absolute(MathNet.Symbolics.Signal[]):MathNet.Symbolics.Backend.Containers.ReadOnlySignalSet" Analyze="True" />
          <Member Name="Absolute(System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Signal&gt;):MathNet.Symbolics.Backend.Containers.ReadOnlySignalSet" Analyze="True" />
          <Member Name="Add(MathNet.Symbolics.Signal,MathNet.Symbolics.Signal):MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="Add(MathNet.Symbolics.Signal[]):MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="Add(System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Signal&gt;):MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="Cosecant(MathNet.Symbolics.Signal):MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="Cosecant(System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Signal&gt;):MathNet.Symbolics.Backend.Containers.ReadOnlySignalSet" Analyze="True" />
          <Member Name="Cosine(MathNet.Symbolics.Signal):MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="Cosine(System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Signal&gt;):MathNet.Symbolics.Backend.Containers.ReadOnlySignalSet" Analyze="True" />
          <Member Name="Cotangent(MathNet.Symbolics.Signal):MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="Cotangent(System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Signal&gt;):MathNet.Symbolics.Backend.Containers.ReadOnlySignalSet" Analyze="True" />
          <Member Name="Derive(MathNet.Symbolics.Signal,MathNet.Symbolics.Signal):MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="Derive(MathNet.Symbolics.Signal[]):MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="Derive(System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Signal&gt;):MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="Divide(MathNet.Symbolics.Signal,MathNet.Symbolics.Signal):MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="Divide(MathNet.Symbolics.Signal[]):MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="Divide(System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Signal&gt;):MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="Exponential(MathNet.Symbolics.Signal):MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="Factorial(MathNet.Symbolics.Signal):MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="Invert(MathNet.Symbolics.Signal):MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="Invert(MathNet.Symbolics.Signal[]):MathNet.Symbolics.Backend.Containers.ReadOnlySignalSet" Analyze="True" />
          <Member Name="Invert(System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Signal&gt;):MathNet.Symbolics.Backend.Containers.ReadOnlySignalSet" Analyze="True" />
          <Member Name="Multiply(MathNet.Symbolics.Signal,MathNet.Symbolics.Signal):MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="Multiply(MathNet.Symbolics.Signal[]):MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="Multiply(System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Signal&gt;):MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="NaturalLogarithm(MathNet.Symbolics.Signal):MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="Negate(MathNet.Symbolics.Signal):MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="Negate(MathNet.Symbolics.Signal[]):MathNet.Symbolics.Backend.Containers.ReadOnlySignalSet" Analyze="True" />
          <Member Name="Negate(System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Signal&gt;):MathNet.Symbolics.Backend.Containers.ReadOnlySignalSet" Analyze="True" />
          <Member Name="Power(MathNet.Symbolics.Signal,MathNet.Symbolics.Signal):MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="Power(MathNet.Symbolics.Signal[]):MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="Power(System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Signal&gt;):MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="Secant(MathNet.Symbolics.Signal):MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="Secant(System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Signal&gt;):MathNet.Symbolics.Backend.Containers.ReadOnlySignalSet" Analyze="True" />
          <Member Name="Sine(MathNet.Symbolics.Signal):MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="Sine(System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Signal&gt;):MathNet.Symbolics.Backend.Containers.ReadOnlySignalSet" Analyze="True" />
          <Member Name="Square(MathNet.Symbolics.Signal):MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="Square(MathNet.Symbolics.Signal[]):MathNet.Symbolics.Backend.Containers.ReadOnlySignalSet" Analyze="True" />
          <Member Name="Square(System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Signal&gt;):MathNet.Symbolics.Backend.Containers.ReadOnlySignalSet" Analyze="True" />
          <Member Name="Subtract(MathNet.Symbolics.Signal,MathNet.Symbolics.Signal):MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="Subtract(MathNet.Symbolics.Signal[]):MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="Subtract(System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Signal&gt;):MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="Tangent(MathNet.Symbolics.Signal):MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="Tangent(System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Signal&gt;):MathNet.Symbolics.Backend.Containers.ReadOnlySignalSet" Analyze="True" />
         </Members>
        </Type>
        <Type Name="StdPackageManager" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="Domain" Analyze="True">
           <Accessors>
            <Accessor Name="get_Domain():System.String" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Register(MathNet.Symbolics.Library.ILibrary):System.Void" Analyze="True" />
          <Member Name="RegisterArchitectures(MathNet.Symbolics.Library.ILibrary):System.Void" Analyze="True" />
          <Member Name="RegisterEntities(MathNet.Symbolics.Library.ILibrary):System.Void" Analyze="True" />
          <Member Name="RegisterStructures(MathNet.Symbolics.Library.ILibrary):System.Void" Analyze="True" />
          <Member Name="RegisterTheorems(MathNet.Symbolics.Library.ILibrary):System.Void" Analyze="True" />
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="MathNet.Symbolics.Packages.Standard.Algebra" Analyze="True">
       <Types>
        <Type Name="AutoSimplifyArchitecture" Analyze="True">
         <Members>
          <Member Name=".cctor()" Analyze="True" />
          <Member Name=".ctor()" Analyze="True" />
          <Member Name=".ctor(MathNet.Symbolics.Port)" Analyze="True" />
          <Member Name="_entityId" Analyze="True" />
          <Member Name="EntityIdentifier" Analyze="True">
           <Accessors>
            <Accessor Name="get_EntityIdentifier():MathNet.Symbolics.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ExecuteMathematicalOperator():MathNet.Symbolics.Backend.Containers.ISignalSet" Analyze="True" />
          <Member Name="InstantiateToPort(MathNet.Symbolics.Port):MathNet.Symbolics.IArchitecture" Analyze="True" />
          <Member Name="SupportsPort(MathNet.Symbolics.Port):System.Boolean" Analyze="True" />
         </Members>
        </Type>
        <Type Name="AutoSimplifyTransformation" Analyze="True">
         <Members>
          <Member Name=".cctor()" Analyze="True" />
          <Member Name=".ctor(MathNet.Symbolics.MathIdentifier,MathNet.Symbolics.Manipulation.EstimatePlan,MathNet.Symbolics.Manipulation.ManipulatePort)" Analyze="True" />
          <Member Name=".ctor(MathNet.Symbolics.MathIdentifier,MathNet.Symbolics.Packages.Standard.Algebra.CreatePattern,MathNet.Symbolics.Manipulation.EstimatePlan,MathNet.Symbolics.Manipulation.ManipulatePort)" Analyze="True" />
          <Member Name="_id" Analyze="True" />
          <Member Name="_pattern" Analyze="True" />
          <Member Name="_plan" Analyze="True" />
          <Member Name="_provider" Analyze="True" />
          <Member Name="_simplify" Analyze="True" />
          <Member Name="_transformationTypeId" Analyze="True" />
          <Member Name="CreatePattern():MathNet.Symbolics.Patterns.Toolkit.Pattern" Analyze="True" />
          <Member Name="EstimatePlan(MathNet.Symbolics.Port,MathNet.Symbolics.Patterns.Toolkit.GroupCollection):MathNet.Symbolics.Manipulation.ManipulationPlan" Analyze="True" />
          <Member Name="ManipulatePort(MathNet.Symbolics.Port,MathNet.Symbolics.Backend.Containers.SignalSet,System.Boolean,MathNet.Symbolics.Patterns.Toolkit.GroupCollection):System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Signal&gt;" Analyze="True" />
          <Member Name="ManipulateSignal(MathNet.Symbolics.Signal,MathNet.Symbolics.Signal,System.Boolean):MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="Provider" Analyze="True">
           <Accessors>
            <Accessor Name="get_Provider():MathNet.Symbolics.Manipulation.ITransformationTheoremProvider" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="TheoremId" Analyze="True">
           <Accessors>
            <Accessor Name="get_TheoremId():MathNet.Symbolics.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="TransformationTypeId" Analyze="True">
           <Accessors>
            <Accessor Name="get_TransformationTypeId():MathNet.Symbolics.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="TransformationTypeIdentifier" Analyze="True">
           <Accessors>
            <Accessor Name="get_TransformationTypeIdentifier():MathNet.Symbolics.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="AutoSimplifyTransformation+&lt;&gt;c__DisplayClass2" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__0():MathNet.Symbolics.Patterns.Toolkit.Pattern" Analyze="True" />
          <Member Name="supportedEntityId" Analyze="True" />
         </Members>
        </Type>
        <Type Name="CreatePattern" Analyze="True">
         <Members>
          <Member Name=".ctor(System.Object,System.IntPtr)" Analyze="True" />
          <Member Name="BeginInvoke(System.AsyncCallback,System.Object):System.IAsyncResult" Analyze="True" />
          <Member Name="EndInvoke(System.IAsyncResult):MathNet.Symbolics.Patterns.Toolkit.Pattern" Analyze="True" />
          <Member Name="Invoke():MathNet.Symbolics.Patterns.Toolkit.Pattern" Analyze="True" />
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="MathNet.Symbolics.Packages.Standard.Analysis" Analyze="True">
       <Types>
        <Type Name="AlgebraicDerivativeArchitecture" Analyze="True">
         <Members>
          <Member Name=".cctor()" Analyze="True" />
          <Member Name=".ctor()" Analyze="True" />
          <Member Name=".ctor(MathNet.Symbolics.Port)" Analyze="True" />
          <Member Name="_entityId" Analyze="True" />
          <Member Name="EntityIdentifier" Analyze="True">
           <Accessors>
            <Accessor Name="get_EntityIdentifier():MathNet.Symbolics.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ExecuteMathematicalOperator():MathNet.Symbolics.Backend.Containers.ISignalSet" Analyze="True" />
          <Member Name="InstantiateToPort(MathNet.Symbolics.Port):MathNet.Symbolics.IArchitecture" Analyze="True" />
          <Member Name="SupportsPort(MathNet.Symbolics.Port):System.Boolean" Analyze="True" />
         </Members>
        </Type>
        <Type Name="DerivativeTransformation" Analyze="True">
         <Members>
          <Member Name=".cctor()" Analyze="True" />
          <Member Name=".ctor(MathNet.Symbolics.MathIdentifier,MathNet.Symbolics.MathIdentifier,MathNet.Symbolics.Packages.Standard.Analysis.EstimateDerivePlan,MathNet.Symbolics.Packages.Standard.Analysis.Derive)" Analyze="True" />
          <Member Name=".ctor(MathNet.Symbolics.MathIdentifier,MathNet.Symbolics.Packages.Standard.Analysis.Derive)" Analyze="True" />
          <Member Name=".ctor(MathNet.Symbolics.MathIdentifier,MathNet.Symbolics.Packages.Standard.Analysis.EstimateDerivePlan,MathNet.Symbolics.Packages.Standard.Analysis.Derive)" Analyze="True" />
          <Member Name="_derive" Analyze="True" />
          <Member Name="_id" Analyze="True" />
          <Member Name="_plan" Analyze="True" />
          <Member Name="_provider" Analyze="True" />
          <Member Name="_supportedEntityId" Analyze="True" />
          <Member Name="_transformationTypeId" Analyze="True" />
          <Member Name="_variable" Analyze="True" />
          <Member Name="CreatePattern():MathNet.Symbolics.Patterns.Toolkit.Pattern" Analyze="True" />
          <Member Name="DefaultEstimate(MathNet.Symbolics.Port,MathNet.Symbolics.Signal):MathNet.Symbolics.Manipulation.ManipulationPlan" Analyze="True" />
          <Member Name="EstimatePlan(MathNet.Symbolics.Port,MathNet.Symbolics.Patterns.Toolkit.GroupCollection):MathNet.Symbolics.Manipulation.ManipulationPlan" Analyze="True" />
          <Member Name="ManipulatePort(MathNet.Symbolics.Port,MathNet.Symbolics.Backend.Containers.SignalSet,System.Boolean,MathNet.Symbolics.Patterns.Toolkit.GroupCollection):System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Signal&gt;" Analyze="True" />
          <Member Name="ManipulateSignal(MathNet.Symbolics.Signal,MathNet.Symbolics.Signal,System.Boolean):MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="Provider" Analyze="True">
           <Accessors>
            <Accessor Name="get_Provider():MathNet.Symbolics.Manipulation.ITransformationTheoremProvider" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="TheoremId" Analyze="True">
           <Accessors>
            <Accessor Name="get_TheoremId():MathNet.Symbolics.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="TransformationTypeId" Analyze="True">
           <Accessors>
            <Accessor Name="get_TransformationTypeId():MathNet.Symbolics.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="TransformationTypeIdentifier" Analyze="True">
           <Accessors>
            <Accessor Name="get_TransformationTypeIdentifier():MathNet.Symbolics.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Variable" Analyze="True">
           <Accessors>
            <Accessor Name="get_Variable():MathNet.Symbolics.Signal" Analyze="True" />
            <Accessor Name="set_Variable(MathNet.Symbolics.Signal):System.Void" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="Derive" Analyze="True">
         <Members>
          <Member Name=".ctor(System.Object,System.IntPtr)" Analyze="True" />
          <Member Name="BeginInvoke(MathNet.Symbolics.Port,MathNet.Symbolics.Backend.Containers.SignalSet,MathNet.Symbolics.Signal,System.Boolean,System.AsyncCallback,System.Object):System.IAsyncResult" Analyze="True" />
          <Member Name="EndInvoke(System.IAsyncResult):System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Signal&gt;" Analyze="True" />
          <Member Name="Invoke(MathNet.Symbolics.Port,MathNet.Symbolics.Backend.Containers.SignalSet,MathNet.Symbolics.Signal,System.Boolean):System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Signal&gt;" Analyze="True" />
         </Members>
        </Type>
        <Type Name="EstimateDerivePlan" Analyze="True">
         <Members>
          <Member Name=".ctor(System.Object,System.IntPtr)" Analyze="True" />
          <Member Name="BeginInvoke(MathNet.Symbolics.Port,MathNet.Symbolics.Signal,System.AsyncCallback,System.Object):System.IAsyncResult" Analyze="True" />
          <Member Name="EndInvoke(System.IAsyncResult):MathNet.Symbolics.Manipulation.ManipulationPlan" Analyze="True" />
          <Member Name="Invoke(MathNet.Symbolics.Port,MathNet.Symbolics.Signal):MathNet.Symbolics.Manipulation.ManipulationPlan" Analyze="True" />
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="MathNet.Symbolics.Packages.Standard.Arithmetics" Analyze="True">
       <Types>
        <Type Name="AbsoluteArchitectures" Analyze="True">
         <Members>
          <Member Name=".cctor()" Analyze="True" />
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="_entityId" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__0(MathNet.Symbolics.Port):MathNet.Symbolics.Packages.ObjectModel.ProcessBase[]" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__1(MathNet.Symbolics.Packages.Standard.Structures.IntegerValue):MathNet.Symbolics.Packages.Standard.Structures.IntegerValue" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__2(MathNet.Symbolics.Port):MathNet.Symbolics.Packages.ObjectModel.ProcessBase[]" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__3(MathNet.Symbolics.Packages.Standard.Structures.RationalValue):MathNet.Symbolics.Packages.Standard.Structures.RationalValue" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__4(MathNet.Symbolics.Port):MathNet.Symbolics.Packages.ObjectModel.ProcessBase[]" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__5(MathNet.Symbolics.Packages.Standard.Structures.RealValue):MathNet.Symbolics.Packages.Standard.Structures.RealValue" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__6(MathNet.Symbolics.Port):MathNet.Symbolics.Packages.ObjectModel.ProcessBase[]" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate7" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate8" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate9" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegatea" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegateb" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegatec" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegated" Analyze="True" />
          <Member Name="EntityIdentifier" Analyze="True">
           <Accessors>
            <Accessor Name="get_EntityIdentifier():MathNet.Symbolics.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="RegisterTheorems(MathNet.Symbolics.Library.ILibrary):System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="AdditionArchitectures" Analyze="True">
         <Members>
          <Member Name=".cctor()" Analyze="True" />
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="_entityId" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate1" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate5" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate6" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate7" Analyze="True" />
          <Member Name="&lt;InstantiateToPort&gt;b__0():MathNet.Symbolics.IValueStructure" Analyze="True" />
          <Member Name="&lt;RegisterTheorems&gt;b__2(MathNet.Symbolics.Port,MathNet.Symbolics.Backend.Containers.SignalSet,MathNet.Symbolics.Signal,System.Boolean):System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Signal&gt;" Analyze="True" />
          <Member Name="&lt;RegisterTheorems&gt;b__3(MathNet.Symbolics.Port):MathNet.Symbolics.Manipulation.ManipulationPlan" Analyze="True" />
          <Member Name="&lt;RegisterTheorems&gt;b__4(MathNet.Symbolics.Port,MathNet.Symbolics.Backend.Containers.SignalSet,System.Boolean):System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Signal&gt;" Analyze="True" />
          <Member Name="EntityId" Analyze="True">
           <Accessors>
            <Accessor Name="get_EntityId():MathNet.Symbolics.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="EntityIdentifier" Analyze="True">
           <Accessors>
            <Accessor Name="get_EntityIdentifier():MathNet.Symbolics.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="InstantiateToPort(MathNet.Symbolics.Port):MathNet.Symbolics.IArchitecture" Analyze="True" />
          <Member Name="IsVector(MathNet.Symbolics.Port):System.Boolean" Analyze="True" />
          <Member Name="RegisterTheorems(MathNet.Symbolics.Library.ILibrary):System.Void" Analyze="True" />
          <Member Name="SimplifySummands(MathNet.Symbolics.Backend.Containers.ISignalSet):System.Boolean" Analyze="True" />
          <Member Name="SupportsPort(MathNet.Symbolics.Port):System.Boolean" Analyze="True" />
         </Members>
        </Type>
        <Type Name="DivisionArchitectures" Analyze="True">
         <Members>
          <Member Name=".cctor()" Analyze="True" />
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="_entityId" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__0(MathNet.Symbolics.Port):MathNet.Symbolics.Packages.ObjectModel.ProcessBase[]" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__1(MathNet.Symbolics.Port):MathNet.Symbolics.Packages.ObjectModel.ProcessBase[]" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__2(MathNet.Symbolics.Port):MathNet.Symbolics.Packages.ObjectModel.ProcessBase[]" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__3(MathNet.Symbolics.Port):MathNet.Symbolics.Packages.ObjectModel.ProcessBase[]" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__4():MathNet.Symbolics.IValueStructure" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate5" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate6" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate7" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate8" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate9" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegated" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegatee" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegatef" Analyze="True" />
          <Member Name="&lt;RegisterTheorems&gt;b__a(MathNet.Symbolics.Port,MathNet.Symbolics.Backend.Containers.SignalSet,MathNet.Symbolics.Signal,System.Boolean):System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Signal&gt;" Analyze="True" />
          <Member Name="&lt;RegisterTheorems&gt;b__b(MathNet.Symbolics.Port):MathNet.Symbolics.Manipulation.ManipulationPlan" Analyze="True" />
          <Member Name="&lt;RegisterTheorems&gt;b__c(MathNet.Symbolics.Port,MathNet.Symbolics.Backend.Containers.SignalSet,System.Boolean):System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Signal&gt;" Analyze="True" />
          <Member Name="EntityIdentifier" Analyze="True">
           <Accessors>
            <Accessor Name="get_EntityIdentifier():MathNet.Symbolics.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="RegisterTheorems(MathNet.Symbolics.Library.ILibrary):System.Void" Analyze="True" />
          <Member Name="SimplifyFactors(MathNet.Symbolics.Backend.Containers.ISignalSet):System.Boolean" Analyze="True" />
         </Members>
        </Type>
        <Type Name="ExponentialArchitectures" Analyze="True">
         <Members>
          <Member Name=".cctor()" Analyze="True" />
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="_entityId" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__0(MathNet.Symbolics.Port):MathNet.Symbolics.Packages.ObjectModel.ProcessBase[]" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__1(MathNet.Symbolics.Packages.Standard.Structures.RealValue):MathNet.Symbolics.Packages.Standard.Structures.RealValue" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__2(MathNet.Symbolics.Port):MathNet.Symbolics.Packages.ObjectModel.ProcessBase[]" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate3" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate4" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate5" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate7" Analyze="True" />
          <Member Name="&lt;RegisterTheorems&gt;b__6(MathNet.Symbolics.Port,MathNet.Symbolics.Backend.Containers.SignalSet,MathNet.Symbolics.Signal,System.Boolean):System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Signal&gt;" Analyze="True" />
          <Member Name="EntityIdentifier" Analyze="True">
           <Accessors>
            <Accessor Name="get_EntityIdentifier():MathNet.Symbolics.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="RegisterTheorems(MathNet.Symbolics.Library.ILibrary):System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="InvertArchitectures" Analyze="True">
         <Members>
          <Member Name=".cctor()" Analyze="True" />
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="_entityId" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__0(MathNet.Symbolics.Port):MathNet.Symbolics.Packages.ObjectModel.ProcessBase[]" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__1(MathNet.Symbolics.Packages.Standard.Structures.IntegerValue):MathNet.Symbolics.Packages.Standard.Structures.RationalValue" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__2(MathNet.Symbolics.Port):MathNet.Symbolics.Packages.ObjectModel.ProcessBase[]" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__3(MathNet.Symbolics.Packages.Standard.Structures.RationalValue):MathNet.Symbolics.Packages.Standard.Structures.RationalValue" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__4(MathNet.Symbolics.Port):MathNet.Symbolics.Packages.ObjectModel.ProcessBase[]" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__5(MathNet.Symbolics.Packages.Standard.Structures.RealValue):MathNet.Symbolics.Packages.Standard.Structures.RealValue" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__6(MathNet.Symbolics.Port):MathNet.Symbolics.Packages.ObjectModel.ProcessBase[]" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate7" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate8" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate9" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegatea" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegateb" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegatec" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegated" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegatef" Analyze="True" />
          <Member Name="&lt;RegisterTheorems&gt;b__e(MathNet.Symbolics.Port,MathNet.Symbolics.Backend.Containers.SignalSet,MathNet.Symbolics.Signal,System.Boolean):System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Signal&gt;" Analyze="True" />
          <Member Name="EntityIdentifier" Analyze="True">
           <Accessors>
            <Accessor Name="get_EntityIdentifier():MathNet.Symbolics.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="RegisterTheorems(MathNet.Symbolics.Library.ILibrary):System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="MultiplicationArchitectures" Analyze="True">
         <Members>
          <Member Name=".cctor()" Analyze="True" />
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="_entityId" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__0(MathNet.Symbolics.Port):MathNet.Symbolics.Packages.ObjectModel.ProcessBase[]" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__1(MathNet.Symbolics.Port):MathNet.Symbolics.Packages.ObjectModel.ProcessBase[]" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__2(MathNet.Symbolics.Port):MathNet.Symbolics.Packages.ObjectModel.ProcessBase[]" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__3(MathNet.Symbolics.Port):MathNet.Symbolics.Packages.ObjectModel.ProcessBase[]" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__4():MathNet.Symbolics.IValueStructure" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate5" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate6" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate7" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate8" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate9" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegated" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegatee" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegatef" Analyze="True" />
          <Member Name="&lt;RegisterTheorems&gt;b__a(MathNet.Symbolics.Port,MathNet.Symbolics.Backend.Containers.SignalSet,MathNet.Symbolics.Signal,System.Boolean):System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Signal&gt;" Analyze="True" />
          <Member Name="&lt;RegisterTheorems&gt;b__b(MathNet.Symbolics.Port):MathNet.Symbolics.Manipulation.ManipulationPlan" Analyze="True" />
          <Member Name="&lt;RegisterTheorems&gt;b__c(MathNet.Symbolics.Port,MathNet.Symbolics.Backend.Containers.SignalSet,System.Boolean):System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Signal&gt;" Analyze="True" />
          <Member Name="EntityIdentifier" Analyze="True">
           <Accessors>
            <Accessor Name="get_EntityIdentifier():MathNet.Symbolics.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="RegisterTheorems(MathNet.Symbolics.Library.ILibrary):System.Void" Analyze="True" />
          <Member Name="SimplifyFactors(MathNet.Symbolics.Backend.Containers.ISignalSet):System.Boolean" Analyze="True" />
         </Members>
        </Type>
        <Type Name="NaturalLogarithmArchitectures" Analyze="True">
         <Members>
          <Member Name=".cctor()" Analyze="True" />
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="_entityId" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__0(MathNet.Symbolics.Port):MathNet.Symbolics.Packages.ObjectModel.ProcessBase[]" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__1(MathNet.Symbolics.Packages.Standard.Structures.RealValue):MathNet.Symbolics.Packages.Standard.Structures.RealValue" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__2(MathNet.Symbolics.Port):MathNet.Symbolics.Packages.ObjectModel.ProcessBase[]" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate3" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate4" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate5" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate7" Analyze="True" />
          <Member Name="&lt;RegisterTheorems&gt;b__6(MathNet.Symbolics.Port,MathNet.Symbolics.Backend.Containers.SignalSet,MathNet.Symbolics.Signal,System.Boolean):System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Signal&gt;" Analyze="True" />
          <Member Name="EntityIdentifier" Analyze="True">
           <Accessors>
            <Accessor Name="get_EntityIdentifier():MathNet.Symbolics.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="RegisterTheorems(MathNet.Symbolics.Library.ILibrary):System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="NegateArchitectures" Analyze="True">
         <Members>
          <Member Name=".cctor()" Analyze="True" />
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="_entityId" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__0(MathNet.Symbolics.Port):MathNet.Symbolics.Packages.ObjectModel.ProcessBase[]" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__1(MathNet.Symbolics.Packages.Standard.Structures.IntegerValue):MathNet.Symbolics.Packages.Standard.Structures.IntegerValue" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__2(MathNet.Symbolics.Port):MathNet.Symbolics.Packages.ObjectModel.ProcessBase[]" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__3(MathNet.Symbolics.Packages.Standard.Structures.RationalValue):MathNet.Symbolics.Packages.Standard.Structures.RationalValue" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__4(MathNet.Symbolics.Port):MathNet.Symbolics.Packages.ObjectModel.ProcessBase[]" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__5(MathNet.Symbolics.Packages.Standard.Structures.RealValue):MathNet.Symbolics.Packages.Standard.Structures.RealValue" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__6(MathNet.Symbolics.Port):MathNet.Symbolics.Packages.ObjectModel.ProcessBase[]" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate7" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate8" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate9" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegatea" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegateb" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegatec" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegated" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegatef" Analyze="True" />
          <Member Name="&lt;RegisterTheorems&gt;b__e(MathNet.Symbolics.Port,MathNet.Symbolics.Backend.Containers.SignalSet,MathNet.Symbolics.Signal,System.Boolean):System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Signal&gt;" Analyze="True" />
          <Member Name="EntityIdentifier" Analyze="True">
           <Accessors>
            <Accessor Name="get_EntityIdentifier():MathNet.Symbolics.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="RegisterTheorems(MathNet.Symbolics.Library.ILibrary):System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="PowerArchitectures" Analyze="True">
         <Members>
          <Member Name=".cctor()" Analyze="True" />
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="_entityId" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__0(MathNet.Symbolics.Port):MathNet.Symbolics.Packages.ObjectModel.ProcessBase[]" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__1():MathNet.Symbolics.IValueStructure" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__2(MathNet.Symbolics.Packages.Standard.Structures.IntegerValue,MathNet.Symbolics.Packages.Standard.Structures.IntegerValue):MathNet.Symbolics.Packages.Standard.Structures.IntegerValue" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__3(MathNet.Symbolics.Port):System.Boolean" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__4(MathNet.Symbolics.Port):MathNet.Symbolics.Packages.ObjectModel.ProcessBase[]" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__5():MathNet.Symbolics.IValueStructure" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__6(MathNet.Symbolics.Packages.Standard.Structures.RationalValue,MathNet.Symbolics.Packages.Standard.Structures.RationalValue):MathNet.Symbolics.Packages.Standard.Structures.RationalValue" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__7(MathNet.Symbolics.Port):MathNet.Symbolics.Packages.ObjectModel.ProcessBase[]" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__8():MathNet.Symbolics.IValueStructure" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__9(MathNet.Symbolics.Packages.Standard.Structures.RealValue,MathNet.Symbolics.Packages.Standard.Structures.RealValue):MathNet.Symbolics.Packages.Standard.Structures.RealValue" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__a(MathNet.Symbolics.Port):MathNet.Symbolics.Packages.ObjectModel.ProcessBase[]" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__b():MathNet.Symbolics.IValueStructure" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate10" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate11" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate12" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate13" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate14" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate15" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate16" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate17" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate1a" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate1b" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegatec" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegated" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegatee" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegatef" Analyze="True" />
          <Member Name="&lt;RegisterTheorems&gt;b__18(MathNet.Symbolics.Port):MathNet.Symbolics.Manipulation.ManipulationPlan" Analyze="True" />
          <Member Name="&lt;RegisterTheorems&gt;b__19(MathNet.Symbolics.Port,MathNet.Symbolics.Backend.Containers.SignalSet,System.Boolean):System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Signal&gt;" Analyze="True" />
          <Member Name="EntityIdentifier" Analyze="True">
           <Accessors>
            <Accessor Name="get_EntityIdentifier():MathNet.Symbolics.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="RegisterTheorems(MathNet.Symbolics.Library.ILibrary):System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="SelfBuildingExample" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name=".ctor(MathNet.Symbolics.Port)" Analyze="True" />
          <Member Name="InstantiateToPort(MathNet.Symbolics.Port):MathNet.Symbolics.IArchitecture" Analyze="True" />
          <Member Name="ReregisterArchitecture(MathNet.Symbolics.Port,MathNet.Symbolics.Port):System.Void" Analyze="True" />
          <Member Name="SupportsPort(MathNet.Symbolics.Port):System.Boolean" Analyze="True" />
          <Member Name="UnregisterArchitecture():System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="SquareArchitectures" Analyze="True">
         <Members>
          <Member Name=".cctor()" Analyze="True" />
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="_entityId" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__0(MathNet.Symbolics.Port):MathNet.Symbolics.Packages.ObjectModel.ProcessBase[]" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__1(MathNet.Symbolics.Packages.Standard.Structures.IntegerValue):MathNet.Symbolics.Packages.Standard.Structures.IntegerValue" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__2(MathNet.Symbolics.Port):MathNet.Symbolics.Packages.ObjectModel.ProcessBase[]" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__3(MathNet.Symbolics.Packages.Standard.Structures.RationalValue):MathNet.Symbolics.Packages.Standard.Structures.RationalValue" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__4(MathNet.Symbolics.Port):MathNet.Symbolics.Packages.ObjectModel.ProcessBase[]" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__5(MathNet.Symbolics.Packages.Standard.Structures.RealValue):MathNet.Symbolics.Packages.Standard.Structures.RealValue" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__6(MathNet.Symbolics.Port):MathNet.Symbolics.Packages.ObjectModel.ProcessBase[]" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate7" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate8" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate9" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegatea" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegateb" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegatec" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegated" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegatef" Analyze="True" />
          <Member Name="&lt;RegisterTheorems&gt;b__e(MathNet.Symbolics.Port,MathNet.Symbolics.Backend.Containers.SignalSet,MathNet.Symbolics.Signal,System.Boolean):System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Signal&gt;" Analyze="True" />
          <Member Name="EntityIdentifier" Analyze="True">
           <Accessors>
            <Accessor Name="get_EntityIdentifier():MathNet.Symbolics.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="RegisterTheorems(MathNet.Symbolics.Library.ILibrary):System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="SubtractionArchitectures" Analyze="True">
         <Members>
          <Member Name=".cctor()" Analyze="True" />
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="_entityId" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__0(MathNet.Symbolics.Port):MathNet.Symbolics.Packages.ObjectModel.ProcessBase[]" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__1(MathNet.Symbolics.Port):MathNet.Symbolics.Packages.ObjectModel.ProcessBase[]" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__2(MathNet.Symbolics.Port):MathNet.Symbolics.Packages.ObjectModel.ProcessBase[]" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__3(MathNet.Symbolics.Port):MathNet.Symbolics.Packages.ObjectModel.ProcessBase[]" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__4():MathNet.Symbolics.IValueStructure" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate5" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate6" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate7" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate8" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate9" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegated" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegatee" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegatef" Analyze="True" />
          <Member Name="&lt;RegisterTheorems&gt;b__a(MathNet.Symbolics.Port,MathNet.Symbolics.Backend.Containers.SignalSet,MathNet.Symbolics.Signal,System.Boolean):System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Signal&gt;" Analyze="True" />
          <Member Name="&lt;RegisterTheorems&gt;b__b(MathNet.Symbolics.Port):MathNet.Symbolics.Manipulation.ManipulationPlan" Analyze="True" />
          <Member Name="&lt;RegisterTheorems&gt;b__c(MathNet.Symbolics.Port,MathNet.Symbolics.Backend.Containers.SignalSet,System.Boolean):System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Signal&gt;" Analyze="True" />
          <Member Name="EntityIdentifier" Analyze="True">
           <Accessors>
            <Accessor Name="get_EntityIdentifier():MathNet.Symbolics.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="RegisterTheorems(MathNet.Symbolics.Library.ILibrary):System.Void" Analyze="True" />
          <Member Name="SimplifySummands(MathNet.Symbolics.Backend.Containers.ISignalSet):System.Boolean" Analyze="True" />
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="MathNet.Symbolics.Packages.Standard.Flow" Analyze="True">
       <Types>
        <Type Name="ClockArchitecture" Analyze="True">
         <Members>
          <Member Name=".cctor()" Analyze="True" />
          <Member Name=".ctor()" Analyze="True" />
          <Member Name=".ctor(MathNet.Symbolics.Port)" Analyze="True" />
          <Member Name="_entityId" Analyze="True" />
          <Member Name="Action(System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Signal&gt;,System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Signal&gt;,System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Signal&gt;,System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Bus&gt;):System.Void" Analyze="True" />
          <Member Name="EntityIdentifier" Analyze="True">
           <Accessors>
            <Accessor Name="get_EntityIdentifier():MathNet.Symbolics.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="InstantiateToPort(MathNet.Symbolics.Port):MathNet.Symbolics.IArchitecture" Analyze="True" />
          <Member Name="periods" Analyze="True" />
          <Member Name="PostDelayedClock(System.Int32,MathNet.Symbolics.Signal):System.Void" Analyze="True" />
          <Member Name="SenseSignals(System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Signal&gt;,System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Signal&gt;,System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Bus&gt;,System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Signal&gt;):System.Void" Analyze="True" />
          <Member Name="SupportsPort(MathNet.Symbolics.Port):System.Boolean" Analyze="True" />
          <Member Name="UpdatePeriods(System.Int32,MathNet.Symbolics.Signal):System.Boolean" Analyze="True" />
         </Members>
        </Type>
        <Type Name="SyncArchitecture" Analyze="True">
         <Members>
          <Member Name=".cctor()" Analyze="True" />
          <Member Name=".ctor()" Analyze="True" />
          <Member Name=".ctor(MathNet.Symbolics.Port)" Analyze="True" />
          <Member Name="_entityId" Analyze="True" />
          <Member Name="EntityIdentifier" Analyze="True">
           <Accessors>
            <Accessor Name="get_EntityIdentifier():MathNet.Symbolics.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="InstantiateToPort(MathNet.Symbolics.Port):MathNet.Symbolics.IArchitecture" Analyze="True" />
          <Member Name="ReregisterArchitecture(MathNet.Symbolics.Port,MathNet.Symbolics.Port):System.Void" Analyze="True" />
          <Member Name="SupportsPort(MathNet.Symbolics.Port):System.Boolean" Analyze="True" />
          <Member Name="SyncArchitecture_SignalValueChanged(System.Object,System.EventArgs):System.Void" Analyze="True" />
          <Member Name="UnregisterArchitecture():System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="SystemPipeline" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
         </Members>
        </Type>
        <Type Name="TransportArchitecture" Analyze="True">
         <Members>
          <Member Name=".cctor()" Analyze="True" />
          <Member Name=".ctor()" Analyze="True" />
          <Member Name=".ctor(MathNet.Symbolics.Port)" Analyze="True" />
          <Member Name="_entityId" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate3" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate4" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate5" Analyze="True" />
          <Member Name="&lt;RegisterTheorems&gt;b__0(MathNet.Symbolics.Port,MathNet.Symbolics.Backend.Containers.SignalSet,MathNet.Symbolics.Signal,System.Boolean):System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Signal&gt;" Analyze="True" />
          <Member Name="&lt;RegisterTheorems&gt;b__1(MathNet.Symbolics.Port):MathNet.Symbolics.Manipulation.ManipulationPlan" Analyze="True" />
          <Member Name="&lt;RegisterTheorems&gt;b__2(MathNet.Symbolics.Port,MathNet.Symbolics.Backend.Containers.SignalSet,System.Boolean):System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Signal&gt;" Analyze="True" />
          <Member Name="Action(System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Signal&gt;,System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Signal&gt;,System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Signal&gt;,System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Bus&gt;):System.Void" Analyze="True" />
          <Member Name="EntityIdentifier" Analyze="True">
           <Accessors>
            <Accessor Name="get_EntityIdentifier():MathNet.Symbolics.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="InstantiateToPort(MathNet.Symbolics.Port):MathNet.Symbolics.IArchitecture" Analyze="True" />
          <Member Name="RegisterTheorems(MathNet.Symbolics.Library.ILibrary):System.Void" Analyze="True" />
          <Member Name="SenseSignals(System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Signal&gt;,System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Signal&gt;,System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Bus&gt;,System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Signal&gt;):System.Void" Analyze="True" />
          <Member Name="SupportsPort(MathNet.Symbolics.Port):System.Boolean" Analyze="True" />
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="MathNet.Symbolics.Packages.Standard.Logic" Analyze="True">
       <Types>
        <Type Name="AndArchitectures" Analyze="True">
         <Members>
          <Member Name=".cctor()" Analyze="True" />
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="_entityId" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__0(MathNet.Symbolics.Port):MathNet.Symbolics.Packages.ObjectModel.ProcessBase[]" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate1" Analyze="True" />
          <Member Name="EntityIdentifier" Analyze="True">
           <Accessors>
            <Accessor Name="get_EntityIdentifier():MathNet.Symbolics.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="NandArchitectures" Analyze="True">
         <Members>
          <Member Name=".cctor()" Analyze="True" />
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="_entityId" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__0(MathNet.Symbolics.Port):MathNet.Symbolics.Packages.ObjectModel.ProcessBase[]" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate1" Analyze="True" />
          <Member Name="EntityIdentifier" Analyze="True">
           <Accessors>
            <Accessor Name="get_EntityIdentifier():MathNet.Symbolics.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="NorArchitectures" Analyze="True">
         <Members>
          <Member Name=".cctor()" Analyze="True" />
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="_entityId" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__0(MathNet.Symbolics.Port):MathNet.Symbolics.Packages.ObjectModel.ProcessBase[]" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate1" Analyze="True" />
          <Member Name="EntityIdentifier" Analyze="True">
           <Accessors>
            <Accessor Name="get_EntityIdentifier():MathNet.Symbolics.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="NotArchitectures" Analyze="True">
         <Members>
          <Member Name=".cctor()" Analyze="True" />
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="_entityId" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__0(MathNet.Symbolics.Port):MathNet.Symbolics.Packages.ObjectModel.ProcessBase[]" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate1" Analyze="True" />
          <Member Name="EntityIdentifier" Analyze="True">
           <Accessors>
            <Accessor Name="get_EntityIdentifier():MathNet.Symbolics.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="OrArchitectures" Analyze="True">
         <Members>
          <Member Name=".cctor()" Analyze="True" />
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="_entityId" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__0(MathNet.Symbolics.Port):MathNet.Symbolics.Packages.ObjectModel.ProcessBase[]" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate1" Analyze="True" />
          <Member Name="EntityIdentifier" Analyze="True">
           <Accessors>
            <Accessor Name="get_EntityIdentifier():MathNet.Symbolics.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="XnorArchitectures" Analyze="True">
         <Members>
          <Member Name=".cctor()" Analyze="True" />
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="_entityId" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__0(MathNet.Symbolics.Port):MathNet.Symbolics.Packages.ObjectModel.ProcessBase[]" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate1" Analyze="True" />
          <Member Name="EntityIdentifier" Analyze="True">
           <Accessors>
            <Accessor Name="get_EntityIdentifier():MathNet.Symbolics.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="XorArchitectures" Analyze="True">
         <Members>
          <Member Name=".cctor()" Analyze="True" />
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="_entityId" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__0(MathNet.Symbolics.Port):MathNet.Symbolics.Packages.ObjectModel.ProcessBase[]" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate1" Analyze="True" />
          <Member Name="EntityIdentifier" Analyze="True">
           <Accessors>
            <Accessor Name="get_EntityIdentifier():MathNet.Symbolics.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="MathNet.Symbolics.Packages.Standard.Properties" Analyze="True">
       <Types>
        <Type Name="ConstantSignalProperty" Analyze="True">
         <Members>
          <Member Name=".cctor()" Analyze="True" />
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="_customTypeId" Analyze="True" />
          <Member Name="_instance" Analyze="True" />
          <Member Name="Deserialize(System.Xml.XmlReader,System.Collections.Generic.IDictionary`2&lt;System.Guid,MathNet.Symbolics.Signal&gt;,System.Collections.Generic.IDictionary`2&lt;System.Guid,MathNet.Symbolics.Bus&gt;):MathNet.Symbolics.Packages.Standard.Properties.ConstantSignalProperty" Analyze="True" />
          <Member Name="Equals(MathNet.Symbolics.IProperty):System.Boolean" Analyze="True" />
          <Member Name="Instance" Analyze="True">
           <Accessors>
            <Accessor Name="get_Instance():MathNet.Symbolics.Packages.Standard.Properties.ConstantSignalProperty" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="StillValidAfterDrive(MathNet.Symbolics.Signal):System.Boolean" Analyze="True" />
          <Member Name="StillValidAfterEvent(MathNet.Symbolics.Signal):System.Boolean" Analyze="True" />
          <Member Name="StillValidAfterUndrive(MathNet.Symbolics.Signal):System.Boolean" Analyze="True" />
          <Member Name="TypeId" Analyze="True">
           <Accessors>
            <Accessor Name="get_TypeId():MathNet.Symbolics.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="TypeIdentifier" Analyze="True">
           <Accessors>
            <Accessor Name="get_TypeIdentifier():MathNet.Symbolics.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="IntegerSetProperty" Analyze="True">
         <Members>
          <Member Name=".cctor()" Analyze="True" />
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="_customTypeId" Analyze="True" />
          <Member Name="_instance" Analyze="True" />
          <Member Name="Deserialize(System.Xml.XmlReader,System.Collections.Generic.IDictionary`2&lt;System.Guid,MathNet.Symbolics.Signal&gt;,System.Collections.Generic.IDictionary`2&lt;System.Guid,MathNet.Symbolics.Bus&gt;):MathNet.Symbolics.Packages.Standard.Properties.IntegerSetProperty" Analyze="True" />
          <Member Name="Equals(MathNet.Symbolics.IProperty):System.Boolean" Analyze="True" />
          <Member Name="Instance" Analyze="True">
           <Accessors>
            <Accessor Name="get_Instance():MathNet.Symbolics.Packages.Standard.Properties.IntegerSetProperty" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="StillValidAfterDrive(MathNet.Symbolics.Signal):System.Boolean" Analyze="True" />
          <Member Name="StillValidAfterEvent(MathNet.Symbolics.Signal):System.Boolean" Analyze="True" />
          <Member Name="StillValidAfterUndrive(MathNet.Symbolics.Signal):System.Boolean" Analyze="True" />
          <Member Name="TypeId" Analyze="True">
           <Accessors>
            <Accessor Name="get_TypeId():MathNet.Symbolics.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="TypeIdentifier" Analyze="True">
           <Accessors>
            <Accessor Name="get_TypeIdentifier():MathNet.Symbolics.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="PositiveIntegerSetProperty" Analyze="True">
         <Members>
          <Member Name=".cctor()" Analyze="True" />
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="_customTypeId" Analyze="True" />
          <Member Name="_instance" Analyze="True" />
          <Member Name="Deserialize(System.Xml.XmlReader,System.Collections.Generic.IDictionary`2&lt;System.Guid,MathNet.Symbolics.Signal&gt;,System.Collections.Generic.IDictionary`2&lt;System.Guid,MathNet.Symbolics.Bus&gt;):MathNet.Symbolics.Packages.Standard.Properties.PositiveIntegerSetProperty" Analyze="True" />
          <Member Name="Equals(MathNet.Symbolics.IProperty):System.Boolean" Analyze="True" />
          <Member Name="Instance" Analyze="True">
           <Accessors>
            <Accessor Name="get_Instance():MathNet.Symbolics.Packages.Standard.Properties.PositiveIntegerSetProperty" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="StillValidAfterDrive(MathNet.Symbolics.Signal):System.Boolean" Analyze="True" />
          <Member Name="StillValidAfterEvent(MathNet.Symbolics.Signal):System.Boolean" Analyze="True" />
          <Member Name="StillValidAfterUndrive(MathNet.Symbolics.Signal):System.Boolean" Analyze="True" />
          <Member Name="TypeId" Analyze="True">
           <Accessors>
            <Accessor Name="get_TypeId():MathNet.Symbolics.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="TypeIdentifier" Analyze="True">
           <Accessors>
            <Accessor Name="get_TypeIdentifier():MathNet.Symbolics.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="RationalSetProperty" Analyze="True">
         <Members>
          <Member Name=".cctor()" Analyze="True" />
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="_customTypeId" Analyze="True" />
          <Member Name="_instance" Analyze="True" />
          <Member Name="Deserialize(System.Xml.XmlReader,System.Collections.Generic.IDictionary`2&lt;System.Guid,MathNet.Symbolics.Signal&gt;,System.Collections.Generic.IDictionary`2&lt;System.Guid,MathNet.Symbolics.Bus&gt;):MathNet.Symbolics.Packages.Standard.Properties.RationalSetProperty" Analyze="True" />
          <Member Name="Equals(MathNet.Symbolics.IProperty):System.Boolean" Analyze="True" />
          <Member Name="Instance" Analyze="True">
           <Accessors>
            <Accessor Name="get_Instance():MathNet.Symbolics.Packages.Standard.Properties.RationalSetProperty" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="StillValidAfterDrive(MathNet.Symbolics.Signal):System.Boolean" Analyze="True" />
          <Member Name="StillValidAfterEvent(MathNet.Symbolics.Signal):System.Boolean" Analyze="True" />
          <Member Name="StillValidAfterUndrive(MathNet.Symbolics.Signal):System.Boolean" Analyze="True" />
          <Member Name="TypeId" Analyze="True">
           <Accessors>
            <Accessor Name="get_TypeId():MathNet.Symbolics.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="TypeIdentifier" Analyze="True">
           <Accessors>
            <Accessor Name="get_TypeIdentifier():MathNet.Symbolics.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="RealSetProperty" Analyze="True">
         <Members>
          <Member Name=".cctor()" Analyze="True" />
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="_customTypeId" Analyze="True" />
          <Member Name="_instance" Analyze="True" />
          <Member Name="Deserialize(System.Xml.XmlReader,System.Collections.Generic.IDictionary`2&lt;System.Guid,MathNet.Symbolics.Signal&gt;,System.Collections.Generic.IDictionary`2&lt;System.Guid,MathNet.Symbolics.Bus&gt;):MathNet.Symbolics.Packages.Standard.Properties.RealSetProperty" Analyze="True" />
          <Member Name="Equals(MathNet.Symbolics.IProperty):System.Boolean" Analyze="True" />
          <Member Name="Instance" Analyze="True">
           <Accessors>
            <Accessor Name="get_Instance():MathNet.Symbolics.Packages.Standard.Properties.RealSetProperty" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="StillValidAfterDrive(MathNet.Symbolics.Signal):System.Boolean" Analyze="True" />
          <Member Name="StillValidAfterEvent(MathNet.Symbolics.Signal):System.Boolean" Analyze="True" />
          <Member Name="StillValidAfterUndrive(MathNet.Symbolics.Signal):System.Boolean" Analyze="True" />
          <Member Name="TypeId" Analyze="True">
           <Accessors>
            <Accessor Name="get_TypeId():MathNet.Symbolics.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="TypeIdentifier" Analyze="True">
           <Accessors>
            <Accessor Name="get_TypeIdentifier():MathNet.Symbolics.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="MathNet.Symbolics.Packages.Standard.Structures" Analyze="True">
       <Types>
        <Type Name="ComplexInfinitySymbol" Analyze="True">
         <Members>
          <Member Name=".cctor()" Analyze="True" />
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="_customTypeId" Analyze="True" />
          <Member Name="_instance" Analyze="True" />
          <Member Name="CanConvertLosslessFrom(MathNet.Symbolics.IValueStructure):System.Boolean" Analyze="True" />
          <Member Name="CompareTo(MathNet.Symbolics.Packages.Standard.Structures.ComplexInfinitySymbol):System.Int32" Analyze="True" />
          <Member Name="Constant" Analyze="True">
           <Accessors>
            <Accessor Name="get_Constant():MathNet.Symbolics.Signal" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ConvertFrom(MathNet.Symbolics.IValueStructure):MathNet.Symbolics.Packages.Standard.Structures.ComplexInfinitySymbol" Analyze="True" />
          <Member Name="ConvertFrom(MathNet.Symbolics.Packages.Standard.Structures.NegativeInfinitySymbol):MathNet.Symbolics.Packages.Standard.Structures.ComplexInfinitySymbol" Analyze="True" />
          <Member Name="ConvertFrom(MathNet.Symbolics.Packages.Standard.Structures.PositiveInfinitySymbol):MathNet.Symbolics.Packages.Standard.Structures.ComplexInfinitySymbol" Analyze="True" />
          <Member Name="Deserialize(System.Xml.XmlReader,System.Collections.Generic.IDictionary`2&lt;System.Guid,MathNet.Symbolics.Signal&gt;,System.Collections.Generic.IDictionary`2&lt;System.Guid,MathNet.Symbolics.Bus&gt;):MathNet.Symbolics.Packages.Standard.Structures.ComplexInfinitySymbol" Analyze="True" />
          <Member Name="Equals(MathNet.Symbolics.IValueStructure):System.Boolean" Analyze="True" />
          <Member Name="Equals(MathNet.Symbolics.Packages.Standard.Structures.ComplexInfinitySymbol):System.Boolean" Analyze="True" />
          <Member Name="Instance" Analyze="True">
           <Accessors>
            <Accessor Name="get_Instance():MathNet.Symbolics.Packages.Standard.Structures.ComplexInfinitySymbol" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="op_Explicit(MathNet.Symbolics.Packages.Standard.Structures.NegativeInfinitySymbol):MathNet.Symbolics.Packages.Standard.Structures.ComplexInfinitySymbol" Analyze="True" />
          <Member Name="op_Explicit(MathNet.Symbolics.Packages.Standard.Structures.PositiveInfinitySymbol):MathNet.Symbolics.Packages.Standard.Structures.ComplexInfinitySymbol" Analyze="True" />
          <Member Name="Register(MathNet.Symbolics.Library.ILibrary):System.Void" Analyze="True" />
          <Member Name="TypeId" Analyze="True">
           <Accessors>
            <Accessor Name="get_TypeId():MathNet.Symbolics.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="TypeIdentifier" Analyze="True">
           <Accessors>
            <Accessor Name="get_TypeIdentifier():MathNet.Symbolics.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="ComplexValue" Analyze="True">
         <Members>
          <Member Name=".cctor()" Analyze="True" />
          <Member Name=".ctor()" Analyze="True" />
          <Member Name=".ctor(MathNet.Numerics.Complex)" Analyze="True" />
          <Member Name=".ctor(MathNet.Symbolics.Packages.Standard.Structures.IntegerValue)" Analyze="True" />
          <Member Name=".ctor(MathNet.Symbolics.Packages.Standard.Structures.RationalValue)" Analyze="True" />
          <Member Name=".ctor(MathNet.Symbolics.Packages.Standard.Structures.RealValue)" Analyze="True" />
          <Member Name=".ctor(MathNet.Symbolics.Packages.Standard.Structures.RealValue,MathNet.Symbolics.Packages.Standard.Structures.RealValue)" Analyze="True" />
          <Member Name=".ctor(System.Double)" Analyze="True" />
          <Member Name=".ctor(System.Double,System.Double)" Analyze="True" />
          <Member Name="_customTypeId" Analyze="True" />
          <Member Name="_dataValue" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate1" Analyze="True" />
          <Member Name="&lt;Register&gt;b__0(MathNet.Symbolics.ICustomData):MathNet.Symbolics.ICustomData" Analyze="True" />
          <Member Name="Absolute():MathNet.Symbolics.Packages.Standard.Structures.RealValue" Analyze="True" />
          <Member Name="Absolute(MathNet.Symbolics.Packages.Standard.Structures.ComplexValue):MathNet.Symbolics.Packages.Standard.Structures.RealValue" Analyze="True" />
          <Member Name="Add(MathNet.Symbolics.Packages.Standard.Structures.ComplexValue):MathNet.Symbolics.Packages.Standard.Structures.ComplexValue" Analyze="True" />
          <Member Name="Add(MathNet.Symbolics.Packages.Standard.Structures.ComplexValue,MathNet.Symbolics.Packages.Standard.Structures.ComplexValue):MathNet.Symbolics.Packages.Standard.Structures.ComplexValue" Analyze="True" />
          <Member Name="AdditiveIdentity" Analyze="True">
           <Accessors>
            <Accessor Name="get_AdditiveIdentity():MathNet.Symbolics.Packages.Standard.Structures.ComplexValue" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Argument" Analyze="True">
           <Accessors>
            <Accessor Name="get_Argument():System.Double" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="CanConvertLosslessFrom(MathNet.Symbolics.IValueStructure):System.Boolean" Analyze="True" />
          <Member Name="CompareTo(MathNet.Symbolics.Packages.Standard.Structures.ComplexValue):System.Int32" Analyze="True" />
          <Member Name="Conjugate():MathNet.Symbolics.Packages.Standard.Structures.ComplexValue" Analyze="True" />
          <Member Name="Conjugate(MathNet.Symbolics.Packages.Standard.Structures.ComplexValue):MathNet.Symbolics.Packages.Standard.Structures.ComplexValue" Analyze="True" />
          <Member Name="Constant(MathNet.Numerics.Complex):MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="Constant(MathNet.Numerics.Complex,System.String):MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="ConvertFrom(MathNet.Symbolics.IValueStructure):MathNet.Symbolics.Packages.Standard.Structures.ComplexValue" Analyze="True" />
          <Member Name="ConvertFrom(MathNet.Symbolics.Packages.Standard.Structures.IntegerValue):MathNet.Symbolics.Packages.Standard.Structures.ComplexValue" Analyze="True" />
          <Member Name="ConvertFrom(MathNet.Symbolics.Packages.Standard.Structures.RationalValue):MathNet.Symbolics.Packages.Standard.Structures.ComplexValue" Analyze="True" />
          <Member Name="ConvertFrom(MathNet.Symbolics.Packages.Standard.Structures.RealValue):MathNet.Symbolics.Packages.Standard.Structures.ComplexValue" Analyze="True" />
          <Member Name="Cosecant():MathNet.Symbolics.Packages.Standard.Structures.ComplexValue" Analyze="True" />
          <Member Name="Cosine():MathNet.Symbolics.Packages.Standard.Structures.ComplexValue" Analyze="True" />
          <Member Name="Cotangent():MathNet.Symbolics.Packages.Standard.Structures.ComplexValue" Analyze="True" />
          <Member Name="Deserialize(System.Xml.XmlReader,System.Collections.Generic.IDictionary`2&lt;System.Guid,MathNet.Symbolics.Signal&gt;,System.Collections.Generic.IDictionary`2&lt;System.Guid,MathNet.Symbolics.Bus&gt;):MathNet.Symbolics.Packages.Standard.Structures.ComplexValue" Analyze="True" />
          <Member Name="Divide(MathNet.Symbolics.Packages.Standard.Structures.ComplexValue):MathNet.Symbolics.Packages.Standard.Structures.ComplexValue" Analyze="True" />
          <Member Name="Divide(MathNet.Symbolics.Packages.Standard.Structures.ComplexValue,MathNet.Symbolics.Packages.Standard.Structures.ComplexValue):MathNet.Symbolics.Packages.Standard.Structures.ComplexValue" Analyze="True" />
          <Member Name="Equals(MathNet.Symbolics.IValueStructure):System.Boolean" Analyze="True" />
          <Member Name="Equals(MathNet.Symbolics.Packages.Standard.Structures.ComplexValue):System.Boolean" Analyze="True" />
          <Member Name="Equals(MathNet.Symbolics.Packages.Standard.Structures.IntegerValue):System.Boolean" Analyze="True" />
          <Member Name="Equals(MathNet.Symbolics.Packages.Standard.Structures.RationalValue):System.Boolean" Analyze="True" />
          <Member Name="Equals(MathNet.Symbolics.Packages.Standard.Structures.RealValue):System.Boolean" Analyze="True" />
          <Member Name="Exponential():MathNet.Symbolics.Packages.Standard.Structures.ComplexValue" Analyze="True" />
          <Member Name="Exponential(MathNet.Symbolics.Packages.Standard.Structures.ComplexValue):MathNet.Symbolics.Packages.Standard.Structures.ComplexValue" Analyze="True" />
          <Member Name="GetHashCode():System.Int32" Analyze="True" />
          <Member Name="HyperbolicCosecant():MathNet.Symbolics.Packages.Standard.Structures.ComplexValue" Analyze="True" />
          <Member Name="HyperbolicCosine():MathNet.Symbolics.Packages.Standard.Structures.ComplexValue" Analyze="True" />
          <Member Name="HyperbolicCotangent():MathNet.Symbolics.Packages.Standard.Structures.ComplexValue" Analyze="True" />
          <Member Name="HyperbolicSecant():MathNet.Symbolics.Packages.Standard.Structures.ComplexValue" Analyze="True" />
          <Member Name="HyperbolicSine():MathNet.Symbolics.Packages.Standard.Structures.ComplexValue" Analyze="True" />
          <Member Name="HyperbolicTangent():MathNet.Symbolics.Packages.Standard.Structures.ComplexValue" Analyze="True" />
          <Member Name="I" Analyze="True">
           <Accessors>
            <Accessor Name="get_I():MathNet.Symbolics.Packages.Standard.Structures.ComplexValue" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ImaginaryValue" Analyze="True">
           <Accessors>
            <Accessor Name="get_ImaginaryValue():System.Double" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="InverseCosecant():MathNet.Symbolics.Packages.Standard.Structures.ComplexValue" Analyze="True" />
          <Member Name="InverseCosine():MathNet.Symbolics.Packages.Standard.Structures.ComplexValue" Analyze="True" />
          <Member Name="InverseCotangent():MathNet.Symbolics.Packages.Standard.Structures.ComplexValue" Analyze="True" />
          <Member Name="InverseHyperbolicCosecant():MathNet.Symbolics.Packages.Standard.Structures.ComplexValue" Analyze="True" />
          <Member Name="InverseHyperbolicCosine():MathNet.Symbolics.Packages.Standard.Structures.ComplexValue" Analyze="True" />
          <Member Name="InverseHyperbolicCotangent():MathNet.Symbolics.Packages.Standard.Structures.ComplexValue" Analyze="True" />
          <Member Name="InverseHyperbolicSecant():MathNet.Symbolics.Packages.Standard.Structures.ComplexValue" Analyze="True" />
          <Member Name="InverseHyperbolicSine():MathNet.Symbolics.Packages.Standard.Structures.ComplexValue" Analyze="True" />
          <Member Name="InverseHyperbolicTangent():MathNet.Symbolics.Packages.Standard.Structures.ComplexValue" Analyze="True" />
          <Member Name="InverseSecant():MathNet.Symbolics.Packages.Standard.Structures.ComplexValue" Analyze="True" />
          <Member Name="InverseSine():MathNet.Symbolics.Packages.Standard.Structures.ComplexValue" Analyze="True" />
          <Member Name="InverseTangent():MathNet.Symbolics.Packages.Standard.Structures.ComplexValue" Analyze="True" />
          <Member Name="Invert():MathNet.Symbolics.Packages.Standard.Structures.ComplexValue" Analyze="True" />
          <Member Name="Invert(MathNet.Symbolics.Packages.Standard.Structures.ComplexValue):MathNet.Symbolics.Packages.Standard.Structures.ComplexValue" Analyze="True" />
          <Member Name="IsAdditiveIdentity" Analyze="True">
           <Accessors>
            <Accessor Name="get_IsAdditiveIdentity():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="IsMultiplicativeIdentity" Analyze="True">
           <Accessors>
            <Accessor Name="get_IsMultiplicativeIdentity():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="IsReal" Analyze="True">
           <Accessors>
            <Accessor Name="get_IsReal():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="IsZero" Analyze="True">
           <Accessors>
            <Accessor Name="get_IsZero():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="MathNet.Symbolics.Packages.Standard.IAlgebraicMonoid.AdditiveIdentity" Analyze="True">
           <Accessors>
            <Accessor Name="MathNet.Symbolics.Packages.Standard.IAlgebraicMonoid.get_AdditiveIdentity():MathNet.Symbolics.IValueStructure" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="MathNet.Symbolics.Packages.Standard.IAlgebraicRingWithUnity.MultiplicativeIdentity" Analyze="True">
           <Accessors>
            <Accessor Name="MathNet.Symbolics.Packages.Standard.IAlgebraicRingWithUnity.get_MultiplicativeIdentity():MathNet.Symbolics.IValueStructure" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Modulus" Analyze="True">
           <Accessors>
            <Accessor Name="get_Modulus():System.Double" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ModulusSquared" Analyze="True">
           <Accessors>
            <Accessor Name="get_ModulusSquared():System.Double" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="MultiplicativeIdentity" Analyze="True">
           <Accessors>
            <Accessor Name="get_MultiplicativeIdentity():MathNet.Symbolics.Packages.Standard.Structures.ComplexValue" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Multiply(MathNet.Symbolics.Packages.Standard.Structures.ComplexValue):MathNet.Symbolics.Packages.Standard.Structures.ComplexValue" Analyze="True" />
          <Member Name="Multiply(MathNet.Symbolics.Packages.Standard.Structures.ComplexValue,MathNet.Symbolics.Packages.Standard.Structures.ComplexValue):MathNet.Symbolics.Packages.Standard.Structures.ComplexValue" Analyze="True" />
          <Member Name="NaturalLogarithm():MathNet.Symbolics.Packages.Standard.Structures.ComplexValue" Analyze="True" />
          <Member Name="NaturalLogarithm(MathNet.Symbolics.Packages.Standard.Structures.ComplexValue):MathNet.Symbolics.Packages.Standard.Structures.ComplexValue" Analyze="True" />
          <Member Name="Negate():MathNet.Symbolics.Packages.Standard.Structures.ComplexValue" Analyze="True" />
          <Member Name="Negate(MathNet.Symbolics.Packages.Standard.Structures.ComplexValue):MathNet.Symbolics.Packages.Standard.Structures.ComplexValue" Analyze="True" />
          <Member Name="One" Analyze="True">
           <Accessors>
            <Accessor Name="get_One():MathNet.Symbolics.Packages.Standard.Structures.ComplexValue" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="op_Explicit(MathNet.Symbolics.Packages.Standard.Structures.IntegerValue):MathNet.Symbolics.Packages.Standard.Structures.ComplexValue" Analyze="True" />
          <Member Name="op_Explicit(MathNet.Symbolics.Packages.Standard.Structures.RationalValue):MathNet.Symbolics.Packages.Standard.Structures.ComplexValue" Analyze="True" />
          <Member Name="op_Explicit(MathNet.Symbolics.Packages.Standard.Structures.RealValue):MathNet.Symbolics.Packages.Standard.Structures.ComplexValue" Analyze="True" />
          <Member Name="Power(MathNet.Symbolics.Packages.Standard.Structures.ComplexValue):MathNet.Symbolics.Packages.Standard.Structures.ComplexValue" Analyze="True" />
          <Member Name="Power(MathNet.Symbolics.Packages.Standard.Structures.ComplexValue,MathNet.Symbolics.Packages.Standard.Structures.ComplexValue):MathNet.Symbolics.Packages.Standard.Structures.ComplexValue" Analyze="True" />
          <Member Name="RealValue" Analyze="True">
           <Accessors>
            <Accessor Name="get_RealValue():System.Double" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Register(MathNet.Symbolics.Library.ILibrary):System.Void" Analyze="True" />
          <Member Name="Root(MathNet.Symbolics.Packages.Standard.Structures.ComplexValue):MathNet.Symbolics.Packages.Standard.Structures.ComplexValue" Analyze="True" />
          <Member Name="Root(MathNet.Symbolics.Packages.Standard.Structures.ComplexValue,MathNet.Symbolics.Packages.Standard.Structures.ComplexValue):MathNet.Symbolics.Packages.Standard.Structures.ComplexValue" Analyze="True" />
          <Member Name="Scale(MathNet.Symbolics.Packages.Standard.Structures.ComplexValue):MathNet.Symbolics.Packages.Standard.Structures.ComplexValue" Analyze="True" />
          <Member Name="Secant():MathNet.Symbolics.Packages.Standard.Structures.ComplexValue" Analyze="True" />
          <Member Name="Serialize(System.Xml.XmlWriter,System.Collections.Generic.IDictionary`2&lt;System.Guid,System.Guid&gt;,System.Collections.Generic.IDictionary`2&lt;System.Guid,System.Guid&gt;):System.Void" Analyze="True" />
          <Member Name="Sine():MathNet.Symbolics.Packages.Standard.Structures.ComplexValue" Analyze="True" />
          <Member Name="Square():MathNet.Symbolics.Packages.Standard.Structures.ComplexValue" Analyze="True" />
          <Member Name="Square(MathNet.Symbolics.Packages.Standard.Structures.ComplexValue):MathNet.Symbolics.Packages.Standard.Structures.ComplexValue" Analyze="True" />
          <Member Name="SquareRoot():MathNet.Symbolics.Packages.Standard.Structures.ComplexValue" Analyze="True" />
          <Member Name="SquareRoot(MathNet.Symbolics.Packages.Standard.Structures.ComplexValue):MathNet.Symbolics.Packages.Standard.Structures.ComplexValue" Analyze="True" />
          <Member Name="Subtract(MathNet.Symbolics.Packages.Standard.Structures.ComplexValue):MathNet.Symbolics.Packages.Standard.Structures.ComplexValue" Analyze="True" />
          <Member Name="Subtract(MathNet.Symbolics.Packages.Standard.Structures.ComplexValue,MathNet.Symbolics.Packages.Standard.Structures.ComplexValue):MathNet.Symbolics.Packages.Standard.Structures.ComplexValue" Analyze="True" />
          <Member Name="Tangent():MathNet.Symbolics.Packages.Standard.Structures.ComplexValue" Analyze="True" />
          <Member Name="ToString():System.String" Analyze="True" />
          <Member Name="TypeId" Analyze="True">
           <Accessors>
            <Accessor Name="get_TypeId():MathNet.Symbolics.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="TypeIdentifier" Analyze="True">
           <Accessors>
            <Accessor Name="get_TypeIdentifier():MathNet.Symbolics.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Value" Analyze="True">
           <Accessors>
            <Accessor Name="get_Value():MathNet.Numerics.Complex" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Zero" Analyze="True">
           <Accessors>
            <Accessor Name="get_Zero():MathNet.Symbolics.Packages.Standard.Structures.ComplexValue" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="ComplexValueCategory" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="_instance" Analyze="True" />
          <Member Name="Deserialize(System.Xml.XmlReader,System.Collections.Generic.IDictionary`2&lt;System.Guid,MathNet.Symbolics.Signal&gt;,System.Collections.Generic.IDictionary`2&lt;System.Guid,MathNet.Symbolics.Bus&gt;):MathNet.Symbolics.Packages.Standard.Structures.ComplexValueCategory" Analyze="True" />
          <Member Name="Instance" Analyze="True">
           <Accessors>
            <Accessor Name="get_Instance():MathNet.Symbolics.Packages.Standard.Structures.ComplexValueCategory" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="IsComplexValueMember(MathNet.Symbolics.Port):System.Boolean" Analyze="True" />
          <Member Name="IsMember(MathNet.Symbolics.Port):MathNet.Symbolics.CategoryMembershipLevel" Analyze="True" />
          <Member Name="IsMember(MathNet.Symbolics.Signal,System.Boolean):MathNet.Symbolics.CategoryMembershipLevel" Analyze="True" />
          <Member Name="IsNotRealValueMember(MathNet.Symbolics.Port):System.Boolean" Analyze="True" />
         </Members>
        </Type>
        <Type Name="ELogicIeee1164" Analyze="True">
         <Members>
          <Member Name="DoNotCare" Analyze="True" />
          <Member Name="ForcingOne" Analyze="True" />
          <Member Name="ForcingUnknown" Analyze="True" />
          <Member Name="ForcingZero" Analyze="True" />
          <Member Name="HighImpedance" Analyze="True" />
          <Member Name="Uninitialized" Analyze="True" />
          <Member Name="value__" Analyze="True" />
          <Member Name="WeakOne" Analyze="True" />
          <Member Name="WeakUnknown" Analyze="True" />
          <Member Name="WeakZero" Analyze="True" />
         </Members>
        </Type>
        <Type Name="ELogicX01" Analyze="True">
         <Members>
          <Member Name="False" Analyze="True" />
          <Member Name="True" Analyze="True" />
          <Member Name="Unknown" Analyze="True" />
          <Member Name="value__" Analyze="True" />
         </Members>
        </Type>
        <Type Name="IntegerValue" Analyze="True">
         <Members>
          <Member Name=".cctor()" Analyze="True" />
          <Member Name=".ctor()" Analyze="True" />
          <Member Name=".ctor(System.Int64)" Analyze="True" />
          <Member Name="_customTypeId" Analyze="True" />
          <Member Name="_dataValue" Analyze="True" />
          <Member Name="Absolute():MathNet.Symbolics.Packages.Standard.Structures.IntegerValue" Analyze="True" />
          <Member Name="Add(MathNet.Symbolics.Packages.Standard.Structures.IntegerValue):MathNet.Symbolics.Packages.Standard.Structures.IntegerValue" Analyze="True" />
          <Member Name="AdditiveIdentity" Analyze="True">
           <Accessors>
            <Accessor Name="get_AdditiveIdentity():MathNet.Symbolics.Packages.Standard.Structures.IntegerValue" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="CanConvertLosslessFrom(MathNet.Symbolics.IValueStructure):System.Boolean" Analyze="True" />
          <Member Name="CompareTo(MathNet.Symbolics.Packages.Standard.Structures.IntegerValue):System.Int32" Analyze="True" />
          <Member Name="Constant(System.Int64):MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="ConstantAdditiveIdentity" Analyze="True">
           <Accessors>
            <Accessor Name="get_ConstantAdditiveIdentity():MathNet.Symbolics.Signal" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ConstantMinusOne" Analyze="True">
           <Accessors>
            <Accessor Name="get_ConstantMinusOne():MathNet.Symbolics.Signal" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ConstantMultiplicativeIdentity" Analyze="True">
           <Accessors>
            <Accessor Name="get_ConstantMultiplicativeIdentity():MathNet.Symbolics.Signal" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ConstantOne" Analyze="True">
           <Accessors>
            <Accessor Name="get_ConstantOne():MathNet.Symbolics.Signal" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ConstantTwo" Analyze="True">
           <Accessors>
            <Accessor Name="get_ConstantTwo():MathNet.Symbolics.Signal" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ConstantZero" Analyze="True">
           <Accessors>
            <Accessor Name="get_ConstantZero():MathNet.Symbolics.Signal" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ConvertFrom(MathNet.Symbolics.IValueStructure):MathNet.Symbolics.Packages.Standard.Structures.IntegerValue" Analyze="True" />
          <Member Name="Deserialize(System.Xml.XmlReader,System.Collections.Generic.IDictionary`2&lt;System.Guid,MathNet.Symbolics.Signal&gt;,System.Collections.Generic.IDictionary`2&lt;System.Guid,MathNet.Symbolics.Bus&gt;):MathNet.Symbolics.Packages.Standard.Structures.IntegerValue" Analyze="True" />
          <Member Name="Divide(MathNet.Symbolics.Packages.Standard.Structures.IntegerValue):MathNet.Symbolics.Packages.Standard.Structures.RationalValue" Analyze="True" />
          <Member Name="Equals(MathNet.Symbolics.IValueStructure):System.Boolean" Analyze="True" />
          <Member Name="Equals(MathNet.Symbolics.Packages.Standard.Structures.IntegerValue):System.Boolean" Analyze="True" />
          <Member Name="GetHashCode():System.Int32" Analyze="True" />
          <Member Name="Invert():MathNet.Symbolics.Packages.Standard.Structures.RationalValue" Analyze="True" />
          <Member Name="IsAdditiveIdentity" Analyze="True">
           <Accessors>
            <Accessor Name="get_IsAdditiveIdentity():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="IsMultiplicativeIdentity" Analyze="True">
           <Accessors>
            <Accessor Name="get_IsMultiplicativeIdentity():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="MathNet.Symbolics.Packages.Standard.IAlgebraicMonoid.AdditiveIdentity" Analyze="True">
           <Accessors>
            <Accessor Name="MathNet.Symbolics.Packages.Standard.IAlgebraicMonoid.get_AdditiveIdentity():MathNet.Symbolics.IValueStructure" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="MathNet.Symbolics.Packages.Standard.IAlgebraicRingWithUnity.MultiplicativeIdentity" Analyze="True">
           <Accessors>
            <Accessor Name="MathNet.Symbolics.Packages.Standard.IAlgebraicRingWithUnity.get_MultiplicativeIdentity():MathNet.Symbolics.IValueStructure" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Max(MathNet.Symbolics.Packages.Standard.Structures.IntegerValue):MathNet.Symbolics.Packages.Standard.Structures.IntegerValue" Analyze="True" />
          <Member Name="Min(MathNet.Symbolics.Packages.Standard.Structures.IntegerValue):MathNet.Symbolics.Packages.Standard.Structures.IntegerValue" Analyze="True" />
          <Member Name="MultiplicativeIdentity" Analyze="True">
           <Accessors>
            <Accessor Name="get_MultiplicativeIdentity():MathNet.Symbolics.Packages.Standard.Structures.IntegerValue" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Multiply(MathNet.Symbolics.Packages.Standard.Structures.IntegerValue):MathNet.Symbolics.Packages.Standard.Structures.IntegerValue" Analyze="True" />
          <Member Name="Negate():MathNet.Symbolics.Packages.Standard.Structures.IntegerValue" Analyze="True" />
          <Member Name="One" Analyze="True">
           <Accessors>
            <Accessor Name="get_One():MathNet.Symbolics.Packages.Standard.Structures.IntegerValue" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="op_GreaterThan(MathNet.Symbolics.Packages.Standard.Structures.IntegerValue,MathNet.Symbolics.Packages.Standard.Structures.IntegerValue):System.Boolean" Analyze="True" />
          <Member Name="op_LessThan(MathNet.Symbolics.Packages.Standard.Structures.IntegerValue,MathNet.Symbolics.Packages.Standard.Structures.IntegerValue):System.Boolean" Analyze="True" />
          <Member Name="ParseConstant(System.String):MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="Power(MathNet.Symbolics.Packages.Standard.Structures.IntegerValue):MathNet.Symbolics.Packages.Standard.Structures.IntegerValue" Analyze="True" />
          <Member Name="Register(MathNet.Symbolics.Library.ILibrary):System.Void" Analyze="True" />
          <Member Name="Serialize(System.Xml.XmlWriter,System.Collections.Generic.IDictionary`2&lt;System.Guid,System.Guid&gt;,System.Collections.Generic.IDictionary`2&lt;System.Guid,System.Guid&gt;):System.Void" Analyze="True" />
          <Member Name="Subtract(MathNet.Symbolics.Packages.Standard.Structures.IntegerValue):MathNet.Symbolics.Packages.Standard.Structures.IntegerValue" Analyze="True" />
          <Member Name="ToDouble():System.Double" Analyze="True" />
          <Member Name="ToString():System.String" Analyze="True" />
          <Member Name="TypeId" Analyze="True">
           <Accessors>
            <Accessor Name="get_TypeId():MathNet.Symbolics.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="TypeIdentifier" Analyze="True">
           <Accessors>
            <Accessor Name="get_TypeIdentifier():MathNet.Symbolics.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Value" Analyze="True">
           <Accessors>
            <Accessor Name="get_Value():System.Int64" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Zero" Analyze="True">
           <Accessors>
            <Accessor Name="get_Zero():MathNet.Symbolics.Packages.Standard.Structures.IntegerValue" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="IntegerValue+AddProcess" Analyze="True">
         <Members>
          <Member Name=".ctor(System.Boolean[],System.Boolean[],System.Boolean[],System.Boolean[])" Analyze="True" />
          <Member Name=".ctor(System.Int32,System.Int32,System.Int32)" Analyze="True" />
          <Member Name="Action(System.Boolean,MathNet.Symbolics.Signal):System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="IntegerValue+DivideProcess" Analyze="True">
         <Members>
          <Member Name=".ctor(System.Boolean[],System.Boolean[],System.Boolean[],System.Boolean[])" Analyze="True" />
          <Member Name=".ctor(System.Int32,System.Int32,System.Int32)" Analyze="True" />
          <Member Name="Action(System.Boolean,MathNet.Symbolics.Signal):System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="IntegerValue+MultiplyProcess" Analyze="True">
         <Members>
          <Member Name=".ctor(System.Boolean[],System.Boolean[],System.Boolean[],System.Boolean[])" Analyze="True" />
          <Member Name=".ctor(System.Int32,System.Int32,System.Int32)" Analyze="True" />
          <Member Name="Action(System.Boolean,MathNet.Symbolics.Signal):System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="IntegerValue+SubtractProcess" Analyze="True">
         <Members>
          <Member Name=".ctor(System.Boolean[],System.Boolean[],System.Boolean[],System.Boolean[])" Analyze="True" />
          <Member Name=".ctor(System.Int32,System.Int32,System.Int32)" Analyze="True" />
          <Member Name="Action(System.Boolean,MathNet.Symbolics.Signal):System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="IntegerValueCategory" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="_instance" Analyze="True" />
          <Member Name="Deserialize(System.Xml.XmlReader,System.Collections.Generic.IDictionary`2&lt;System.Guid,MathNet.Symbolics.Signal&gt;,System.Collections.Generic.IDictionary`2&lt;System.Guid,MathNet.Symbolics.Bus&gt;):MathNet.Symbolics.Packages.Standard.Structures.IntegerValueCategory" Analyze="True" />
          <Member Name="Instance" Analyze="True">
           <Accessors>
            <Accessor Name="get_Instance():MathNet.Symbolics.Packages.Standard.Structures.IntegerValueCategory" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="IsIntegerValueMember(MathNet.Symbolics.Port):System.Boolean" Analyze="True" />
          <Member Name="IsMember(MathNet.Symbolics.Port):MathNet.Symbolics.CategoryMembershipLevel" Analyze="True" />
          <Member Name="IsMember(MathNet.Symbolics.Signal,System.Boolean):MathNet.Symbolics.CategoryMembershipLevel" Analyze="True" />
          <Member Name="IsNotIntegerValueMember(MathNet.Symbolics.Port):System.Boolean" Analyze="True" />
         </Members>
        </Type>
        <Type Name="LiteralValue" Analyze="True">
         <Members>
          <Member Name=".cctor()" Analyze="True" />
          <Member Name=".ctor()" Analyze="True" />
          <Member Name=".ctor(System.String)" Analyze="True" />
          <Member Name="_customTypeId" Analyze="True" />
          <Member Name="_dataValue" Analyze="True" />
          <Member Name="CanConvertLosslessFrom(MathNet.Symbolics.IValueStructure):System.Boolean" Analyze="True" />
          <Member Name="CompareTo(MathNet.Symbolics.Packages.Standard.Structures.LiteralValue):System.Int32" Analyze="True" />
          <Member Name="Concatenate(MathNet.Symbolics.Packages.Standard.Structures.LiteralValue):MathNet.Symbolics.Packages.Standard.Structures.LiteralValue" Analyze="True" />
          <Member Name="Constant(System.String):MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="ConstantEmpty" Analyze="True">
           <Accessors>
            <Accessor Name="get_ConstantEmpty():MathNet.Symbolics.Signal" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ConvertFrom(MathNet.Symbolics.IValueStructure):MathNet.Symbolics.Packages.Standard.Structures.LiteralValue" Analyze="True" />
          <Member Name="ConvertFrom(MathNet.Symbolics.Packages.Standard.Structures.IntegerValue):MathNet.Symbolics.Packages.Standard.Structures.LiteralValue" Analyze="True" />
          <Member Name="Deserialize(System.Xml.XmlReader,System.Collections.Generic.IDictionary`2&lt;System.Guid,MathNet.Symbolics.Signal&gt;,System.Collections.Generic.IDictionary`2&lt;System.Guid,MathNet.Symbolics.Bus&gt;):MathNet.Symbolics.Packages.Standard.Structures.LiteralValue" Analyze="True" />
          <Member Name="Empty" Analyze="True">
           <Accessors>
            <Accessor Name="get_Empty():MathNet.Symbolics.Packages.Standard.Structures.LiteralValue" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Equals(MathNet.Symbolics.IValueStructure):System.Boolean" Analyze="True" />
          <Member Name="Equals(MathNet.Symbolics.Packages.Standard.Structures.LiteralValue):System.Boolean" Analyze="True" />
          <Member Name="GetHashCode():System.Int32" Analyze="True" />
          <Member Name="op_Explicit(MathNet.Symbolics.Packages.Standard.Structures.IntegerValue):MathNet.Symbolics.Packages.Standard.Structures.LiteralValue" Analyze="True" />
          <Member Name="ParseConstant(System.String):MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="Register(MathNet.Symbolics.Library.ILibrary):System.Void" Analyze="True" />
          <Member Name="Serialize(System.Xml.XmlWriter,System.Collections.Generic.IDictionary`2&lt;System.Guid,System.Guid&gt;,System.Collections.Generic.IDictionary`2&lt;System.Guid,System.Guid&gt;):System.Void" Analyze="True" />
          <Member Name="ToString():System.String" Analyze="True" />
          <Member Name="TypeId" Analyze="True">
           <Accessors>
            <Accessor Name="get_TypeId():MathNet.Symbolics.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="TypeIdentifier" Analyze="True">
           <Accessors>
            <Accessor Name="get_TypeIdentifier():MathNet.Symbolics.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Value" Analyze="True">
           <Accessors>
            <Accessor Name="get_Value():System.String" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="LogicValue" Analyze="True">
         <Members>
          <Member Name=".cctor()" Analyze="True" />
          <Member Name=".ctor()" Analyze="True" />
          <Member Name=".ctor(MathNet.Symbolics.Packages.Standard.Structures.ELogicX01)" Analyze="True" />
          <Member Name="_customTypeId" Analyze="True" />
          <Member Name="_dataValue" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate1" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate10" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate11" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate14" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate15" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate18" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate19" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate1c" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate1d" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate20" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate21" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate24" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate25" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate28" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate29" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate2c" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate2d" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate30" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate31" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate33" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate4" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate5" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate8" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate9" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegatec" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegated" Analyze="True" />
          <Member Name="&lt;CreateAndProcess&gt;b__2():MathNet.Symbolics.IValueStructure" Analyze="True" />
          <Member Name="&lt;CreateAndProcess&gt;b__3(MathNet.Symbolics.Packages.Standard.Structures.LogicValue,MathNet.Symbolics.Packages.Standard.Structures.LogicValue):MathNet.Symbolics.Packages.Standard.Structures.LogicValue" Analyze="True" />
          <Member Name="&lt;CreateAndProcess&gt;b__6():MathNet.Symbolics.IValueStructure" Analyze="True" />
          <Member Name="&lt;CreateAndProcess&gt;b__7(MathNet.Symbolics.Packages.Standard.Structures.LogicValue,MathNet.Symbolics.Packages.Standard.Structures.LogicValue):MathNet.Symbolics.Packages.Standard.Structures.LogicValue" Analyze="True" />
          <Member Name="&lt;CreateNandProcess&gt;b__a():MathNet.Symbolics.IValueStructure" Analyze="True" />
          <Member Name="&lt;CreateNandProcess&gt;b__b(MathNet.Symbolics.Packages.Standard.Structures.LogicValue,MathNet.Symbolics.Packages.Standard.Structures.LogicValue):MathNet.Symbolics.Packages.Standard.Structures.LogicValue" Analyze="True" />
          <Member Name="&lt;CreateNandProcess&gt;b__e():MathNet.Symbolics.IValueStructure" Analyze="True" />
          <Member Name="&lt;CreateNandProcess&gt;b__f(MathNet.Symbolics.Packages.Standard.Structures.LogicValue,MathNet.Symbolics.Packages.Standard.Structures.LogicValue):MathNet.Symbolics.Packages.Standard.Structures.LogicValue" Analyze="True" />
          <Member Name="&lt;CreateNorProcess&gt;b__1a():MathNet.Symbolics.IValueStructure" Analyze="True" />
          <Member Name="&lt;CreateNorProcess&gt;b__1b(MathNet.Symbolics.Packages.Standard.Structures.LogicValue,MathNet.Symbolics.Packages.Standard.Structures.LogicValue):MathNet.Symbolics.Packages.Standard.Structures.LogicValue" Analyze="True" />
          <Member Name="&lt;CreateNorProcess&gt;b__1e():MathNet.Symbolics.IValueStructure" Analyze="True" />
          <Member Name="&lt;CreateNorProcess&gt;b__1f(MathNet.Symbolics.Packages.Standard.Structures.LogicValue,MathNet.Symbolics.Packages.Standard.Structures.LogicValue):MathNet.Symbolics.Packages.Standard.Structures.LogicValue" Analyze="True" />
          <Member Name="&lt;CreateNotProcess&gt;b__32(MathNet.Symbolics.Packages.Standard.Structures.LogicValue):MathNet.Symbolics.Packages.Standard.Structures.LogicValue" Analyze="True" />
          <Member Name="&lt;CreateOrProcess&gt;b__12():MathNet.Symbolics.IValueStructure" Analyze="True" />
          <Member Name="&lt;CreateOrProcess&gt;b__13(MathNet.Symbolics.Packages.Standard.Structures.LogicValue,MathNet.Symbolics.Packages.Standard.Structures.LogicValue):MathNet.Symbolics.Packages.Standard.Structures.LogicValue" Analyze="True" />
          <Member Name="&lt;CreateOrProcess&gt;b__16():MathNet.Symbolics.IValueStructure" Analyze="True" />
          <Member Name="&lt;CreateOrProcess&gt;b__17(MathNet.Symbolics.Packages.Standard.Structures.LogicValue,MathNet.Symbolics.Packages.Standard.Structures.LogicValue):MathNet.Symbolics.Packages.Standard.Structures.LogicValue" Analyze="True" />
          <Member Name="&lt;CreateXnorProcess&gt;b__2a():MathNet.Symbolics.IValueStructure" Analyze="True" />
          <Member Name="&lt;CreateXnorProcess&gt;b__2b(MathNet.Symbolics.Packages.Standard.Structures.LogicValue,MathNet.Symbolics.Packages.Standard.Structures.LogicValue):MathNet.Symbolics.Packages.Standard.Structures.LogicValue" Analyze="True" />
          <Member Name="&lt;CreateXnorProcess&gt;b__2e():MathNet.Symbolics.IValueStructure" Analyze="True" />
          <Member Name="&lt;CreateXnorProcess&gt;b__2f(MathNet.Symbolics.Packages.Standard.Structures.LogicValue,MathNet.Symbolics.Packages.Standard.Structures.LogicValue):MathNet.Symbolics.Packages.Standard.Structures.LogicValue" Analyze="True" />
          <Member Name="&lt;CreateXorProcess&gt;b__22():MathNet.Symbolics.IValueStructure" Analyze="True" />
          <Member Name="&lt;CreateXorProcess&gt;b__23(MathNet.Symbolics.Packages.Standard.Structures.LogicValue,MathNet.Symbolics.Packages.Standard.Structures.LogicValue):MathNet.Symbolics.Packages.Standard.Structures.LogicValue" Analyze="True" />
          <Member Name="&lt;CreateXorProcess&gt;b__26():MathNet.Symbolics.IValueStructure" Analyze="True" />
          <Member Name="&lt;CreateXorProcess&gt;b__27(MathNet.Symbolics.Packages.Standard.Structures.LogicValue,MathNet.Symbolics.Packages.Standard.Structures.LogicValue):MathNet.Symbolics.Packages.Standard.Structures.LogicValue" Analyze="True" />
          <Member Name="&lt;Register&gt;b__0(MathNet.Symbolics.ICustomData):MathNet.Symbolics.ICustomData" Analyze="True" />
          <Member Name="Add(MathNet.Symbolics.Packages.Standard.Structures.LogicValue):MathNet.Symbolics.Packages.Standard.Structures.LogicValue" Analyze="True" />
          <Member Name="AdditiveIdentity" Analyze="True">
           <Accessors>
            <Accessor Name="get_AdditiveIdentity():MathNet.Symbolics.Packages.Standard.Structures.LogicValue" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="And(MathNet.Symbolics.Packages.Standard.Structures.LogicValue):MathNet.Symbolics.Packages.Standard.Structures.LogicValue" Analyze="True" />
          <Member Name="CanConvertLosslessFrom(MathNet.Symbolics.IValueStructure):System.Boolean" Analyze="True" />
          <Member Name="CompareTo(MathNet.Symbolics.Packages.Standard.Structures.LogicValue):System.Int32" Analyze="True" />
          <Member Name="ConvertFrom(MathNet.Symbolics.IValueStructure):MathNet.Symbolics.Packages.Standard.Structures.LogicValue" Analyze="True" />
          <Member Name="CreateAndProcess(System.Boolean[],System.Boolean[],System.Boolean[],System.Boolean[]):MathNet.Symbolics.Packages.ObjectModel.ProcessBase" Analyze="True" />
          <Member Name="CreateAndProcess(System.Int32,System.Int32,System.Int32):MathNet.Symbolics.Packages.ObjectModel.ProcessBase" Analyze="True" />
          <Member Name="CreateNandProcess(System.Boolean[],System.Boolean[],System.Boolean[],System.Boolean[]):MathNet.Symbolics.Packages.ObjectModel.ProcessBase" Analyze="True" />
          <Member Name="CreateNandProcess(System.Int32,System.Int32,System.Int32):MathNet.Symbolics.Packages.ObjectModel.ProcessBase" Analyze="True" />
          <Member Name="CreateNorProcess(System.Boolean[],System.Boolean[],System.Boolean[],System.Boolean[]):MathNet.Symbolics.Packages.ObjectModel.ProcessBase" Analyze="True" />
          <Member Name="CreateNorProcess(System.Int32,System.Int32,System.Int32):MathNet.Symbolics.Packages.ObjectModel.ProcessBase" Analyze="True" />
          <Member Name="CreateNotProcess(System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean):MathNet.Symbolics.Packages.ObjectModel.ProcessBase" Analyze="True" />
          <Member Name="CreateOrProcess(System.Boolean[],System.Boolean[],System.Boolean[],System.Boolean[]):MathNet.Symbolics.Packages.ObjectModel.ProcessBase" Analyze="True" />
          <Member Name="CreateOrProcess(System.Int32,System.Int32,System.Int32):MathNet.Symbolics.Packages.ObjectModel.ProcessBase" Analyze="True" />
          <Member Name="CreateXnorProcess(System.Boolean[],System.Boolean[],System.Boolean[],System.Boolean[]):MathNet.Symbolics.Packages.ObjectModel.ProcessBase" Analyze="True" />
          <Member Name="CreateXnorProcess(System.Int32,System.Int32,System.Int32):MathNet.Symbolics.Packages.ObjectModel.ProcessBase" Analyze="True" />
          <Member Name="CreateXorProcess(System.Boolean[],System.Boolean[],System.Boolean[],System.Boolean[]):MathNet.Symbolics.Packages.ObjectModel.ProcessBase" Analyze="True" />
          <Member Name="CreateXorProcess(System.Int32,System.Int32,System.Int32):MathNet.Symbolics.Packages.ObjectModel.ProcessBase" Analyze="True" />
          <Member Name="Deserialize(System.Xml.XmlReader,System.Collections.Generic.IDictionary`2&lt;System.Guid,MathNet.Symbolics.Signal&gt;,System.Collections.Generic.IDictionary`2&lt;System.Guid,MathNet.Symbolics.Bus&gt;):MathNet.Symbolics.Packages.Standard.Structures.LogicValue" Analyze="True" />
          <Member Name="Equals(MathNet.Symbolics.IValueStructure):System.Boolean" Analyze="True" />
          <Member Name="Equals(MathNet.Symbolics.Packages.Standard.Structures.LogicValue):System.Boolean" Analyze="True" />
          <Member Name="False" Analyze="True">
           <Accessors>
            <Accessor Name="get_False():MathNet.Symbolics.Packages.Standard.Structures.LogicValue" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="GetHashCode():System.Int32" Analyze="True" />
          <Member Name="IsAdditiveIdentity" Analyze="True">
           <Accessors>
            <Accessor Name="get_IsAdditiveIdentity():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="IsMultiplicativeIdentity" Analyze="True">
           <Accessors>
            <Accessor Name="get_IsMultiplicativeIdentity():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="logicFalse" Analyze="True" />
          <Member Name="logicTrue" Analyze="True" />
          <Member Name="logicUnknown" Analyze="True" />
          <Member Name="MathNet.Symbolics.Packages.Standard.IAlgebraicMonoid.AdditiveIdentity" Analyze="True">
           <Accessors>
            <Accessor Name="MathNet.Symbolics.Packages.Standard.IAlgebraicMonoid.get_AdditiveIdentity():MathNet.Symbolics.IValueStructure" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="MathNet.Symbolics.Packages.Standard.IAlgebraicRingWithUnity.MultiplicativeIdentity" Analyze="True">
           <Accessors>
            <Accessor Name="MathNet.Symbolics.Packages.Standard.IAlgebraicRingWithUnity.get_MultiplicativeIdentity():MathNet.Symbolics.IValueStructure" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="MultiplicativeIdentity" Analyze="True">
           <Accessors>
            <Accessor Name="get_MultiplicativeIdentity():MathNet.Symbolics.Packages.Standard.Structures.LogicValue" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Multiply(MathNet.Symbolics.Packages.Standard.Structures.LogicValue):MathNet.Symbolics.Packages.Standard.Structures.LogicValue" Analyze="True" />
          <Member Name="Nand(MathNet.Symbolics.Packages.Standard.Structures.LogicValue):MathNet.Symbolics.Packages.Standard.Structures.LogicValue" Analyze="True" />
          <Member Name="Nor(MathNet.Symbolics.Packages.Standard.Structures.LogicValue):MathNet.Symbolics.Packages.Standard.Structures.LogicValue" Analyze="True" />
          <Member Name="Not():MathNet.Symbolics.Packages.Standard.Structures.LogicValue" Analyze="True" />
          <Member Name="One" Analyze="True">
           <Accessors>
            <Accessor Name="get_One():MathNet.Symbolics.Packages.Standard.Structures.LogicValue" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Or(MathNet.Symbolics.Packages.Standard.Structures.LogicValue):MathNet.Symbolics.Packages.Standard.Structures.LogicValue" Analyze="True" />
          <Member Name="Register(MathNet.Symbolics.Library.ILibrary):System.Void" Analyze="True" />
          <Member Name="Serialize(System.Xml.XmlWriter,System.Collections.Generic.IDictionary`2&lt;System.Guid,System.Guid&gt;,System.Collections.Generic.IDictionary`2&lt;System.Guid,System.Guid&gt;):System.Void" Analyze="True" />
          <Member Name="ToString():System.String" Analyze="True" />
          <Member Name="True" Analyze="True">
           <Accessors>
            <Accessor Name="get_True():MathNet.Symbolics.Packages.Standard.Structures.LogicValue" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="TypeId" Analyze="True">
           <Accessors>
            <Accessor Name="get_TypeId():MathNet.Symbolics.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="TypeIdentifier" Analyze="True">
           <Accessors>
            <Accessor Name="get_TypeIdentifier():MathNet.Symbolics.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Unknown" Analyze="True">
           <Accessors>
            <Accessor Name="get_Unknown():MathNet.Symbolics.Packages.Standard.Structures.LogicValue" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Value" Analyze="True">
           <Accessors>
            <Accessor Name="get_Value():MathNet.Symbolics.Packages.Standard.Structures.ELogicX01" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Xnor(MathNet.Symbolics.Packages.Standard.Structures.LogicValue):MathNet.Symbolics.Packages.Standard.Structures.LogicValue" Analyze="True" />
          <Member Name="Xor(MathNet.Symbolics.Packages.Standard.Structures.LogicValue):MathNet.Symbolics.Packages.Standard.Structures.LogicValue" Analyze="True" />
          <Member Name="Zero" Analyze="True">
           <Accessors>
            <Accessor Name="get_Zero():MathNet.Symbolics.Packages.Standard.Structures.LogicValue" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="LogicValueCategory" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="_instance" Analyze="True" />
          <Member Name="Deserialize(System.Xml.XmlReader,System.Collections.Generic.IDictionary`2&lt;System.Guid,MathNet.Symbolics.Signal&gt;,System.Collections.Generic.IDictionary`2&lt;System.Guid,MathNet.Symbolics.Bus&gt;):MathNet.Symbolics.Packages.Standard.Structures.LogicValueCategory" Analyze="True" />
          <Member Name="Instance" Analyze="True">
           <Accessors>
            <Accessor Name="get_Instance():MathNet.Symbolics.Packages.Standard.Structures.LogicValueCategory" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="IsLogicValueMember(MathNet.Symbolics.Port):System.Boolean" Analyze="True" />
          <Member Name="IsMember(MathNet.Symbolics.Port):MathNet.Symbolics.CategoryMembershipLevel" Analyze="True" />
          <Member Name="IsMember(MathNet.Symbolics.Signal,System.Boolean):MathNet.Symbolics.CategoryMembershipLevel" Analyze="True" />
          <Member Name="IsNotLogicValueMember(MathNet.Symbolics.Port):System.Boolean" Analyze="True" />
         </Members>
        </Type>
        <Type Name="NegativeInfinitySymbol" Analyze="True">
         <Members>
          <Member Name=".cctor()" Analyze="True" />
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="_customTypeId" Analyze="True" />
          <Member Name="_instance" Analyze="True" />
          <Member Name="CanConvertLosslessFrom(MathNet.Symbolics.IValueStructure):System.Boolean" Analyze="True" />
          <Member Name="CompareTo(MathNet.Symbolics.Packages.Standard.Structures.NegativeInfinitySymbol):System.Int32" Analyze="True" />
          <Member Name="Constant" Analyze="True">
           <Accessors>
            <Accessor Name="get_Constant():MathNet.Symbolics.Signal" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ConvertFrom(MathNet.Symbolics.IValueStructure):MathNet.Symbolics.Packages.Standard.Structures.NegativeInfinitySymbol" Analyze="True" />
          <Member Name="Deserialize(System.Xml.XmlReader,System.Collections.Generic.IDictionary`2&lt;System.Guid,MathNet.Symbolics.Signal&gt;,System.Collections.Generic.IDictionary`2&lt;System.Guid,MathNet.Symbolics.Bus&gt;):MathNet.Symbolics.Packages.Standard.Structures.NegativeInfinitySymbol" Analyze="True" />
          <Member Name="Equals(MathNet.Symbolics.IValueStructure):System.Boolean" Analyze="True" />
          <Member Name="Equals(MathNet.Symbolics.Packages.Standard.Structures.NegativeInfinitySymbol):System.Boolean" Analyze="True" />
          <Member Name="Instance" Analyze="True">
           <Accessors>
            <Accessor Name="get_Instance():MathNet.Symbolics.Packages.Standard.Structures.NegativeInfinitySymbol" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Register(MathNet.Symbolics.Library.ILibrary):System.Void" Analyze="True" />
          <Member Name="TypeId" Analyze="True">
           <Accessors>
            <Accessor Name="get_TypeId():MathNet.Symbolics.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="TypeIdentifier" Analyze="True">
           <Accessors>
            <Accessor Name="get_TypeIdentifier():MathNet.Symbolics.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="PositiveInfinitySymbol" Analyze="True">
         <Members>
          <Member Name=".cctor()" Analyze="True" />
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="_customTypeId" Analyze="True" />
          <Member Name="_instance" Analyze="True" />
          <Member Name="CanConvertLosslessFrom(MathNet.Symbolics.IValueStructure):System.Boolean" Analyze="True" />
          <Member Name="CompareTo(MathNet.Symbolics.Packages.Standard.Structures.PositiveInfinitySymbol):System.Int32" Analyze="True" />
          <Member Name="Constant" Analyze="True">
           <Accessors>
            <Accessor Name="get_Constant():MathNet.Symbolics.Signal" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ConvertFrom(MathNet.Symbolics.IValueStructure):MathNet.Symbolics.Packages.Standard.Structures.PositiveInfinitySymbol" Analyze="True" />
          <Member Name="Deserialize(System.Xml.XmlReader,System.Collections.Generic.IDictionary`2&lt;System.Guid,MathNet.Symbolics.Signal&gt;,System.Collections.Generic.IDictionary`2&lt;System.Guid,MathNet.Symbolics.Bus&gt;):MathNet.Symbolics.Packages.Standard.Structures.PositiveInfinitySymbol" Analyze="True" />
          <Member Name="Equals(MathNet.Symbolics.IValueStructure):System.Boolean" Analyze="True" />
          <Member Name="Equals(MathNet.Symbolics.Packages.Standard.Structures.PositiveInfinitySymbol):System.Boolean" Analyze="True" />
          <Member Name="Instance" Analyze="True">
           <Accessors>
            <Accessor Name="get_Instance():MathNet.Symbolics.Packages.Standard.Structures.PositiveInfinitySymbol" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Register(MathNet.Symbolics.Library.ILibrary):System.Void" Analyze="True" />
          <Member Name="TypeId" Analyze="True">
           <Accessors>
            <Accessor Name="get_TypeId():MathNet.Symbolics.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="TypeIdentifier" Analyze="True">
           <Accessors>
            <Accessor Name="get_TypeIdentifier():MathNet.Symbolics.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="RationalValue" Analyze="True">
         <Members>
          <Member Name=".cctor()" Analyze="True" />
          <Member Name=".ctor()" Analyze="True" />
          <Member Name=".ctor(MathNet.Symbolics.Packages.Standard.Structures.IntegerValue)" Analyze="True" />
          <Member Name=".ctor(System.Int64,System.Int64)" Analyze="True" />
          <Member Name="_customTypeId" Analyze="True" />
          <Member Name="_denominatorValue" Analyze="True" />
          <Member Name="_numeratorValue" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate1" Analyze="True" />
          <Member Name="&lt;Register&gt;b__0(MathNet.Symbolics.ICustomData):MathNet.Symbolics.ICustomData" Analyze="True" />
          <Member Name="Absolute():MathNet.Symbolics.Packages.Standard.Structures.RationalValue" Analyze="True" />
          <Member Name="Add(MathNet.Symbolics.Packages.Standard.Structures.RationalValue):MathNet.Symbolics.Packages.Standard.Structures.RationalValue" Analyze="True" />
          <Member Name="AdditiveIdentity" Analyze="True">
           <Accessors>
            <Accessor Name="get_AdditiveIdentity():MathNet.Symbolics.Packages.Standard.Structures.RationalValue" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="CanConvertLosslessFrom(MathNet.Symbolics.IValueStructure):System.Boolean" Analyze="True" />
          <Member Name="CompareTo(MathNet.Symbolics.Packages.Standard.Structures.RationalValue):System.Int32" Analyze="True" />
          <Member Name="Constant(System.Int64,System.Int64):MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="ConstantHalf" Analyze="True">
           <Accessors>
            <Accessor Name="get_ConstantHalf():MathNet.Symbolics.Signal" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ConvertFrom(MathNet.Symbolics.IValueStructure):MathNet.Symbolics.Packages.Standard.Structures.RationalValue" Analyze="True" />
          <Member Name="ConvertFromInteger(MathNet.Symbolics.Packages.Standard.Structures.IntegerValue):MathNet.Symbolics.Packages.Standard.Structures.RationalValue" Analyze="True" />
          <Member Name="Denominator" Analyze="True">
           <Accessors>
            <Accessor Name="get_Denominator():MathNet.Symbolics.Packages.Standard.Structures.IntegerValue" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="DenominatorValue" Analyze="True">
           <Accessors>
            <Accessor Name="get_DenominatorValue():System.Int64" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Deserialize(System.Xml.XmlReader,System.Collections.Generic.IDictionary`2&lt;System.Guid,MathNet.Symbolics.Signal&gt;,System.Collections.Generic.IDictionary`2&lt;System.Guid,MathNet.Symbolics.Bus&gt;):MathNet.Symbolics.Packages.Standard.Structures.RationalValue" Analyze="True" />
          <Member Name="Divide(MathNet.Symbolics.Packages.Standard.Structures.IntegerValue):MathNet.Symbolics.Packages.Standard.Structures.RationalValue" Analyze="True" />
          <Member Name="Divide(MathNet.Symbolics.Packages.Standard.Structures.RationalValue):MathNet.Symbolics.Packages.Standard.Structures.RationalValue" Analyze="True" />
          <Member Name="Equals(MathNet.Symbolics.IValueStructure):System.Boolean" Analyze="True" />
          <Member Name="Equals(MathNet.Symbolics.Packages.Standard.Structures.IntegerValue):System.Boolean" Analyze="True" />
          <Member Name="Equals(MathNet.Symbolics.Packages.Standard.Structures.RationalValue):System.Boolean" Analyze="True" />
          <Member Name="GetHashCode():System.Int32" Analyze="True" />
          <Member Name="Half" Analyze="True">
           <Accessors>
            <Accessor Name="get_Half():MathNet.Symbolics.Packages.Standard.Structures.RationalValue" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Invert():MathNet.Symbolics.Packages.Standard.Structures.RationalValue" Analyze="True" />
          <Member Name="IsAdditiveIdentity" Analyze="True">
           <Accessors>
            <Accessor Name="get_IsAdditiveIdentity():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="IsInteger" Analyze="True">
           <Accessors>
            <Accessor Name="get_IsInteger():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="IsMultiplicativeIdentity" Analyze="True">
           <Accessors>
            <Accessor Name="get_IsMultiplicativeIdentity():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="IsUnitFraction" Analyze="True">
           <Accessors>
            <Accessor Name="get_IsUnitFraction():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="MathNet.Symbolics.Packages.Standard.IAlgebraicMonoid.AdditiveIdentity" Analyze="True">
           <Accessors>
            <Accessor Name="MathNet.Symbolics.Packages.Standard.IAlgebraicMonoid.get_AdditiveIdentity():MathNet.Symbolics.IValueStructure" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="MathNet.Symbolics.Packages.Standard.IAlgebraicRingWithUnity.MultiplicativeIdentity" Analyze="True">
           <Accessors>
            <Accessor Name="MathNet.Symbolics.Packages.Standard.IAlgebraicRingWithUnity.get_MultiplicativeIdentity():MathNet.Symbolics.IValueStructure" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="MultiplicativeIdentity" Analyze="True">
           <Accessors>
            <Accessor Name="get_MultiplicativeIdentity():MathNet.Symbolics.Packages.Standard.Structures.RationalValue" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Multiply(MathNet.Symbolics.Packages.Standard.Structures.IntegerValue):MathNet.Symbolics.Packages.Standard.Structures.RationalValue" Analyze="True" />
          <Member Name="Multiply(MathNet.Symbolics.Packages.Standard.Structures.RationalValue):MathNet.Symbolics.Packages.Standard.Structures.RationalValue" Analyze="True" />
          <Member Name="Negate():MathNet.Symbolics.Packages.Standard.Structures.RationalValue" Analyze="True" />
          <Member Name="Numerator" Analyze="True">
           <Accessors>
            <Accessor Name="get_Numerator():MathNet.Symbolics.Packages.Standard.Structures.IntegerValue" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="NumeratorValue" Analyze="True">
           <Accessors>
            <Accessor Name="get_NumeratorValue():System.Int64" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="One" Analyze="True">
           <Accessors>
            <Accessor Name="get_One():MathNet.Symbolics.Packages.Standard.Structures.RationalValue" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="op_Explicit(MathNet.Symbolics.Packages.Standard.Structures.IntegerValue):MathNet.Symbolics.Packages.Standard.Structures.RationalValue" Analyze="True" />
          <Member Name="op_GreaterThan(MathNet.Symbolics.Packages.Standard.Structures.RationalValue,MathNet.Symbolics.Packages.Standard.Structures.RationalValue):System.Boolean" Analyze="True" />
          <Member Name="op_LessThan(MathNet.Symbolics.Packages.Standard.Structures.RationalValue,MathNet.Symbolics.Packages.Standard.Structures.RationalValue):System.Boolean" Analyze="True" />
          <Member Name="Power(MathNet.Symbolics.Packages.Standard.Structures.IntegerValue):MathNet.Symbolics.Packages.Standard.Structures.RationalValue" Analyze="True" />
          <Member Name="Power(MathNet.Symbolics.Packages.Standard.Structures.RationalValue):MathNet.Symbolics.Packages.Standard.Structures.RealValue" Analyze="True" />
          <Member Name="Register(MathNet.Symbolics.Library.ILibrary):System.Void" Analyze="True" />
          <Member Name="ReverseTangent():MathNet.Symbolics.Packages.Standard.Structures.RealValue" Analyze="True" />
          <Member Name="Scale(MathNet.Symbolics.Packages.Standard.Structures.RationalValue):MathNet.Symbolics.Packages.Standard.Structures.RationalValue" Analyze="True" />
          <Member Name="Serialize(System.Xml.XmlWriter,System.Collections.Generic.IDictionary`2&lt;System.Guid,System.Guid&gt;,System.Collections.Generic.IDictionary`2&lt;System.Guid,System.Guid&gt;):System.Void" Analyze="True" />
          <Member Name="Subtract(MathNet.Symbolics.Packages.Standard.Structures.RationalValue):MathNet.Symbolics.Packages.Standard.Structures.RationalValue" Analyze="True" />
          <Member Name="ToDouble():System.Double" Analyze="True" />
          <Member Name="ToString():System.String" Analyze="True" />
          <Member Name="TypeId" Analyze="True">
           <Accessors>
            <Accessor Name="get_TypeId():MathNet.Symbolics.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="TypeIdentifier" Analyze="True">
           <Accessors>
            <Accessor Name="get_TypeIdentifier():MathNet.Symbolics.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Zero" Analyze="True">
           <Accessors>
            <Accessor Name="get_Zero():MathNet.Symbolics.Packages.Standard.Structures.RationalValue" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="RationalValue+AddProcess" Analyze="True">
         <Members>
          <Member Name=".ctor(System.Boolean[],System.Boolean[],System.Boolean[],System.Boolean[])" Analyze="True" />
          <Member Name=".ctor(System.Int32,System.Int32,System.Int32)" Analyze="True" />
          <Member Name="Action(System.Boolean,MathNet.Symbolics.Signal):System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="RationalValue+DivideProcess" Analyze="True">
         <Members>
          <Member Name=".ctor(System.Boolean[],System.Boolean[],System.Boolean[],System.Boolean[])" Analyze="True" />
          <Member Name=".ctor(System.Int32,System.Int32,System.Int32)" Analyze="True" />
          <Member Name="Action(System.Boolean,MathNet.Symbolics.Signal):System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="RationalValue+MultiplyProcess" Analyze="True">
         <Members>
          <Member Name=".ctor(System.Boolean[],System.Boolean[],System.Boolean[],System.Boolean[])" Analyze="True" />
          <Member Name=".ctor(System.Int32,System.Int32,System.Int32)" Analyze="True" />
          <Member Name="Action(System.Boolean,MathNet.Symbolics.Signal):System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="RationalValue+SubtractProcess" Analyze="True">
         <Members>
          <Member Name=".ctor(System.Boolean[],System.Boolean[],System.Boolean[],System.Boolean[])" Analyze="True" />
          <Member Name=".ctor(System.Int32,System.Int32,System.Int32)" Analyze="True" />
          <Member Name="Action(System.Boolean,MathNet.Symbolics.Signal):System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="RationalValueCategory" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="_instance" Analyze="True" />
          <Member Name="Deserialize(System.Xml.XmlReader,System.Collections.Generic.IDictionary`2&lt;System.Guid,MathNet.Symbolics.Signal&gt;,System.Collections.Generic.IDictionary`2&lt;System.Guid,MathNet.Symbolics.Bus&gt;):MathNet.Symbolics.Packages.Standard.Structures.RationalValueCategory" Analyze="True" />
          <Member Name="Instance" Analyze="True">
           <Accessors>
            <Accessor Name="get_Instance():MathNet.Symbolics.Packages.Standard.Structures.RationalValueCategory" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="IsMember(MathNet.Symbolics.Port):MathNet.Symbolics.CategoryMembershipLevel" Analyze="True" />
          <Member Name="IsMember(MathNet.Symbolics.Signal,System.Boolean):MathNet.Symbolics.CategoryMembershipLevel" Analyze="True" />
          <Member Name="IsNotRationalValueMember(MathNet.Symbolics.Port):System.Boolean" Analyze="True" />
          <Member Name="IsRationalValueMember(MathNet.Symbolics.Port):System.Boolean" Analyze="True" />
         </Members>
        </Type>
        <Type Name="RealValue" Analyze="True">
         <Members>
          <Member Name=".cctor()" Analyze="True" />
          <Member Name=".ctor()" Analyze="True" />
          <Member Name=".ctor(MathNet.Symbolics.Packages.Standard.Structures.IntegerValue)" Analyze="True" />
          <Member Name=".ctor(MathNet.Symbolics.Packages.Standard.Structures.RationalValue)" Analyze="True" />
          <Member Name=".ctor(System.Double)" Analyze="True" />
          <Member Name="_customTypeId" Analyze="True" />
          <Member Name="_dataValue" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate1" Analyze="True" />
          <Member Name="&lt;Register&gt;b__0(MathNet.Symbolics.ICustomData):MathNet.Symbolics.ICustomData" Analyze="True" />
          <Member Name="Absolute():MathNet.Symbolics.Packages.Standard.Structures.RealValue" Analyze="True" />
          <Member Name="Add(MathNet.Symbolics.Packages.Standard.Structures.RealValue):MathNet.Symbolics.Packages.Standard.Structures.RealValue" Analyze="True" />
          <Member Name="AdditiveIdentity" Analyze="True">
           <Accessors>
            <Accessor Name="get_AdditiveIdentity():MathNet.Symbolics.Packages.Standard.Structures.RealValue" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="CanConvertLosslessFrom(MathNet.Symbolics.IValueStructure):System.Boolean" Analyze="True" />
          <Member Name="CompareTo(MathNet.Symbolics.Packages.Standard.Structures.RealValue):System.Int32" Analyze="True" />
          <Member Name="Constant(System.Double):MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="Constant(System.Double,System.String):MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="ConstantE" Analyze="True">
           <Accessors>
            <Accessor Name="get_ConstantE():MathNet.Symbolics.Signal" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ConstantPI" Analyze="True">
           <Accessors>
            <Accessor Name="get_ConstantPI():MathNet.Symbolics.Signal" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ConvertFrom(MathNet.Symbolics.IValueStructure):MathNet.Symbolics.Packages.Standard.Structures.RealValue" Analyze="True" />
          <Member Name="ConvertFrom(MathNet.Symbolics.Packages.Standard.Structures.IntegerValue):MathNet.Symbolics.Packages.Standard.Structures.RealValue" Analyze="True" />
          <Member Name="ConvertFrom(MathNet.Symbolics.Packages.Standard.Structures.RationalValue):MathNet.Symbolics.Packages.Standard.Structures.RealValue" Analyze="True" />
          <Member Name="Cosecant():MathNet.Symbolics.Packages.Standard.Structures.RealValue" Analyze="True" />
          <Member Name="Cosine():MathNet.Symbolics.Packages.Standard.Structures.RealValue" Analyze="True" />
          <Member Name="Cotangent():MathNet.Symbolics.Packages.Standard.Structures.RealValue" Analyze="True" />
          <Member Name="Deserialize(System.Xml.XmlReader,System.Collections.Generic.IDictionary`2&lt;System.Guid,MathNet.Symbolics.Signal&gt;,System.Collections.Generic.IDictionary`2&lt;System.Guid,MathNet.Symbolics.Bus&gt;):MathNet.Symbolics.Packages.Standard.Structures.RealValue" Analyze="True" />
          <Member Name="Divide(MathNet.Symbolics.Packages.Standard.Structures.RealValue):MathNet.Symbolics.Packages.Standard.Structures.RealValue" Analyze="True" />
          <Member Name="E" Analyze="True">
           <Accessors>
            <Accessor Name="get_E():MathNet.Symbolics.Packages.Standard.Structures.RealValue" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Equals(MathNet.Symbolics.IValueStructure):System.Boolean" Analyze="True" />
          <Member Name="Equals(MathNet.Symbolics.Packages.Standard.Structures.IntegerValue):System.Boolean" Analyze="True" />
          <Member Name="Equals(MathNet.Symbolics.Packages.Standard.Structures.RationalValue):System.Boolean" Analyze="True" />
          <Member Name="Equals(MathNet.Symbolics.Packages.Standard.Structures.RealValue):System.Boolean" Analyze="True" />
          <Member Name="Exponential():MathNet.Symbolics.Packages.Standard.Structures.RealValue" Analyze="True" />
          <Member Name="GetHashCode():System.Int32" Analyze="True" />
          <Member Name="HyperbolicCosecant():MathNet.Symbolics.Packages.Standard.Structures.RealValue" Analyze="True" />
          <Member Name="HyperbolicCosine():MathNet.Symbolics.Packages.Standard.Structures.RealValue" Analyze="True" />
          <Member Name="HyperbolicCotangent():MathNet.Symbolics.Packages.Standard.Structures.RealValue" Analyze="True" />
          <Member Name="HyperbolicSecant():MathNet.Symbolics.Packages.Standard.Structures.RealValue" Analyze="True" />
          <Member Name="HyperbolicSine():MathNet.Symbolics.Packages.Standard.Structures.RealValue" Analyze="True" />
          <Member Name="HyperbolicTangent():MathNet.Symbolics.Packages.Standard.Structures.RealValue" Analyze="True" />
          <Member Name="InverseCosecant():MathNet.Symbolics.Packages.Standard.Structures.RealValue" Analyze="True" />
          <Member Name="InverseCosine():MathNet.Symbolics.Packages.Standard.Structures.RealValue" Analyze="True" />
          <Member Name="InverseCotangent():MathNet.Symbolics.Packages.Standard.Structures.RealValue" Analyze="True" />
          <Member Name="InverseHyperbolicCosecant():MathNet.Symbolics.Packages.Standard.Structures.RealValue" Analyze="True" />
          <Member Name="InverseHyperbolicCosine():MathNet.Symbolics.Packages.Standard.Structures.RealValue" Analyze="True" />
          <Member Name="InverseHyperbolicCotangent():MathNet.Symbolics.Packages.Standard.Structures.RealValue" Analyze="True" />
          <Member Name="InverseHyperbolicSecant():MathNet.Symbolics.Packages.Standard.Structures.RealValue" Analyze="True" />
          <Member Name="InverseHyperbolicSine():MathNet.Symbolics.Packages.Standard.Structures.RealValue" Analyze="True" />
          <Member Name="InverseHyperbolicTangent():MathNet.Symbolics.Packages.Standard.Structures.RealValue" Analyze="True" />
          <Member Name="InverseSecant():MathNet.Symbolics.Packages.Standard.Structures.RealValue" Analyze="True" />
          <Member Name="InverseSine():MathNet.Symbolics.Packages.Standard.Structures.RealValue" Analyze="True" />
          <Member Name="InverseTangent():MathNet.Symbolics.Packages.Standard.Structures.RealValue" Analyze="True" />
          <Member Name="Invert():MathNet.Symbolics.Packages.Standard.Structures.RealValue" Analyze="True" />
          <Member Name="IsAdditiveIdentity" Analyze="True">
           <Accessors>
            <Accessor Name="get_IsAdditiveIdentity():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="IsMultiplicativeIdentity" Analyze="True">
           <Accessors>
            <Accessor Name="get_IsMultiplicativeIdentity():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="MathNet.Symbolics.Packages.Standard.IAlgebraicMonoid.AdditiveIdentity" Analyze="True">
           <Accessors>
            <Accessor Name="MathNet.Symbolics.Packages.Standard.IAlgebraicMonoid.get_AdditiveIdentity():MathNet.Symbolics.IValueStructure" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="MathNet.Symbolics.Packages.Standard.IAlgebraicRingWithUnity.MultiplicativeIdentity" Analyze="True">
           <Accessors>
            <Accessor Name="MathNet.Symbolics.Packages.Standard.IAlgebraicRingWithUnity.get_MultiplicativeIdentity():MathNet.Symbolics.IValueStructure" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="MultiplicativeIdentity" Analyze="True">
           <Accessors>
            <Accessor Name="get_MultiplicativeIdentity():MathNet.Symbolics.Packages.Standard.Structures.RealValue" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Multiply(MathNet.Symbolics.Packages.Standard.Structures.RealValue):MathNet.Symbolics.Packages.Standard.Structures.RealValue" Analyze="True" />
          <Member Name="NaturalLogarithm():MathNet.Symbolics.Packages.Standard.Structures.RealValue" Analyze="True" />
          <Member Name="Negate():MathNet.Symbolics.Packages.Standard.Structures.RealValue" Analyze="True" />
          <Member Name="One" Analyze="True">
           <Accessors>
            <Accessor Name="get_One():MathNet.Symbolics.Packages.Standard.Structures.RealValue" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="op_Explicit(MathNet.Symbolics.Packages.Standard.Structures.IntegerValue):MathNet.Symbolics.Packages.Standard.Structures.RealValue" Analyze="True" />
          <Member Name="op_Explicit(MathNet.Symbolics.Packages.Standard.Structures.RationalValue):MathNet.Symbolics.Packages.Standard.Structures.RealValue" Analyze="True" />
          <Member Name="ParseConstant(System.String):MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="PI" Analyze="True">
           <Accessors>
            <Accessor Name="get_PI():MathNet.Symbolics.Packages.Standard.Structures.RealValue" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Power(MathNet.Symbolics.Packages.Standard.Structures.RealValue):MathNet.Symbolics.Packages.Standard.Structures.RealValue" Analyze="True" />
          <Member Name="Register(MathNet.Symbolics.Library.ILibrary):System.Void" Analyze="True" />
          <Member Name="Root(MathNet.Symbolics.Packages.Standard.Structures.RealValue):MathNet.Symbolics.Packages.Standard.Structures.RealValue" Analyze="True" />
          <Member Name="Scale(MathNet.Symbolics.Packages.Standard.Structures.RealValue):MathNet.Symbolics.Packages.Standard.Structures.RealValue" Analyze="True" />
          <Member Name="Secant():MathNet.Symbolics.Packages.Standard.Structures.RealValue" Analyze="True" />
          <Member Name="Serialize(System.Xml.XmlWriter,System.Collections.Generic.IDictionary`2&lt;System.Guid,System.Guid&gt;,System.Collections.Generic.IDictionary`2&lt;System.Guid,System.Guid&gt;):System.Void" Analyze="True" />
          <Member Name="Sine():MathNet.Symbolics.Packages.Standard.Structures.RealValue" Analyze="True" />
          <Member Name="Square():MathNet.Symbolics.Packages.Standard.Structures.RealValue" Analyze="True" />
          <Member Name="SquareRoot():MathNet.Symbolics.Packages.Standard.Structures.RealValue" Analyze="True" />
          <Member Name="Subtract(MathNet.Symbolics.Packages.Standard.Structures.RealValue):MathNet.Symbolics.Packages.Standard.Structures.RealValue" Analyze="True" />
          <Member Name="Tangent():MathNet.Symbolics.Packages.Standard.Structures.RealValue" Analyze="True" />
          <Member Name="ToString():System.String" Analyze="True" />
          <Member Name="TypeId" Analyze="True">
           <Accessors>
            <Accessor Name="get_TypeId():MathNet.Symbolics.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="TypeIdentifier" Analyze="True">
           <Accessors>
            <Accessor Name="get_TypeIdentifier():MathNet.Symbolics.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Value" Analyze="True">
           <Accessors>
            <Accessor Name="get_Value():System.Double" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Zero" Analyze="True">
           <Accessors>
            <Accessor Name="get_Zero():MathNet.Symbolics.Packages.Standard.Structures.RealValue" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="RealValue+AddProcess" Analyze="True">
         <Members>
          <Member Name=".ctor(System.Boolean[],System.Boolean[],System.Boolean[],System.Boolean[])" Analyze="True" />
          <Member Name=".ctor(System.Int32,System.Int32,System.Int32)" Analyze="True" />
          <Member Name="Action(System.Boolean,MathNet.Symbolics.Signal):System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="RealValue+DivideProcess" Analyze="True">
         <Members>
          <Member Name=".ctor(System.Boolean[],System.Boolean[],System.Boolean[],System.Boolean[])" Analyze="True" />
          <Member Name=".ctor(System.Int32,System.Int32,System.Int32)" Analyze="True" />
          <Member Name="Action(System.Boolean,MathNet.Symbolics.Signal):System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="RealValue+MultiplyProcess" Analyze="True">
         <Members>
          <Member Name=".ctor(System.Boolean[],System.Boolean[],System.Boolean[],System.Boolean[])" Analyze="True" />
          <Member Name=".ctor(System.Int32,System.Int32,System.Int32)" Analyze="True" />
          <Member Name="Action(System.Boolean,MathNet.Symbolics.Signal):System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="RealValue+SubtractProcess" Analyze="True">
         <Members>
          <Member Name=".ctor(System.Boolean[],System.Boolean[],System.Boolean[],System.Boolean[])" Analyze="True" />
          <Member Name=".ctor(System.Int32,System.Int32,System.Int32)" Analyze="True" />
          <Member Name="Action(System.Boolean,MathNet.Symbolics.Signal):System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="RealValueCategory" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="_instance" Analyze="True" />
          <Member Name="Deserialize(System.Xml.XmlReader,System.Collections.Generic.IDictionary`2&lt;System.Guid,MathNet.Symbolics.Signal&gt;,System.Collections.Generic.IDictionary`2&lt;System.Guid,MathNet.Symbolics.Bus&gt;):MathNet.Symbolics.Packages.Standard.Structures.RealValueCategory" Analyze="True" />
          <Member Name="Instance" Analyze="True">
           <Accessors>
            <Accessor Name="get_Instance():MathNet.Symbolics.Packages.Standard.Structures.RealValueCategory" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="IsMember(MathNet.Symbolics.Port):MathNet.Symbolics.CategoryMembershipLevel" Analyze="True" />
          <Member Name="IsMember(MathNet.Symbolics.Signal,System.Boolean):MathNet.Symbolics.CategoryMembershipLevel" Analyze="True" />
          <Member Name="IsNotRealValueMember(MathNet.Symbolics.Port):System.Boolean" Analyze="True" />
          <Member Name="IsRealValueMember(MathNet.Symbolics.Port):System.Boolean" Analyze="True" />
         </Members>
        </Type>
        <Type Name="ToggleValue" Analyze="True">
         <Members>
          <Member Name=".cctor()" Analyze="True" />
          <Member Name=".ctor(System.Boolean)" Analyze="True" />
          <Member Name="_customTypeId" Analyze="True" />
          <Member Name="_dataValue" Analyze="True" />
          <Member Name="_toggleA" Analyze="True" />
          <Member Name="_toggleB" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate2" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate3" Analyze="True" />
          <Member Name="&lt;Register&gt;b__0(MathNet.Symbolics.ICustomData):MathNet.Symbolics.ICustomData" Analyze="True" />
          <Member Name="&lt;Register&gt;b__1(MathNet.Symbolics.ICustomData):MathNet.Symbolics.ICustomData" Analyze="True" />
          <Member Name="CanConvertLosslessFrom(MathNet.Symbolics.IValueStructure):System.Boolean" Analyze="True" />
          <Member Name="CompareTo(MathNet.Symbolics.Packages.Standard.Structures.ToggleValue):System.Int32" Analyze="True" />
          <Member Name="ConvertFrom(MathNet.Symbolics.IValueStructure):MathNet.Symbolics.Packages.Standard.Structures.ToggleValue" Analyze="True" />
          <Member Name="Deserialize(System.Xml.XmlReader,System.Collections.Generic.IDictionary`2&lt;System.Guid,MathNet.Symbolics.Signal&gt;,System.Collections.Generic.IDictionary`2&lt;System.Guid,MathNet.Symbolics.Bus&gt;):MathNet.Symbolics.Packages.Standard.Structures.ToggleValue" Analyze="True" />
          <Member Name="Equals(MathNet.Symbolics.IValueStructure):System.Boolean" Analyze="True" />
          <Member Name="Equals(MathNet.Symbolics.Packages.Standard.Structures.ToggleValue):System.Boolean" Analyze="True" />
          <Member Name="GetHashCode():System.Int32" Analyze="True" />
          <Member Name="InitialToggle" Analyze="True">
           <Accessors>
            <Accessor Name="get_InitialToggle():MathNet.Symbolics.Packages.Standard.Structures.ToggleValue" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Register(MathNet.Symbolics.Library.ILibrary):System.Void" Analyze="True" />
          <Member Name="Serialize(System.Xml.XmlWriter,System.Collections.Generic.IDictionary`2&lt;System.Guid,System.Guid&gt;,System.Collections.Generic.IDictionary`2&lt;System.Guid,System.Guid&gt;):System.Void" Analyze="True" />
          <Member Name="Toggle():MathNet.Symbolics.Packages.Standard.Structures.ToggleValue" Analyze="True" />
          <Member Name="ToString():System.String" Analyze="True" />
          <Member Name="TypeId" Analyze="True">
           <Accessors>
            <Accessor Name="get_TypeId():MathNet.Symbolics.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="TypeIdentifier" Analyze="True">
           <Accessors>
            <Accessor Name="get_TypeIdentifier():MathNet.Symbolics.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="UndefinedSymbol" Analyze="True">
         <Members>
          <Member Name=".cctor()" Analyze="True" />
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="_customTypeId" Analyze="True" />
          <Member Name="_instance" Analyze="True" />
          <Member Name="CanConvertLosslessFrom(MathNet.Symbolics.IValueStructure):System.Boolean" Analyze="True" />
          <Member Name="CompareTo(MathNet.Symbolics.Packages.Standard.Structures.UndefinedSymbol):System.Int32" Analyze="True" />
          <Member Name="Constant" Analyze="True">
           <Accessors>
            <Accessor Name="get_Constant():MathNet.Symbolics.Signal" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ConvertFrom(MathNet.Symbolics.IValueStructure):MathNet.Symbolics.Packages.Standard.Structures.UndefinedSymbol" Analyze="True" />
          <Member Name="Deserialize(System.Xml.XmlReader,System.Collections.Generic.IDictionary`2&lt;System.Guid,MathNet.Symbolics.Signal&gt;,System.Collections.Generic.IDictionary`2&lt;System.Guid,MathNet.Symbolics.Bus&gt;):MathNet.Symbolics.Packages.Standard.Structures.UndefinedSymbol" Analyze="True" />
          <Member Name="Equals(MathNet.Symbolics.IValueStructure):System.Boolean" Analyze="True" />
          <Member Name="Equals(MathNet.Symbolics.Packages.Standard.Structures.UndefinedSymbol):System.Boolean" Analyze="True" />
          <Member Name="Instance" Analyze="True">
           <Accessors>
            <Accessor Name="get_Instance():MathNet.Symbolics.Packages.Standard.Structures.UndefinedSymbol" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Register(MathNet.Symbolics.Library.ILibrary):System.Void" Analyze="True" />
          <Member Name="TypeId" Analyze="True">
           <Accessors>
            <Accessor Name="get_TypeId():MathNet.Symbolics.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="TypeIdentifier" Analyze="True">
           <Accessors>
            <Accessor Name="get_TypeIdentifier():MathNet.Symbolics.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="VectorValue`1" Analyze="True">
         <Members>
          <Member Name=".cctor()" Analyze="True" />
          <Member Name=".ctor()" Analyze="True" />
          <Member Name=".ctor(System.Collections.Generic.IList`1&lt;TScalar&gt;)" Analyze="True" />
          <Member Name=".ctor(TScalar[])" Analyze="True" />
          <Member Name="_customTypeId" Analyze="True" />
          <Member Name="_dataValue" Analyze="True" />
          <Member Name="Add(MathNet.Symbolics.Packages.Standard.Structures.VectorValue`1&lt;TScalar&gt;):MathNet.Symbolics.Packages.Standard.Structures.VectorValue`1&lt;TScalar&gt;" Analyze="True" />
          <Member Name="Add(MathNet.Symbolics.Packages.Standard.Structures.VectorValue`1&lt;TScalar&gt;,MathNet.Symbolics.Packages.Standard.Structures.VectorValue`1&lt;TScalar&gt;):MathNet.Symbolics.Packages.Standard.Structures.VectorValue`1&lt;TScalar&gt;" Analyze="True" />
          <Member Name="AdditiveIdentity" Analyze="True">
           <Accessors>
            <Accessor Name="get_AdditiveIdentity():MathNet.Symbolics.Packages.Standard.Structures.VectorValue`1&lt;TScalar&gt;" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="CanConvertLosslessFrom(MathNet.Symbolics.IValueStructure):System.Boolean" Analyze="True" />
          <Member Name="Constant(TScalar[]):MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="Constant(TScalar[],System.String):MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="ConvertFrom(MathNet.Symbolics.IValueStructure):MathNet.Symbolics.Packages.Standard.Structures.VectorValue`1&lt;TScalar&gt;" Analyze="True" />
          <Member Name="Count" Analyze="True">
           <Accessors>
            <Accessor Name="get_Count():System.Int32" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Deserialize(System.Xml.XmlReader,System.Collections.Generic.IDictionary`2&lt;System.Guid,MathNet.Symbolics.Signal&gt;,System.Collections.Generic.IDictionary`2&lt;System.Guid,MathNet.Symbolics.Bus&gt;):MathNet.Symbolics.Packages.Standard.Structures.VectorValue`1&lt;TScalar&gt;" Analyze="True" />
          <Member Name="Equals(MathNet.Symbolics.IValueStructure):System.Boolean" Analyze="True" />
          <Member Name="Equals(MathNet.Symbolics.Packages.Standard.Structures.VectorValue`1&lt;TScalar&gt;):System.Boolean" Analyze="True" />
          <Member Name="GetHashCode():System.Int32" Analyze="True" />
          <Member Name="IsAdditiveIdentity" Analyze="True">
           <Accessors>
            <Accessor Name="get_IsAdditiveIdentity():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Item[System.Int32]" Analyze="True">
           <Accessors>
            <Accessor Name="get_Item(System.Int32):TScalar" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="MathNet.Symbolics.Packages.Standard.IAlgebraicMonoid.AdditiveIdentity" Analyze="True">
           <Accessors>
            <Accessor Name="MathNet.Symbolics.Packages.Standard.IAlgebraicMonoid.get_AdditiveIdentity():MathNet.Symbolics.IValueStructure" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Negate():MathNet.Symbolics.Packages.Standard.Structures.VectorValue`1&lt;TScalar&gt;" Analyze="True" />
          <Member Name="Negate(MathNet.Symbolics.Packages.Standard.Structures.VectorValue`1&lt;TScalar&gt;):MathNet.Symbolics.Packages.Standard.Structures.VectorValue`1&lt;TScalar&gt;" Analyze="True" />
          <Member Name="Register(MathNet.Symbolics.Library.ILibrary):System.Void" Analyze="True" />
          <Member Name="Scale(TScalar):MathNet.Symbolics.Packages.Standard.Structures.VectorValue`1&lt;TScalar&gt;" Analyze="True" />
          <Member Name="Serialize(System.Xml.XmlWriter,System.Collections.Generic.IDictionary`2&lt;System.Guid,System.Guid&gt;,System.Collections.Generic.IDictionary`2&lt;System.Guid,System.Guid&gt;):System.Void" Analyze="True" />
          <Member Name="Subtract(MathNet.Symbolics.Packages.Standard.Structures.VectorValue`1&lt;TScalar&gt;):MathNet.Symbolics.Packages.Standard.Structures.VectorValue`1&lt;TScalar&gt;" Analyze="True" />
          <Member Name="Subtract(MathNet.Symbolics.Packages.Standard.Structures.VectorValue`1&lt;TScalar&gt;,MathNet.Symbolics.Packages.Standard.Structures.VectorValue`1&lt;TScalar&gt;):MathNet.Symbolics.Packages.Standard.Structures.VectorValue`1&lt;TScalar&gt;" Analyze="True" />
          <Member Name="ToString():System.String" Analyze="True" />
          <Member Name="TypeId" Analyze="True">
           <Accessors>
            <Accessor Name="get_TypeId():MathNet.Symbolics.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="TypeIdentifier" Analyze="True">
           <Accessors>
            <Accessor Name="get_TypeIdentifier():MathNet.Symbolics.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Value" Analyze="True">
           <Accessors>
            <Accessor Name="get_Value():TScalar[]" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Zero" Analyze="True">
           <Accessors>
            <Accessor Name="get_Zero():MathNet.Symbolics.Packages.Standard.Structures.VectorValue`1&lt;TScalar&gt;" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="MathNet.Symbolics.Packages.Standard.TimeCurves" Analyze="True">
       <Types>
        <Type Name="Curve" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
         </Members>
        </Type>
        <Type Name="Curve+CurveSegment" Analyze="True">
         <Members>
          <Member Name=".ctor(MathNet.Symbolics.Packages.Standard.TimeCurves.Curve,System.TimeSpan,MathNet.Symbolics.IValueStructure)" Analyze="True" />
          <Member Name="Begin" Analyze="True" />
          <Member Name="Offset" Analyze="True" />
          <Member Name="Segment" Analyze="True" />
         </Members>
        </Type>
        <Type Name="CurveSegment`1" Analyze="True">
         <Members>
          <Member Name=".ctor(System.TimeSpan,T,T)" Analyze="True" />
          <Member Name="_slopePerSecond" Analyze="True" />
          <Member Name="_timeOffset" Analyze="True" />
          <Member Name="_valueOffset" Analyze="True" />
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="MathNet.Symbolics.Packages.Standard.Trigonometry" Analyze="True">
       <Types>
        <Type Name="CosecantArchitectures" Analyze="True">
         <Members>
          <Member Name=".cctor()" Analyze="True" />
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="_entityId" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__0(MathNet.Symbolics.Port):MathNet.Symbolics.Packages.ObjectModel.ProcessBase[]" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__1(MathNet.Symbolics.Packages.Standard.Structures.RealValue):MathNet.Symbolics.Packages.Standard.Structures.RealValue" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__2(MathNet.Symbolics.Port):MathNet.Symbolics.Packages.ObjectModel.ProcessBase[]" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__3(MathNet.Symbolics.Packages.Standard.Structures.ComplexValue):MathNet.Symbolics.Packages.Standard.Structures.ComplexValue" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate4" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate5" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate6" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate7" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegatec" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegated" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegatee" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegatef" Analyze="True" />
          <Member Name="&lt;RegisterTheorems&gt;b__8(MathNet.Symbolics.Port,MathNet.Symbolics.Backend.Containers.SignalSet,MathNet.Symbolics.Signal,System.Boolean):System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Signal&gt;" Analyze="True" />
          <Member Name="&lt;RegisterTheorems&gt;b__9():MathNet.Symbolics.Patterns.Toolkit.Pattern" Analyze="True" />
          <Member Name="&lt;RegisterTheorems&gt;b__a(MathNet.Symbolics.Port):MathNet.Symbolics.Manipulation.ManipulationPlan" Analyze="True" />
          <Member Name="&lt;RegisterTheorems&gt;b__b(MathNet.Symbolics.Port,MathNet.Symbolics.Backend.Containers.SignalSet,System.Boolean):System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Signal&gt;" Analyze="True" />
          <Member Name="EntityIdentifier" Analyze="True">
           <Accessors>
            <Accessor Name="get_EntityIdentifier():MathNet.Symbolics.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="RegisterTheorems(MathNet.Symbolics.Library.ILibrary):System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="CosineArchitectures" Analyze="True">
         <Members>
          <Member Name=".cctor()" Analyze="True" />
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="_entityId" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__0(MathNet.Symbolics.Port):MathNet.Symbolics.Packages.ObjectModel.ProcessBase[]" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__1(MathNet.Symbolics.Packages.Standard.Structures.RealValue):MathNet.Symbolics.Packages.Standard.Structures.RealValue" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__2(MathNet.Symbolics.Port):MathNet.Symbolics.Packages.ObjectModel.ProcessBase[]" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__3(MathNet.Symbolics.Packages.Standard.Structures.ComplexValue):MathNet.Symbolics.Packages.Standard.Structures.ComplexValue" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate4" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate5" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate6" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate7" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate9" Analyze="True" />
          <Member Name="&lt;RegisterTheorems&gt;b__8(MathNet.Symbolics.Port,MathNet.Symbolics.Backend.Containers.SignalSet,MathNet.Symbolics.Signal,System.Boolean):System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Signal&gt;" Analyze="True" />
          <Member Name="EntityIdentifier" Analyze="True">
           <Accessors>
            <Accessor Name="get_EntityIdentifier():MathNet.Symbolics.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="RegisterTheorems(MathNet.Symbolics.Library.ILibrary):System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="CotangentArchitectures" Analyze="True">
         <Members>
          <Member Name=".cctor()" Analyze="True" />
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="_entityId" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__0(MathNet.Symbolics.Port):MathNet.Symbolics.Packages.ObjectModel.ProcessBase[]" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__1(MathNet.Symbolics.Packages.Standard.Structures.RealValue):MathNet.Symbolics.Packages.Standard.Structures.RealValue" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__2(MathNet.Symbolics.Port):MathNet.Symbolics.Packages.ObjectModel.ProcessBase[]" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__3(MathNet.Symbolics.Packages.Standard.Structures.ComplexValue):MathNet.Symbolics.Packages.Standard.Structures.ComplexValue" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate4" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate5" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate6" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate7" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegatec" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegated" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegatee" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegatef" Analyze="True" />
          <Member Name="&lt;RegisterTheorems&gt;b__8(MathNet.Symbolics.Port,MathNet.Symbolics.Backend.Containers.SignalSet,MathNet.Symbolics.Signal,System.Boolean):System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Signal&gt;" Analyze="True" />
          <Member Name="&lt;RegisterTheorems&gt;b__9():MathNet.Symbolics.Patterns.Toolkit.Pattern" Analyze="True" />
          <Member Name="&lt;RegisterTheorems&gt;b__a(MathNet.Symbolics.Port):MathNet.Symbolics.Manipulation.ManipulationPlan" Analyze="True" />
          <Member Name="&lt;RegisterTheorems&gt;b__b(MathNet.Symbolics.Port,MathNet.Symbolics.Backend.Containers.SignalSet,System.Boolean):System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Signal&gt;" Analyze="True" />
          <Member Name="EntityIdentifier" Analyze="True">
           <Accessors>
            <Accessor Name="get_EntityIdentifier():MathNet.Symbolics.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="RegisterTheorems(MathNet.Symbolics.Library.ILibrary):System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="HyperbolicCosecantArchitectures" Analyze="True">
         <Members>
          <Member Name=".cctor()" Analyze="True" />
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="_entityId" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__0(MathNet.Symbolics.Port):MathNet.Symbolics.Packages.ObjectModel.ProcessBase[]" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__1(MathNet.Symbolics.Packages.Standard.Structures.RealValue):MathNet.Symbolics.Packages.Standard.Structures.RealValue" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__2(MathNet.Symbolics.Port):MathNet.Symbolics.Packages.ObjectModel.ProcessBase[]" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__3(MathNet.Symbolics.Packages.Standard.Structures.ComplexValue):MathNet.Symbolics.Packages.Standard.Structures.ComplexValue" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate4" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate5" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate6" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate7" Analyze="True" />
          <Member Name="EntityIdentifier" Analyze="True">
           <Accessors>
            <Accessor Name="get_EntityIdentifier():MathNet.Symbolics.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="RegisterTheorems(MathNet.Symbolics.Library.ILibrary):System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="HyperbolicCosineArchitectures" Analyze="True">
         <Members>
          <Member Name=".cctor()" Analyze="True" />
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="_entityId" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__0(MathNet.Symbolics.Port):MathNet.Symbolics.Packages.ObjectModel.ProcessBase[]" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__1(MathNet.Symbolics.Packages.Standard.Structures.RealValue):MathNet.Symbolics.Packages.Standard.Structures.RealValue" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__2(MathNet.Symbolics.Port):MathNet.Symbolics.Packages.ObjectModel.ProcessBase[]" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__3(MathNet.Symbolics.Packages.Standard.Structures.ComplexValue):MathNet.Symbolics.Packages.Standard.Structures.ComplexValue" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate4" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate5" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate6" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate7" Analyze="True" />
          <Member Name="EntityIdentifier" Analyze="True">
           <Accessors>
            <Accessor Name="get_EntityIdentifier():MathNet.Symbolics.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="RegisterTheorems(MathNet.Symbolics.Library.ILibrary):System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="HyperbolicCotangentArchitectures" Analyze="True">
         <Members>
          <Member Name=".cctor()" Analyze="True" />
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="_entityId" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__0(MathNet.Symbolics.Port):MathNet.Symbolics.Packages.ObjectModel.ProcessBase[]" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__1(MathNet.Symbolics.Packages.Standard.Structures.RealValue):MathNet.Symbolics.Packages.Standard.Structures.RealValue" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__2(MathNet.Symbolics.Port):MathNet.Symbolics.Packages.ObjectModel.ProcessBase[]" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__3(MathNet.Symbolics.Packages.Standard.Structures.ComplexValue):MathNet.Symbolics.Packages.Standard.Structures.ComplexValue" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate4" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate5" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate6" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate7" Analyze="True" />
          <Member Name="EntityIdentifier" Analyze="True">
           <Accessors>
            <Accessor Name="get_EntityIdentifier():MathNet.Symbolics.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="RegisterTheorems(MathNet.Symbolics.Library.ILibrary):System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="HyperbolicSecantArchitectures" Analyze="True">
         <Members>
          <Member Name=".cctor()" Analyze="True" />
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="_entityId" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__0(MathNet.Symbolics.Port):MathNet.Symbolics.Packages.ObjectModel.ProcessBase[]" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__1(MathNet.Symbolics.Packages.Standard.Structures.RealValue):MathNet.Symbolics.Packages.Standard.Structures.RealValue" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__2(MathNet.Symbolics.Port):MathNet.Symbolics.Packages.ObjectModel.ProcessBase[]" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__3(MathNet.Symbolics.Packages.Standard.Structures.ComplexValue):MathNet.Symbolics.Packages.Standard.Structures.ComplexValue" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate4" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate5" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate6" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate7" Analyze="True" />
          <Member Name="EntityIdentifier" Analyze="True">
           <Accessors>
            <Accessor Name="get_EntityIdentifier():MathNet.Symbolics.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="RegisterTheorems(MathNet.Symbolics.Library.ILibrary):System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="HyperbolicSineArchitectures" Analyze="True">
         <Members>
          <Member Name=".cctor()" Analyze="True" />
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="_entityId" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__0(MathNet.Symbolics.Port):MathNet.Symbolics.Packages.ObjectModel.ProcessBase[]" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__1(MathNet.Symbolics.Packages.Standard.Structures.RealValue):MathNet.Symbolics.Packages.Standard.Structures.RealValue" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__2(MathNet.Symbolics.Port):MathNet.Symbolics.Packages.ObjectModel.ProcessBase[]" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__3(MathNet.Symbolics.Packages.Standard.Structures.ComplexValue):MathNet.Symbolics.Packages.Standard.Structures.ComplexValue" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate4" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate5" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate6" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate7" Analyze="True" />
          <Member Name="EntityIdentifier" Analyze="True">
           <Accessors>
            <Accessor Name="get_EntityIdentifier():MathNet.Symbolics.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="RegisterTheorems(MathNet.Symbolics.Library.ILibrary):System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="HyperbolicTangentArchitectures" Analyze="True">
         <Members>
          <Member Name=".cctor()" Analyze="True" />
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="_entityId" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__0(MathNet.Symbolics.Port):MathNet.Symbolics.Packages.ObjectModel.ProcessBase[]" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__1(MathNet.Symbolics.Packages.Standard.Structures.RealValue):MathNet.Symbolics.Packages.Standard.Structures.RealValue" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__2(MathNet.Symbolics.Port):MathNet.Symbolics.Packages.ObjectModel.ProcessBase[]" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__3(MathNet.Symbolics.Packages.Standard.Structures.ComplexValue):MathNet.Symbolics.Packages.Standard.Structures.ComplexValue" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate4" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate5" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate6" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate7" Analyze="True" />
          <Member Name="EntityIdentifier" Analyze="True">
           <Accessors>
            <Accessor Name="get_EntityIdentifier():MathNet.Symbolics.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="RegisterTheorems(MathNet.Symbolics.Library.ILibrary):System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="SecantArchitectures" Analyze="True">
         <Members>
          <Member Name=".cctor()" Analyze="True" />
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="_entityId" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__0(MathNet.Symbolics.Port):MathNet.Symbolics.Packages.ObjectModel.ProcessBase[]" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__1(MathNet.Symbolics.Packages.Standard.Structures.RealValue):MathNet.Symbolics.Packages.Standard.Structures.RealValue" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__2(MathNet.Symbolics.Port):MathNet.Symbolics.Packages.ObjectModel.ProcessBase[]" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__3(MathNet.Symbolics.Packages.Standard.Structures.ComplexValue):MathNet.Symbolics.Packages.Standard.Structures.ComplexValue" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate4" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate5" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate6" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate7" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegatec" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegated" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegatee" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegatef" Analyze="True" />
          <Member Name="&lt;RegisterTheorems&gt;b__8(MathNet.Symbolics.Port,MathNet.Symbolics.Backend.Containers.SignalSet,MathNet.Symbolics.Signal,System.Boolean):System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Signal&gt;" Analyze="True" />
          <Member Name="&lt;RegisterTheorems&gt;b__9():MathNet.Symbolics.Patterns.Toolkit.Pattern" Analyze="True" />
          <Member Name="&lt;RegisterTheorems&gt;b__a(MathNet.Symbolics.Port):MathNet.Symbolics.Manipulation.ManipulationPlan" Analyze="True" />
          <Member Name="&lt;RegisterTheorems&gt;b__b(MathNet.Symbolics.Port,MathNet.Symbolics.Backend.Containers.SignalSet,System.Boolean):System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Signal&gt;" Analyze="True" />
          <Member Name="EntityIdentifier" Analyze="True">
           <Accessors>
            <Accessor Name="get_EntityIdentifier():MathNet.Symbolics.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="RegisterTheorems(MathNet.Symbolics.Library.ILibrary):System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="SineArchitectures" Analyze="True">
         <Members>
          <Member Name=".cctor()" Analyze="True" />
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="_entityId" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__0(MathNet.Symbolics.Port):MathNet.Symbolics.Packages.ObjectModel.ProcessBase[]" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__1(MathNet.Symbolics.Packages.Standard.Structures.RealValue):MathNet.Symbolics.Packages.Standard.Structures.RealValue" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__2(MathNet.Symbolics.Port):MathNet.Symbolics.Packages.ObjectModel.ProcessBase[]" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__3(MathNet.Symbolics.Packages.Standard.Structures.ComplexValue):MathNet.Symbolics.Packages.Standard.Structures.ComplexValue" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate4" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate5" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate6" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate7" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate9" Analyze="True" />
          <Member Name="&lt;RegisterTheorems&gt;b__8(MathNet.Symbolics.Port,MathNet.Symbolics.Backend.Containers.SignalSet,MathNet.Symbolics.Signal,System.Boolean):System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Signal&gt;" Analyze="True" />
          <Member Name="EntityIdentifier" Analyze="True">
           <Accessors>
            <Accessor Name="get_EntityIdentifier():MathNet.Symbolics.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="RegisterTheorems(MathNet.Symbolics.Library.ILibrary):System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="TangentArchitectures" Analyze="True">
         <Members>
          <Member Name=".cctor()" Analyze="True" />
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="_entityId" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__0(MathNet.Symbolics.Port):MathNet.Symbolics.Packages.ObjectModel.ProcessBase[]" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__1(MathNet.Symbolics.Packages.Standard.Structures.RealValue):MathNet.Symbolics.Packages.Standard.Structures.RealValue" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__2(MathNet.Symbolics.Port):MathNet.Symbolics.Packages.ObjectModel.ProcessBase[]" Analyze="True" />
          <Member Name="&lt;.ctor&gt;b__3(MathNet.Symbolics.Packages.Standard.Structures.ComplexValue):MathNet.Symbolics.Packages.Standard.Structures.ComplexValue" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate4" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate5" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate6" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegate7" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegatec" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegated" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegatee" Analyze="True" />
          <Member Name="&lt;&gt;9__CachedAnonymousMethodDelegatef" Analyze="True" />
          <Member Name="&lt;RegisterTheorems&gt;b__8(MathNet.Symbolics.Port,MathNet.Symbolics.Backend.Containers.SignalSet,MathNet.Symbolics.Signal,System.Boolean):System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Signal&gt;" Analyze="True" />
          <Member Name="&lt;RegisterTheorems&gt;b__9():MathNet.Symbolics.Patterns.Toolkit.Pattern" Analyze="True" />
          <Member Name="&lt;RegisterTheorems&gt;b__a(MathNet.Symbolics.Port):MathNet.Symbolics.Manipulation.ManipulationPlan" Analyze="True" />
          <Member Name="&lt;RegisterTheorems&gt;b__b(MathNet.Symbolics.Port,MathNet.Symbolics.Backend.Containers.SignalSet,System.Boolean):System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Signal&gt;" Analyze="True" />
          <Member Name="EntityIdentifier" Analyze="True">
           <Accessors>
            <Accessor Name="get_EntityIdentifier():MathNet.Symbolics.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="RegisterTheorems(MathNet.Symbolics.Library.ILibrary):System.Void" Analyze="True" />
         </Members>
        </Type>
       </Types>
      </Namespace>
     </Namespaces>
    </Module>
   </Modules>
  </Target>
  <Target Name="$(ProjectDir)/src/app/MathNet.Yttrium/Patterns.Toolkit/bin/Debug/MathNet.Yttrium.Patterns.Toolkit.dll" Analyze="True">
   <Modules>
    <Module Name="mathnet.yttrium.patterns.toolkit.dll" Analyze="True">
     <Namespaces>
      <Namespace Name="" Analyze="True">
       <Types>
        <Type Name="&lt;Module&gt;" Analyze="True" />
       </Types>
      </Namespace>
      <Namespace Name="MathNet.Symbolics.Patterns.Toolkit" Analyze="True">
       <Types>
        <Type Name="AlwaysTrueCondition" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="_instance" Analyze="True" />
          <Member Name="CouldMergeToCoalescedTreeNode(MathNet.Symbolics.Patterns.Toolkit.Condition):System.Boolean" Analyze="True" />
          <Member Name="Equals(MathNet.Symbolics.Patterns.Toolkit.Condition):System.Boolean" Analyze="True" />
          <Member Name="FulfillsCondition(MathNet.Symbolics.Signal,MathNet.Symbolics.Port):System.Boolean" Analyze="True" />
          <Member Name="Instance" Analyze="True">
           <Accessors>
            <Accessor Name="get_Instance():MathNet.Symbolics.Patterns.Toolkit.AlwaysTrueCondition" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="MergeToCoalescedTreeNode(MathNet.Symbolics.Patterns.Toolkit.CoalescedTreeNode,System.Collections.Generic.List`1&lt;MathNet.Symbolics.Patterns.Toolkit.CoalescedTreeNode&gt;):System.Void" Analyze="True" />
          <Member Name="Score" Analyze="True">
           <Accessors>
            <Accessor Name="get_Score():System.Int32" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="AndCondition" Analyze="True">
         <Members>
          <Member Name=".ctor(MathNet.Symbolics.Patterns.Toolkit.Condition[])" Analyze="True" />
          <Member Name=".ctor(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Patterns.Toolkit.Condition&gt;)" Analyze="True" />
          <Member Name="_conditions" Analyze="True" />
          <Member Name="CouldMergeToCoalescedTreeNode(MathNet.Symbolics.Patterns.Toolkit.Condition):System.Boolean" Analyze="True" />
          <Member Name="Equals(MathNet.Symbolics.Patterns.Toolkit.Condition):System.Boolean" Analyze="True" />
          <Member Name="FulfillsCondition(MathNet.Symbolics.Signal,MathNet.Symbolics.Port):System.Boolean" Analyze="True" />
          <Member Name="MergeToCoalescedTreeNode(MathNet.Symbolics.Patterns.Toolkit.CoalescedTreeNode,System.Collections.Generic.List`1&lt;MathNet.Symbolics.Patterns.Toolkit.CoalescedTreeNode&gt;):System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="ArchitectureCondition" Analyze="True">
         <Members>
          <Member Name=".ctor(System.Predicate`1&lt;MathNet.Symbolics.IArchitecture&gt;)" Analyze="True" />
          <Member Name="_match" Analyze="True" />
          <Member Name="Equals(MathNet.Symbolics.Patterns.Toolkit.Condition):System.Boolean" Analyze="True" />
          <Member Name="FulfillsCondition(MathNet.Symbolics.Signal,MathNet.Symbolics.Port):System.Boolean" Analyze="True" />
         </Members>
        </Type>
        <Type Name="CoalescedChildPattern" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="_childAxis" Analyze="True" />
          <Member Name="AddChild(MathNet.Symbolics.Patterns.Toolkit.CoalescedTreeNode):System.Void" Analyze="True" />
          <Member Name="ChildrenAxis" Analyze="True">
           <Accessors>
            <Accessor Name="get_ChildrenAxis():System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Patterns.Toolkit.CoalescedTreeNode&gt;" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="MatchAll(MathNet.Symbolics.Port,System.Int32):MathNet.Symbolics.Patterns.Toolkit.MatchCollection" Analyze="True" />
          <Member Name="MatchFirst(MathNet.Symbolics.Port):MathNet.Symbolics.Patterns.Toolkit.Match" Analyze="True" />
         </Members>
        </Type>
        <Type Name="CoalescedTreeNode" Analyze="True">
         <Members>
          <Member Name=".ctor(MathNet.Symbolics.Patterns.Toolkit.Condition)" Analyze="True" />
          <Member Name="_condition" Analyze="True" />
          <Member Name="_conditionAxis" Analyze="True" />
          <Member Name="_groupAxis" Analyze="True" />
          <Member Name="_patternAxis" Analyze="True" />
          <Member Name="_subscriptionAxis" Analyze="True" />
          <Member Name="AddGroup(MathNet.Symbolics.MathIdentifier,System.String):System.Void" Analyze="True" />
          <Member Name="Condition" Analyze="True">
           <Accessors>
            <Accessor Name="get_Condition():MathNet.Symbolics.Patterns.Toolkit.Condition" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ConditionAxis" Analyze="True">
           <Accessors>
            <Accessor Name="get_ConditionAxis():System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Patterns.Toolkit.CoalescedTreeNode&gt;" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="CreateRootTree():System.Collections.Generic.List`1&lt;MathNet.Symbolics.Patterns.Toolkit.CoalescedTreeNode&gt;" Analyze="True" />
          <Member Name="CreateRootTree(MathNet.Symbolics.Patterns.Toolkit.CoalescedTreeNode&amp;):System.Collections.Generic.List`1&lt;MathNet.Symbolics.Patterns.Toolkit.CoalescedTreeNode&gt;" Analyze="True" />
          <Member Name="GroupAxis" Analyze="True">
           <Accessors>
            <Accessor Name="get_GroupAxis():System.Collections.Generic.IDictionary`2&lt;MathNet.Symbolics.MathIdentifier,System.String&gt;" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="MatchAll(MathNet.Symbolics.Signal,MathNet.Symbolics.Port,System.Int32):MathNet.Symbolics.Patterns.Toolkit.MatchCollection" Analyze="True" />
          <Member Name="MatchFirst(MathNet.Symbolics.Signal,MathNet.Symbolics.Port):MathNet.Symbolics.Patterns.Toolkit.Match" Analyze="True" />
          <Member Name="PatternAxis" Analyze="True">
           <Accessors>
            <Accessor Name="get_PatternAxis():System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Patterns.Toolkit.CoalescedChildPattern&gt;" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="RemoveGroup(MathNet.Symbolics.MathIdentifier):System.Void" Analyze="True" />
          <Member Name="Subscribe(MathNet.Symbolics.MathIdentifier):System.Void" Analyze="True" />
          <Member Name="SubscriptionAxis" Analyze="True">
           <Accessors>
            <Accessor Name="get_SubscriptionAxis():System.Collections.Generic.IList`1&lt;MathNet.Symbolics.MathIdentifier&gt;" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Unsubscribe(MathNet.Symbolics.MathIdentifier):System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="CombinationMode" Analyze="True">
         <Members>
          <Member Name="All" Analyze="True" />
          <Member Name="AtLeastOne" Analyze="True" />
          <Member Name="AtMostOne" Analyze="True" />
          <Member Name="None" Analyze="True" />
          <Member Name="One" Analyze="True" />
          <Member Name="value__" Analyze="True" />
         </Members>
        </Type>
        <Type Name="Condition" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="CouldMergeToCoalescedTree(MathNet.Symbolics.Patterns.Toolkit.CoalescedTreeNode):System.Boolean" Analyze="True" />
          <Member Name="CouldMergeToCoalescedTreeNode(MathNet.Symbolics.Patterns.Toolkit.Condition):System.Boolean" Analyze="True" />
          <Member Name="Equals(MathNet.Symbolics.Patterns.Toolkit.Condition):System.Boolean" Analyze="True" />
          <Member Name="FulfillsCondition(MathNet.Symbolics.Signal,MathNet.Symbolics.Port):System.Boolean" Analyze="True" />
          <Member Name="IteratorEquals(System.Collections.Generic.IEnumerator`1&lt;MathNet.Symbolics.Patterns.Toolkit.Condition&gt;,System.Collections.Generic.IEnumerator`1&lt;MathNet.Symbolics.Patterns.Toolkit.Condition&gt;):System.Boolean" Analyze="True" />
          <Member Name="MergeToCoalescedTree():System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Patterns.Toolkit.CoalescedTreeNode&gt;" Analyze="True" />
          <Member Name="MergeToCoalescedTree(System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Patterns.Toolkit.CoalescedTreeNode&gt;):System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Patterns.Toolkit.CoalescedTreeNode&gt;" Analyze="True" />
          <Member Name="MergeToCoalescedTreeNode(MathNet.Symbolics.Patterns.Toolkit.CoalescedTreeNode,System.Collections.Generic.List`1&lt;MathNet.Symbolics.Patterns.Toolkit.CoalescedTreeNode&gt;):System.Void" Analyze="True" />
          <Member Name="Score" Analyze="True">
           <Accessors>
            <Accessor Name="get_Score():System.Int32" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="TryGetExistingNode(MathNet.Symbolics.Patterns.Toolkit.CoalescedTreeNode,MathNet.Symbolics.Patterns.Toolkit.Condition,MathNet.Symbolics.Patterns.Toolkit.CoalescedTreeNode&amp;):System.Boolean" Analyze="True" />
         </Members>
        </Type>
        <Type Name="EntityCondition" Analyze="True">
         <Members>
          <Member Name=".ctor(MathNet.Symbolics.MathIdentifier)" Analyze="True" />
          <Member Name=".ctor(System.String,System.String)" Analyze="True" />
          <Member Name="_entityId" Analyze="True" />
          <Member Name="EntityId" Analyze="True">
           <Accessors>
            <Accessor Name="get_EntityId():MathNet.Symbolics.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Equals(MathNet.Symbolics.Patterns.Toolkit.Condition):System.Boolean" Analyze="True" />
          <Member Name="FulfillsCondition(MathNet.Symbolics.Signal,MathNet.Symbolics.Port):System.Boolean" Analyze="True" />
         </Members>
        </Type>
        <Type Name="Group" Analyze="True">
         <Members>
          <Member Name=".ctor(System.String)" Analyze="True" />
          <Member Name="_label" Analyze="True" />
          <Member Name="AddRange(System.Collections.Generic.IEnumerable`1&lt;MathNet.Numerics.Tuple`2&lt;MathNet.Symbolics.Signal,MathNet.Symbolics.Port&gt;&gt;):System.Void" Analyze="True" />
          <Member Name="Label" Analyze="True">
           <Accessors>
            <Accessor Name="get_Label():System.String" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="GroupCollection" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="Append(MathNet.Symbolics.Patterns.Toolkit.Group):System.Void" Analyze="True" />
          <Member Name="Append(System.String,MathNet.Numerics.Tuple`2&lt;MathNet.Symbolics.Signal,MathNet.Symbolics.Port&gt;):System.Void" Analyze="True" />
          <Member Name="Append(System.String,System.Collections.Generic.IEnumerable`1&lt;MathNet.Numerics.Tuple`2&lt;MathNet.Symbolics.Signal,MathNet.Symbolics.Port&gt;&gt;):System.Void" Analyze="True" />
          <Member Name="GetKeyForItem(MathNet.Symbolics.Patterns.Toolkit.Group):System.String" Analyze="True" />
          <Member Name="TryGetValue(System.String,MathNet.Symbolics.Patterns.Toolkit.Group&amp;):System.Boolean" Analyze="True" />
         </Members>
        </Type>
        <Type Name="InputSignalsPropertyCondition" Analyze="True">
         <Members>
          <Member Name=".ctor(MathNet.Symbolics.MathIdentifier,MathNet.Symbolics.Patterns.Toolkit.CombinationMode)" Analyze="True" />
          <Member Name="_mode" Analyze="True" />
          <Member Name="_propertyType" Analyze="True" />
          <Member Name="Equals(MathNet.Symbolics.Patterns.Toolkit.Condition):System.Boolean" Analyze="True" />
          <Member Name="FulfillsCondition(MathNet.Symbolics.Signal,MathNet.Symbolics.Port):System.Boolean" Analyze="True" />
         </Members>
        </Type>
        <Type Name="Match" Analyze="True">
         <Members>
          <Member Name=".ctor(MathNet.Symbolics.MathIdentifier,System.Int32)" Analyze="True" />
          <Member Name="_groups" Analyze="True" />
          <Member Name="_patternId" Analyze="True" />
          <Member Name="_score" Analyze="True" />
          <Member Name="AppendGroup(MathNet.Symbolics.Patterns.Toolkit.Group):System.Void" Analyze="True" />
          <Member Name="AppendGroup(System.String,MathNet.Numerics.Tuple`2&lt;MathNet.Symbolics.Signal,MathNet.Symbolics.Port&gt;):System.Void" Analyze="True" />
          <Member Name="AppendGroup(System.String,System.Collections.Generic.IList`1&lt;MathNet.Numerics.Tuple`2&lt;MathNet.Symbolics.Signal,MathNet.Symbolics.Port&gt;&gt;):System.Void" Analyze="True" />
          <Member Name="GetEnumerator():System.Collections.Generic.IEnumerator`1&lt;MathNet.Symbolics.Patterns.Toolkit.Group&gt;" Analyze="True" />
          <Member Name="GroupCount" Analyze="True">
           <Accessors>
            <Accessor Name="get_GroupCount():System.Int32" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Groups" Analyze="True">
           <Accessors>
            <Accessor Name="get_Groups():MathNet.Symbolics.Patterns.Toolkit.GroupCollection" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Item[System.String]" Analyze="True">
           <Accessors>
            <Accessor Name="get_Item(System.String):MathNet.Symbolics.Patterns.Toolkit.Group" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="MatchAll(MathNet.Symbolics.Signal,MathNet.Symbolics.Port,MathNet.Symbolics.Patterns.Toolkit.CoalescedTreeNode):MathNet.Symbolics.Patterns.Toolkit.MatchCollection" Analyze="True" />
          <Member Name="MatchBest(MathNet.Symbolics.Signal,MathNet.Symbolics.Port,MathNet.Symbolics.Patterns.Toolkit.CoalescedTreeNode):MathNet.Symbolics.Patterns.Toolkit.Match" Analyze="True" />
          <Member Name="MatchFirst(MathNet.Symbolics.Signal,MathNet.Symbolics.Port,MathNet.Symbolics.Patterns.Toolkit.CoalescedTreeNode):MathNet.Symbolics.Patterns.Toolkit.Match" Analyze="True" />
          <Member Name="MergeWithMatch(MathNet.Symbolics.Patterns.Toolkit.Match):System.Void" Analyze="True" />
          <Member Name="PatternId" Analyze="True">
           <Accessors>
            <Accessor Name="get_PatternId():MathNet.Symbolics.MathIdentifier" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Score" Analyze="True">
           <Accessors>
            <Accessor Name="get_Score():System.Int32" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="System.Collections.IEnumerable.GetEnumerator():System.Collections.IEnumerator" Analyze="True" />
          <Member Name="TryMatchBest(MathNet.Symbolics.Signal,MathNet.Symbolics.Port,MathNet.Symbolics.Patterns.Toolkit.CoalescedTreeNode,MathNet.Symbolics.Patterns.Toolkit.Match&amp;):System.Boolean" Analyze="True" />
          <Member Name="TryMatchFirst(MathNet.Symbolics.Signal,MathNet.Symbolics.Port,MathNet.Symbolics.Patterns.Toolkit.CoalescedTreeNode,MathNet.Symbolics.Patterns.Toolkit.Match&amp;):System.Boolean" Analyze="True" />
         </Members>
        </Type>
        <Type Name="MatchCollection" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="CombineIntersect(System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Patterns.Toolkit.MatchCollection&gt;):MathNet.Symbolics.Patterns.Toolkit.MatchCollection" Analyze="True" />
          <Member Name="CombineIntersectFirst(System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Patterns.Toolkit.MatchCollection&gt;):MathNet.Symbolics.Patterns.Toolkit.Match" Analyze="True" />
          <Member Name="CombineUnion(System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Patterns.Toolkit.MatchCollection&gt;):MathNet.Symbolics.Patterns.Toolkit.MatchCollection" Analyze="True" />
          <Member Name="GetKeyForItem(MathNet.Symbolics.Patterns.Toolkit.Match):MathNet.Symbolics.MathIdentifier" Analyze="True" />
          <Member Name="TryGetValue(MathNet.Symbolics.MathIdentifier,MathNet.Symbolics.Patterns.Toolkit.Match&amp;):System.Boolean" Analyze="True" />
         </Members>
        </Type>
        <Type Name="NotCondition" Analyze="True">
         <Members>
          <Member Name=".ctor(MathNet.Symbolics.Patterns.Toolkit.Condition)" Analyze="True" />
          <Member Name="_condition" Analyze="True" />
          <Member Name="Equals(MathNet.Symbolics.Patterns.Toolkit.Condition):System.Boolean" Analyze="True" />
          <Member Name="FulfillsCondition(MathNet.Symbolics.Signal,MathNet.Symbolics.Port):System.Boolean" Analyze="True" />
         </Members>
        </Type>
        <Type Name="OrCondition" Analyze="True">
         <Members>
          <Member Name=".ctor(MathNet.Symbolics.Patterns.Toolkit.Condition[])" Analyze="True" />
          <Member Name=".ctor(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Patterns.Toolkit.Condition&gt;)" Analyze="True" />
          <Member Name="_conditions" Analyze="True" />
          <Member Name="CouldMergeToCoalescedTreeNode(MathNet.Symbolics.Patterns.Toolkit.Condition):System.Boolean" Analyze="True" />
          <Member Name="Equals(MathNet.Symbolics.Patterns.Toolkit.Condition):System.Boolean" Analyze="True" />
          <Member Name="FulfillsCondition(MathNet.Symbolics.Signal,MathNet.Symbolics.Port):System.Boolean" Analyze="True" />
          <Member Name="MergeToCoalescedTreeNode(MathNet.Symbolics.Patterns.Toolkit.CoalescedTreeNode,System.Collections.Generic.List`1&lt;MathNet.Symbolics.Patterns.Toolkit.CoalescedTreeNode&gt;):System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="OutputSignalsPropertyCondition" Analyze="True">
         <Members>
          <Member Name=".ctor(MathNet.Symbolics.MathIdentifier,MathNet.Symbolics.Patterns.Toolkit.CombinationMode)" Analyze="True" />
          <Member Name="_mode" Analyze="True" />
          <Member Name="_propertyType" Analyze="True" />
          <Member Name="Equals(MathNet.Symbolics.Patterns.Toolkit.Condition):System.Boolean" Analyze="True" />
          <Member Name="FulfillsCondition(MathNet.Symbolics.Signal,MathNet.Symbolics.Port):System.Boolean" Analyze="True" />
         </Members>
        </Type>
        <Type Name="Pattern" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name=".ctor(MathNet.Symbolics.Patterns.Toolkit.Condition)" Analyze="True" />
          <Member Name="_alwaysTrueInstance" Analyze="True" />
          <Member Name="_condition" Analyze="True" />
          <Member Name="_group" Analyze="True" />
          <Member Name="AlwaysTrueInstance" Analyze="True">
           <Accessors>
            <Accessor Name="get_AlwaysTrueInstance():MathNet.Symbolics.Patterns.Toolkit.Pattern" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Condition" Analyze="True">
           <Accessors>
            <Accessor Name="get_Condition():MathNet.Symbolics.Patterns.Toolkit.Condition" Analyze="True" />
            <Accessor Name="set_Condition(MathNet.Symbolics.Patterns.Toolkit.Condition):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Group" Analyze="True">
           <Accessors>
            <Accessor Name="get_Group():System.String" Analyze="True" />
            <Accessor Name="set_Group(System.String):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Match(MathNet.Symbolics.Signal,MathNet.Symbolics.Port):System.Boolean" Analyze="True" />
          <Member Name="MergeGroupToCoalescedTree(MathNet.Symbolics.MathIdentifier,System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Patterns.Toolkit.CoalescedTreeNode&gt;):System.Void" Analyze="True" />
          <Member Name="MergeToCoalescedTree(MathNet.Symbolics.MathIdentifier,System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Patterns.Toolkit.CoalescedTreeNode&gt;):System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="TreePattern" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name=".ctor(MathNet.Symbolics.Patterns.Toolkit.Condition)" Analyze="True" />
          <Member Name="_children" Analyze="True" />
          <Member Name="Add(MathNet.Symbolics.Patterns.Toolkit.Pattern):System.Void" Analyze="True" />
          <Member Name="Match(MathNet.Symbolics.Signal,MathNet.Symbolics.Port):System.Boolean" Analyze="True" />
          <Member Name="MergeToCoalescedTree(MathNet.Symbolics.MathIdentifier,System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Patterns.Toolkit.CoalescedTreeNode&gt;):System.Void" Analyze="True" />
         </Members>
        </Type>
       </Types>
      </Namespace>
     </Namespaces>
    </Module>
   </Modules>
  </Target>
  <Target Name="$(ProjectDir)/src/app/MathNet.Yttrium/Repository.Contracts/bin/Debug/MathNet.Yttrium.Repository.Contracts.dll" Analyze="True">
   <Modules>
    <Module Name="mathnet.yttrium.repository.contracts.dll" Analyze="True">
     <Namespaces>
      <Namespace Name="" Analyze="True">
       <Types>
        <Type Name="&lt;Module&gt;" Analyze="True" />
       </Types>
      </Namespace>
      <Namespace Name="MathNet.Symbolics.Repository" Analyze="True">
       <Types>
        <Type Name="ISignalCache" Analyze="True">
         <Members>
          <Member Name="Add(MathNet.Symbolics.MathIdentifier,MathNet.Symbolics.Signal):System.Void" Analyze="True" />
          <Member Name="ContainsKey(MathNet.Symbolics.MathIdentifier):System.Boolean" Analyze="True" />
          <Member Name="Remove(MathNet.Symbolics.MathIdentifier):System.Boolean" Analyze="True" />
          <Member Name="TryGetValue(MathNet.Symbolics.MathIdentifier,MathNet.Symbolics.Signal&amp;):System.Boolean" Analyze="True" />
         </Members>
        </Type>
       </Types>
      </Namespace>
     </Namespaces>
    </Module>
   </Modules>
  </Target>
  <Target Name="$(ProjectDir)/src/app/MathNet.Yttrium/Repository.Service/bin/Debug/MathNet.Yttrium.Repository.Service.dll" Analyze="True">
   <Modules>
    <Module Name="mathnet.yttrium.repository.service.dll" Analyze="True">
     <Namespaces>
      <Namespace Name="" Analyze="True">
       <Types>
        <Type Name="&lt;Module&gt;" Analyze="True" />
       </Types>
      </Namespace>
      <Namespace Name="MathNet.Symbolics" Analyze="True">
       <Types>
        <Type Name="RepositoryFactory" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="MathNet.Symbolics.IFactory&lt;MathNet.Symbolics.Repository.ISignalCache&gt;.GetInstance():MathNet.Symbolics.Repository.ISignalCache" Analyze="True" />
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="MathNet.Symbolics.Repository" Analyze="True">
       <Types>
        <Type Name="SignalCache" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
         </Members>
        </Type>
       </Types>
      </Namespace>
     </Namespaces>
    </Module>
   </Modules>
  </Target>
  <Target Name="$(ProjectDir)/src/app/MathNet.Yttrium/Simulation.Contracts/bin/Debug/MathNet.Yttrium.Simulation.Contracts.dll" Analyze="True">
   <Modules>
    <Module Name="mathnet.yttrium.simulation.contracts.dll" Analyze="True">
     <Namespaces>
      <Namespace Name="" Analyze="True">
       <Types>
        <Type Name="&lt;Module&gt;" Analyze="True" />
       </Types>
      </Namespace>
      <Namespace Name="MathNet.Symbolics.Simulation" Analyze="True">
       <Types>
        <Type Name="ISchedulable" Analyze="True">
         <Members>
          <Member Name="CurrentValue" Analyze="True">
           <Accessors>
            <Accessor Name="get_CurrentValue():MathNet.Symbolics.IValueStructure" Analyze="True" />
            <Accessor Name="set_CurrentValue(MathNet.Symbolics.IValueStructure):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="HasEvent" Analyze="True">
           <Accessors>
            <Accessor Name="get_HasEvent():System.Boolean" Analyze="True" />
            <Accessor Name="set_HasEvent(System.Boolean):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="InstanceId" Analyze="True">
           <Accessors>
            <Accessor Name="get_InstanceId():System.Guid" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="NotifyOutputsNewValue():System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="IScheduler" Analyze="True">
         <Members>
          <Member Name="SimulationTimeProgress" Kind="Event" Analyze="True">
           <Accessors>
            <Accessor Name="add_SimulationTimeProgress(System.EventHandler`1&lt;MathNet.Symbolics.Simulation.SimulationTimeEventArgs&gt;):System.Void" Analyze="True" />
            <Accessor Name="remove_SimulationTimeProgress(System.EventHandler`1&lt;MathNet.Symbolics.Simulation.SimulationTimeEventArgs&gt;):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ResetSimulationTime():System.Void" Analyze="True" />
          <Member Name="ScheduleDelayedEvent(MathNet.Symbolics.Simulation.ISchedulable,MathNet.Symbolics.IValueStructure,System.TimeSpan):System.Void" Analyze="True" />
          <Member Name="ScheduleDeltaEvent(MathNet.Symbolics.Simulation.ISchedulable,MathNet.Symbolics.IValueStructure):System.Void" Analyze="True" />
          <Member Name="SimulateFor(System.Int32):System.TimeSpan" Analyze="True" />
          <Member Name="SimulateFor(System.TimeSpan):System.TimeSpan" Analyze="True" />
          <Member Name="SimulateInstant():System.Boolean" Analyze="True" />
          <Member Name="SimulationTime" Analyze="True">
           <Accessors>
            <Accessor Name="get_SimulationTime():System.TimeSpan" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="ISimulationMediator" Analyze="True">
         <Members>
          <Member Name="CreateSimulationApartement(MathNet.Symbolics.Simulation.IScheduler):System.Void" Analyze="True" />
          <Member Name="GetCurrentScheduler():MathNet.Symbolics.Simulation.IScheduler" Analyze="True" />
          <Member Name="ScheduleDelayedEvent(MathNet.Symbolics.Simulation.ISchedulable,MathNet.Symbolics.IValueStructure,System.TimeSpan):System.Void" Analyze="True" />
          <Member Name="ScheduleDeltaEvent(MathNet.Symbolics.Simulation.ISchedulable,MathNet.Symbolics.IValueStructure):System.Void" Analyze="True" />
          <Member Name="SimulateFor(System.Int32):System.TimeSpan" Analyze="True" />
          <Member Name="SimulateFor(System.TimeSpan):System.TimeSpan" Analyze="True" />
          <Member Name="SimulateInstant():System.Boolean" Analyze="True" />
         </Members>
        </Type>
        <Type Name="SimulationTimeEventArgs" Analyze="True">
         <Members>
          <Member Name=".ctor(System.TimeSpan)" Analyze="True" />
          <Member Name="_timeSpan" Analyze="True" />
          <Member Name="TimeSpan" Analyze="True">
           <Accessors>
            <Accessor Name="get_TimeSpan():System.TimeSpan" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
     </Namespaces>
    </Module>
   </Modules>
  </Target>
  <Target Name="$(ProjectDir)/src/app/MathNet.Yttrium/Simulation.Service/bin/Debug/MathNet.Yttrium.Simulation.Service.dll" Analyze="True">
   <Modules>
    <Module Name="mathnet.yttrium.simulation.service.dll" Analyze="True">
     <Namespaces>
      <Namespace Name="" Analyze="True">
       <Types>
        <Type Name="&lt;Module&gt;" Analyze="True" />
       </Types>
      </Namespace>
      <Namespace Name="MathNet.Symbolics" Analyze="True">
       <Types>
        <Type Name="SimulationFactory" Analyze="True">
         <Members>
          <Member Name=".cctor()" Analyze="True" />
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="_mediator" Analyze="True" />
          <Member Name="MathNet.Symbolics.IFactory&lt;MathNet.Symbolics.Simulation.ISimulationMediator&gt;.GetInstance():MathNet.Symbolics.Simulation.ISimulationMediator" Analyze="True" />
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="MathNet.Symbolics.Simulation" Analyze="True">
       <Types>
        <Type Name="ImmediateScheduler" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="_deltaEvents" Analyze="True" />
          <Member Name="_phase" Analyze="True" />
          <Member Name="_schedulablesWithEvent" Analyze="True" />
          <Member Name="_schedule" Analyze="True" />
          <Member Name="_simulationTime" Analyze="True" />
          <Member Name="_timeline" Analyze="True" />
          <Member Name="SimulationTimeProgress" Kind="Event" Analyze="True">
           <Accessors>
            <Accessor Name="add_SimulationTimeProgress(System.EventHandler`1&lt;MathNet.Symbolics.Simulation.SimulationTimeEventArgs&gt;):System.Void" Analyze="True" />
            <Accessor Name="remove_SimulationTimeProgress(System.EventHandler`1&lt;MathNet.Symbolics.Simulation.SimulationTimeEventArgs&gt;):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="OnSimulationTimeProgress(System.TimeSpan):System.Void" Analyze="True" />
          <Member Name="ResetSimulationTime():System.Void" Analyze="True" />
          <Member Name="RunProcessExecutionPhase():System.Void" Analyze="True" />
          <Member Name="RunSignalAssignmentPhase(System.Boolean):System.TimeSpan" Analyze="True" />
          <Member Name="ScheduleDelayedEvent(MathNet.Symbolics.Simulation.ISchedulable,MathNet.Symbolics.IValueStructure,System.TimeSpan):System.Void" Analyze="True" />
          <Member Name="ScheduleDeltaEvent(MathNet.Symbolics.Simulation.ISchedulable,MathNet.Symbolics.IValueStructure):System.Void" Analyze="True" />
          <Member Name="SimulateFor(System.Int32):System.TimeSpan" Analyze="True" />
          <Member Name="SimulateFor(System.TimeSpan):System.TimeSpan" Analyze="True" />
          <Member Name="SimulateInstant():System.Boolean" Analyze="True" />
          <Member Name="SimulationTime" Analyze="True">
           <Accessors>
            <Accessor Name="get_SimulationTime():System.TimeSpan" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="SimulationTimeProgress" Analyze="True" />
         </Members>
        </Type>
        <Type Name="SchedulerEventItem" Analyze="True">
         <Members>
          <Member Name=".ctor(MathNet.Symbolics.Simulation.ISchedulable,MathNet.Symbolics.IValueStructure,System.TimeSpan)" Analyze="True" />
          <Member Name="_subject" Analyze="True" />
          <Member Name="_timeSpan" Analyze="True" />
          <Member Name="_value" Analyze="True" />
          <Member Name="Subject" Analyze="True">
           <Accessors>
            <Accessor Name="get_Subject():MathNet.Symbolics.Simulation.ISchedulable" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="TimeSpan" Analyze="True">
           <Accessors>
            <Accessor Name="get_TimeSpan():System.TimeSpan" Analyze="True" />
            <Accessor Name="set_TimeSpan(System.TimeSpan):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Value" Analyze="True">
           <Accessors>
            <Accessor Name="get_Value():MathNet.Symbolics.IValueStructure" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="SchedulerPhase" Analyze="True">
         <Members>
          <Member Name="Idle" Analyze="True" />
          <Member Name="ProcessExecution" Analyze="True" />
          <Member Name="SignalAssignment" Analyze="True" />
          <Member Name="value__" Analyze="True" />
         </Members>
        </Type>
        <Type Name="ScheduleStore" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="_delayedEvents" Analyze="True" />
          <Member Name="ProgressTime(System.TimeSpan,MathNet.Symbolics.Simulation.IScheduler):System.Void" Analyze="True" />
          <Member Name="RemoveAllAfterIncluding(System.Collections.Generic.LinkedList`1&lt;MathNet.Symbolics.Simulation.SchedulerEventItem&gt;,System.Collections.Generic.LinkedListNode`1&lt;MathNet.Symbolics.Simulation.SchedulerEventItem&gt;):System.Void" Analyze="True" />
          <Member Name="ScheduleDelayedEvent(MathNet.Symbolics.Simulation.ISchedulable,MathNet.Symbolics.IValueStructure,System.TimeSpan):System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="SimulationMediator" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="_schedulerStack" Analyze="True" />
          <Member Name="CreateSimulationApartement(MathNet.Symbolics.Simulation.IScheduler):System.Void" Analyze="True" />
          <Member Name="GetCurrentScheduler():MathNet.Symbolics.Simulation.IScheduler" Analyze="True" />
          <Member Name="MathContext_ContextExpired(System.Object,MathNet.Symbolics.Events.MathContextEventArgs):System.Void" Analyze="True" />
          <Member Name="ScheduleDelayedEvent(MathNet.Symbolics.Simulation.ISchedulable,MathNet.Symbolics.IValueStructure,System.TimeSpan):System.Void" Analyze="True" />
          <Member Name="ScheduleDeltaEvent(MathNet.Symbolics.Simulation.ISchedulable,MathNet.Symbolics.IValueStructure):System.Void" Analyze="True" />
          <Member Name="SimulateFor(System.Int32):System.TimeSpan" Analyze="True" />
          <Member Name="SimulateFor(System.TimeSpan):System.TimeSpan" Analyze="True" />
          <Member Name="SimulateInstant():System.Boolean" Analyze="True" />
         </Members>
        </Type>
        <Type Name="Timeline" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="_timeline" Analyze="True" />
          <Member Name="InsertTime(System.TimeSpan):System.Void" Analyze="True" />
          <Member Name="TryNextEventTime(System.TimeSpan&amp;):System.Boolean" Analyze="True" />
         </Members>
        </Type>
       </Types>
      </Namespace>
     </Namespaces>
    </Module>
   </Modules>
  </Target>
  <Target Name="$(ProjectDir)/src/app/MathNet.Yttrium/SystemBuilder.Toolkit/bin/Debug/MathNet.Yttrium.SystemBuilder.Toolkit.dll" Analyze="True">
   <Modules>
    <Module Name="mathnet.yttrium.systembuilder.toolkit.dll" Analyze="True">
     <Namespaces>
      <Namespace Name="" Analyze="True">
       <Types>
        <Type Name="&lt;Module&gt;" Analyze="True" />
       </Types>
      </Namespace>
      <Namespace Name="MathNet.Symbolics.SystemBuilder.Toolkit" Analyze="True">
       <Types>
        <Type Name="BuilderState" Analyze="True">
         <Members>
          <Member Name="Buses" Analyze="True" />
          <Member Name="Idle" Analyze="True" />
          <Member Name="InputSignals" Analyze="True" />
          <Member Name="NamedBuses" Analyze="True" />
          <Member Name="NamedSignals" Analyze="True" />
          <Member Name="OutputSignals" Analyze="True" />
          <Member Name="Ports" Analyze="True" />
          <Member Name="SignalDetails" Analyze="True" />
          <Member Name="Signals" Analyze="True" />
          <Member Name="System" Analyze="True" />
          <Member Name="value__" Analyze="True" />
         </Members>
        </Type>
        <Type Name="BuilderStateMachine" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="_state" Analyze="True" />
          <Member Name="AdvanceTo(MathNet.Symbolics.SystemBuilder.Toolkit.BuilderState):System.Void" Analyze="True" />
          <Member Name="CanAdvanceTo(MathNet.Symbolics.SystemBuilder.Toolkit.BuilderState):System.Boolean" Analyze="True" />
          <Member Name="CurrentState" Analyze="True">
           <Accessors>
            <Accessor Name="get_CurrentState():MathNet.Symbolics.SystemBuilder.Toolkit.BuilderState" Analyze="True" />
            <Accessor Name="set_CurrentState(MathNet.Symbolics.SystemBuilder.Toolkit.BuilderState):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="IsInsideGroup" Analyze="True">
           <Accessors>
            <Accessor Name="get_IsInsideGroup():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="IsInsideSystem" Analyze="True">
           <Accessors>
            <Accessor Name="get_IsInsideSystem():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="OnAfterAdvance(MathNet.Symbolics.SystemBuilder.Toolkit.BuilderState,MathNet.Symbolics.SystemBuilder.Toolkit.BuilderState,System.Boolean,System.Boolean):System.Void" Analyze="True" />
          <Member Name="Reset():System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="CustomDataPack`1" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name=".ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" Analyze="True" />
          <Member Name=".ctor(System.String)" Analyze="True" />
          <Member Name="_serializedXmlFragment" Analyze="True" />
          <Member Name="Pack(T,System.Collections.Generic.IDictionary`2&lt;System.Guid,System.Guid&gt;,System.Collections.Generic.IDictionary`2&lt;System.Guid,System.Guid&gt;):MathNet.Symbolics.SystemBuilder.Toolkit.CustomDataPack`1&lt;T&gt;" Analyze="True" />
          <Member Name="Repack(System.String,System.Collections.Generic.IDictionary`2&lt;System.Guid,System.Guid&gt;,System.Collections.Generic.IDictionary`2&lt;System.Guid,System.Guid&gt;):MathNet.Symbolics.SystemBuilder.Toolkit.CustomDataPack`1&lt;T&gt;" Analyze="True" />
          <Member Name="SerializedXmlFragment" Analyze="True">
           <Accessors>
            <Accessor Name="get_SerializedXmlFragment():System.String" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext):System.Void" Analyze="True" />
          <Member Name="System.Xml.Serialization.IXmlSerializable.GetSchema():System.Xml.Schema.XmlSchema" Analyze="True" />
          <Member Name="System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader):System.Void" Analyze="True" />
          <Member Name="System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter):System.Void" Analyze="True" />
          <Member Name="Unpack(System.Collections.Generic.IDictionary`2&lt;System.Guid,MathNet.Symbolics.Signal&gt;,System.Collections.Generic.IDictionary`2&lt;System.Guid,MathNet.Symbolics.Bus&gt;):T" Analyze="True" />
         </Members>
        </Type>
        <Type Name="ExpressionWriter" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="_busMappings" Analyze="True" />
          <Member Name="_current" Analyze="True" />
          <Member Name="_signalMappings" Analyze="True" />
          <Member Name="_writtenExpressions" Analyze="True" />
          <Member Name="AppendSignalConstraint(System.Guid,MathNet.Symbolics.ICustomDataPack`1&lt;MathNet.Symbolics.IProperty&gt;):System.Void" Analyze="True" />
          <Member Name="AppendSignalProperty(System.Guid,MathNet.Symbolics.ICustomDataPack`1&lt;MathNet.Symbolics.IProperty&gt;):System.Void" Analyze="True" />
          <Member Name="AppendSignalValue(System.Guid,MathNet.Symbolics.ICustomDataPack`1&lt;MathNet.Symbolics.IValueStructure&gt;):System.Void" Analyze="True" />
          <Member Name="AppendSystemInputSignal(System.Guid):System.Void" Analyze="True" />
          <Member Name="AppendSystemNamedBus(System.Guid,System.String):System.Void" Analyze="True" />
          <Member Name="AppendSystemNamedSignal(System.Guid,System.String):System.Void" Analyze="True" />
          <Member Name="AppendSystemOutputSignal(System.Guid):System.Void" Analyze="True" />
          <Member Name="BeginBuildSystem(System.Int32,System.Int32,System.Int32):System.Void" Analyze="True" />
          <Member Name="BuildBus(System.String):System.Guid" Analyze="True" />
          <Member Name="BuildPort(MathNet.Symbolics.MathIdentifier,MathNet.Symbolics.Backend.Containers.InstanceIdSet,MathNet.Symbolics.Backend.Containers.InstanceIdSet,MathNet.Symbolics.Backend.Containers.InstanceIdSet):System.Guid" Analyze="True" />
          <Member Name="BuildSignal(System.String,System.Boolean,System.Boolean):System.Guid" Analyze="True" />
          <Member Name="EndBuildSystem():System.Void" Analyze="True" />
          <Member Name="WrittenExpressions" Analyze="True">
           <Accessors>
            <Accessor Name="get_WrittenExpressions():System.Collections.Generic.Queue`1&lt;System.String&gt;" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="SystemReader" Analyze="True">
         <Members>
          <Member Name=".ctor(MathNet.Symbolics.ISystemBuilder)" Analyze="True" />
          <Member Name="_builder" Analyze="True" />
          <Member Name="ReadSystem(MathNet.Symbolics.IMathSystem):System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="SystemWriter" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="_busMappings" Analyze="True" />
          <Member Name="_signalMappings" Analyze="True" />
          <Member Name="_system" Analyze="True" />
          <Member Name="_writtenSystems" Analyze="True" />
          <Member Name="&lt;MapBuses&gt;b__1(System.Guid):MathNet.Symbolics.Bus" Analyze="True" />
          <Member Name="&lt;MapSignals&gt;b__0(System.Guid):MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="AppendSignalConstraint(System.Guid,MathNet.Symbolics.ICustomDataPack`1&lt;MathNet.Symbolics.IProperty&gt;):System.Void" Analyze="True" />
          <Member Name="AppendSignalProperty(System.Guid,MathNet.Symbolics.ICustomDataPack`1&lt;MathNet.Symbolics.IProperty&gt;):System.Void" Analyze="True" />
          <Member Name="AppendSignalValue(System.Guid,MathNet.Symbolics.ICustomDataPack`1&lt;MathNet.Symbolics.IValueStructure&gt;):System.Void" Analyze="True" />
          <Member Name="AppendSystemInputSignal(System.Guid):System.Void" Analyze="True" />
          <Member Name="AppendSystemNamedBus(System.Guid,System.String):System.Void" Analyze="True" />
          <Member Name="AppendSystemNamedSignal(System.Guid,System.String):System.Void" Analyze="True" />
          <Member Name="AppendSystemOutputSignal(System.Guid):System.Void" Analyze="True" />
          <Member Name="BeginBuildSystem(System.Int32,System.Int32,System.Int32):System.Void" Analyze="True" />
          <Member Name="BuildBus(System.String):System.Guid" Analyze="True" />
          <Member Name="BuildPort(MathNet.Symbolics.MathIdentifier,MathNet.Symbolics.Backend.Containers.InstanceIdSet,MathNet.Symbolics.Backend.Containers.InstanceIdSet,MathNet.Symbolics.Backend.Containers.InstanceIdSet):System.Guid" Analyze="True" />
          <Member Name="BuildSignal(System.String,System.Boolean,System.Boolean):System.Guid" Analyze="True" />
          <Member Name="EndBuildSystem():System.Void" Analyze="True" />
          <Member Name="MapBuses(MathNet.Symbolics.Backend.Containers.InstanceIdSet):MathNet.Symbolics.Backend.Containers.BusSet" Analyze="True" />
          <Member Name="MapSignals(MathNet.Symbolics.Backend.Containers.InstanceIdSet):MathNet.Symbolics.Backend.Containers.SignalSet" Analyze="True" />
          <Member Name="WrittenSystems" Analyze="True">
           <Accessors>
            <Accessor Name="get_WrittenSystems():System.Collections.Generic.Queue`1&lt;MathNet.Symbolics.IMathSystem&gt;" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="XmlSystemReader" Analyze="True">
         <Members>
          <Member Name=".ctor(MathNet.Symbolics.ISystemBuilder)" Analyze="True" />
          <Member Name="_builder" Analyze="True" />
          <Member Name="_fsm" Analyze="True" />
          <Member Name="_reader" Analyze="True" />
          <Member Name="ReadSystems(System.Xml.XmlReader,System.Boolean):System.Void" Analyze="True" />
          <Member Name="ReadToElement():System.Boolean" Analyze="True" />
         </Members>
        </Type>
        <Type Name="XmlSystemReader+StateMachine" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name=".ctor(System.Xml.XmlReader)" Analyze="True" />
          <Member Name="_reader" Analyze="True" />
          <Member Name="Reader" Analyze="True">
           <Accessors>
            <Accessor Name="get_Reader():System.Xml.XmlReader" Analyze="True" />
            <Accessor Name="set_Reader(System.Xml.XmlReader):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ReadNextState():MathNet.Symbolics.SystemBuilder.Toolkit.BuilderState" Analyze="True" />
         </Members>
        </Type>
        <Type Name="XmlSystemWriter" Analyze="True">
         <Members>
          <Member Name=".ctor(System.Xml.XmlWriter)" Analyze="True" />
          <Member Name="_fsm" Analyze="True" />
          <Member Name="_writer" Analyze="True" />
          <Member Name="AppendSignalConstraint(System.Guid,MathNet.Symbolics.ICustomDataPack`1&lt;MathNet.Symbolics.IProperty&gt;):System.Void" Analyze="True" />
          <Member Name="AppendSignalProperty(System.Guid,MathNet.Symbolics.ICustomDataPack`1&lt;MathNet.Symbolics.IProperty&gt;):System.Void" Analyze="True" />
          <Member Name="AppendSignalValue(System.Guid,MathNet.Symbolics.ICustomDataPack`1&lt;MathNet.Symbolics.IValueStructure&gt;):System.Void" Analyze="True" />
          <Member Name="AppendSystemInputSignal(System.Guid):System.Void" Analyze="True" />
          <Member Name="AppendSystemNamedBus(System.Guid,System.String):System.Void" Analyze="True" />
          <Member Name="AppendSystemNamedSignal(System.Guid,System.String):System.Void" Analyze="True" />
          <Member Name="AppendSystemOutputSignal(System.Guid):System.Void" Analyze="True" />
          <Member Name="BeginBuildSystem(System.Int32,System.Int32,System.Int32):System.Void" Analyze="True" />
          <Member Name="BuildBus(System.String):System.Guid" Analyze="True" />
          <Member Name="BuildPort(MathNet.Symbolics.MathIdentifier,MathNet.Symbolics.Backend.Containers.InstanceIdSet,MathNet.Symbolics.Backend.Containers.InstanceIdSet,MathNet.Symbolics.Backend.Containers.InstanceIdSet):System.Guid" Analyze="True" />
          <Member Name="BuildSignal(System.String,System.Boolean,System.Boolean):System.Guid" Analyze="True" />
          <Member Name="EndBuildSystem():System.Void" Analyze="True" />
          <Member Name="State" Analyze="True">
           <Accessors>
            <Accessor Name="get_State():MathNet.Symbolics.SystemBuilder.Toolkit.BuilderState" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Writer" Analyze="True">
           <Accessors>
            <Accessor Name="get_Writer():System.Xml.XmlWriter" Analyze="True" />
            <Accessor Name="set_Writer(System.Xml.XmlWriter):System.Void" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="XmlSystemWriter+StateMachine" Analyze="True">
         <Members>
          <Member Name=".ctor(System.Xml.XmlWriter)" Analyze="True" />
          <Member Name="_writer" Analyze="True" />
          <Member Name="OnAfterAdvance(MathNet.Symbolics.SystemBuilder.Toolkit.BuilderState,MathNet.Symbolics.SystemBuilder.Toolkit.BuilderState,System.Boolean,System.Boolean):System.Void" Analyze="True" />
          <Member Name="Writer" Analyze="True">
           <Accessors>
            <Accessor Name="get_Writer():System.Xml.XmlWriter" Analyze="True" />
            <Accessor Name="set_Writer(System.Xml.XmlWriter):System.Void" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
     </Namespaces>
    </Module>
   </Modules>
  </Target>
  <Target Name="$(ProjectDir)/src/app/MathNet.Yttrium/Traversing.Contracts/bin/Debug/MathNet.Yttrium.Traversing.Contracts.dll" Analyze="True">
   <Modules>
    <Module Name="mathnet.yttrium.traversing.contracts.dll" Analyze="True">
     <Namespaces>
      <Namespace Name="" Analyze="True">
       <Types>
        <Type Name="&lt;Module&gt;" Analyze="True" />
       </Types>
      </Namespace>
      <Namespace Name="MathNet.Symbolics.Exceptions" Analyze="True">
       <Types>
        <Type Name="TraversingException" Analyze="True">
         <Members>
          <Member Name=".ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" Analyze="True" />
          <Member Name=".ctor(System.String)" Analyze="True" />
          <Member Name=".ctor(System.String,System.Exception)" Analyze="True" />
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="MathNet.Symbolics.Traversing" Analyze="True">
       <Types>
        <Type Name="AbstractScanVisitor" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="DefaultStrategy" Analyze="True">
           <Accessors>
            <Accessor Name="get_DefaultStrategy():MathNet.Symbolics.Traversing.IScanStrategy" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="EnterPort(MathNet.Symbolics.Port,MathNet.Symbolics.Signal,System.Boolean,System.Boolean):System.Boolean" Analyze="True" />
          <Member Name="EnterSignal(MathNet.Symbolics.Signal,MathNet.Symbolics.Port,System.Boolean,System.Boolean):System.Boolean" Analyze="True" />
          <Member Name="LeavePort(MathNet.Symbolics.Port,MathNet.Symbolics.Signal,System.Boolean,System.Boolean):System.Boolean" Analyze="True" />
          <Member Name="LeaveSignal(MathNet.Symbolics.Signal,MathNet.Symbolics.Port,System.Boolean,System.Boolean):System.Boolean" Analyze="True" />
          <Member Name="VisitCycle(MathNet.Symbolics.Port,MathNet.Symbolics.Signal,MathNet.Symbolics.Signal):System.Boolean" Analyze="True" />
          <Member Name="VisitLeaf(MathNet.Symbolics.Bus,System.Boolean):System.Boolean" Analyze="True" />
          <Member Name="VisitLeaf(MathNet.Symbolics.Port,System.Boolean):System.Boolean" Analyze="True" />
          <Member Name="VisitLeaf(MathNet.Symbolics.Signal,System.Boolean):System.Boolean" Analyze="True" />
         </Members>
        </Type>
        <Type Name="ActionContinue`1" Analyze="True">
         <Members>
          <Member Name=".ctor(System.Object,System.IntPtr)" Analyze="True" />
          <Member Name="BeginInvoke(T,System.AsyncCallback,System.Object):System.IAsyncResult" Analyze="True" />
          <Member Name="EndInvoke(System.IAsyncResult):System.Boolean" Analyze="True" />
          <Member Name="Invoke(T):System.Boolean" Analyze="True" />
         </Members>
        </Type>
        <Type Name="ICollectVisitor" Analyze="True">
         <Members>
          <Member Name="Buses" Analyze="True">
           <Accessors>
            <Accessor Name="get_Buses():System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Bus&gt;" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Ports" Analyze="True">
           <Accessors>
            <Accessor Name="get_Ports():System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Port&gt;" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Reset():System.Void" Analyze="True" />
          <Member Name="Signals" Analyze="True">
           <Accessors>
            <Accessor Name="get_Signals():System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Signal&gt;" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="IExistsPortVisitor" Analyze="True">
         <Members>
          <Member Name="Exists" Analyze="True">
           <Accessors>
            <Accessor Name="get_Exists():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="FoundPort" Analyze="True">
           <Accessors>
            <Accessor Name="get_FoundPort():MathNet.Symbolics.Port" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="FoundPortTarget" Analyze="True">
           <Accessors>
            <Accessor Name="get_FoundPortTarget():MathNet.Symbolics.Signal" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Reset():System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="IExistsSignalVisitor" Analyze="True">
         <Members>
          <Member Name="Exists" Analyze="True">
           <Accessors>
            <Accessor Name="get_Exists():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="FoundSignal" Analyze="True">
           <Accessors>
            <Accessor Name="get_FoundSignal():MathNet.Symbolics.Signal" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="FoundSignalTarget" Analyze="True">
           <Accessors>
            <Accessor Name="get_FoundSignalTarget():MathNet.Symbolics.Port" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Reset():System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="IPortPathCollectVisitor" Analyze="True">
         <Members>
          <Member Name="Paths" Analyze="True">
           <Accessors>
            <Accessor Name="get_Paths():System.Collections.Generic.List`1&lt;System.Collections.Generic.List`1&lt;MathNet.Symbolics.Port&gt;&gt;" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Reset(MathNet.Symbolics.Port):System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="IScanner" Analyze="True">
         <Members>
          <Member Name="ExistsPort(MathNet.Symbolics.Port,System.Predicate`1&lt;MathNet.Symbolics.Port&gt;,System.Boolean):System.Boolean" Analyze="True" />
          <Member Name="ExistsPort(MathNet.Symbolics.Port,System.Predicate`1&lt;MathNet.Symbolics.Port&gt;,System.Boolean,MathNet.Symbolics.Port&amp;,MathNet.Symbolics.Signal&amp;):System.Boolean" Analyze="True" />
          <Member Name="ExistsPort(MathNet.Symbolics.Signal,System.Predicate`1&lt;MathNet.Symbolics.Port&gt;,System.Boolean):System.Boolean" Analyze="True" />
          <Member Name="ExistsPort(MathNet.Symbolics.Signal,System.Predicate`1&lt;MathNet.Symbolics.Port&gt;,System.Boolean,MathNet.Symbolics.Port&amp;,MathNet.Symbolics.Signal&amp;):System.Boolean" Analyze="True" />
          <Member Name="ExistsPort(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Signal&gt;,System.Predicate`1&lt;MathNet.Symbolics.Port&gt;,System.Boolean):System.Boolean" Analyze="True" />
          <Member Name="ExistsPort(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Signal&gt;,System.Predicate`1&lt;MathNet.Symbolics.Port&gt;,System.Boolean,MathNet.Symbolics.Port&amp;,MathNet.Symbolics.Signal&amp;):System.Boolean" Analyze="True" />
          <Member Name="ExistsSignal(MathNet.Symbolics.Port,System.Predicate`1&lt;MathNet.Symbolics.Signal&gt;,System.Boolean):System.Boolean" Analyze="True" />
          <Member Name="ExistsSignal(MathNet.Symbolics.Port,System.Predicate`1&lt;MathNet.Symbolics.Signal&gt;,System.Boolean,MathNet.Symbolics.Signal&amp;,MathNet.Symbolics.Port&amp;):System.Boolean" Analyze="True" />
          <Member Name="ExistsSignal(MathNet.Symbolics.Signal,System.Predicate`1&lt;MathNet.Symbolics.Signal&gt;,System.Boolean):System.Boolean" Analyze="True" />
          <Member Name="ExistsSignal(MathNet.Symbolics.Signal,System.Predicate`1&lt;MathNet.Symbolics.Signal&gt;,System.Boolean,MathNet.Symbolics.Signal&amp;,MathNet.Symbolics.Port&amp;):System.Boolean" Analyze="True" />
          <Member Name="ExistsSignal(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Signal&gt;,System.Predicate`1&lt;MathNet.Symbolics.Signal&gt;,System.Boolean):System.Boolean" Analyze="True" />
          <Member Name="ExistsSignal(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Signal&gt;,System.Predicate`1&lt;MathNet.Symbolics.Signal&gt;,System.Boolean,MathNet.Symbolics.Signal&amp;,MathNet.Symbolics.Port&amp;):System.Boolean" Analyze="True" />
          <Member Name="FindAll(MathNet.Symbolics.Port,System.Boolean,System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Signal&gt;&amp;,System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Port&gt;&amp;):System.Void" Analyze="True" />
          <Member Name="FindAll(MathNet.Symbolics.Signal,System.Boolean,System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Signal&gt;&amp;,System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Port&gt;&amp;):System.Void" Analyze="True" />
          <Member Name="FindAll(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Signal&gt;,System.Boolean,System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Signal&gt;&amp;,System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Port&gt;&amp;):System.Void" Analyze="True" />
          <Member Name="FindAllPortPathsFrom(MathNet.Symbolics.Port,MathNet.Symbolics.Port,System.Boolean):System.Collections.Generic.List`1&lt;System.Collections.Generic.List`1&lt;MathNet.Symbolics.Port&gt;&gt;" Analyze="True" />
          <Member Name="FindAllPortPathsFrom(MathNet.Symbolics.Signal,MathNet.Symbolics.Port,System.Boolean):System.Collections.Generic.List`1&lt;System.Collections.Generic.List`1&lt;MathNet.Symbolics.Port&gt;&gt;" Analyze="True" />
          <Member Name="FindAllPortPathsFrom(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Signal&gt;,MathNet.Symbolics.Port,System.Boolean):System.Collections.Generic.List`1&lt;System.Collections.Generic.List`1&lt;MathNet.Symbolics.Port&gt;&gt;" Analyze="True" />
          <Member Name="FindAllPorts(MathNet.Symbolics.Port,System.Boolean):System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Port&gt;" Analyze="True" />
          <Member Name="FindAllPorts(MathNet.Symbolics.Port,System.Predicate`1&lt;MathNet.Symbolics.Port&gt;,System.Boolean):System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Port&gt;" Analyze="True" />
          <Member Name="FindAllPorts(MathNet.Symbolics.Signal,System.Boolean):System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Port&gt;" Analyze="True" />
          <Member Name="FindAllPorts(MathNet.Symbolics.Signal,System.Predicate`1&lt;MathNet.Symbolics.Port&gt;,System.Boolean):System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Port&gt;" Analyze="True" />
          <Member Name="FindAllPorts(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Signal&gt;,System.Boolean):System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Port&gt;" Analyze="True" />
          <Member Name="FindAllPorts(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Signal&gt;,System.Predicate`1&lt;MathNet.Symbolics.Port&gt;,System.Boolean):System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Port&gt;" Analyze="True" />
          <Member Name="FindAllSignalPathsFrom(MathNet.Symbolics.Port,MathNet.Symbolics.Signal,System.Boolean):System.Collections.Generic.List`1&lt;System.Collections.Generic.List`1&lt;MathNet.Symbolics.Signal&gt;&gt;" Analyze="True" />
          <Member Name="FindAllSignalPathsFrom(MathNet.Symbolics.Signal,MathNet.Symbolics.Signal,System.Boolean):System.Collections.Generic.List`1&lt;System.Collections.Generic.List`1&lt;MathNet.Symbolics.Signal&gt;&gt;" Analyze="True" />
          <Member Name="FindAllSignalPathsFrom(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Signal&gt;,MathNet.Symbolics.Signal,System.Boolean):System.Collections.Generic.List`1&lt;System.Collections.Generic.List`1&lt;MathNet.Symbolics.Signal&gt;&gt;" Analyze="True" />
          <Member Name="FindAllSignals(MathNet.Symbolics.Port,System.Boolean):System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Signal&gt;" Analyze="True" />
          <Member Name="FindAllSignals(MathNet.Symbolics.Port,System.Predicate`1&lt;MathNet.Symbolics.Signal&gt;,System.Boolean):System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Signal&gt;" Analyze="True" />
          <Member Name="FindAllSignals(MathNet.Symbolics.Signal,System.Boolean):System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Signal&gt;" Analyze="True" />
          <Member Name="FindAllSignals(MathNet.Symbolics.Signal,System.Predicate`1&lt;MathNet.Symbolics.Signal&gt;,System.Boolean):System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Signal&gt;" Analyze="True" />
          <Member Name="FindAllSignals(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Signal&gt;,System.Boolean):System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Signal&gt;" Analyze="True" />
          <Member Name="FindAllSignals(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Signal&gt;,System.Predicate`1&lt;MathNet.Symbolics.Signal&gt;,System.Boolean):System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Signal&gt;" Analyze="True" />
          <Member Name="FindPort(MathNet.Symbolics.Port,System.Predicate`1&lt;MathNet.Symbolics.Port&gt;,System.Boolean):MathNet.Symbolics.Port" Analyze="True" />
          <Member Name="FindPort(MathNet.Symbolics.Signal,System.Predicate`1&lt;MathNet.Symbolics.Port&gt;,System.Boolean):MathNet.Symbolics.Port" Analyze="True" />
          <Member Name="FindPort(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Signal&gt;,System.Predicate`1&lt;MathNet.Symbolics.Port&gt;,System.Boolean):MathNet.Symbolics.Port" Analyze="True" />
          <Member Name="FindSignal(MathNet.Symbolics.Port,System.Predicate`1&lt;MathNet.Symbolics.Signal&gt;,System.Boolean):MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="FindSignal(MathNet.Symbolics.Signal,System.Predicate`1&lt;MathNet.Symbolics.Signal&gt;,System.Boolean):MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="FindSignal(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Signal&gt;,System.Predicate`1&lt;MathNet.Symbolics.Signal&gt;,System.Boolean):MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="ForEachPort(MathNet.Symbolics.Port,MathNet.Symbolics.Traversing.ActionContinue`1&lt;MathNet.Symbolics.Port&gt;,System.Boolean):System.Void" Analyze="True" />
          <Member Name="ForEachPort(MathNet.Symbolics.Port,System.Predicate`1&lt;MathNet.Symbolics.Port&gt;,MathNet.Symbolics.Traversing.ActionContinue`1&lt;MathNet.Symbolics.Port&gt;,System.Boolean):System.Void" Analyze="True" />
          <Member Name="ForEachPort(MathNet.Symbolics.Signal,MathNet.Symbolics.Traversing.ActionContinue`1&lt;MathNet.Symbolics.Port&gt;,System.Boolean):System.Void" Analyze="True" />
          <Member Name="ForEachPort(MathNet.Symbolics.Signal,System.Predicate`1&lt;MathNet.Symbolics.Port&gt;,MathNet.Symbolics.Traversing.ActionContinue`1&lt;MathNet.Symbolics.Port&gt;,System.Boolean):System.Void" Analyze="True" />
          <Member Name="ForEachPort(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Signal&gt;,MathNet.Symbolics.Traversing.ActionContinue`1&lt;MathNet.Symbolics.Port&gt;,System.Boolean):System.Void" Analyze="True" />
          <Member Name="ForEachPort(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Signal&gt;,System.Predicate`1&lt;MathNet.Symbolics.Port&gt;,MathNet.Symbolics.Traversing.ActionContinue`1&lt;MathNet.Symbolics.Port&gt;,System.Boolean):System.Void" Analyze="True" />
          <Member Name="ForEachSignal(MathNet.Symbolics.Port,MathNet.Symbolics.Traversing.ActionContinue`1&lt;MathNet.Symbolics.Signal&gt;,System.Boolean):System.Void" Analyze="True" />
          <Member Name="ForEachSignal(MathNet.Symbolics.Port,System.Predicate`1&lt;MathNet.Symbolics.Signal&gt;,MathNet.Symbolics.Traversing.ActionContinue`1&lt;MathNet.Symbolics.Signal&gt;,System.Boolean):System.Void" Analyze="True" />
          <Member Name="ForEachSignal(MathNet.Symbolics.Signal,MathNet.Symbolics.Traversing.ActionContinue`1&lt;MathNet.Symbolics.Signal&gt;,System.Boolean):System.Void" Analyze="True" />
          <Member Name="ForEachSignal(MathNet.Symbolics.Signal,System.Predicate`1&lt;MathNet.Symbolics.Signal&gt;,MathNet.Symbolics.Traversing.ActionContinue`1&lt;MathNet.Symbolics.Signal&gt;,System.Boolean):System.Void" Analyze="True" />
          <Member Name="ForEachSignal(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Signal&gt;,MathNet.Symbolics.Traversing.ActionContinue`1&lt;MathNet.Symbolics.Signal&gt;,System.Boolean):System.Void" Analyze="True" />
          <Member Name="ForEachSignal(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Signal&gt;,System.Predicate`1&lt;MathNet.Symbolics.Signal&gt;,MathNet.Symbolics.Traversing.ActionContinue`1&lt;MathNet.Symbolics.Signal&gt;,System.Boolean):System.Void" Analyze="True" />
          <Member Name="Traverse(MathNet.Symbolics.Port,MathNet.Symbolics.Traversing.IScanStrategy,MathNet.Symbolics.Traversing.IScanVisitor,System.Boolean):System.Void" Analyze="True" />
          <Member Name="Traverse(MathNet.Symbolics.Port,MathNet.Symbolics.Traversing.IScanVisitor,System.Boolean):System.Void" Analyze="True" />
          <Member Name="Traverse(MathNet.Symbolics.Signal,MathNet.Symbolics.Traversing.IScanStrategy,MathNet.Symbolics.Traversing.IScanVisitor,System.Boolean):System.Void" Analyze="True" />
          <Member Name="Traverse(MathNet.Symbolics.Signal,MathNet.Symbolics.Traversing.IScanVisitor,System.Boolean):System.Void" Analyze="True" />
          <Member Name="Traverse(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Signal&gt;,MathNet.Symbolics.Traversing.IScanStrategy,MathNet.Symbolics.Traversing.IScanVisitor,System.Boolean):System.Void" Analyze="True" />
          <Member Name="Traverse(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Signal&gt;,MathNet.Symbolics.Traversing.IScanVisitor,System.Boolean):System.Void" Analyze="True" />
          <Member Name="TrueForAllPorts(MathNet.Symbolics.Port,System.Predicate`1&lt;MathNet.Symbolics.Port&gt;,System.Boolean):System.Boolean" Analyze="True" />
          <Member Name="TrueForAllPorts(MathNet.Symbolics.Port,System.Predicate`1&lt;MathNet.Symbolics.Port&gt;,System.Boolean,MathNet.Symbolics.Port&amp;,MathNet.Symbolics.Signal&amp;):System.Boolean" Analyze="True" />
          <Member Name="TrueForAllPorts(MathNet.Symbolics.Signal,System.Predicate`1&lt;MathNet.Symbolics.Port&gt;,System.Boolean):System.Boolean" Analyze="True" />
          <Member Name="TrueForAllPorts(MathNet.Symbolics.Signal,System.Predicate`1&lt;MathNet.Symbolics.Port&gt;,System.Boolean,MathNet.Symbolics.Port&amp;,MathNet.Symbolics.Signal&amp;):System.Boolean" Analyze="True" />
          <Member Name="TrueForAllPorts(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Signal&gt;,System.Predicate`1&lt;MathNet.Symbolics.Port&gt;,System.Boolean):System.Boolean" Analyze="True" />
          <Member Name="TrueForAllPorts(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Signal&gt;,System.Predicate`1&lt;MathNet.Symbolics.Port&gt;,System.Boolean,MathNet.Symbolics.Port&amp;,MathNet.Symbolics.Signal&amp;):System.Boolean" Analyze="True" />
          <Member Name="TrueForAllSignals(MathNet.Symbolics.Port,System.Predicate`1&lt;MathNet.Symbolics.Signal&gt;,System.Boolean):System.Boolean" Analyze="True" />
          <Member Name="TrueForAllSignals(MathNet.Symbolics.Port,System.Predicate`1&lt;MathNet.Symbolics.Signal&gt;,System.Boolean,MathNet.Symbolics.Signal&amp;,MathNet.Symbolics.Port&amp;):System.Boolean" Analyze="True" />
          <Member Name="TrueForAllSignals(MathNet.Symbolics.Signal,System.Predicate`1&lt;MathNet.Symbolics.Signal&gt;,System.Boolean):System.Boolean" Analyze="True" />
          <Member Name="TrueForAllSignals(MathNet.Symbolics.Signal,System.Predicate`1&lt;MathNet.Symbolics.Signal&gt;,System.Boolean,MathNet.Symbolics.Signal&amp;,MathNet.Symbolics.Port&amp;):System.Boolean" Analyze="True" />
          <Member Name="TrueForAllSignals(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Signal&gt;,System.Predicate`1&lt;MathNet.Symbolics.Signal&gt;,System.Boolean):System.Boolean" Analyze="True" />
          <Member Name="TrueForAllSignals(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Signal&gt;,System.Predicate`1&lt;MathNet.Symbolics.Signal&gt;,System.Boolean,MathNet.Symbolics.Signal&amp;,MathNet.Symbolics.Port&amp;):System.Boolean" Analyze="True" />
         </Members>
        </Type>
        <Type Name="IScanStrategy" Analyze="True">
         <Members>
          <Member Name="Traverse(MathNet.Symbolics.Port,MathNet.Symbolics.Traversing.IScanVisitor,System.Boolean):System.Void" Analyze="True" />
          <Member Name="Traverse(MathNet.Symbolics.Signal,MathNet.Symbolics.Traversing.IScanVisitor,System.Boolean):System.Void" Analyze="True" />
          <Member Name="Traverse(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Signal&gt;,MathNet.Symbolics.Traversing.IScanVisitor,System.Boolean):System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="IScanVisitor" Analyze="True">
         <Members>
          <Member Name="DefaultStrategy" Analyze="True">
           <Accessors>
            <Accessor Name="get_DefaultStrategy():MathNet.Symbolics.Traversing.IScanStrategy" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="EnterPort(MathNet.Symbolics.Port,MathNet.Symbolics.Signal,System.Boolean,System.Boolean):System.Boolean" Analyze="True" />
          <Member Name="EnterSignal(MathNet.Symbolics.Signal,MathNet.Symbolics.Port,System.Boolean,System.Boolean):System.Boolean" Analyze="True" />
          <Member Name="LeavePort(MathNet.Symbolics.Port,MathNet.Symbolics.Signal,System.Boolean,System.Boolean):System.Boolean" Analyze="True" />
          <Member Name="LeaveSignal(MathNet.Symbolics.Signal,MathNet.Symbolics.Port,System.Boolean,System.Boolean):System.Boolean" Analyze="True" />
          <Member Name="VisitCycle(MathNet.Symbolics.Port,MathNet.Symbolics.Signal,MathNet.Symbolics.Signal):System.Boolean" Analyze="True" />
          <Member Name="VisitLeaf(MathNet.Symbolics.Bus,System.Boolean):System.Boolean" Analyze="True" />
          <Member Name="VisitLeaf(MathNet.Symbolics.Port,System.Boolean):System.Boolean" Analyze="True" />
          <Member Name="VisitLeaf(MathNet.Symbolics.Signal,System.Boolean):System.Boolean" Analyze="True" />
         </Members>
        </Type>
        <Type Name="ISignalPathCollectVisitor" Analyze="True">
         <Members>
          <Member Name="Paths" Analyze="True">
           <Accessors>
            <Accessor Name="get_Paths():System.Collections.Generic.List`1&lt;System.Collections.Generic.List`1&lt;MathNet.Symbolics.Signal&gt;&gt;" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Reset(MathNet.Symbolics.Signal):System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="ITrueForAllPortsVisitor" Analyze="True">
         <Members>
          <Member Name="FailedPort" Analyze="True">
           <Accessors>
            <Accessor Name="get_FailedPort():MathNet.Symbolics.Port" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="FailedPortTarget" Analyze="True">
           <Accessors>
            <Accessor Name="get_FailedPortTarget():MathNet.Symbolics.Signal" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Reset():System.Void" Analyze="True" />
          <Member Name="TrueForAll" Analyze="True">
           <Accessors>
            <Accessor Name="get_TrueForAll():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="ITrueForAllSignalsVisitor" Analyze="True">
         <Members>
          <Member Name="FailedSignal" Analyze="True">
           <Accessors>
            <Accessor Name="get_FailedSignal():MathNet.Symbolics.Signal" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="FailedSignalTarget" Analyze="True">
           <Accessors>
            <Accessor Name="get_FailedSignalTarget():MathNet.Symbolics.Port" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Reset():System.Void" Analyze="True" />
          <Member Name="TrueForAll" Analyze="True">
           <Accessors>
            <Accessor Name="get_TrueForAll():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="ProcessCycle" Analyze="True">
         <Members>
          <Member Name=".ctor(System.Object,System.IntPtr)" Analyze="True" />
          <Member Name="BeginInvoke(MathNet.Symbolics.Port,MathNet.Symbolics.Signal,MathNet.Symbolics.Signal,System.AsyncCallback,System.Object):System.IAsyncResult" Analyze="True" />
          <Member Name="EndInvoke(System.IAsyncResult):System.Boolean" Analyze="True" />
          <Member Name="Invoke(MathNet.Symbolics.Port,MathNet.Symbolics.Signal,MathNet.Symbolics.Signal):System.Boolean" Analyze="True" />
         </Members>
        </Type>
        <Type Name="ProcessLeafBus" Analyze="True">
         <Members>
          <Member Name=".ctor(System.Object,System.IntPtr)" Analyze="True" />
          <Member Name="BeginInvoke(MathNet.Symbolics.Bus,System.Boolean,System.AsyncCallback,System.Object):System.IAsyncResult" Analyze="True" />
          <Member Name="EndInvoke(System.IAsyncResult):System.Boolean" Analyze="True" />
          <Member Name="Invoke(MathNet.Symbolics.Bus,System.Boolean):System.Boolean" Analyze="True" />
         </Members>
        </Type>
        <Type Name="ProcessLeafPort" Analyze="True">
         <Members>
          <Member Name=".ctor(System.Object,System.IntPtr)" Analyze="True" />
          <Member Name="BeginInvoke(MathNet.Symbolics.Port,System.Boolean,System.AsyncCallback,System.Object):System.IAsyncResult" Analyze="True" />
          <Member Name="EndInvoke(System.IAsyncResult):System.Boolean" Analyze="True" />
          <Member Name="Invoke(MathNet.Symbolics.Port,System.Boolean):System.Boolean" Analyze="True" />
         </Members>
        </Type>
        <Type Name="ProcessLeafSignal" Analyze="True">
         <Members>
          <Member Name=".ctor(System.Object,System.IntPtr)" Analyze="True" />
          <Member Name="BeginInvoke(MathNet.Symbolics.Signal,System.Boolean,System.AsyncCallback,System.Object):System.IAsyncResult" Analyze="True" />
          <Member Name="EndInvoke(System.IAsyncResult):System.Boolean" Analyze="True" />
          <Member Name="Invoke(MathNet.Symbolics.Signal,System.Boolean):System.Boolean" Analyze="True" />
         </Members>
        </Type>
        <Type Name="ProcessPort" Analyze="True">
         <Members>
          <Member Name=".ctor(System.Object,System.IntPtr)" Analyze="True" />
          <Member Name="BeginInvoke(MathNet.Symbolics.Port,MathNet.Symbolics.Signal,System.Boolean,System.Boolean,System.AsyncCallback,System.Object):System.IAsyncResult" Analyze="True" />
          <Member Name="EndInvoke(System.IAsyncResult):System.Boolean" Analyze="True" />
          <Member Name="Invoke(MathNet.Symbolics.Port,MathNet.Symbolics.Signal,System.Boolean,System.Boolean):System.Boolean" Analyze="True" />
         </Members>
        </Type>
        <Type Name="ProcessSignal" Analyze="True">
         <Members>
          <Member Name=".ctor(System.Object,System.IntPtr)" Analyze="True" />
          <Member Name="BeginInvoke(MathNet.Symbolics.Signal,MathNet.Symbolics.Port,System.Boolean,System.Boolean,System.AsyncCallback,System.Object):System.IAsyncResult" Analyze="True" />
          <Member Name="EndInvoke(System.IAsyncResult):System.Boolean" Analyze="True" />
          <Member Name="Invoke(MathNet.Symbolics.Signal,MathNet.Symbolics.Port,System.Boolean,System.Boolean):System.Boolean" Analyze="True" />
         </Members>
        </Type>
       </Types>
      </Namespace>
     </Namespaces>
    </Module>
   </Modules>
  </Target>
  <Target Name="$(ProjectDir)/src/app/MathNet.Yttrium/Traversing.Service/bin/Debug/MathNet.Yttrium.Traversing.Service.dll" Analyze="True">
   <Modules>
    <Module Name="mathnet.yttrium.traversing.service.dll" Analyze="True">
     <Namespaces>
      <Namespace Name="" Analyze="True">
       <Types>
        <Type Name="&lt;Module&gt;" Analyze="True" />
       </Types>
      </Namespace>
      <Namespace Name="MathNet.Symbolics" Analyze="True">
       <Types>
        <Type Name="AllPathsStrategyFactory" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="MathNet.Symbolics.IFactory&lt;MathNet.Symbolics.Traversing.IScanStrategy&gt;.GetInstance():MathNet.Symbolics.Traversing.IScanStrategy" Analyze="True" />
         </Members>
        </Type>
        <Type Name="AllPortsStrategyFactory" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="MathNet.Symbolics.IFactory&lt;MathNet.Symbolics.Traversing.IScanStrategy&gt;.GetInstance():MathNet.Symbolics.Traversing.IScanStrategy" Analyze="True" />
         </Members>
        </Type>
        <Type Name="AllSignalsStrategyFactory" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="MathNet.Symbolics.IFactory&lt;MathNet.Symbolics.Traversing.IScanStrategy&gt;.GetInstance():MathNet.Symbolics.Traversing.IScanStrategy" Analyze="True" />
         </Members>
        </Type>
        <Type Name="AllSpanningTreeStrategyFactory" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="MathNet.Symbolics.IFactory&lt;MathNet.Symbolics.Traversing.IScanStrategy&gt;.GetInstance():MathNet.Symbolics.Traversing.IScanStrategy" Analyze="True" />
         </Members>
        </Type>
        <Type Name="AllStrategyFactory" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="MathNet.Symbolics.IFactory&lt;MathNet.Symbolics.Traversing.IScanStrategy&gt;.GetInstance():MathNet.Symbolics.Traversing.IScanStrategy" Analyze="True" />
         </Members>
        </Type>
        <Type Name="VisitorFactory" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="MathNet.Symbolics.IFactory&lt;MathNet.Symbolics.Traversing.ICollectVisitor,System.Predicate&lt;MathNet.Symbolics.Bus&gt;&gt;.GetInstance(System.Predicate`1&lt;MathNet.Symbolics.Bus&gt;):MathNet.Symbolics.Traversing.ICollectVisitor" Analyze="True" />
          <Member Name="MathNet.Symbolics.IFactory&lt;MathNet.Symbolics.Traversing.ICollectVisitor,System.Predicate&lt;MathNet.Symbolics.Port&gt;&gt;.GetInstance(System.Predicate`1&lt;MathNet.Symbolics.Port&gt;):MathNet.Symbolics.Traversing.ICollectVisitor" Analyze="True" />
          <Member Name="MathNet.Symbolics.IFactory&lt;MathNet.Symbolics.Traversing.ICollectVisitor,System.Predicate&lt;MathNet.Symbolics.Signal&gt;,System.Predicate&lt;MathNet.Symbolics.Port&gt;,System.Predicate&lt;MathNet.Symbolics.Bus&gt;&gt;.GetInstance(System.Predicate`1&lt;MathNet.Symbolics.Signal&gt;,System.Predicate`1&lt;MathNet.Symbolics.Port&gt;,System.Predicate`1&lt;MathNet.Symbolics.Bus&gt;):MathNet.Symbolics.Traversing.ICollectVisitor" Analyze="True" />
          <Member Name="MathNet.Symbolics.IFactory&lt;MathNet.Symbolics.Traversing.ICollectVisitor,System.Predicate&lt;MathNet.Symbolics.Signal&gt;&gt;.GetInstance(System.Predicate`1&lt;MathNet.Symbolics.Signal&gt;):MathNet.Symbolics.Traversing.ICollectVisitor" Analyze="True" />
          <Member Name="MathNet.Symbolics.IFactory&lt;MathNet.Symbolics.Traversing.ICollectVisitor&gt;.GetInstance():MathNet.Symbolics.Traversing.ICollectVisitor" Analyze="True" />
          <Member Name="MathNet.Symbolics.IFactory&lt;MathNet.Symbolics.Traversing.IExistsPortVisitor,System.Predicate&lt;MathNet.Symbolics.Port&gt;&gt;.GetInstance(System.Predicate`1&lt;MathNet.Symbolics.Port&gt;):MathNet.Symbolics.Traversing.IExistsPortVisitor" Analyze="True" />
          <Member Name="MathNet.Symbolics.IFactory&lt;MathNet.Symbolics.Traversing.IExistsPortVisitor&gt;.GetInstance():MathNet.Symbolics.Traversing.IExistsPortVisitor" Analyze="True" />
          <Member Name="MathNet.Symbolics.IFactory&lt;MathNet.Symbolics.Traversing.IExistsSignalVisitor,System.Predicate&lt;MathNet.Symbolics.Signal&gt;&gt;.GetInstance(System.Predicate`1&lt;MathNet.Symbolics.Signal&gt;):MathNet.Symbolics.Traversing.IExistsSignalVisitor" Analyze="True" />
          <Member Name="MathNet.Symbolics.IFactory&lt;MathNet.Symbolics.Traversing.IExistsSignalVisitor&gt;.GetInstance():MathNet.Symbolics.Traversing.IExistsSignalVisitor" Analyze="True" />
          <Member Name="MathNet.Symbolics.IFactory&lt;MathNet.Symbolics.Traversing.IPortPathCollectVisitor,MathNet.Symbolics.Port&gt;.GetInstance(MathNet.Symbolics.Port):MathNet.Symbolics.Traversing.IPortPathCollectVisitor" Analyze="True" />
          <Member Name="MathNet.Symbolics.IFactory&lt;MathNet.Symbolics.Traversing.IPortPathCollectVisitor&gt;.GetInstance():MathNet.Symbolics.Traversing.IPortPathCollectVisitor" Analyze="True" />
          <Member Name="MathNet.Symbolics.IFactory&lt;MathNet.Symbolics.Traversing.IScanner&gt;.GetInstance():MathNet.Symbolics.Traversing.IScanner" Analyze="True" />
          <Member Name="MathNet.Symbolics.IFactory&lt;MathNet.Symbolics.Traversing.IScanVisitor,MathNet.Symbolics.Traversing.ActionContinue&lt;MathNet.Symbolics.Port&gt;,System.Predicate&lt;MathNet.Symbolics.Port&gt;&gt;.GetInstance(MathNet.Symbolics.Traversing.ActionContinue`1&lt;MathNet.Symbolics.Port&gt;,System.Predicate`1&lt;MathNet.Symbolics.Port&gt;):MathNet.Symbolics.Traversing.IScanVisitor" Analyze="True" />
          <Member Name="MathNet.Symbolics.IFactory&lt;MathNet.Symbolics.Traversing.IScanVisitor,MathNet.Symbolics.Traversing.ActionContinue&lt;MathNet.Symbolics.Port&gt;&gt;.GetInstance(MathNet.Symbolics.Traversing.ActionContinue`1&lt;MathNet.Symbolics.Port&gt;):MathNet.Symbolics.Traversing.IScanVisitor" Analyze="True" />
          <Member Name="MathNet.Symbolics.IFactory&lt;MathNet.Symbolics.Traversing.IScanVisitor,MathNet.Symbolics.Traversing.ActionContinue&lt;MathNet.Symbolics.Signal&gt;,System.Predicate&lt;MathNet.Symbolics.Signal&gt;&gt;.GetInstance(MathNet.Symbolics.Traversing.ActionContinue`1&lt;MathNet.Symbolics.Signal&gt;,System.Predicate`1&lt;MathNet.Symbolics.Signal&gt;):MathNet.Symbolics.Traversing.IScanVisitor" Analyze="True" />
          <Member Name="MathNet.Symbolics.IFactory&lt;MathNet.Symbolics.Traversing.IScanVisitor,MathNet.Symbolics.Traversing.ActionContinue&lt;MathNet.Symbolics.Signal&gt;&gt;.GetInstance(MathNet.Symbolics.Traversing.ActionContinue`1&lt;MathNet.Symbolics.Signal&gt;):MathNet.Symbolics.Traversing.IScanVisitor" Analyze="True" />
          <Member Name="MathNet.Symbolics.IFactory&lt;MathNet.Symbolics.Traversing.IScanVisitor,MathNet.Symbolics.Traversing.ProcessSignal,MathNet.Symbolics.Traversing.ProcessSignal,MathNet.Symbolics.Traversing.ProcessPort,MathNet.Symbolics.Traversing.ProcessPort,MathNet.Symbolics.Traversing.ProcessLeafSignal,MathNet.Symbolics.Traversing.ProcessLeafPort,MathNet...,(MathNet.Symbolics.Traversing.ProcessSignal,MathNet.Symbolics.Traversing.ProcessSignal,MathNet.Symbolics.Traversing.ProcessPort,MathNet.Symbolics.Traversing.ProcessPort,MathNet.Symbolics.Traversing.ProcessLeafSignal,MathNet.Symbolics.Traversing.ProcessLeafPort,MathNet.Symbolics.Traversing.ProcessLeafBus,MathNet.Symbolics.Traversing.ProcessCycle):MathNet.Symbolics.Traversing.IScanVisitor" Analyze="True" />
          <Member Name="MathNet.Symbolics.IFactory&lt;MathNet.Symbolics.Traversing.IScanVisitor&gt;.GetInstance():MathNet.Symbolics.Traversing.IScanVisitor" Analyze="True" />
          <Member Name="MathNet.Symbolics.IFactory&lt;MathNet.Symbolics.Traversing.ISignalPathCollectVisitor,MathNet.Symbolics.Signal&gt;.GetInstance(MathNet.Symbolics.Signal):MathNet.Symbolics.Traversing.ISignalPathCollectVisitor" Analyze="True" />
          <Member Name="MathNet.Symbolics.IFactory&lt;MathNet.Symbolics.Traversing.ISignalPathCollectVisitor&gt;.GetInstance():MathNet.Symbolics.Traversing.ISignalPathCollectVisitor" Analyze="True" />
          <Member Name="MathNet.Symbolics.IFactory&lt;MathNet.Symbolics.Traversing.ITrueForAllPortsVisitor,System.Predicate&lt;MathNet.Symbolics.Port&gt;&gt;.GetInstance(System.Predicate`1&lt;MathNet.Symbolics.Port&gt;):MathNet.Symbolics.Traversing.ITrueForAllPortsVisitor" Analyze="True" />
          <Member Name="MathNet.Symbolics.IFactory&lt;MathNet.Symbolics.Traversing.ITrueForAllPortsVisitor&gt;.GetInstance():MathNet.Symbolics.Traversing.ITrueForAllPortsVisitor" Analyze="True" />
          <Member Name="MathNet.Symbolics.IFactory&lt;MathNet.Symbolics.Traversing.ITrueForAllSignalsVisitor,System.Predicate&lt;MathNet.Symbolics.Signal&gt;&gt;.GetInstance(System.Predicate`1&lt;MathNet.Symbolics.Signal&gt;):MathNet.Symbolics.Traversing.ITrueForAllSignalsVisitor" Analyze="True" />
          <Member Name="MathNet.Symbolics.IFactory&lt;MathNet.Symbolics.Traversing.ITrueForAllSignalsVisitor&gt;.GetInstance():MathNet.Symbolics.Traversing.ITrueForAllSignalsVisitor" Analyze="True" />
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="MathNet.Symbolics.Traversing" Analyze="True">
       <Types>
        <Type Name="Scanner" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="ExistsPort(MathNet.Symbolics.Port,System.Predicate`1&lt;MathNet.Symbolics.Port&gt;,System.Boolean):System.Boolean" Analyze="True" />
          <Member Name="ExistsPort(MathNet.Symbolics.Port,System.Predicate`1&lt;MathNet.Symbolics.Port&gt;,System.Boolean,MathNet.Symbolics.Port&amp;,MathNet.Symbolics.Signal&amp;):System.Boolean" Analyze="True" />
          <Member Name="ExistsPort(MathNet.Symbolics.Signal,System.Predicate`1&lt;MathNet.Symbolics.Port&gt;,System.Boolean):System.Boolean" Analyze="True" />
          <Member Name="ExistsPort(MathNet.Symbolics.Signal,System.Predicate`1&lt;MathNet.Symbolics.Port&gt;,System.Boolean,MathNet.Symbolics.Port&amp;,MathNet.Symbolics.Signal&amp;):System.Boolean" Analyze="True" />
          <Member Name="ExistsPort(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Signal&gt;,System.Predicate`1&lt;MathNet.Symbolics.Port&gt;,System.Boolean):System.Boolean" Analyze="True" />
          <Member Name="ExistsPort(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Signal&gt;,System.Predicate`1&lt;MathNet.Symbolics.Port&gt;,System.Boolean,MathNet.Symbolics.Port&amp;,MathNet.Symbolics.Signal&amp;):System.Boolean" Analyze="True" />
          <Member Name="ExistsSignal(MathNet.Symbolics.Port,System.Predicate`1&lt;MathNet.Symbolics.Signal&gt;,System.Boolean):System.Boolean" Analyze="True" />
          <Member Name="ExistsSignal(MathNet.Symbolics.Port,System.Predicate`1&lt;MathNet.Symbolics.Signal&gt;,System.Boolean,MathNet.Symbolics.Signal&amp;,MathNet.Symbolics.Port&amp;):System.Boolean" Analyze="True" />
          <Member Name="ExistsSignal(MathNet.Symbolics.Signal,System.Predicate`1&lt;MathNet.Symbolics.Signal&gt;,System.Boolean):System.Boolean" Analyze="True" />
          <Member Name="ExistsSignal(MathNet.Symbolics.Signal,System.Predicate`1&lt;MathNet.Symbolics.Signal&gt;,System.Boolean,MathNet.Symbolics.Signal&amp;,MathNet.Symbolics.Port&amp;):System.Boolean" Analyze="True" />
          <Member Name="ExistsSignal(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Signal&gt;,System.Predicate`1&lt;MathNet.Symbolics.Signal&gt;,System.Boolean):System.Boolean" Analyze="True" />
          <Member Name="ExistsSignal(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Signal&gt;,System.Predicate`1&lt;MathNet.Symbolics.Signal&gt;,System.Boolean,MathNet.Symbolics.Signal&amp;,MathNet.Symbolics.Port&amp;):System.Boolean" Analyze="True" />
          <Member Name="FindAll(MathNet.Symbolics.Port,System.Boolean,System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Signal&gt;&amp;,System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Port&gt;&amp;):System.Void" Analyze="True" />
          <Member Name="FindAll(MathNet.Symbolics.Signal,System.Boolean,System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Signal&gt;&amp;,System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Port&gt;&amp;):System.Void" Analyze="True" />
          <Member Name="FindAll(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Signal&gt;,System.Boolean,System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Signal&gt;&amp;,System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Port&gt;&amp;):System.Void" Analyze="True" />
          <Member Name="FindAllPortPathsFrom(MathNet.Symbolics.Port,MathNet.Symbolics.Port,System.Boolean):System.Collections.Generic.List`1&lt;System.Collections.Generic.List`1&lt;MathNet.Symbolics.Port&gt;&gt;" Analyze="True" />
          <Member Name="FindAllPortPathsFrom(MathNet.Symbolics.Signal,MathNet.Symbolics.Port,System.Boolean):System.Collections.Generic.List`1&lt;System.Collections.Generic.List`1&lt;MathNet.Symbolics.Port&gt;&gt;" Analyze="True" />
          <Member Name="FindAllPortPathsFrom(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Signal&gt;,MathNet.Symbolics.Port,System.Boolean):System.Collections.Generic.List`1&lt;System.Collections.Generic.List`1&lt;MathNet.Symbolics.Port&gt;&gt;" Analyze="True" />
          <Member Name="FindAllPorts(MathNet.Symbolics.Port,System.Boolean):System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Port&gt;" Analyze="True" />
          <Member Name="FindAllPorts(MathNet.Symbolics.Port,System.Predicate`1&lt;MathNet.Symbolics.Port&gt;,System.Boolean):System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Port&gt;" Analyze="True" />
          <Member Name="FindAllPorts(MathNet.Symbolics.Signal,System.Boolean):System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Port&gt;" Analyze="True" />
          <Member Name="FindAllPorts(MathNet.Symbolics.Signal,System.Predicate`1&lt;MathNet.Symbolics.Port&gt;,System.Boolean):System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Port&gt;" Analyze="True" />
          <Member Name="FindAllPorts(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Signal&gt;,System.Boolean):System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Port&gt;" Analyze="True" />
          <Member Name="FindAllPorts(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Signal&gt;,System.Predicate`1&lt;MathNet.Symbolics.Port&gt;,System.Boolean):System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Port&gt;" Analyze="True" />
          <Member Name="FindAllSignalPathsFrom(MathNet.Symbolics.Port,MathNet.Symbolics.Signal,System.Boolean):System.Collections.Generic.List`1&lt;System.Collections.Generic.List`1&lt;MathNet.Symbolics.Signal&gt;&gt;" Analyze="True" />
          <Member Name="FindAllSignalPathsFrom(MathNet.Symbolics.Signal,MathNet.Symbolics.Signal,System.Boolean):System.Collections.Generic.List`1&lt;System.Collections.Generic.List`1&lt;MathNet.Symbolics.Signal&gt;&gt;" Analyze="True" />
          <Member Name="FindAllSignalPathsFrom(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Signal&gt;,MathNet.Symbolics.Signal,System.Boolean):System.Collections.Generic.List`1&lt;System.Collections.Generic.List`1&lt;MathNet.Symbolics.Signal&gt;&gt;" Analyze="True" />
          <Member Name="FindAllSignals(MathNet.Symbolics.Port,System.Boolean):System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Signal&gt;" Analyze="True" />
          <Member Name="FindAllSignals(MathNet.Symbolics.Port,System.Predicate`1&lt;MathNet.Symbolics.Signal&gt;,System.Boolean):System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Signal&gt;" Analyze="True" />
          <Member Name="FindAllSignals(MathNet.Symbolics.Signal,System.Boolean):System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Signal&gt;" Analyze="True" />
          <Member Name="FindAllSignals(MathNet.Symbolics.Signal,System.Predicate`1&lt;MathNet.Symbolics.Signal&gt;,System.Boolean):System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Signal&gt;" Analyze="True" />
          <Member Name="FindAllSignals(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Signal&gt;,System.Boolean):System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Signal&gt;" Analyze="True" />
          <Member Name="FindAllSignals(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Signal&gt;,System.Predicate`1&lt;MathNet.Symbolics.Signal&gt;,System.Boolean):System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Signal&gt;" Analyze="True" />
          <Member Name="FindPort(MathNet.Symbolics.Port,System.Predicate`1&lt;MathNet.Symbolics.Port&gt;,System.Boolean):MathNet.Symbolics.Port" Analyze="True" />
          <Member Name="FindPort(MathNet.Symbolics.Signal,System.Predicate`1&lt;MathNet.Symbolics.Port&gt;,System.Boolean):MathNet.Symbolics.Port" Analyze="True" />
          <Member Name="FindPort(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Signal&gt;,System.Predicate`1&lt;MathNet.Symbolics.Port&gt;,System.Boolean):MathNet.Symbolics.Port" Analyze="True" />
          <Member Name="FindSignal(MathNet.Symbolics.Port,System.Predicate`1&lt;MathNet.Symbolics.Signal&gt;,System.Boolean):MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="FindSignal(MathNet.Symbolics.Signal,System.Predicate`1&lt;MathNet.Symbolics.Signal&gt;,System.Boolean):MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="FindSignal(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Signal&gt;,System.Predicate`1&lt;MathNet.Symbolics.Signal&gt;,System.Boolean):MathNet.Symbolics.Signal" Analyze="True" />
          <Member Name="ForEachPort(MathNet.Symbolics.Port,MathNet.Symbolics.Traversing.ActionContinue`1&lt;MathNet.Symbolics.Port&gt;,System.Boolean):System.Void" Analyze="True" />
          <Member Name="ForEachPort(MathNet.Symbolics.Port,System.Predicate`1&lt;MathNet.Symbolics.Port&gt;,MathNet.Symbolics.Traversing.ActionContinue`1&lt;MathNet.Symbolics.Port&gt;,System.Boolean):System.Void" Analyze="True" />
          <Member Name="ForEachPort(MathNet.Symbolics.Signal,MathNet.Symbolics.Traversing.ActionContinue`1&lt;MathNet.Symbolics.Port&gt;,System.Boolean):System.Void" Analyze="True" />
          <Member Name="ForEachPort(MathNet.Symbolics.Signal,System.Predicate`1&lt;MathNet.Symbolics.Port&gt;,MathNet.Symbolics.Traversing.ActionContinue`1&lt;MathNet.Symbolics.Port&gt;,System.Boolean):System.Void" Analyze="True" />
          <Member Name="ForEachPort(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Signal&gt;,MathNet.Symbolics.Traversing.ActionContinue`1&lt;MathNet.Symbolics.Port&gt;,System.Boolean):System.Void" Analyze="True" />
          <Member Name="ForEachPort(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Signal&gt;,System.Predicate`1&lt;MathNet.Symbolics.Port&gt;,MathNet.Symbolics.Traversing.ActionContinue`1&lt;MathNet.Symbolics.Port&gt;,System.Boolean):System.Void" Analyze="True" />
          <Member Name="ForEachSignal(MathNet.Symbolics.Port,MathNet.Symbolics.Traversing.ActionContinue`1&lt;MathNet.Symbolics.Signal&gt;,System.Boolean):System.Void" Analyze="True" />
          <Member Name="ForEachSignal(MathNet.Symbolics.Port,System.Predicate`1&lt;MathNet.Symbolics.Signal&gt;,MathNet.Symbolics.Traversing.ActionContinue`1&lt;MathNet.Symbolics.Signal&gt;,System.Boolean):System.Void" Analyze="True" />
          <Member Name="ForEachSignal(MathNet.Symbolics.Signal,MathNet.Symbolics.Traversing.ActionContinue`1&lt;MathNet.Symbolics.Signal&gt;,System.Boolean):System.Void" Analyze="True" />
          <Member Name="ForEachSignal(MathNet.Symbolics.Signal,System.Predicate`1&lt;MathNet.Symbolics.Signal&gt;,MathNet.Symbolics.Traversing.ActionContinue`1&lt;MathNet.Symbolics.Signal&gt;,System.Boolean):System.Void" Analyze="True" />
          <Member Name="ForEachSignal(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Signal&gt;,MathNet.Symbolics.Traversing.ActionContinue`1&lt;MathNet.Symbolics.Signal&gt;,System.Boolean):System.Void" Analyze="True" />
          <Member Name="ForEachSignal(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Signal&gt;,System.Predicate`1&lt;MathNet.Symbolics.Signal&gt;,MathNet.Symbolics.Traversing.ActionContinue`1&lt;MathNet.Symbolics.Signal&gt;,System.Boolean):System.Void" Analyze="True" />
          <Member Name="Traverse(MathNet.Symbolics.Port,MathNet.Symbolics.Traversing.IScanStrategy,MathNet.Symbolics.Traversing.IScanVisitor,System.Boolean):System.Void" Analyze="True" />
          <Member Name="Traverse(MathNet.Symbolics.Port,MathNet.Symbolics.Traversing.IScanVisitor,System.Boolean):System.Void" Analyze="True" />
          <Member Name="Traverse(MathNet.Symbolics.Signal,MathNet.Symbolics.Traversing.IScanStrategy,MathNet.Symbolics.Traversing.IScanVisitor,System.Boolean):System.Void" Analyze="True" />
          <Member Name="Traverse(MathNet.Symbolics.Signal,MathNet.Symbolics.Traversing.IScanVisitor,System.Boolean):System.Void" Analyze="True" />
          <Member Name="Traverse(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Signal&gt;,MathNet.Symbolics.Traversing.IScanStrategy,MathNet.Symbolics.Traversing.IScanVisitor,System.Boolean):System.Void" Analyze="True" />
          <Member Name="Traverse(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Signal&gt;,MathNet.Symbolics.Traversing.IScanVisitor,System.Boolean):System.Void" Analyze="True" />
          <Member Name="TrueForAllPorts(MathNet.Symbolics.Port,System.Predicate`1&lt;MathNet.Symbolics.Port&gt;,System.Boolean):System.Boolean" Analyze="True" />
          <Member Name="TrueForAllPorts(MathNet.Symbolics.Port,System.Predicate`1&lt;MathNet.Symbolics.Port&gt;,System.Boolean,MathNet.Symbolics.Port&amp;,MathNet.Symbolics.Signal&amp;):System.Boolean" Analyze="True" />
          <Member Name="TrueForAllPorts(MathNet.Symbolics.Signal,System.Predicate`1&lt;MathNet.Symbolics.Port&gt;,System.Boolean):System.Boolean" Analyze="True" />
          <Member Name="TrueForAllPorts(MathNet.Symbolics.Signal,System.Predicate`1&lt;MathNet.Symbolics.Port&gt;,System.Boolean,MathNet.Symbolics.Port&amp;,MathNet.Symbolics.Signal&amp;):System.Boolean" Analyze="True" />
          <Member Name="TrueForAllPorts(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Signal&gt;,System.Predicate`1&lt;MathNet.Symbolics.Port&gt;,System.Boolean):System.Boolean" Analyze="True" />
          <Member Name="TrueForAllPorts(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Signal&gt;,System.Predicate`1&lt;MathNet.Symbolics.Port&gt;,System.Boolean,MathNet.Symbolics.Port&amp;,MathNet.Symbolics.Signal&amp;):System.Boolean" Analyze="True" />
          <Member Name="TrueForAllSignals(MathNet.Symbolics.Port,System.Predicate`1&lt;MathNet.Symbolics.Signal&gt;,System.Boolean):System.Boolean" Analyze="True" />
          <Member Name="TrueForAllSignals(MathNet.Symbolics.Port,System.Predicate`1&lt;MathNet.Symbolics.Signal&gt;,System.Boolean,MathNet.Symbolics.Signal&amp;,MathNet.Symbolics.Port&amp;):System.Boolean" Analyze="True" />
          <Member Name="TrueForAllSignals(MathNet.Symbolics.Signal,System.Predicate`1&lt;MathNet.Symbolics.Signal&gt;,System.Boolean):System.Boolean" Analyze="True" />
          <Member Name="TrueForAllSignals(MathNet.Symbolics.Signal,System.Predicate`1&lt;MathNet.Symbolics.Signal&gt;,System.Boolean,MathNet.Symbolics.Signal&amp;,MathNet.Symbolics.Port&amp;):System.Boolean" Analyze="True" />
          <Member Name="TrueForAllSignals(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Signal&gt;,System.Predicate`1&lt;MathNet.Symbolics.Signal&gt;,System.Boolean):System.Boolean" Analyze="True" />
          <Member Name="TrueForAllSignals(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Signal&gt;,System.Predicate`1&lt;MathNet.Symbolics.Signal&gt;,System.Boolean,MathNet.Symbolics.Signal&amp;,MathNet.Symbolics.Port&amp;):System.Boolean" Analyze="True" />
         </Members>
        </Type>
        <Type Name="ScanStrategy" Analyze="True">
         <Members>
          <Member Name=".ctor(MathNet.Symbolics.Traversing.ScanStrategy+ConcurrencyMode)" Analyze="True" />
          <Member Name="_activeScans" Analyze="True" />
          <Member Name="_concurrency" Analyze="True" />
          <Member Name="_nextInstance" Analyze="True" />
          <Member Name="Clone():MathNet.Symbolics.Traversing.ScanStrategy" Analyze="True" />
          <Member Name="Concurrency" Analyze="True">
           <Accessors>
            <Accessor Name="get_Concurrency():MathNet.Symbolics.Traversing.ScanStrategy+ConcurrencyMode" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="DoTraverse(MathNet.Symbolics.Port,MathNet.Symbolics.Traversing.IScanVisitor,System.Boolean):System.Void" Analyze="True" />
          <Member Name="DoTraverse(MathNet.Symbolics.Signal,MathNet.Symbolics.Traversing.IScanVisitor,System.Boolean):System.Void" Analyze="True" />
          <Member Name="DoTraverse(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Signal&gt;,MathNet.Symbolics.Traversing.IScanVisitor,System.Boolean):System.Void" Analyze="True" />
          <Member Name="IsActive" Analyze="True">
           <Accessors>
            <Accessor Name="get_IsActive():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ProvideExecutableInstance():MathNet.Symbolics.Traversing.ScanStrategy" Analyze="True" />
          <Member Name="ReuseStrategy():System.Void" Analyze="True" />
          <Member Name="Traverse(MathNet.Symbolics.Port,MathNet.Symbolics.Traversing.IScanVisitor,System.Boolean):System.Void" Analyze="True" />
          <Member Name="Traverse(MathNet.Symbolics.Signal,MathNet.Symbolics.Traversing.IScanVisitor,System.Boolean):System.Void" Analyze="True" />
          <Member Name="Traverse(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Signal&gt;,MathNet.Symbolics.Traversing.IScanVisitor,System.Boolean):System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="ScanStrategy+ConcurrencyMode" Analyze="True">
         <Members>
          <Member Name="MutualExclusive" Analyze="True" />
          <Member Name="ParallelStateful" Analyze="True" />
          <Member Name="ParallelStateless" Analyze="True" />
          <Member Name="value__" Analyze="True" />
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="MathNet.Symbolics.Traversing.Strategies" Analyze="True">
       <Types>
        <Type Name="AllPathsStrategy" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="DoTraverse(MathNet.Symbolics.Port,MathNet.Symbolics.Traversing.IScanVisitor,System.Boolean):System.Void" Analyze="True" />
          <Member Name="DoTraverse(MathNet.Symbolics.Signal,MathNet.Symbolics.Traversing.IScanVisitor,System.Boolean):System.Void" Analyze="True" />
          <Member Name="DoTraverse(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Signal&gt;,MathNet.Symbolics.Traversing.IScanVisitor,System.Boolean):System.Void" Analyze="True" />
          <Member Name="instance" Analyze="True" />
          <Member Name="Instance" Analyze="True">
           <Accessors>
            <Accessor Name="get_Instance():MathNet.Symbolics.Traversing.Strategies.AllPathsStrategy" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="TraverseRootPort(System.Collections.Generic.Stack`1&lt;System.Guid&gt;,MathNet.Symbolics.Port,System.Boolean,MathNet.Symbolics.Traversing.IScanVisitor):System.Void" Analyze="True" />
          <Member Name="TraverseSignal(System.Collections.Generic.Stack`1&lt;System.Guid&gt;,MathNet.Symbolics.Signal,MathNet.Symbolics.Port,System.Boolean,MathNet.Symbolics.Traversing.IScanVisitor):System.Boolean" Analyze="True" />
         </Members>
        </Type>
        <Type Name="AllPortsStrategy" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="DoTraverse(MathNet.Symbolics.Port,MathNet.Symbolics.Traversing.IScanVisitor,System.Boolean):System.Void" Analyze="True" />
          <Member Name="DoTraverse(MathNet.Symbolics.Signal,MathNet.Symbolics.Traversing.IScanVisitor,System.Boolean):System.Void" Analyze="True" />
          <Member Name="DoTraverse(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Signal&gt;,MathNet.Symbolics.Traversing.IScanVisitor,System.Boolean):System.Void" Analyze="True" />
          <Member Name="instance" Analyze="True" />
          <Member Name="Instance" Analyze="True">
           <Accessors>
            <Accessor Name="get_Instance():MathNet.Symbolics.Traversing.Strategies.AllPortsStrategy" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="TraversePort(System.Collections.Generic.List`1&lt;System.Guid&gt;,MathNet.Symbolics.Port,MathNet.Symbolics.Signal,System.Boolean,MathNet.Symbolics.Traversing.IScanVisitor):System.Boolean" Analyze="True" />
         </Members>
        </Type>
        <Type Name="AllSignalsStrategy" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="DoTraverse(MathNet.Symbolics.Port,MathNet.Symbolics.Traversing.IScanVisitor,System.Boolean):System.Void" Analyze="True" />
          <Member Name="DoTraverse(MathNet.Symbolics.Signal,MathNet.Symbolics.Traversing.IScanVisitor,System.Boolean):System.Void" Analyze="True" />
          <Member Name="DoTraverse(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Signal&gt;,MathNet.Symbolics.Traversing.IScanVisitor,System.Boolean):System.Void" Analyze="True" />
          <Member Name="instance" Analyze="True" />
          <Member Name="Instance" Analyze="True">
           <Accessors>
            <Accessor Name="get_Instance():MathNet.Symbolics.Traversing.Strategies.AllSignalsStrategy" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="TraverseSignal(System.Collections.Generic.List`1&lt;System.Guid&gt;,MathNet.Symbolics.Signal,MathNet.Symbolics.Port,System.Boolean,MathNet.Symbolics.Traversing.IScanVisitor):System.Boolean" Analyze="True" />
         </Members>
        </Type>
        <Type Name="AllSpanningTreeStrategy" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="DoTraverse(MathNet.Symbolics.Port,MathNet.Symbolics.Traversing.IScanVisitor,System.Boolean):System.Void" Analyze="True" />
          <Member Name="DoTraverse(MathNet.Symbolics.Signal,MathNet.Symbolics.Traversing.IScanVisitor,System.Boolean):System.Void" Analyze="True" />
          <Member Name="DoTraverse(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Signal&gt;,MathNet.Symbolics.Traversing.IScanVisitor,System.Boolean):System.Void" Analyze="True" />
          <Member Name="instance" Analyze="True" />
          <Member Name="Instance" Analyze="True">
           <Accessors>
            <Accessor Name="get_Instance():MathNet.Symbolics.Traversing.Strategies.AllSpanningTreeStrategy" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="TraversePort(System.Collections.Generic.List`1&lt;System.Guid&gt;,System.Collections.Generic.List`1&lt;System.Guid&gt;,System.Collections.Generic.List`1&lt;System.Guid&gt;,MathNet.Symbolics.Port,MathNet.Symbolics.Signal,System.Boolean,MathNet.Symbolics.Traversing.IScanVisitor):System.Boolean" Analyze="True" />
          <Member Name="TraverseSignal(System.Collections.Generic.List`1&lt;System.Guid&gt;,System.Collections.Generic.List`1&lt;System.Guid&gt;,System.Collections.Generic.List`1&lt;System.Guid&gt;,MathNet.Symbolics.Signal,MathNet.Symbolics.Port,System.Boolean,MathNet.Symbolics.Traversing.IScanVisitor):System.Boolean" Analyze="True" />
         </Members>
        </Type>
        <Type Name="AllStrategy" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="DoTraverse(MathNet.Symbolics.Port,MathNet.Symbolics.Traversing.IScanVisitor,System.Boolean):System.Void" Analyze="True" />
          <Member Name="DoTraverse(MathNet.Symbolics.Signal,MathNet.Symbolics.Traversing.IScanVisitor,System.Boolean):System.Void" Analyze="True" />
          <Member Name="DoTraverse(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Signal&gt;,MathNet.Symbolics.Traversing.IScanVisitor,System.Boolean):System.Void" Analyze="True" />
          <Member Name="instance" Analyze="True" />
          <Member Name="Instance" Analyze="True">
           <Accessors>
            <Accessor Name="get_Instance():MathNet.Symbolics.Traversing.Strategies.AllStrategy" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="TraversePort(System.Collections.Generic.List`1&lt;System.Guid&gt;,System.Collections.Generic.List`1&lt;System.Guid&gt;,System.Collections.Generic.List`1&lt;System.Guid&gt;,MathNet.Symbolics.Port,MathNet.Symbolics.Signal,System.Boolean,MathNet.Symbolics.Traversing.IScanVisitor):System.Boolean" Analyze="True" />
          <Member Name="TraverseSignal(System.Collections.Generic.List`1&lt;System.Guid&gt;,System.Collections.Generic.List`1&lt;System.Guid&gt;,System.Collections.Generic.List`1&lt;System.Guid&gt;,MathNet.Symbolics.Signal,MathNet.Symbolics.Port,System.Boolean,MathNet.Symbolics.Traversing.IScanVisitor):System.Boolean" Analyze="True" />
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="MathNet.Symbolics.Traversing.Visitors" Analyze="True">
       <Types>
        <Type Name="BasicScanVisitor" Analyze="True">
         <Members>
          <Member Name=".ctor(MathNet.Symbolics.Traversing.ProcessSignal,MathNet.Symbolics.Traversing.ProcessSignal,MathNet.Symbolics.Traversing.ProcessPort,MathNet.Symbolics.Traversing.ProcessPort,MathNet.Symbolics.Traversing.ProcessLeafSignal,MathNet.Symbolics.Traversing.ProcessLeafPort,MathNet.Symbolics.Traversing.ProcessLeafBus,MathNet.Symbolics.Traversing.ProcessCycle)" Analyze="True" />
          <Member Name="_cycle" Analyze="True" />
          <Member Name="_enterPort" Analyze="True" />
          <Member Name="_enterSignal" Analyze="True" />
          <Member Name="_leafBus" Analyze="True" />
          <Member Name="_leafPort" Analyze="True" />
          <Member Name="_leafSignal" Analyze="True" />
          <Member Name="_leavePort" Analyze="True" />
          <Member Name="_leaveSignal" Analyze="True" />
          <Member Name="DefaultStrategy" Analyze="True">
           <Accessors>
            <Accessor Name="get_DefaultStrategy():MathNet.Symbolics.Traversing.IScanStrategy" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="EnterPort(MathNet.Symbolics.Port,MathNet.Symbolics.Signal,System.Boolean,System.Boolean):System.Boolean" Analyze="True" />
          <Member Name="EnterSignal(MathNet.Symbolics.Signal,MathNet.Symbolics.Port,System.Boolean,System.Boolean):System.Boolean" Analyze="True" />
          <Member Name="LeavePort(MathNet.Symbolics.Port,MathNet.Symbolics.Signal,System.Boolean,System.Boolean):System.Boolean" Analyze="True" />
          <Member Name="LeaveSignal(MathNet.Symbolics.Signal,MathNet.Symbolics.Port,System.Boolean,System.Boolean):System.Boolean" Analyze="True" />
          <Member Name="VisitCycle(MathNet.Symbolics.Port,MathNet.Symbolics.Signal,MathNet.Symbolics.Signal):System.Boolean" Analyze="True" />
          <Member Name="VisitLeaf(MathNet.Symbolics.Bus,System.Boolean):System.Boolean" Analyze="True" />
          <Member Name="VisitLeaf(MathNet.Symbolics.Port,System.Boolean):System.Boolean" Analyze="True" />
          <Member Name="VisitLeaf(MathNet.Symbolics.Signal,System.Boolean):System.Boolean" Analyze="True" />
         </Members>
        </Type>
        <Type Name="CollectVisitor" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="_buses" Analyze="True" />
          <Member Name="_ports" Analyze="True" />
          <Member Name="_signals" Analyze="True" />
          <Member Name="Buses" Analyze="True">
           <Accessors>
            <Accessor Name="get_Buses():System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Bus&gt;" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="DefaultStrategy" Analyze="True">
           <Accessors>
            <Accessor Name="get_DefaultStrategy():MathNet.Symbolics.Traversing.IScanStrategy" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="EnterPort(MathNet.Symbolics.Port,MathNet.Symbolics.Signal,System.Boolean,System.Boolean):System.Boolean" Analyze="True" />
          <Member Name="EnterSignal(MathNet.Symbolics.Signal,MathNet.Symbolics.Port,System.Boolean,System.Boolean):System.Boolean" Analyze="True" />
          <Member Name="Ports" Analyze="True">
           <Accessors>
            <Accessor Name="get_Ports():System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Port&gt;" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Reset():System.Void" Analyze="True" />
          <Member Name="Signals" Analyze="True">
           <Accessors>
            <Accessor Name="get_Signals():System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Signal&gt;" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="VisitLeaf(MathNet.Symbolics.Bus,System.Boolean):System.Boolean" Analyze="True" />
         </Members>
        </Type>
        <Type Name="ConditionalCollectVisitor" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name=".ctor(System.Predicate`1&lt;MathNet.Symbolics.Bus&gt;)" Analyze="True" />
          <Member Name=".ctor(System.Predicate`1&lt;MathNet.Symbolics.Port&gt;)" Analyze="True" />
          <Member Name=".ctor(System.Predicate`1&lt;MathNet.Symbolics.Signal&gt;)" Analyze="True" />
          <Member Name=".ctor(System.Predicate`1&lt;MathNet.Symbolics.Signal&gt;,System.Predicate`1&lt;MathNet.Symbolics.Port&gt;,System.Predicate`1&lt;MathNet.Symbolics.Bus&gt;)" Analyze="True" />
          <Member Name="_buses" Analyze="True" />
          <Member Name="_busMatch" Analyze="True" />
          <Member Name="_portMatch" Analyze="True" />
          <Member Name="_ports" Analyze="True" />
          <Member Name="_signalMatch" Analyze="True" />
          <Member Name="_signals" Analyze="True" />
          <Member Name="Buses" Analyze="True">
           <Accessors>
            <Accessor Name="get_Buses():System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Bus&gt;" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="DefaultStrategy" Analyze="True">
           <Accessors>
            <Accessor Name="get_DefaultStrategy():MathNet.Symbolics.Traversing.IScanStrategy" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="DummyBusPredicate(MathNet.Symbolics.Bus):System.Boolean" Analyze="True" />
          <Member Name="DummyPortPredicate(MathNet.Symbolics.Port):System.Boolean" Analyze="True" />
          <Member Name="DummySignalPredicate(MathNet.Symbolics.Signal):System.Boolean" Analyze="True" />
          <Member Name="EnterPort(MathNet.Symbolics.Port,MathNet.Symbolics.Signal,System.Boolean,System.Boolean):System.Boolean" Analyze="True" />
          <Member Name="EnterSignal(MathNet.Symbolics.Signal,MathNet.Symbolics.Port,System.Boolean,System.Boolean):System.Boolean" Analyze="True" />
          <Member Name="Ports" Analyze="True">
           <Accessors>
            <Accessor Name="get_Ports():System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Port&gt;" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Reset():System.Void" Analyze="True" />
          <Member Name="Signals" Analyze="True">
           <Accessors>
            <Accessor Name="get_Signals():System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Signal&gt;" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="VisitLeaf(MathNet.Symbolics.Bus,System.Boolean):System.Boolean" Analyze="True" />
         </Members>
        </Type>
        <Type Name="ExistsPortVisitor" Analyze="True">
         <Members>
          <Member Name=".ctor(System.Predicate`1&lt;MathNet.Symbolics.Port&gt;)" Analyze="True" />
          <Member Name="_foundPort" Analyze="True" />
          <Member Name="_foundPortTarget" Analyze="True" />
          <Member Name="_match" Analyze="True" />
          <Member Name="DefaultStrategy" Analyze="True">
           <Accessors>
            <Accessor Name="get_DefaultStrategy():MathNet.Symbolics.Traversing.IScanStrategy" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="EnterPort(MathNet.Symbolics.Port,MathNet.Symbolics.Signal,System.Boolean,System.Boolean):System.Boolean" Analyze="True" />
          <Member Name="Exists" Analyze="True">
           <Accessors>
            <Accessor Name="get_Exists():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="FoundPort" Analyze="True">
           <Accessors>
            <Accessor Name="get_FoundPort():MathNet.Symbolics.Port" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="FoundPortTarget" Analyze="True">
           <Accessors>
            <Accessor Name="get_FoundPortTarget():MathNet.Symbolics.Signal" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="LeavePort(MathNet.Symbolics.Port,MathNet.Symbolics.Signal,System.Boolean,System.Boolean):System.Boolean" Analyze="True" />
          <Member Name="Reset():System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="ExistsSignalVisitor" Analyze="True">
         <Members>
          <Member Name=".ctor(System.Predicate`1&lt;MathNet.Symbolics.Signal&gt;)" Analyze="True" />
          <Member Name="_foundSignal" Analyze="True" />
          <Member Name="_foundSignalTarget" Analyze="True" />
          <Member Name="_match" Analyze="True" />
          <Member Name="DefaultStrategy" Analyze="True">
           <Accessors>
            <Accessor Name="get_DefaultStrategy():MathNet.Symbolics.Traversing.IScanStrategy" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="EnterSignal(MathNet.Symbolics.Signal,MathNet.Symbolics.Port,System.Boolean,System.Boolean):System.Boolean" Analyze="True" />
          <Member Name="Exists" Analyze="True">
           <Accessors>
            <Accessor Name="get_Exists():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="FoundSignal" Analyze="True">
           <Accessors>
            <Accessor Name="get_FoundSignal():MathNet.Symbolics.Signal" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="FoundSignalTarget" Analyze="True">
           <Accessors>
            <Accessor Name="get_FoundSignalTarget():MathNet.Symbolics.Port" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="LeaveSignal(MathNet.Symbolics.Signal,MathNet.Symbolics.Port,System.Boolean,System.Boolean):System.Boolean" Analyze="True" />
          <Member Name="Reset():System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="PortActionVisitor" Analyze="True">
         <Members>
          <Member Name=".ctor(MathNet.Symbolics.Traversing.ActionContinue`1&lt;MathNet.Symbolics.Port&gt;)" Analyze="True" />
          <Member Name="_action" Analyze="True" />
          <Member Name="DefaultStrategy" Analyze="True">
           <Accessors>
            <Accessor Name="get_DefaultStrategy():MathNet.Symbolics.Traversing.IScanStrategy" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="EnterPort(MathNet.Symbolics.Port,MathNet.Symbolics.Signal,System.Boolean,System.Boolean):System.Boolean" Analyze="True" />
         </Members>
        </Type>
        <Type Name="PortConditionalActionVisitor" Analyze="True">
         <Members>
          <Member Name=".ctor(MathNet.Symbolics.Traversing.ActionContinue`1&lt;MathNet.Symbolics.Port&gt;,System.Predicate`1&lt;MathNet.Symbolics.Port&gt;)" Analyze="True" />
          <Member Name="_action" Analyze="True" />
          <Member Name="_match" Analyze="True" />
          <Member Name="DefaultStrategy" Analyze="True">
           <Accessors>
            <Accessor Name="get_DefaultStrategy():MathNet.Symbolics.Traversing.IScanStrategy" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="EnterPort(MathNet.Symbolics.Port,MathNet.Symbolics.Signal,System.Boolean,System.Boolean):System.Boolean" Analyze="True" />
         </Members>
        </Type>
        <Type Name="PortPathCollectVisitor" Analyze="True">
         <Members>
          <Member Name=".ctor(MathNet.Symbolics.Port)" Analyze="True" />
          <Member Name="_currentPath" Analyze="True" />
          <Member Name="_paths" Analyze="True" />
          <Member Name="_source" Analyze="True" />
          <Member Name="DefaultStrategy" Analyze="True">
           <Accessors>
            <Accessor Name="get_DefaultStrategy():MathNet.Symbolics.Traversing.IScanStrategy" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="EnterPort(MathNet.Symbolics.Port,MathNet.Symbolics.Signal,System.Boolean,System.Boolean):System.Boolean" Analyze="True" />
          <Member Name="LeavePort(MathNet.Symbolics.Port,MathNet.Symbolics.Signal,System.Boolean,System.Boolean):System.Boolean" Analyze="True" />
          <Member Name="Paths" Analyze="True">
           <Accessors>
            <Accessor Name="get_Paths():System.Collections.Generic.List`1&lt;System.Collections.Generic.List`1&lt;MathNet.Symbolics.Port&gt;&gt;" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Reset(MathNet.Symbolics.Port):System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="SignalActionVisitor" Analyze="True">
         <Members>
          <Member Name=".ctor(MathNet.Symbolics.Traversing.ActionContinue`1&lt;MathNet.Symbolics.Signal&gt;)" Analyze="True" />
          <Member Name="_action" Analyze="True" />
          <Member Name="DefaultStrategy" Analyze="True">
           <Accessors>
            <Accessor Name="get_DefaultStrategy():MathNet.Symbolics.Traversing.IScanStrategy" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="EnterSignal(MathNet.Symbolics.Signal,MathNet.Symbolics.Port,System.Boolean,System.Boolean):System.Boolean" Analyze="True" />
         </Members>
        </Type>
        <Type Name="SignalConditionalActionVisitor" Analyze="True">
         <Members>
          <Member Name=".ctor(MathNet.Symbolics.Traversing.ActionContinue`1&lt;MathNet.Symbolics.Signal&gt;,System.Predicate`1&lt;MathNet.Symbolics.Signal&gt;)" Analyze="True" />
          <Member Name="_action" Analyze="True" />
          <Member Name="_match" Analyze="True" />
          <Member Name="DefaultStrategy" Analyze="True">
           <Accessors>
            <Accessor Name="get_DefaultStrategy():MathNet.Symbolics.Traversing.IScanStrategy" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="EnterSignal(MathNet.Symbolics.Signal,MathNet.Symbolics.Port,System.Boolean,System.Boolean):System.Boolean" Analyze="True" />
         </Members>
        </Type>
        <Type Name="SignalPathCollectVisitor" Analyze="True">
         <Members>
          <Member Name=".ctor(MathNet.Symbolics.Signal)" Analyze="True" />
          <Member Name="_currentPath" Analyze="True" />
          <Member Name="_paths" Analyze="True" />
          <Member Name="_source" Analyze="True" />
          <Member Name="DefaultStrategy" Analyze="True">
           <Accessors>
            <Accessor Name="get_DefaultStrategy():MathNet.Symbolics.Traversing.IScanStrategy" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="EnterSignal(MathNet.Symbolics.Signal,MathNet.Symbolics.Port,System.Boolean,System.Boolean):System.Boolean" Analyze="True" />
          <Member Name="LeaveSignal(MathNet.Symbolics.Signal,MathNet.Symbolics.Port,System.Boolean,System.Boolean):System.Boolean" Analyze="True" />
          <Member Name="Paths" Analyze="True">
           <Accessors>
            <Accessor Name="get_Paths():System.Collections.Generic.List`1&lt;System.Collections.Generic.List`1&lt;MathNet.Symbolics.Signal&gt;&gt;" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Reset(MathNet.Symbolics.Signal):System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="TrueForAllPortsVisitor" Analyze="True">
         <Members>
          <Member Name=".ctor(System.Predicate`1&lt;MathNet.Symbolics.Port&gt;)" Analyze="True" />
          <Member Name="_failedPort" Analyze="True" />
          <Member Name="_failedPortTarget" Analyze="True" />
          <Member Name="_match" Analyze="True" />
          <Member Name="DefaultStrategy" Analyze="True">
           <Accessors>
            <Accessor Name="get_DefaultStrategy():MathNet.Symbolics.Traversing.IScanStrategy" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="EnterPort(MathNet.Symbolics.Port,MathNet.Symbolics.Signal,System.Boolean,System.Boolean):System.Boolean" Analyze="True" />
          <Member Name="FailedPort" Analyze="True">
           <Accessors>
            <Accessor Name="get_FailedPort():MathNet.Symbolics.Port" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="FailedPortTarget" Analyze="True">
           <Accessors>
            <Accessor Name="get_FailedPortTarget():MathNet.Symbolics.Signal" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="LeavePort(MathNet.Symbolics.Port,MathNet.Symbolics.Signal,System.Boolean,System.Boolean):System.Boolean" Analyze="True" />
          <Member Name="Reset():System.Void" Analyze="True" />
          <Member Name="TrueForAll" Analyze="True">
           <Accessors>
            <Accessor Name="get_TrueForAll():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="TrueForAllSignalsVisitor" Analyze="True">
         <Members>
          <Member Name=".ctor(System.Predicate`1&lt;MathNet.Symbolics.Signal&gt;)" Analyze="True" />
          <Member Name="_failedSignal" Analyze="True" />
          <Member Name="_failedSignalTarget" Analyze="True" />
          <Member Name="_match" Analyze="True" />
          <Member Name="DefaultStrategy" Analyze="True">
           <Accessors>
            <Accessor Name="get_DefaultStrategy():MathNet.Symbolics.Traversing.IScanStrategy" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="EnterSignal(MathNet.Symbolics.Signal,MathNet.Symbolics.Port,System.Boolean,System.Boolean):System.Boolean" Analyze="True" />
          <Member Name="FailedSignal" Analyze="True">
           <Accessors>
            <Accessor Name="get_FailedSignal():MathNet.Symbolics.Signal" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="FailedSignalTarget" Analyze="True">
           <Accessors>
            <Accessor Name="get_FailedSignalTarget():MathNet.Symbolics.Port" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="LeaveSignal(MathNet.Symbolics.Signal,MathNet.Symbolics.Port,System.Boolean,System.Boolean):System.Boolean" Analyze="True" />
          <Member Name="Reset():System.Void" Analyze="True" />
          <Member Name="TrueForAll" Analyze="True">
           <Accessors>
            <Accessor Name="get_TrueForAll():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
     </Namespaces>
    </Module>
   </Modules>
  </Target>
 </Targets>
 <Rules>
  <RuleFiles>
   <RuleFile Name="$(FxCopDir)\Rules\DesignRules.dll" Enabled="True">
    <Rule Name="AbstractTypesShouldNotHaveConstructors" Enabled="True" />
    <Rule Name="AssembliesShouldHaveValidStrongNames" Enabled="True" />
    <Rule Name="AvoidEmptyInterfaces" Enabled="True" />
    <Rule Name="AvoidExcessiveParametersOnGenericTypes" Enabled="True" />
    <Rule Name="AvoidNamespacesWithFewTypes" Enabled="True" />
    <Rule Name="AvoidOutParameters" Enabled="True" />
    <Rule Name="CollectionsShouldImplementGenericInterface" Enabled="True" />
    <Rule Name="ConsiderPassingBaseTypesAsParameters" Enabled="True" />
    <Rule Name="DeclareEventHandlersCorrectly" Enabled="True" />
    <Rule Name="DeclareTypesInNamespaces" Enabled="True" />
    <Rule Name="DefaultParametersShouldNotBeUsed" Enabled="True" />
    <Rule Name="DefineAccessorsForAttributeArguments" Enabled="True" />
    <Rule Name="DoNotCatchGeneralExceptionTypes" Enabled="True" />
    <Rule Name="DoNotDeclareProtectedMembersInSealedTypes" Enabled="True" />
    <Rule Name="DoNotDeclareStaticMembersOnGenericTypes" Enabled="True" />
    <Rule Name="DoNotDeclareVirtualMembersInSealedTypes" Enabled="True" />
    <Rule Name="DoNotDeclareVisibleInstanceFields" Enabled="True" />
    <Rule Name="DoNotExposeGenericLists" Enabled="True" />
    <Rule Name="DoNotHideBaseClassMethods" Enabled="True" />
    <Rule Name="DoNotNestGenericTypesInMemberSignatures" Enabled="True" />
    <Rule Name="DoNotOverloadOperatorEqualsOnReferenceTypes" Enabled="True" />
    <Rule Name="DoNotPassTypesByReference" Enabled="True" />
    <Rule Name="EnumeratorsShouldBeStronglyTyped" Enabled="True" />
    <Rule Name="EnumsShouldHaveZeroValue" Enabled="True" />
    <Rule Name="EnumStorageShouldBeInt32" Enabled="True" />
    <Rule Name="ExceptionsShouldBePublic" Enabled="True" />
    <Rule Name="GenericMethodsShouldProvideTypeParameter" Enabled="True" />
    <Rule Name="ICollectionImplementationsHaveStronglyTypedMembers" Enabled="True" />
    <Rule Name="ImplementIDisposableCorrectly" Enabled="True" />
    <Rule Name="ImplementStandardExceptionConstructors" Enabled="True" />
    <Rule Name="IndexersShouldNotBeMultidimensional" Enabled="True" />
    <Rule Name="InterfaceMethodsShouldBeCallableByChildTypes" Enabled="True" />
    <Rule Name="ListsAreStronglyTyped" Enabled="True" />
    <Rule Name="MarkAssembliesWithAssemblyVersion" Enabled="True" />
    <Rule Name="MarkAssembliesWithClsCompliant" Enabled="True" />
    <Rule Name="MarkAssembliesWithComVisible" Enabled="True" />
    <Rule Name="MarkAttributesWithAttributeUsage" Enabled="True" />
    <Rule Name="MarkEnumsWithFlags" Enabled="True" />
    <Rule Name="MembersShouldNotExposeCertainConcreteTypes" Enabled="True" />
    <Rule Name="MovePInvokesToNativeMethodsClass" Enabled="True" />
    <Rule Name="NestedTypesShouldNotBeVisible" Enabled="True" />
    <Rule Name="OverloadOperatorEqualsOnOverloadingAddAndSubtract" Enabled="True" />
    <Rule Name="OverrideMethodsOnComparableTypes" Enabled="True" />
    <Rule Name="PropertiesShouldNotBeWriteOnly" Enabled="True" />
    <Rule Name="ProvideObsoleteAttributeMessage" Enabled="True" />
    <Rule Name="ReplaceRepetitiveArgumentsWithParamsArray" Enabled="True" />
    <Rule Name="StaticHolderTypesShouldBeSealed" Enabled="True" />
    <Rule Name="StaticHolderTypesShouldNotHaveConstructors" Enabled="True" />
    <Rule Name="StringUriOverloadsCallSystemUriOverloads" Enabled="True" />
    <Rule Name="TypesShouldNotExtendCertainBaseTypes" Enabled="True" />
    <Rule Name="TypesThatOwnDisposableFieldsShouldBeDisposable" Enabled="True" />
    <Rule Name="TypesThatOwnNativeResourcesShouldBeDisposable" Enabled="True" />
    <Rule Name="UriParametersShouldNotBeStrings" Enabled="True" />
    <Rule Name="UriPropertiesShouldNotBeStrings" Enabled="True" />
    <Rule Name="UriReturnValuesShouldNotBeStrings" Enabled="True" />
    <Rule Name="UseEventsWhereAppropriate" Enabled="True" />
    <Rule Name="UseGenericEventHandlerInstances" Enabled="True" />
    <Rule Name="UseGenericsWhereAppropriate" Enabled="True" />
    <Rule Name="UseIntegralOrStringArgumentForIndexers" Enabled="True" />
    <Rule Name="UsePropertiesWhereAppropriate" Enabled="True" />
    <Rule Name="ValidateArgumentsOfPublicMethods" Enabled="True" />
   </RuleFile>
   <RuleFile Name="$(FxCopDir)\Rules\GlobalizationRules.dll" Enabled="True">
    <Rule Name="AvoidDuplicateAccelerators" Enabled="True" />
    <Rule Name="DoNotHardcodeLocaleSpecificStrings" Enabled="True" />
    <Rule Name="DoNotPassLiteralsAsLocalizedParameters" Enabled="True" />
    <Rule Name="SetLocaleForDataTypes" Enabled="True" />
    <Rule Name="SpecifyCultureInfo" Enabled="True" />
    <Rule Name="SpecifyIFormatProvider" Enabled="True" />
    <Rule Name="SpecifyMessageBoxOptions" Enabled="True" />
   </RuleFile>
   <RuleFile Name="$(FxCopDir)\Rules\InteroperabilityRules.dll" Enabled="True">
    <Rule Name="AutoLayoutTypesShouldNotBeComVisible" Enabled="True" />
    <Rule Name="AvoidInt64ArgumentsForVB6Clients" Enabled="True" />
    <Rule Name="AvoidNonpublicFieldsInComVisibleValueTypes" Enabled="True" />
    <Rule Name="AvoidOverloadsInComVisibleInterfaces" Enabled="True" />
    <Rule Name="AvoidStaticMembersInComVisibleTypes" Enabled="True" />
    <Rule Name="CallGetLastErrorImmediatelyAfterPInvoke" Enabled="True" />
    <Rule Name="ComRegistrationMethodsShouldBeMatched" Enabled="True" />
    <Rule Name="ComRegistrationMethodsShouldNotBeVisible" Enabled="True" />
    <Rule Name="ComVisibleTypeBaseTypesShouldBeComVisible" Enabled="True" />
    <Rule Name="ComVisibleTypesShouldBeCreatable" Enabled="True" />
    <Rule Name="DeclarePInvokesCorrectly" Enabled="True" />
    <Rule Name="DoNotUseAutoDualClassInterfaceType" Enabled="True" />
    <Rule Name="MarkBooleanPInvokeArgumentsWithMarshalAs" Enabled="True" />
    <Rule Name="MarkComSourceInterfacesAsIDispatch" Enabled="True" />
    <Rule Name="PInvokeEntryPointsShouldExist" Enabled="True" />
    <Rule Name="PInvokesShouldNotBeVisible" Enabled="True" />
   </RuleFile>
   <RuleFile Name="$(FxCopDir)\Rules\MobilityRules.dll" Enabled="True">
    <Rule Name="DoNotUseIdleProcessPriority" Enabled="True" />
    <Rule Name="DoNotUseTimersThatPreventPowerStateChanges" Enabled="True" />
   </RuleFile>
   <RuleFile Name="$(FxCopDir)\Rules\NamingRules.dll" Enabled="True">
    <Rule Name="AvoidLanguageSpecificTypeNamesInParameters" Enabled="True" />
    <Rule Name="AvoidTypeNamesInParameters" Enabled="True" />
    <Rule Name="CompoundWordsShouldBeCasedCorrectly" Enabled="True" />
    <Rule Name="DoNotNameEnumValuesReserved" Enabled="True" />
    <Rule Name="DoNotPrefixEnumValuesWithTypeName" Enabled="True" />
    <Rule Name="EventsShouldNotHaveBeforeOrAfterPrefix" Enabled="True" />
    <Rule Name="FlagsEnumsShouldHavePluralNames" Enabled="True" />
    <Rule Name="IdentifiersShouldBeCasedCorrectly" Enabled="True" />
    <Rule Name="IdentifiersShouldBeSpelledCorrectly" Enabled="True" />
    <Rule Name="IdentifiersShouldDifferByMoreThanCase" Enabled="True" />
    <Rule Name="IdentifiersShouldHaveCorrectPrefix" Enabled="True" />
    <Rule Name="IdentifiersShouldHaveCorrectSuffix" Enabled="True" />
    <Rule Name="IdentifiersShouldNotContainUnderscores" Enabled="True" />
    <Rule Name="IdentifiersShouldNotHaveIncorrectPrefix" Enabled="True" />
    <Rule Name="IdentifiersShouldNotHaveIncorrectSuffix" Enabled="True" />
    <Rule Name="IdentifiersShouldNotMatchKeywords" Enabled="True" />
    <Rule Name="LongAcronymsShouldBePascalCased" Enabled="True" />
    <Rule Name="OnlyFlagsEnumsShouldHavePluralNames" Enabled="True" />
    <Rule Name="ParameterNamesShouldMatchBaseDeclaration" Enabled="True" />
    <Rule Name="ParameterNamesShouldNotMatchMemberNames" Enabled="True" />
    <Rule Name="PropertyNamesShouldNotMatchGetMethods" Enabled="True" />
    <Rule Name="ResourceStringCompoundWordsShouldBeCasedCorrectly" Enabled="True" />
    <Rule Name="ResourceStringsShouldBeSpelledCorrectly" Enabled="True" />
    <Rule Name="ShortAcronymsShouldBeUppercase" Enabled="True" />
    <Rule Name="TypeNamesShouldNotMatchNamespaces" Enabled="True" />
    <Rule Name="UsePreferredTerms" Enabled="True" />
   </RuleFile>
   <RuleFile Name="$(FxCopDir)\Rules\PerformanceRules.dll" Enabled="True">
    <Rule Name="AvoidExcessiveLocals" Enabled="True" />
    <Rule Name="AvoidUncalledPrivateCode" Enabled="True" />
    <Rule Name="AvoidUninstantiatedInternalClasses" Enabled="True" />
    <Rule Name="AvoidUnnecessaryStringCreation" Enabled="True" />
    <Rule Name="AvoidUnsealedAttributes" Enabled="True" />
    <Rule Name="AvoidUnusedPrivateFields" Enabled="True" />
    <Rule Name="DisposeMethodsShouldCallSuppressFinalize" Enabled="True" />
    <Rule Name="DoNotCallPropertiesThatCloneValuesInLoops" Enabled="True" />
    <Rule Name="DoNotCastUnnecessarily" Enabled="True" />
    <Rule Name="DoNotConcatenateStringsInsideLoops" Enabled="True" />
    <Rule Name="DoNotInitializeUnnecessarily" Enabled="True" />
    <Rule Name="InitializeReferenceTypeStaticFieldsInline" Enabled="True" />
    <Rule Name="MarkMembersAsStatic" Enabled="True" />
    <Rule Name="OverrideEqualsAndOperatorEqualsOnValueTypes" Enabled="True" />
    <Rule Name="PreferJaggedArraysOverMultidimensional" Enabled="True" />
    <Rule Name="PropertiesShouldNotReturnArrays" Enabled="True" />
    <Rule Name="RemoveEmptyFinalizers" Enabled="True" />
    <Rule Name="RemoveUnusedLocals" Enabled="True" />
    <Rule Name="TestForEmptyStringsUsingStringLength" Enabled="True" />
    <Rule Name="UseLiteralsWhereAppropriate" Enabled="True" />
   </RuleFile>
   <RuleFile Name="$(FxCopDir)\Rules\PortabilityRules.dll" Enabled="True">
    <Rule Name="PInvokeDeclarationsShouldBePortable" Enabled="True" />
    <Rule Name="ValueTypeFieldsShouldBePortable" Enabled="True" />
   </RuleFile>
   <RuleFile Name="$(FxCopDir)\Rules\SecurityRules.dll" Enabled="True">
    <Rule Name="AptcaMethodsShouldOnlyCallAptcaMethods" Enabled="True" />
    <Rule Name="AptcaTypesShouldOnlyExtendAptcaBaseTypes" Enabled="True" />
    <Rule Name="ArrayFieldsShouldNotBeReadOnly" Enabled="True" />
    <Rule Name="CallGCKeepAliveWhenUsingNativeResources" Enabled="True" />
    <Rule Name="CatchNonClsCompliantExceptionsInGeneralHandlers" Enabled="True" />
    <Rule Name="DoNotDeclareReadOnlyMutableReferenceTypes" Enabled="True" />
    <Rule Name="DoNotIndirectlyExposeMethodsWithLinkDemands" Enabled="True" />
    <Rule Name="MethodSecurityShouldBeASupersetOfType" Enabled="True" />
    <Rule Name="OverrideLinkDemandsShouldBeIdenticalToBase" Enabled="True" />
    <Rule Name="PointersShouldNotBeVisible" Enabled="True" />
    <Rule Name="ReviewDeclarativeSecurityOnValueTypes" Enabled="True" />
    <Rule Name="ReviewDenyAndPermitOnlyUsage" Enabled="True" />
    <Rule Name="ReviewImperativeSecurity" Enabled="True" />
    <Rule Name="ReviewSqlQueriesForSecurityVulnerabilities" Enabled="True" />
    <Rule Name="ReviewSuppressUnmanagedCodeSecurityUsage" Enabled="True" />
    <Rule Name="ReviewVisibleEventHandlers" Enabled="True" />
    <Rule Name="SealMethodsThatSatisfyPrivateInterfaces" Enabled="True" />
    <Rule Name="SecureAsserts" Enabled="True" />
    <Rule Name="SecuredTypesShouldNotExposeFields" Enabled="True" />
    <Rule Name="SecureGetObjectDataOverrides" Enabled="True" />
    <Rule Name="SecureSerializationConstructors" Enabled="True" />
    <Rule Name="SecurityTransparentAssembliesShouldNotContainSecurityCriticalCode" Enabled="True" />
    <Rule Name="SecurityTransparentCodeShouldNotAssert" Enabled="True" />
    <Rule Name="SecurityTransparentCodeShouldNotReferenceNonpublicSecurityCriticalCode" Enabled="True" />
    <Rule Name="SpecifyMarshalingForPInvokeStringArguments" Enabled="True" />
    <Rule Name="StaticConstructorsShouldBePrivate" Enabled="True" />
    <Rule Name="TypeLinkDemandsRequireInheritanceDemands" Enabled="True" />
    <Rule Name="WrapVulnerableFinallyClausesInOuterTry" Enabled="True" />
   </RuleFile>
   <RuleFile Name="$(FxCopDir)\Rules\UsageRules.dll" Enabled="True">
    <Rule Name="AssembliesShouldDeclareMinimumSecurity" Enabled="True" />
    <Rule Name="AttributeStringLiteralsShouldParseCorrectly" Enabled="True" />
    <Rule Name="CallBaseClassMethodsOnISerializableTypes" Enabled="True" />
    <Rule Name="CollectionPropertiesShouldBeReadOnly" Enabled="True" />
    <Rule Name="DisposableFieldsShouldBeDisposed" Enabled="True" />
    <Rule Name="DisposableTypesShouldDeclareFinalizer" Enabled="True" />
    <Rule Name="DisposeMethodsShouldCallBaseClassDispose" Enabled="True" />
    <Rule Name="DoNotCallOverridableMethodsInConstructors" Enabled="True" />
    <Rule Name="DoNotDecreaseInheritedMemberVisibility" Enabled="True" />
    <Rule Name="DoNotDisposeObjectsMultipleTimes" Enabled="True" />
    <Rule Name="DoNotIgnoreMethodResults" Enabled="True" />
    <Rule Name="DoNotMarkEnumsWithFlags" Enabled="True" />
    <Rule Name="DoNotMarkServicedComponentsWithWebMethod" Enabled="True" />
    <Rule Name="DoNotRaiseExceptionsInFilterBlocks" Enabled="True" />
    <Rule Name="DoNotRaiseReservedExceptionTypes" Enabled="True" />
    <Rule Name="DoNotShipUnreleasedResourceFormats" Enabled="True" />
    <Rule Name="FinalizersShouldBeProtected" Enabled="True" />
    <Rule Name="FinalizersShouldCallBaseClassFinalizer" Enabled="True" />
    <Rule Name="ImplementISerializableCorrectly" Enabled="True" />
    <Rule Name="ImplementSerializationConstructors" Enabled="True" />
    <Rule Name="ImplementSerializationMethodsCorrectly" Enabled="True" />
    <Rule Name="InitializeValueTypeStaticFieldsInline" Enabled="True" />
    <Rule Name="InstantiateArgumentExceptionsCorrectly" Enabled="True" />
    <Rule Name="LiteralsShouldBeSpelledCorrectly" Enabled="True" />
    <Rule Name="MarkAllNonSerializableFields" Enabled="True" />
    <Rule Name="MarkISerializableTypesWithSerializable" Enabled="True" />
    <Rule Name="MarkWindowsFormsEntryPointsWithStaThread" Enabled="True" />
    <Rule Name="MembersShouldDifferByMoreThanReturnType" Enabled="True" />
    <Rule Name="NonConstantFieldsShouldNotBeVisible" Enabled="True" />
    <Rule Name="OperationsShouldNotOverflow" Enabled="True" />
    <Rule Name="OperatorOverloadsHaveNamedAlternates" Enabled="True" />
    <Rule Name="OperatorsShouldHaveSymmetricalOverloads" Enabled="True" />
    <Rule Name="OverloadOperatorEqualsOnOverridingValueTypeEquals" Enabled="True" />
    <Rule Name="OverrideEqualsOnOverloadingOperatorEquals" Enabled="True" />
    <Rule Name="OverrideGetHashCodeOnOverridingEquals" Enabled="True" />
    <Rule Name="PassSystemUriObjectsInsteadOfStrings" Enabled="True" />
    <Rule Name="ProvideCorrectArgumentsToFormattingMethods" Enabled="True" />
    <Rule Name="ProvideDeserializationMethodsForOptionalFields" Enabled="True" />
    <Rule Name="RethrowToPreserveStackDetails" Enabled="True" />
    <Rule Name="ReviewUnusedParameters" Enabled="True" />
    <Rule Name="TestForNaNCorrectly" Enabled="True" />
    <Rule Name="UseManagedEquivalentsOfWin32Api" Enabled="True" />
    <Rule Name="UseParamsForVariableArguments" Enabled="True" />
   </RuleFile>
  </RuleFiles>
  <Groups />
  <Settings />
 </Rules>
 <FxCopReport Version="1.35">
  <Namespaces>
   <Namespace Name="MathNet.Symbolics">
    <Messages>
     <Message Id="Symbolics" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2007-03-25 19:46:45Z">
      <Issue Name="Namespace">
       <Item>Symbolics</Item>
       <Item>MathNet.Symbolics</Item>
      </Issue>
     </Message>
    </Messages>
   </Namespace>
   <Namespace Name="MathNet.Symbolics.Backend.Channels">
    <Messages>
     <Message Id="Backend" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Created="2006-08-14 12:24:04Z">
      <Issue Name="ShouldBeCompoundWord">
       <Item>Backend</Item>
       <Item>namespace</Item>
       <Item>MathNet.Symbolics.Backend.Channels</Item>
       <Item>BackEnd</Item>
      </Issue>
     </Message>
     <Message Id="Symbolics" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-14 12:24:04Z">
      <Issue Name="Namespace">
       <Item>Symbolics</Item>
       <Item>MathNet.Symbolics.Backend.Channels</Item>
      </Issue>
     </Message>
    </Messages>
   </Namespace>
   <Namespace Name="MathNet.Symbolics.Backend.Channels.Commands">
    <Messages>
     <Message Id="Backend" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Created="2006-08-14 12:24:04Z">
      <Issue Name="ShouldBeCompoundWord">
       <Item>Backend</Item>
       <Item>namespace</Item>
       <Item>MathNet.Symbolics.Backend.Channels.Commands</Item>
       <Item>BackEnd</Item>
      </Issue>
     </Message>
     <Message Id="Symbolics" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-14 12:24:04Z">
      <Issue Name="Namespace">
       <Item>Symbolics</Item>
       <Item>MathNet.Symbolics.Backend.Channels.Commands</Item>
      </Issue>
     </Message>
    </Messages>
   </Namespace>
   <Namespace Name="MathNet.Symbolics.Backend.Containers">
    <Messages>
     <Message Id="Backend" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Created="2006-08-14 12:24:04Z">
      <Issue Name="ShouldBeCompoundWord">
       <Item>Backend</Item>
       <Item>namespace</Item>
       <Item>MathNet.Symbolics.Backend.Containers</Item>
       <Item>BackEnd</Item>
      </Issue>
     </Message>
     <Message Id="Symbolics" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-14 12:24:04Z">
      <Issue Name="Namespace">
       <Item>Symbolics</Item>
       <Item>MathNet.Symbolics.Backend.Containers</Item>
      </Issue>
     </Message>
    </Messages>
   </Namespace>
   <Namespace Name="MathNet.Symbolics.Backend.Mapping">
    <Messages>
     <Message TypeName="AvoidNamespacesWithFewTypes" Category="Microsoft.Design" CheckId="CA1020" Created="2007-03-25 19:46:45Z">
      <Issue>
       <Item>MathNet.Symbolics.Backend.Mapping</Item>
      </Issue>
     </Message>
     <Message Id="Backend" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Created="2007-03-25 19:46:45Z">
      <Issue Name="ShouldBeCompoundWord">
       <Item>Backend</Item>
       <Item>namespace</Item>
       <Item>MathNet.Symbolics.Backend.Mapping</Item>
       <Item>BackEnd</Item>
      </Issue>
     </Message>
     <Message Id="Symbolics" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2007-03-25 19:46:45Z">
      <Issue Name="Namespace">
       <Item>Symbolics</Item>
       <Item>MathNet.Symbolics.Backend.Mapping</Item>
      </Issue>
     </Message>
    </Messages>
   </Namespace>
   <Namespace Name="MathNet.Symbolics.Backend.Persistence">
    <Messages>
     <Message TypeName="AvoidNamespacesWithFewTypes" Category="Microsoft.Design" CheckId="CA1020" Created="2007-03-25 19:46:45Z">
      <Issue>
       <Item>MathNet.Symbolics.Backend.Persistence</Item>
      </Issue>
     </Message>
     <Message Id="Backend" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Created="2007-03-25 19:46:45Z">
      <Issue Name="ShouldBeCompoundWord">
       <Item>Backend</Item>
       <Item>namespace</Item>
       <Item>MathNet.Symbolics.Backend.Persistence</Item>
       <Item>BackEnd</Item>
      </Issue>
     </Message>
     <Message Id="Symbolics" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2007-03-25 19:46:45Z">
      <Issue Name="Namespace">
       <Item>Symbolics</Item>
       <Item>MathNet.Symbolics.Backend.Persistence</Item>
      </Issue>
     </Message>
    </Messages>
   </Namespace>
   <Namespace Name="MathNet.Symbolics.Backend.Properties">
    <Messages>
     <Message TypeName="AvoidNamespacesWithFewTypes" Category="Microsoft.Design" CheckId="CA1020" Created="2007-03-25 19:46:45Z">
      <Issue>
       <Item>MathNet.Symbolics.Backend.Properties</Item>
      </Issue>
     </Message>
     <Message Id="Backend" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Created="2006-08-14 12:24:04Z">
      <Issue Name="ShouldBeCompoundWord">
       <Item>Backend</Item>
       <Item>namespace</Item>
       <Item>MathNet.Symbolics.Backend.Properties</Item>
       <Item>BackEnd</Item>
      </Issue>
     </Message>
     <Message Id="Symbolics" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-14 12:24:04Z">
      <Issue Name="Namespace">
       <Item>Symbolics</Item>
       <Item>MathNet.Symbolics.Backend.Properties</Item>
      </Issue>
     </Message>
    </Messages>
   </Namespace>
   <Namespace Name="MathNet.Symbolics.Backend.Templates">
    <Messages>
     <Message TypeName="AvoidNamespacesWithFewTypes" Category="Microsoft.Design" CheckId="CA1020" Created="2007-03-25 19:46:45Z">
      <Issue>
       <Item>MathNet.Symbolics.Backend.Templates</Item>
      </Issue>
     </Message>
     <Message Id="Backend" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Created="2006-08-14 12:24:04Z">
      <Issue Name="ShouldBeCompoundWord">
       <Item>Backend</Item>
       <Item>namespace</Item>
       <Item>MathNet.Symbolics.Backend.Templates</Item>
       <Item>BackEnd</Item>
      </Issue>
     </Message>
     <Message Id="Symbolics" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-14 12:24:04Z">
      <Issue Name="Namespace">
       <Item>Symbolics</Item>
       <Item>MathNet.Symbolics.Backend.Templates</Item>
      </Issue>
     </Message>
    </Messages>
   </Namespace>
   <Namespace Name="MathNet.Symbolics.Backend.Utils">
    <Messages>
     <Message TypeName="AvoidNamespacesWithFewTypes" Category="Microsoft.Design" CheckId="CA1020" Created="2007-03-25 19:46:45Z">
      <Issue>
       <Item>MathNet.Symbolics.Backend.Utils</Item>
      </Issue>
     </Message>
     <Message Id="Backend" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Created="2007-03-25 19:46:45Z">
      <Issue Name="ShouldBeCompoundWord">
       <Item>Backend</Item>
       <Item>namespace</Item>
       <Item>MathNet.Symbolics.Backend.Utils</Item>
       <Item>BackEnd</Item>
      </Issue>
     </Message>
     <Message Id="Symbolics" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2007-03-25 19:46:45Z">
      <Issue Name="Namespace">
       <Item>Symbolics</Item>
       <Item>MathNet.Symbolics.Backend.Utils</Item>
      </Issue>
     </Message>
     <Message Id="Utils" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2007-03-25 19:46:45Z">
      <Issue Name="Namespace">
       <Item>Utils</Item>
       <Item>MathNet.Symbolics.Backend.Utils</Item>
      </Issue>
     </Message>
    </Messages>
   </Namespace>
   <Namespace Name="MathNet.Symbolics.Builder">
    <Messages>
     <Message Id="Symbolics" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2007-03-25 19:46:45Z">
      <Issue Name="Namespace">
       <Item>Symbolics</Item>
       <Item>MathNet.Symbolics.Builder</Item>
      </Issue>
     </Message>
    </Messages>
   </Namespace>
   <Namespace Name="MathNet.Symbolics.Conversion">
    <Messages>
     <Message Id="Symbolics" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2007-03-25 19:46:45Z">
      <Issue Name="Namespace">
       <Item>Symbolics</Item>
       <Item>MathNet.Symbolics.Conversion</Item>
      </Issue>
     </Message>
    </Messages>
   </Namespace>
   <Namespace Name="MathNet.Symbolics.Core">
    <Messages>
     <Message Id="Symbolics" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-14 12:24:04Z">
      <Issue Name="Namespace">
       <Item>Symbolics</Item>
       <Item>MathNet.Symbolics.Core</Item>
      </Issue>
     </Message>
    </Messages>
   </Namespace>
   <Namespace Name="MathNet.Symbolics.Events">
    <Messages>
     <Message Id="Symbolics" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2007-03-25 19:46:45Z">
      <Issue Name="Namespace">
       <Item>Symbolics</Item>
       <Item>MathNet.Symbolics.Events</Item>
      </Issue>
     </Message>
    </Messages>
   </Namespace>
   <Namespace Name="MathNet.Symbolics.Exceptions">
    <Messages>
     <Message Id="Symbolics" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2007-03-25 19:46:45Z">
      <Issue Name="Namespace">
       <Item>Symbolics</Item>
       <Item>MathNet.Symbolics.Exceptions</Item>
      </Issue>
     </Message>
    </Messages>
   </Namespace>
   <Namespace Name="MathNet.Symbolics.Interpreter">
    <Messages>
     <Message Id="Symbolics" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2007-03-25 19:46:45Z">
      <Issue Name="Namespace">
       <Item>Symbolics</Item>
       <Item>MathNet.Symbolics.Interpreter</Item>
      </Issue>
     </Message>
    </Messages>
   </Namespace>
   <Namespace Name="MathNet.Symbolics.Library">
    <Messages>
     <Message Id="Symbolics" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2007-03-25 19:46:45Z">
      <Issue Name="Namespace">
       <Item>Symbolics</Item>
       <Item>MathNet.Symbolics.Library</Item>
      </Issue>
     </Message>
    </Messages>
   </Namespace>
   <Namespace Name="MathNet.Symbolics.Manipulation">
    <Messages>
     <Message Id="Symbolics" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2007-03-25 19:46:45Z">
      <Issue Name="Namespace">
       <Item>Symbolics</Item>
       <Item>MathNet.Symbolics.Manipulation</Item>
      </Issue>
     </Message>
    </Messages>
   </Namespace>
   <Namespace Name="MathNet.Symbolics.Mediator">
    <Messages>
     <Message Id="Symbolics" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2007-03-25 19:46:45Z">
      <Issue Name="Namespace">
       <Item>Symbolics</Item>
       <Item>MathNet.Symbolics.Mediator</Item>
      </Issue>
     </Message>
    </Messages>
   </Namespace>
   <Namespace Name="MathNet.Symbolics.Packages.ObjectModel">
    <Messages>
     <Message Id="Symbolics" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2007-03-25 19:46:45Z">
      <Issue Name="Namespace">
       <Item>Symbolics</Item>
       <Item>MathNet.Symbolics.Packages.ObjectModel</Item>
      </Issue>
     </Message>
    </Messages>
   </Namespace>
   <Namespace Name="MathNet.Symbolics.Packages.Standard">
    <Messages>
     <Message Id="Symbolics" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2007-03-25 19:46:45Z">
      <Issue Name="Namespace">
       <Item>Symbolics</Item>
       <Item>MathNet.Symbolics.Packages.Standard</Item>
      </Issue>
     </Message>
    </Messages>
   </Namespace>
   <Namespace Name="MathNet.Symbolics.Packages.Standard.Algebra">
    <Messages>
     <Message TypeName="AvoidNamespacesWithFewTypes" Category="Microsoft.Design" CheckId="CA1020" Created="2007-03-25 19:46:45Z">
      <Issue>
       <Item>MathNet.Symbolics.Packages.Standard.Algebra</Item>
      </Issue>
     </Message>
     <Message Id="Symbolics" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2007-03-25 19:46:45Z">
      <Issue Name="Namespace">
       <Item>Symbolics</Item>
       <Item>MathNet.Symbolics.Packages.Standard.Algebra</Item>
      </Issue>
     </Message>
    </Messages>
   </Namespace>
   <Namespace Name="MathNet.Symbolics.Packages.Standard.Analysis">
    <Messages>
     <Message TypeName="AvoidNamespacesWithFewTypes" Category="Microsoft.Design" CheckId="CA1020" Created="2007-03-25 19:46:45Z">
      <Issue>
       <Item>MathNet.Symbolics.Packages.Standard.Analysis</Item>
      </Issue>
     </Message>
     <Message Id="Symbolics" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2007-03-25 19:46:45Z">
      <Issue Name="Namespace">
       <Item>Symbolics</Item>
       <Item>MathNet.Symbolics.Packages.Standard.Analysis</Item>
      </Issue>
     </Message>
    </Messages>
   </Namespace>
   <Namespace Name="MathNet.Symbolics.Packages.Standard.Arithmetics">
    <Messages>
     <Message Id="Arithmetics" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2007-03-25 19:46:45Z">
      <Issue Name="Namespace">
       <Item>Arithmetics</Item>
       <Item>MathNet.Symbolics.Packages.Standard.Arithmetics</Item>
      </Issue>
     </Message>
     <Message Id="Symbolics" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2007-03-25 19:46:45Z">
      <Issue Name="Namespace">
       <Item>Symbolics</Item>
       <Item>MathNet.Symbolics.Packages.Standard.Arithmetics</Item>
      </Issue>
     </Message>
    </Messages>
   </Namespace>
   <Namespace Name="MathNet.Symbolics.Packages.Standard.Flow">
    <Messages>
     <Message TypeName="AvoidNamespacesWithFewTypes" Category="Microsoft.Design" CheckId="CA1020" Created="2007-03-25 19:46:45Z">
      <Issue>
       <Item>MathNet.Symbolics.Packages.Standard.Flow</Item>
      </Issue>
     </Message>
     <Message Id="Symbolics" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2007-03-25 19:46:45Z">
      <Issue Name="Namespace">
       <Item>Symbolics</Item>
       <Item>MathNet.Symbolics.Packages.Standard.Flow</Item>
      </Issue>
     </Message>
    </Messages>
   </Namespace>
   <Namespace Name="MathNet.Symbolics.Packages.Standard.Logic">
    <Messages>
     <Message Id="Symbolics" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2007-03-25 19:46:45Z">
      <Issue Name="Namespace">
       <Item>Symbolics</Item>
       <Item>MathNet.Symbolics.Packages.Standard.Logic</Item>
      </Issue>
     </Message>
    </Messages>
   </Namespace>
   <Namespace Name="MathNet.Symbolics.Packages.Standard.Properties">
    <Messages>
     <Message Id="Symbolics" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2007-03-25 19:46:45Z">
      <Issue Name="Namespace">
       <Item>Symbolics</Item>
       <Item>MathNet.Symbolics.Packages.Standard.Properties</Item>
      </Issue>
     </Message>
    </Messages>
   </Namespace>
   <Namespace Name="MathNet.Symbolics.Packages.Standard.Structures">
    <Messages>
     <Message Id="Symbolics" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2007-03-25 19:46:45Z">
      <Issue Name="Namespace">
       <Item>Symbolics</Item>
       <Item>MathNet.Symbolics.Packages.Standard.Structures</Item>
      </Issue>
     </Message>
    </Messages>
   </Namespace>
   <Namespace Name="MathNet.Symbolics.Packages.Standard.TimeCurves">
    <Messages>
     <Message TypeName="AvoidNamespacesWithFewTypes" Category="Microsoft.Design" CheckId="CA1020" Created="2007-03-25 19:46:45Z">
      <Issue>
       <Item>MathNet.Symbolics.Packages.Standard.TimeCurves</Item>
      </Issue>
     </Message>
     <Message Id="Symbolics" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2007-03-25 19:46:45Z">
      <Issue Name="Namespace">
       <Item>Symbolics</Item>
       <Item>MathNet.Symbolics.Packages.Standard.TimeCurves</Item>
      </Issue>
     </Message>
    </Messages>
   </Namespace>
   <Namespace Name="MathNet.Symbolics.Packages.Standard.Trigonometry">
    <Messages>
     <Message Id="Symbolics" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2007-03-25 19:46:45Z">
      <Issue Name="Namespace">
       <Item>Symbolics</Item>
       <Item>MathNet.Symbolics.Packages.Standard.Trigonometry</Item>
      </Issue>
     </Message>
    </Messages>
   </Namespace>
   <Namespace Name="MathNet.Symbolics.Patterns.Toolkit">
    <Messages>
     <Message Id="Symbolics" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2007-03-25 19:46:45Z">
      <Issue Name="Namespace">
       <Item>Symbolics</Item>
       <Item>MathNet.Symbolics.Patterns.Toolkit</Item>
      </Issue>
     </Message>
    </Messages>
   </Namespace>
   <Namespace Name="MathNet.Symbolics.Repository">
    <Messages>
     <Message Id="Symbolics" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2007-03-25 19:46:45Z">
      <Issue Name="Namespace">
       <Item>Symbolics</Item>
       <Item>MathNet.Symbolics.Repository</Item>
      </Issue>
     </Message>
    </Messages>
   </Namespace>
   <Namespace Name="MathNet.Symbolics.Simulation">
    <Messages>
     <Message Id="Symbolics" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2007-03-25 19:46:45Z">
      <Issue Name="Namespace">
       <Item>Symbolics</Item>
       <Item>MathNet.Symbolics.Simulation</Item>
      </Issue>
     </Message>
    </Messages>
   </Namespace>
   <Namespace Name="MathNet.Symbolics.SystemBuilder.Toolkit">
    <Messages>
     <Message Id="Symbolics" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2007-03-25 19:46:45Z">
      <Issue Name="Namespace">
       <Item>Symbolics</Item>
       <Item>MathNet.Symbolics.SystemBuilder.Toolkit</Item>
      </Issue>
     </Message>
    </Messages>
   </Namespace>
   <Namespace Name="MathNet.Symbolics.Traversing">
    <Messages>
     <Message Id="Symbolics" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2007-03-25 19:46:45Z">
      <Issue Name="Namespace">
       <Item>Symbolics</Item>
       <Item>MathNet.Symbolics.Traversing</Item>
      </Issue>
     </Message>
    </Messages>
   </Namespace>
   <Namespace Name="MathNet.Symbolics.Traversing.Strategies">
    <Messages>
     <Message Id="Symbolics" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2007-03-25 19:46:45Z">
      <Issue Name="Namespace">
       <Item>Symbolics</Item>
       <Item>MathNet.Symbolics.Traversing.Strategies</Item>
      </Issue>
     </Message>
    </Messages>
   </Namespace>
   <Namespace Name="MathNet.Symbolics.Traversing.Visitors">
    <Messages>
     <Message Id="Symbolics" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2007-03-25 19:46:45Z">
      <Issue Name="Namespace">
       <Item>Symbolics</Item>
       <Item>MathNet.Symbolics.Traversing.Visitors</Item>
      </Issue>
     </Message>
    </Messages>
   </Namespace>
   <Namespace Name="MathNet.Symbolics.Workplace">
    <Messages>
     <Message TypeName="AvoidNamespacesWithFewTypes" Category="Microsoft.Design" CheckId="CA1020" Created="2007-03-25 19:46:45Z">
      <Issue>
       <Item>MathNet.Symbolics.Workplace</Item>
      </Issue>
     </Message>
     <Message Id="Symbolics" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-14 12:24:04Z">
      <Issue Name="Namespace">
       <Item>Symbolics</Item>
       <Item>MathNet.Symbolics.Workplace</Item>
      </Issue>
     </Message>
    </Messages>
   </Namespace>
  </Namespaces>
  <Targets>
   <Target Name="$(ProjectDir)/src/app/MathNet.Yttrium/Builder.Service/bin/Debug/MathNet.Yttrium.Builder.Service.dll">
    <Modules>
     <Module Name="mathnet.yttrium.builder.service.dll">
      <Messages>
       <Message TypeName="AssembliesShouldHaveValidStrongNames" Category="Microsoft.Design" CheckId="CA2210" Created="2007-03-25 19:46:45Z">
        <Issue Name="NoStrongName">
         <Item>MathNet.Yttrium.Builder.Service</Item>
        </Issue>
       </Message>
      </Messages>
      <Namespaces>
       <Namespace Name="MathNet.Symbolics">
        <Types>
         <Type Name="BuilderFactory">
          <Messages>
           <Message TypeName="AvoidUninstantiatedInternalClasses" Category="Microsoft.Performance" CheckId="CA1812" Created="2007-03-25 19:46:45Z">
            <Issue>
             <Item>MathNet.Symbolics.BuilderFactory</Item>
            </Issue>
           </Message>
          </Messages>
         </Type>
        </Types>
       </Namespace>
       <Namespace Name="MathNet.Symbolics.Builder">
        <Types>
         <Type Name="Builder">
          <Messages>
           <Message TypeName="TypeNamesShouldNotMatchNamespaces" Category="Microsoft.Naming" CheckId="CA1724" Created="2007-03-25 19:46:45Z">
            <Issue>
             <Item>Builder</Item>
             <Item>MathNet.Symbolics.Builder</Item>
            </Issue>
           </Message>
          </Messages>
          <Members>
           <Member Name="Function(MathNet.Symbolics.IEntity,MathNet.Symbolics.Signal):MathNet.Symbolics.Signal">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>'entity'</Item>
               <Item>Builder.Function(IEntity, Signal):Signal</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Function(MathNet.Symbolics.IEntity,MathNet.Symbolics.Signal,MathNet.Symbolics.Signal):MathNet.Symbolics.Signal">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>'entity'</Item>
               <Item>Builder.Function(IEntity, Signal, Signal):Signal</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Function(MathNet.Symbolics.IEntity,MathNet.Symbolics.Signal[]):MathNet.Symbolics.Signal">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>'arguments'</Item>
               <Item>Builder.Function(IEntity, Signal[]):Signal</Item>
              </Issue>
              <Issue>
               <Item>'entity'</Item>
               <Item>Builder.Function(IEntity, Signal[]):Signal</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Functions(MathNet.Symbolics.IEntity,MathNet.Symbolics.Signal):MathNet.Symbolics.Backend.Containers.ReadOnlySignalSet">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>'entity'</Item>
               <Item>Builder.Functions(IEntity, Signal):ReadOnlySignalSet</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Functions(MathNet.Symbolics.IEntity,MathNet.Symbolics.Signal,MathNet.Symbolics.Signal):MathNet.Symbolics.Backend.Containers.ReadOnlySignalSet">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>'entity'</Item>
               <Item>Builder.Functions(IEntity, Signal, Signal):ReadOnlySignalSet</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Functions(MathNet.Symbolics.IEntity,MathNet.Symbolics.Signal[]):MathNet.Symbolics.Backend.Containers.ReadOnlySignalSet">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>'arguments'</Item>
               <Item>Builder.Functions(IEntity, Signal[]):ReadOnlySignalSet</Item>
              </Issue>
              <Issue>
               <Item>'entity'</Item>
               <Item>Builder.Functions(IEntity, Signal[]):ReadOnlySignalSet</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Functions(System.String,MathNet.Symbolics.InfixNotation,MathNet.Symbolics.Signal[]):MathNet.Symbolics.Backend.Containers.ReadOnlySignalSet">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>'arguments'</Item>
               <Item>Builder.Functions(String, InfixNotation, Signal[]):ReadOnlySignalSet</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Functions(System.String,MathNet.Symbolics.Signal[]):MathNet.Symbolics.Backend.Containers.ReadOnlySignalSet">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>'arguments'</Item>
               <Item>Builder.Functions(String, Signal[]):ReadOnlySignalSet</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
        </Types>
       </Namespace>
      </Namespaces>
     </Module>
    </Modules>
   </Target>
   <Target Name="$(ProjectDir)/src/app/MathNet.Yttrium/Contracts/bin/Debug/MathNet.Yttrium.Contracts.dll">
    <Modules>
     <Module Name="mathnet.yttrium.contracts.dll">
      <Messages>
       <Message TypeName="AssembliesShouldHaveValidStrongNames" Category="Microsoft.Design" CheckId="CA2210" Created="2007-03-25 19:46:45Z">
        <Issue Name="NoStrongName">
         <Item>MathNet.Yttrium.Contracts</Item>
        </Issue>
       </Message>
      </Messages>
      <Namespaces>
       <Namespace Name="MathNet.Symbolics">
        <Types>
         <Type Name="IBuilder">
          <Members>
           <Member Name="EncapsulateAsSet(MathNet.Symbolics.Signal[]):MathNet.Symbolics.Signal">
            <Messages>
             <Message Id="AsSet" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Created="2007-03-25 19:46:45Z">
              <Issue Name="ShouldBeDiscreteTerm">
               <Item>AsSet</Item>
               <Item>method</Item>
               <Item>EncapsulateAsSet</Item>
               <Item>Asset</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="EncapsulateAsSet(System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Signal&gt;):MathNet.Symbolics.Signal">
            <Messages>
             <Message Id="AsSet" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Created="2007-03-25 19:46:45Z">
              <Issue Name="ShouldBeDiscreteTerm">
               <Item>AsSet</Item>
               <Item>method</Item>
               <Item>EncapsulateAsSet</Item>
               <Item>Asset</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="IBus_BuilderAdapter">
          <Messages>
           <Message TypeName="ProvideObsoleteAttributeMessage" Category="Microsoft.Design" CheckId="CA1041" Created="2007-03-25 19:46:45Z">
            <Issue>
             <Item>MathNet.Symbolics.IBus_BuilderAdapter</Item>
            </Issue>
           </Message>
          </Messages>
         </Type>
         <Type Name="IEntity">
          <Members>
           <Member Name="Buses">
            <Messages>
             <Message TypeName="PropertiesShouldNotReturnArrays" Category="Microsoft.Performance" CheckId="CA1819" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>IEntity.Buses:String[]</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="InputSignals">
            <Messages>
             <Message TypeName="PropertiesShouldNotReturnArrays" Category="Microsoft.Performance" CheckId="CA1819" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>IEntity.InputSignals:String[]</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="OutputSignals">
            <Messages>
             <Message TypeName="PropertiesShouldNotReturnArrays" Category="Microsoft.Performance" CheckId="CA1819" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>IEntity.OutputSignals:String[]</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="IFactory`1">
          <Members>
           <Member Name="GetInstance():T">
            <Messages>
             <Message TypeName="UsePropertiesWhereAppropriate" Category="Microsoft.Design" CheckId="CA1024" Created="2007-03-25 19:46:45Z">
              <Issue Certainty="50">
               <Item>GetInstance</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="IFactory`3">
          <Messages>
           <Message TypeName="AvoidExcessiveParametersOnGenericTypes" Category="Microsoft.Design" CheckId="CA1005" Created="2007-03-25 19:46:45Z">
            <Issue>
             <Item>MathNet.Symbolics.IFactory`3</Item>
            </Issue>
           </Message>
          </Messages>
         </Type>
         <Type Name="IFactory`4">
          <Messages>
           <Message TypeName="AvoidExcessiveParametersOnGenericTypes" Category="Microsoft.Design" CheckId="CA1005" Created="2007-03-25 19:46:45Z">
            <Issue>
             <Item>MathNet.Symbolics.IFactory`4</Item>
            </Issue>
           </Message>
          </Messages>
         </Type>
         <Type Name="IFactory`5">
          <Messages>
           <Message TypeName="AvoidExcessiveParametersOnGenericTypes" Category="Microsoft.Design" CheckId="CA1005" Created="2007-03-25 19:46:45Z">
            <Issue>
             <Item>MathNet.Symbolics.IFactory`5</Item>
            </Issue>
           </Message>
          </Messages>
         </Type>
         <Type Name="IFactory`6">
          <Messages>
           <Message TypeName="AvoidExcessiveParametersOnGenericTypes" Category="Microsoft.Design" CheckId="CA1005" Created="2007-03-25 19:46:45Z">
            <Issue>
             <Item>MathNet.Symbolics.IFactory`6</Item>
            </Issue>
           </Message>
          </Messages>
         </Type>
         <Type Name="IFactory`7">
          <Messages>
           <Message TypeName="AvoidExcessiveParametersOnGenericTypes" Category="Microsoft.Design" CheckId="CA1005" Created="2007-03-25 19:46:45Z">
            <Issue>
             <Item>MathNet.Symbolics.IFactory`7</Item>
            </Issue>
           </Message>
          </Messages>
         </Type>
         <Type Name="IFactory`8">
          <Messages>
           <Message TypeName="AvoidExcessiveParametersOnGenericTypes" Category="Microsoft.Design" CheckId="CA1005" Created="2007-03-25 19:46:45Z">
            <Issue>
             <Item>MathNet.Symbolics.IFactory`8</Item>
            </Issue>
           </Message>
          </Messages>
         </Type>
         <Type Name="IFactory`9">
          <Messages>
           <Message TypeName="AvoidExcessiveParametersOnGenericTypes" Category="Microsoft.Design" CheckId="CA1005" Created="2007-03-25 19:46:45Z">
            <Issue>
             <Item>MathNet.Symbolics.IFactory`9</Item>
            </Issue>
           </Message>
          </Messages>
         </Type>
         <Type Name="IIdentifierDictionary`1">
          <Messages>
           <Message TypeName="IdentifiersShouldHaveCorrectSuffix" Category="Microsoft.Naming" CheckId="CA1710" Created="2007-03-25 19:46:45Z">
            <Issue>
             <Item>MathNet.Symbolics.IIdentifierDictionary`1</Item>
             <Item>Collection</Item>
            </Issue>
           </Message>
           <Message TypeName="IdentifiersShouldNotHaveIncorrectSuffix" Category="Microsoft.Naming" CheckId="CA1711" Created="2007-03-25 19:46:45Z">
            <Issue>
             <Item>MathNet.Symbolics.IIdentifierDictionary`1</Item>
             <Item>Dictionary</Item>
            </Issue>
           </Message>
          </Messages>
         </Type>
         <Type Name="IMathFunction">
          <Messages>
           <Message TypeName="AvoidEmptyInterfaces" Category="Microsoft.Design" CheckId="CA1040" Created="2007-03-25 19:46:45Z">
            <Issue>
             <Item>IMathFunction</Item>
            </Issue>
           </Message>
          </Messages>
         </Type>
         <Type Name="IMathSystem">
          <Members>
           <Member Name="GetAllBuses():MathNet.Symbolics.Backend.Containers.ReadOnlyBusSet">
            <Messages>
             <Message TypeName="UsePropertiesWhereAppropriate" Category="Microsoft.Design" CheckId="CA1024" Created="2007-03-25 19:46:45Z">
              <Issue Certainty="50">
               <Item>GetAllBuses</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="GetAllInputs():MathNet.Symbolics.Backend.Containers.ReadOnlySignalSet">
            <Messages>
             <Message TypeName="UsePropertiesWhereAppropriate" Category="Microsoft.Design" CheckId="CA1024" Created="2007-03-25 19:46:45Z">
              <Issue Certainty="50">
               <Item>GetAllInputs</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="GetAllLeafSignals():MathNet.Symbolics.Backend.Containers.ReadOnlySignalSet">
            <Messages>
             <Message TypeName="UsePropertiesWhereAppropriate" Category="Microsoft.Design" CheckId="CA1024" Created="2007-03-25 19:46:45Z">
              <Issue Certainty="50">
               <Item>GetAllLeafSignals</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="GetAllOutputs():MathNet.Symbolics.Backend.Containers.ReadOnlySignalSet">
            <Messages>
             <Message TypeName="UsePropertiesWhereAppropriate" Category="Microsoft.Design" CheckId="CA1024" Created="2007-03-25 19:46:45Z">
              <Issue Certainty="50">
               <Item>GetAllOutputs</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="GetAllPorts():MathNet.Symbolics.Backend.Containers.ReadOnlyPortSet">
            <Messages>
             <Message TypeName="UsePropertiesWhereAppropriate" Category="Microsoft.Design" CheckId="CA1024" Created="2007-03-25 19:46:45Z">
              <Issue Certainty="50">
               <Item>GetAllPorts</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="GetAllSignals():MathNet.Symbolics.Backend.Containers.ReadOnlySignalSet">
            <Messages>
             <Message TypeName="UsePropertiesWhereAppropriate" Category="Microsoft.Design" CheckId="CA1024" Created="2007-03-25 19:46:45Z">
              <Issue Certainty="50">
               <Item>GetAllSignals</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="UnpromoteAsInput(MathNet.Symbolics.Signal):System.Void">
            <Messages>
             <Message Id="Unpromote" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2007-03-25 19:46:45Z">
              <Issue Name="Member">
               <Item>Unpromote</Item>
               <Item>IMathSystem.UnpromoteAsInput(Signal):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="UnpromoteAsOutput(MathNet.Symbolics.Signal):System.Void">
            <Messages>
             <Message Id="Unpromote" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2007-03-25 19:46:45Z">
              <Issue Name="Member">
               <Item>Unpromote</Item>
               <Item>IMathSystem.UnpromoteAsOutput(Signal):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="IPort_BuilderAdapter">
          <Messages>
           <Message TypeName="ProvideObsoleteAttributeMessage" Category="Microsoft.Design" CheckId="CA1041" Created="2007-03-25 19:46:45Z">
            <Issue>
             <Item>MathNet.Symbolics.IPort_BuilderAdapter</Item>
            </Issue>
           </Message>
          </Messages>
         </Type>
         <Type Name="IPort_CycleAnalysis">
          <Messages>
           <Message TypeName="ProvideObsoleteAttributeMessage" Category="Microsoft.Design" CheckId="CA1041" Created="2007-03-25 19:46:45Z">
            <Issue>
             <Item>MathNet.Symbolics.IPort_CycleAnalysis</Item>
            </Issue>
           </Message>
          </Messages>
         </Type>
         <Type Name="IProperty">
          <Members>
           <Member Name="StillValidAfterUndrive(MathNet.Symbolics.Signal):System.Boolean">
            <Messages>
             <Message Id="Undrive" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2007-03-25 19:46:45Z">
              <Issue Name="Member">
               <Item>Undrive</Item>
               <Item>IProperty.StillValidAfterUndrive(Signal):Boolean</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="ISignal_BuilderAdapter">
          <Messages>
           <Message TypeName="ProvideObsoleteAttributeMessage" Category="Microsoft.Design" CheckId="CA1041" Created="2007-03-25 19:46:45Z">
            <Issue>
             <Item>MathNet.Symbolics.ISignal_BuilderAdapter</Item>
            </Issue>
           </Message>
          </Messages>
         </Type>
         <Type Name="ISignal_CycleAnalysis">
          <Messages>
           <Message TypeName="ProvideObsoleteAttributeMessage" Category="Microsoft.Design" CheckId="CA1041" Created="2007-03-25 19:46:45Z">
            <Issue>
             <Item>MathNet.Symbolics.ISignal_CycleAnalysis</Item>
            </Issue>
           </Message>
          </Messages>
         </Type>
         <Type Name="ISignal_Drive">
          <Messages>
           <Message TypeName="ProvideObsoleteAttributeMessage" Category="Microsoft.Design" CheckId="CA1041" Created="2007-03-25 19:46:45Z">
            <Issue>
             <Item>MathNet.Symbolics.ISignal_Drive</Item>
            </Issue>
           </Message>
          </Messages>
         </Type>
         <Type Name="ISystemBuilder">
          <Members>
           <Member Name="AppendSignalConstraint(System.Guid,MathNet.Symbolics.ICustomDataPack`1&lt;MathNet.Symbolics.IProperty&gt;):System.Void">
            <Messages>
             <Message Id="0#iid" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2007-03-25 19:46:45Z">
              <Issue Name="Parameter">
               <Item>ISystemBuilder.AppendSignalConstraint(Guid, ICustomDataPack`1&lt;MathNet.Symbolics.IProperty&gt;):Void</Item>
               <Item>iid</Item>
               <Item>iid</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="AppendSignalProperty(System.Guid,MathNet.Symbolics.ICustomDataPack`1&lt;MathNet.Symbolics.IProperty&gt;):System.Void">
            <Messages>
             <Message Id="0#iid" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2007-03-25 19:46:45Z">
              <Issue Name="Parameter">
               <Item>ISystemBuilder.AppendSignalProperty(Guid, ICustomDataPack`1&lt;MathNet.Symbolics.IProperty&gt;):Void</Item>
               <Item>iid</Item>
               <Item>iid</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="AppendSignalValue(System.Guid,MathNet.Symbolics.ICustomDataPack`1&lt;MathNet.Symbolics.IValueStructure&gt;):System.Void">
            <Messages>
             <Message Id="0#iid" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2007-03-25 19:46:45Z">
              <Issue Name="Parameter">
               <Item>ISystemBuilder.AppendSignalValue(Guid, ICustomDataPack`1&lt;MathNet.Symbolics.IValueStructure&gt;):Void</Item>
               <Item>iid</Item>
               <Item>iid</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="AppendSystemInputSignal(System.Guid):System.Void">
            <Messages>
             <Message Id="0#iid" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2007-03-25 19:46:45Z">
              <Issue Name="Parameter">
               <Item>ISystemBuilder.AppendSystemInputSignal(Guid):Void</Item>
               <Item>iid</Item>
               <Item>iid</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="AppendSystemNamedBus(System.Guid,System.String):System.Void">
            <Messages>
             <Message Id="0#iid" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2007-03-25 19:46:45Z">
              <Issue Name="Parameter">
               <Item>ISystemBuilder.AppendSystemNamedBus(Guid, String):Void</Item>
               <Item>iid</Item>
               <Item>iid</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="AppendSystemNamedSignal(System.Guid,System.String):System.Void">
            <Messages>
             <Message Id="0#iid" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2007-03-25 19:46:45Z">
              <Issue Name="Parameter">
               <Item>ISystemBuilder.AppendSystemNamedSignal(Guid, String):Void</Item>
               <Item>iid</Item>
               <Item>iid</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="AppendSystemOutputSignal(System.Guid):System.Void">
            <Messages>
             <Message Id="0#iid" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2007-03-25 19:46:45Z">
              <Issue Name="Parameter">
               <Item>ISystemBuilder.AppendSystemOutputSignal(Guid):Void</Item>
               <Item>iid</Item>
               <Item>iid</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="Node">
          <Members>
           <Member Name="Equals(MathNet.Symbolics.Node):System.Boolean">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>'other'</Item>
               <Item>Node.Equals(Node):Boolean</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="Signal">
          <Members>
           <Member Name="op_Addition(MathNet.Symbolics.Signal,MathNet.Symbolics.Signal):MathNet.Symbolics.Signal">
            <Messages>
             <Message TypeName="OperatorOverloadsHaveNamedAlternates" Category="Microsoft.Usage" CheckId="CA2225" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>Add</Item>
               <Item>Signal.op_Addition(Signal, Signal):Signal</Item>
              </Issue>
             </Message>
             <Message TypeName="OverloadOperatorEqualsOnOverloadingAddAndSubtract" Category="Microsoft.Design" CheckId="CA1013" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>Signal</Item>
               <Item>Signal.op_Addition(Signal, Signal):Signal</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="op_Division(MathNet.Symbolics.Signal,MathNet.Symbolics.Signal):MathNet.Symbolics.Signal">
            <Messages>
             <Message TypeName="OperatorOverloadsHaveNamedAlternates" Category="Microsoft.Usage" CheckId="CA2225" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>Divide</Item>
               <Item>Signal.op_Division(Signal, Signal):Signal</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="op_Multiply(MathNet.Symbolics.Signal,MathNet.Symbolics.Signal):MathNet.Symbolics.Signal">
            <Messages>
             <Message TypeName="OperatorOverloadsHaveNamedAlternates" Category="Microsoft.Usage" CheckId="CA2225" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>Multiply</Item>
               <Item>Signal.op_Multiply(Signal, Signal):Signal</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="op_Subtraction(MathNet.Symbolics.Signal,MathNet.Symbolics.Signal):MathNet.Symbolics.Signal">
            <Messages>
             <Message TypeName="OperatorOverloadsHaveNamedAlternates" Category="Microsoft.Usage" CheckId="CA2225" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>Subtract</Item>
               <Item>Signal.op_Subtraction(Signal, Signal):Signal</Item>
              </Issue>
             </Message>
             <Message TypeName="OverloadOperatorEqualsOnOverloadingAddAndSubtract" Category="Microsoft.Design" CheckId="CA1013" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>Signal</Item>
               <Item>Signal.op_Subtraction(Signal, Signal):Signal</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="op_UnaryNegation(MathNet.Symbolics.Signal):MathNet.Symbolics.Signal">
            <Messages>
             <Message TypeName="OperatorOverloadsHaveNamedAlternates" Category="Microsoft.Usage" CheckId="CA2225" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>Negate</Item>
               <Item>Signal.op_UnaryNegation(Signal):Signal</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="op_UnaryPlus(MathNet.Symbolics.Signal):MathNet.Symbolics.Signal">
            <Messages>
             <Message TypeName="OperatorOverloadsHaveNamedAlternates" Category="Microsoft.Usage" CheckId="CA2225" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>Plus</Item>
               <Item>Signal.op_UnaryPlus(Signal):Signal</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="ValueNode">
          <Members>
           <Member Name="SetPresentValue(MathNet.Symbolics.IValueStructure):System.Void">
            <Messages>
             <Message Id="different" TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>ValueNode.SetPresentValue(IValueStructure):Void</Item>
               <Item>different</Item>
               <Item>System.Boolean</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
        </Types>
       </Namespace>
       <Namespace Name="MathNet.Symbolics.Backend.Containers">
        <Types>
         <Type Name="BusSet">
          <Messages>
           <Message TypeName="IdentifiersShouldHaveCorrectSuffix" Category="Microsoft.Naming" CheckId="CA1710" Created="2007-03-25 19:46:45Z">
            <Issue>
             <Item>MathNet.Symbolics.Backend.Containers.BusSet</Item>
             <Item>Collection</Item>
            </Issue>
           </Message>
          </Messages>
         </Type>
         <Type Name="IBusSet">
          <Messages>
           <Message TypeName="IdentifiersShouldHaveCorrectSuffix" Category="Microsoft.Naming" CheckId="CA1710" Created="2007-03-25 19:46:45Z">
            <Issue>
             <Item>MathNet.Symbolics.Backend.Containers.IBusSet</Item>
             <Item>Collection</Item>
            </Issue>
           </Message>
          </Messages>
         </Type>
         <Type Name="IInstanceIdSet">
          <Messages>
           <Message TypeName="IdentifiersShouldHaveCorrectSuffix" Category="Microsoft.Naming" CheckId="CA1710" Created="2007-03-25 19:46:45Z">
            <Issue>
             <Item>MathNet.Symbolics.Backend.Containers.IInstanceIdSet</Item>
             <Item>Collection</Item>
            </Issue>
           </Message>
          </Messages>
         </Type>
         <Type Name="InstanceIdSet">
          <Messages>
           <Message TypeName="IdentifiersShouldHaveCorrectSuffix" Category="Microsoft.Naming" CheckId="CA1710" Created="2007-03-25 19:46:45Z">
            <Issue>
             <Item>MathNet.Symbolics.Backend.Containers.InstanceIdSet</Item>
             <Item>Collection</Item>
            </Issue>
           </Message>
          </Messages>
         </Type>
         <Type Name="IPortSet">
          <Messages>
           <Message TypeName="IdentifiersShouldHaveCorrectSuffix" Category="Microsoft.Naming" CheckId="CA1710" Created="2007-03-25 19:46:45Z">
            <Issue>
             <Item>MathNet.Symbolics.Backend.Containers.IPortSet</Item>
             <Item>Collection</Item>
            </Issue>
           </Message>
          </Messages>
         </Type>
         <Type Name="ISignalSet">
          <Messages>
           <Message TypeName="IdentifiersShouldHaveCorrectSuffix" Category="Microsoft.Naming" CheckId="CA1710" Created="2007-03-25 19:46:45Z">
            <Issue>
             <Item>MathNet.Symbolics.Backend.Containers.ISignalSet</Item>
             <Item>Collection</Item>
            </Issue>
           </Message>
          </Messages>
         </Type>
         <Type Name="PortSet">
          <Messages>
           <Message TypeName="IdentifiersShouldHaveCorrectSuffix" Category="Microsoft.Naming" CheckId="CA1710" Created="2007-03-25 19:46:45Z">
            <Issue>
             <Item>MathNet.Symbolics.Backend.Containers.PortSet</Item>
             <Item>Collection</Item>
            </Issue>
           </Message>
          </Messages>
         </Type>
         <Type Name="ReadOnlyBusSet">
          <Messages>
           <Message TypeName="IdentifiersShouldHaveCorrectSuffix" Category="Microsoft.Naming" CheckId="CA1710" Created="2007-03-25 19:46:45Z">
            <Issue>
             <Item>MathNet.Symbolics.Backend.Containers.ReadOnlyBusSet</Item>
             <Item>Collection</Item>
            </Issue>
           </Message>
          </Messages>
         </Type>
         <Type Name="ReadOnlyInstanceIdSet">
          <Messages>
           <Message TypeName="IdentifiersShouldHaveCorrectSuffix" Category="Microsoft.Naming" CheckId="CA1710" Created="2007-03-25 19:46:45Z">
            <Issue>
             <Item>MathNet.Symbolics.Backend.Containers.ReadOnlyInstanceIdSet</Item>
             <Item>Collection</Item>
            </Issue>
           </Message>
          </Messages>
         </Type>
         <Type Name="ReadOnlyPortSet">
          <Messages>
           <Message TypeName="IdentifiersShouldHaveCorrectSuffix" Category="Microsoft.Naming" CheckId="CA1710" Created="2007-03-25 19:46:45Z">
            <Issue>
             <Item>MathNet.Symbolics.Backend.Containers.ReadOnlyPortSet</Item>
             <Item>Collection</Item>
            </Issue>
           </Message>
          </Messages>
         </Type>
         <Type Name="ReadOnlySignalSet">
          <Messages>
           <Message TypeName="IdentifiersShouldHaveCorrectSuffix" Category="Microsoft.Naming" CheckId="CA1710" Created="2007-03-25 19:46:45Z">
            <Issue>
             <Item>MathNet.Symbolics.Backend.Containers.ReadOnlySignalSet</Item>
             <Item>Collection</Item>
            </Issue>
           </Message>
          </Messages>
         </Type>
         <Type Name="SignalSet">
          <Messages>
           <Message TypeName="IdentifiersShouldHaveCorrectSuffix" Category="Microsoft.Naming" CheckId="CA1710" Created="2007-03-25 19:46:45Z">
            <Issue>
             <Item>MathNet.Symbolics.Backend.Containers.SignalSet</Item>
             <Item>Collection</Item>
            </Issue>
           </Message>
          </Messages>
         </Type>
        </Types>
       </Namespace>
       <Namespace Name="MathNet.Symbolics.Exceptions">
        <Types>
         <Type Name="ArchitectureNotAvailableException">
          <Messages>
           <Message TypeName="ImplementStandardExceptionConstructors" Category="Microsoft.Design" CheckId="CA1032" Created="2007-03-25 19:46:45Z">
            <Issue>
             <Item>MathNet.Symbolics.Exceptions.ArchitectureNotAvailableException</Item>
             <Item>public ArchitectureNotAvailableException()</Item>
            </Issue>
            <Issue>
             <Item>MathNet.Symbolics.Exceptions.ArchitectureNotAvailableException</Item>
             <Item>public ArchitectureNotAvailableException(String)</Item>
            </Issue>
            <Issue>
             <Item>MathNet.Symbolics.Exceptions.ArchitectureNotAvailableException</Item>
             <Item>public ArchitectureNotAvailableException(String, Exception)</Item>
            </Issue>
           </Message>
          </Messages>
          <Members>
           <Member Name=".ctor(MathNet.Symbolics.Port)">
            <Messages>
             <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>ArchitectureNotAvailableException.ArchitectureNotAvailableException(Port)</Item>
               <Item>System.String.Format(System.String,System.Object)</Item>
               <Item>System.String.Format(System.IFormatProvider,System.String,System.Object[])</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name=".ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>'info'</Item>
               <Item>ArchitectureNotAvailableException.ArchitectureNotAvailableException(SerializationInfo, StreamingContext)</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext):System.Void">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>'info'</Item>
               <Item>ArchitectureNotAvailableException.GetObjectData(SerializationInfo, StreamingContext):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="CommandException">
          <Messages>
           <Message TypeName="ImplementStandardExceptionConstructors" Category="Microsoft.Design" CheckId="CA1032" Created="2007-03-25 19:46:45Z">
            <Issue>
             <Item>MathNet.Symbolics.Exceptions.CommandException</Item>
             <Item>public CommandException()</Item>
            </Issue>
            <Issue>
             <Item>MathNet.Symbolics.Exceptions.CommandException</Item>
             <Item>public CommandException(String, Exception)</Item>
            </Issue>
           </Message>
          </Messages>
         </Type>
         <Type Name="CyclicSignalsNotSupportedException">
          <Messages>
           <Message TypeName="ImplementStandardExceptionConstructors" Category="Microsoft.Design" CheckId="CA1032" Created="2007-03-25 19:46:45Z">
            <Issue>
             <Item>MathNet.Symbolics.Exceptions.CyclicSignalsNotSupportedException</Item>
             <Item>public CyclicSignalsNotSupportedException()</Item>
            </Issue>
            <Issue>
             <Item>MathNet.Symbolics.Exceptions.CyclicSignalsNotSupportedException</Item>
             <Item>public CyclicSignalsNotSupportedException(String)</Item>
            </Issue>
            <Issue>
             <Item>MathNet.Symbolics.Exceptions.CyclicSignalsNotSupportedException</Item>
             <Item>public CyclicSignalsNotSupportedException(String, Exception)</Item>
            </Issue>
           </Message>
          </Messages>
          <Members>
           <Member Name=".ctor(MathNet.Symbolics.Signal,System.String)">
            <Messages>
             <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>CyclicSignalsNotSupportedException.CyclicSignalsNotSupportedException(Signal, String)</Item>
               <Item>System.String.Format(System.String,System.Object)</Item>
               <Item>System.String.Format(System.IFormatProvider,System.String,System.Object[])</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name=".ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>'info'</Item>
               <Item>CyclicSignalsNotSupportedException.CyclicSignalsNotSupportedException(SerializationInfo, StreamingContext)</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext):System.Void">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>'info'</Item>
               <Item>CyclicSignalsNotSupportedException.GetObjectData(SerializationInfo, StreamingContext):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="DeserializationException">
          <Messages>
           <Message TypeName="ImplementStandardExceptionConstructors" Category="Microsoft.Design" CheckId="CA1032" Created="2007-03-25 19:46:45Z">
            <Issue>
             <Item>MathNet.Symbolics.Exceptions.DeserializationException</Item>
             <Item>public DeserializationException()</Item>
            </Issue>
            <Issue>
             <Item>MathNet.Symbolics.Exceptions.DeserializationException</Item>
             <Item>public DeserializationException(String, Exception)</Item>
            </Issue>
           </Message>
          </Messages>
         </Type>
         <Type Name="DomainNotAvailableException">
          <Messages>
           <Message TypeName="ImplementStandardExceptionConstructors" Category="Microsoft.Design" CheckId="CA1032" Created="2007-03-25 19:46:45Z">
            <Issue>
             <Item>MathNet.Symbolics.Exceptions.DomainNotAvailableException</Item>
             <Item>public DomainNotAvailableException()</Item>
            </Issue>
            <Issue>
             <Item>MathNet.Symbolics.Exceptions.DomainNotAvailableException</Item>
             <Item>public DomainNotAvailableException(String, Exception)</Item>
            </Issue>
           </Message>
          </Messages>
          <Members>
           <Member Name=".ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>'info'</Item>
               <Item>DomainNotAvailableException.DomainNotAvailableException(SerializationInfo, StreamingContext)</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name=".ctor(System.String)">
            <Messages>
             <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>DomainNotAvailableException.DomainNotAvailableException(String)</Item>
               <Item>System.String.Format(System.String,System.Object)</Item>
               <Item>System.String.Format(System.IFormatProvider,System.String,System.Object[])</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext):System.Void">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>'info'</Item>
               <Item>DomainNotAvailableException.GetObjectData(SerializationInfo, StreamingContext):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="EntityNotAvailableException">
          <Messages>
           <Message TypeName="ImplementStandardExceptionConstructors" Category="Microsoft.Design" CheckId="CA1032" Created="2007-03-25 19:46:45Z">
            <Issue>
             <Item>MathNet.Symbolics.Exceptions.EntityNotAvailableException</Item>
             <Item>public EntityNotAvailableException()</Item>
            </Issue>
            <Issue>
             <Item>MathNet.Symbolics.Exceptions.EntityNotAvailableException</Item>
             <Item>public EntityNotAvailableException(String)</Item>
            </Issue>
            <Issue>
             <Item>MathNet.Symbolics.Exceptions.EntityNotAvailableException</Item>
             <Item>public EntityNotAvailableException(String, Exception)</Item>
            </Issue>
           </Message>
          </Messages>
          <Members>
           <Member Name=".ctor(MathNet.Symbolics.IEntity)">
            <Messages>
             <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>EntityNotAvailableException.EntityNotAvailableException(IEntity)</Item>
               <Item>System.String.Format(System.String,System.Object)</Item>
               <Item>System.String.Format(System.IFormatProvider,System.String,System.Object[])</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name=".ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>'info'</Item>
               <Item>EntityNotAvailableException.EntityNotAvailableException(SerializationInfo, StreamingContext)</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext):System.Void">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>'info'</Item>
               <Item>EntityNotAvailableException.GetObjectData(SerializationInfo, StreamingContext):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="EntitySignalCountUnexpectedException">
          <Messages>
           <Message TypeName="ImplementStandardExceptionConstructors" Category="Microsoft.Design" CheckId="CA1032" Created="2007-03-25 19:46:45Z">
            <Issue>
             <Item>MathNet.Symbolics.Exceptions.EntitySignalCountUnexpectedException</Item>
             <Item>public EntitySignalCountUnexpectedException()</Item>
            </Issue>
            <Issue>
             <Item>MathNet.Symbolics.Exceptions.EntitySignalCountUnexpectedException</Item>
             <Item>public EntitySignalCountUnexpectedException(String)</Item>
            </Issue>
            <Issue>
             <Item>MathNet.Symbolics.Exceptions.EntitySignalCountUnexpectedException</Item>
             <Item>public EntitySignalCountUnexpectedException(String, Exception)</Item>
            </Issue>
           </Message>
          </Messages>
          <Members>
           <Member Name=".ctor(System.String,System.String)">
            <Messages>
             <Message Id="System.String.Format(System.String,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>EntitySignalCountUnexpectedException.EntitySignalCountUnexpectedException(String, String)</Item>
               <Item>System.String.Format(System.String,System.Object,System.Object)</Item>
               <Item>System.String.Format(System.IFormatProvider,System.String,System.Object[])</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="EntitySignalMismatchException">
          <Messages>
           <Message TypeName="ImplementStandardExceptionConstructors" Category="Microsoft.Design" CheckId="CA1032" Created="2007-03-25 19:46:45Z">
            <Issue>
             <Item>MathNet.Symbolics.Exceptions.EntitySignalMismatchException</Item>
             <Item>public EntitySignalMismatchException(String)</Item>
            </Issue>
            <Issue>
             <Item>MathNet.Symbolics.Exceptions.EntitySignalMismatchException</Item>
             <Item>public EntitySignalMismatchException(String, Exception)</Item>
            </Issue>
           </Message>
          </Messages>
         </Type>
         <Type Name="GenericEntityPortNotInstantiableException">
          <Messages>
           <Message Id="Instantiable" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2007-03-25 19:46:45Z">
            <Issue Name="Type">
             <Item>Instantiable</Item>
             <Item>MathNet.Symbolics.Exceptions.GenericEntityPortNotInstantiableException</Item>
            </Issue>
           </Message>
           <Message TypeName="ImplementStandardExceptionConstructors" Category="Microsoft.Design" CheckId="CA1032" Created="2007-03-25 19:46:45Z">
            <Issue>
             <Item>MathNet.Symbolics.Exceptions.GenericEntityPortNotInstantiableException</Item>
             <Item>public GenericEntityPortNotInstantiableException(String)</Item>
            </Issue>
            <Issue>
             <Item>MathNet.Symbolics.Exceptions.GenericEntityPortNotInstantiableException</Item>
             <Item>public GenericEntityPortNotInstantiableException(String, Exception)</Item>
            </Issue>
           </Message>
          </Messages>
         </Type>
         <Type Name="IncompatibleStructureException">
          <Messages>
           <Message TypeName="ImplementStandardExceptionConstructors" Category="Microsoft.Design" CheckId="CA1032" Created="2007-03-25 19:46:45Z">
            <Issue>
             <Item>MathNet.Symbolics.Exceptions.IncompatibleStructureException</Item>
             <Item>public IncompatibleStructureException()</Item>
            </Issue>
            <Issue>
             <Item>MathNet.Symbolics.Exceptions.IncompatibleStructureException</Item>
             <Item>public IncompatibleStructureException(String)</Item>
            </Issue>
            <Issue>
             <Item>MathNet.Symbolics.Exceptions.IncompatibleStructureException</Item>
             <Item>public IncompatibleStructureException(String, Exception)</Item>
            </Issue>
           </Message>
          </Messages>
          <Members>
           <Member Name=".ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>'info'</Item>
               <Item>IncompatibleStructureException.IncompatibleStructureException(SerializationInfo, StreamingContext)</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext):System.Void">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>'info'</Item>
               <Item>IncompatibleStructureException.GetObjectData(SerializationInfo, StreamingContext):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="LabelNotAvailableException">
          <Messages>
           <Message TypeName="ImplementStandardExceptionConstructors" Category="Microsoft.Design" CheckId="CA1032" Created="2007-03-25 19:46:45Z">
            <Issue>
             <Item>MathNet.Symbolics.Exceptions.LabelNotAvailableException</Item>
             <Item>public LabelNotAvailableException()</Item>
            </Issue>
            <Issue>
             <Item>MathNet.Symbolics.Exceptions.LabelNotAvailableException</Item>
             <Item>public LabelNotAvailableException(String)</Item>
            </Issue>
            <Issue>
             <Item>MathNet.Symbolics.Exceptions.LabelNotAvailableException</Item>
             <Item>public LabelNotAvailableException(String, Exception)</Item>
            </Issue>
           </Message>
          </Messages>
          <Members>
           <Member Name=".ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>'info'</Item>
               <Item>LabelNotAvailableException.LabelNotAvailableException(SerializationInfo, StreamingContext)</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext):System.Void">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>'info'</Item>
               <Item>LabelNotAvailableException.GetObjectData(SerializationInfo, StreamingContext):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="MathNetSymbolicsException">
          <Messages>
           <Message Id="Symbolics" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2007-03-25 19:46:45Z">
            <Issue Name="Type">
             <Item>Symbolics</Item>
             <Item>MathNet.Symbolics.Exceptions.MathNetSymbolicsException</Item>
            </Issue>
           </Message>
          </Messages>
         </Type>
         <Type Name="MutualExclusiveStrategyAlreadyActiveException">
          <Messages>
           <Message TypeName="ImplementStandardExceptionConstructors" Category="Microsoft.Design" CheckId="CA1032" Created="2007-03-25 19:46:45Z">
            <Issue>
             <Item>MathNet.Symbolics.Exceptions.MutualExclusiveStrategyAlreadyActiveException</Item>
             <Item>public MutualExclusiveStrategyAlreadyActiveException(String)</Item>
            </Issue>
            <Issue>
             <Item>MathNet.Symbolics.Exceptions.MutualExclusiveStrategyAlreadyActiveException</Item>
             <Item>public MutualExclusiveStrategyAlreadyActiveException(String, Exception)</Item>
            </Issue>
           </Message>
          </Messages>
         </Type>
         <Type Name="NotFoundException">
          <Messages>
           <Message TypeName="ImplementStandardExceptionConstructors" Category="Microsoft.Design" CheckId="CA1032" Created="2007-03-25 19:46:45Z">
            <Issue>
             <Item>MathNet.Symbolics.Exceptions.NotFoundException</Item>
             <Item>public NotFoundException(String)</Item>
            </Issue>
            <Issue>
             <Item>MathNet.Symbolics.Exceptions.NotFoundException</Item>
             <Item>public NotFoundException(String, Exception)</Item>
            </Issue>
           </Message>
          </Messages>
         </Type>
         <Type Name="StructureNotSupportedException">
          <Messages>
           <Message TypeName="ImplementStandardExceptionConstructors" Category="Microsoft.Design" CheckId="CA1032" Created="2007-03-25 19:46:45Z">
            <Issue>
             <Item>MathNet.Symbolics.Exceptions.StructureNotSupportedException</Item>
             <Item>public StructureNotSupportedException()</Item>
            </Issue>
            <Issue>
             <Item>MathNet.Symbolics.Exceptions.StructureNotSupportedException</Item>
             <Item>public StructureNotSupportedException(String)</Item>
            </Issue>
            <Issue>
             <Item>MathNet.Symbolics.Exceptions.StructureNotSupportedException</Item>
             <Item>public StructureNotSupportedException(String, Exception)</Item>
            </Issue>
           </Message>
          </Messages>
          <Members>
           <Member Name=".ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>'info'</Item>
               <Item>StructureNotSupportedException.StructureNotSupportedException(SerializationInfo, StreamingContext)</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext):System.Void">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>'info'</Item>
               <Item>StructureNotSupportedException.GetObjectData(SerializationInfo, StreamingContext):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="SymbolNotAvailableException">
          <Messages>
           <Message TypeName="ImplementStandardExceptionConstructors" Category="Microsoft.Design" CheckId="CA1032" Created="2007-03-25 19:46:45Z">
            <Issue>
             <Item>MathNet.Symbolics.Exceptions.SymbolNotAvailableException</Item>
             <Item>public SymbolNotAvailableException()</Item>
            </Issue>
            <Issue>
             <Item>MathNet.Symbolics.Exceptions.SymbolNotAvailableException</Item>
             <Item>public SymbolNotAvailableException(String, Exception)</Item>
            </Issue>
           </Message>
          </Messages>
          <Members>
           <Member Name=".ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>'info'</Item>
               <Item>SymbolNotAvailableException.SymbolNotAvailableException(SerializationInfo, StreamingContext)</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext):System.Void">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>'info'</Item>
               <Item>SymbolNotAvailableException.GetObjectData(SerializationInfo, StreamingContext):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="TheoremMismatchException">
          <Messages>
           <Message TypeName="ImplementStandardExceptionConstructors" Category="Microsoft.Design" CheckId="CA1032" Created="2007-03-25 19:46:45Z">
            <Issue>
             <Item>MathNet.Symbolics.Exceptions.TheoremMismatchException</Item>
             <Item>public TheoremMismatchException(String)</Item>
            </Issue>
            <Issue>
             <Item>MathNet.Symbolics.Exceptions.TheoremMismatchException</Item>
             <Item>public TheoremMismatchException(String, Exception)</Item>
            </Issue>
           </Message>
          </Messages>
         </Type>
         <Type Name="YttriumException">
          <Messages>
           <Message TypeName="ImplementStandardExceptionConstructors" Category="Microsoft.Design" CheckId="CA1032" Created="2007-03-25 19:46:45Z">
            <Issue>
             <Item>MathNet.Symbolics.Exceptions.YttriumException</Item>
             <Item>public YttriumException()</Item>
            </Issue>
           </Message>
          </Messages>
         </Type>
        </Types>
       </Namespace>
      </Namespaces>
      <Resources>
       <Resource Name="MathNet.Symbolics.Properties.Resources.resources">
        <Messages>
         <Message Id="Faile" TypeName="ResourceStringsShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1703" Created="2007-03-25 19:46:45Z">
          <Issue>
           <Item>Faile</Item>
           <Item>ex_Deserialize_Failed_UnexpectedPosition</Item>
           <Item>Faile to deserialize an item, due to an invalid data file or a usage error. Expected '{0}' but got '{1}' instead. Check the data file for errors and report to the developer.</Item>
           <Item>MathNet.Symbolics.Properties.Resources.resources</Item>
          </Issue>
         </Message>
        </Messages>
       </Resource>
      </Resources>
     </Module>
    </Modules>
   </Target>
   <Target Name="$(ProjectDir)/src/app/MathNet.Yttrium/Conversion.Contracts/bin/Debug/MathNet.Yttrium.Conversion.Contracts.dll">
    <Modules>
     <Module Name="mathnet.yttrium.conversion.contracts.dll">
      <Messages>
       <Message TypeName="AssembliesShouldHaveValidStrongNames" Category="Microsoft.Design" CheckId="CA2210" Created="2007-03-25 19:46:45Z">
        <Issue Name="NoStrongName">
         <Item>MathNet.Yttrium.Conversion.Contracts</Item>
        </Issue>
       </Message>
      </Messages>
      <Namespaces>
       <Namespace Name="MathNet.Symbolics.Conversion">
        <Types>
         <Type Name="IConversionRouter">
          <Members>
           <Member Name="AddSourceNeighbor(MathNet.Symbolics.Conversion.IConversionRouter,System.Boolean,System.Converter`2&lt;MathNet.Symbolics.ICustomData,MathNet.Symbolics.ICustomData&gt;):System.Void">
            <Messages>
             <Message Id="0#" TypeName="ShortAcronymsShouldBeUppercase" Category="Microsoft.Naming" CheckId="CA1706" Created="2007-03-25 19:46:45Z">
              <Issue Name="Parameter">
               <Item>We</Item>
               <Item>routerWeCanConvertFrom</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="AddTargetNeighbor(MathNet.Symbolics.Conversion.IConversionRouter):System.Void">
            <Messages>
             <Message Id="0#" TypeName="ShortAcronymsShouldBeUppercase" Category="Microsoft.Naming" CheckId="CA1706" Created="2007-03-25 19:46:45Z">
              <Issue Name="Parameter">
               <Item>We</Item>
               <Item>routerWeCanConvertTo</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Propose(System.Collections.Generic.Dictionary`2&lt;MathNet.Symbolics.MathIdentifier,MathNet.Symbolics.Conversion.IRouteDistance&gt;,MathNet.Symbolics.Conversion.IConversionRouter):System.Void">
            <Messages>
             <Message Id="0#vec" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2007-03-25 19:46:45Z">
              <Issue Name="Parameter">
               <Item>IConversionRouter.Propose(Dictionary`2&lt;MathNet.Symbolics.MathIdentifier,MathNet.Symbolics.Conversion.IRouteDistance&gt;, IConversionRouter):Void</Item>
               <Item>vec</Item>
               <Item>vec</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="IValueConverter">
          <Members>
           <Member Name="CanConvertLossyFrom(MathNet.Symbolics.ICustomData):System.Boolean">
            <Messages>
             <Message Id="Lossy" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2007-03-25 19:46:45Z">
              <Issue Name="Member">
               <Item>Lossy</Item>
               <Item>IValueConverter.CanConvertLossyFrom(ICustomData):Boolean</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
        </Types>
       </Namespace>
      </Namespaces>
     </Module>
    </Modules>
   </Target>
   <Target Name="$(ProjectDir)/src/app/MathNet.Yttrium/Conversion.Service/bin/Debug/MathNet.Yttrium.Conversion.Service.dll">
    <Modules>
     <Module Name="mathnet.yttrium.conversion.service.dll">
      <Messages>
       <Message TypeName="AssembliesShouldHaveValidStrongNames" Category="Microsoft.Design" CheckId="CA2210" Created="2007-03-25 19:46:45Z">
        <Issue Name="NoStrongName">
         <Item>MathNet.Yttrium.Conversion.Service</Item>
        </Issue>
       </Message>
      </Messages>
      <Namespaces>
       <Namespace Name="MathNet.Symbolics">
        <Types>
         <Type Name="ConversionFactory">
          <Messages>
           <Message TypeName="AvoidUninstantiatedInternalClasses" Category="Microsoft.Performance" CheckId="CA1812" Created="2007-03-25 19:46:45Z">
            <Issue>
             <Item>MathNet.Symbolics.ConversionFactory</Item>
            </Issue>
           </Message>
          </Messages>
         </Type>
        </Types>
       </Namespace>
      </Namespaces>
     </Module>
    </Modules>
   </Target>
   <Target Name="$(ProjectDir)/src/app/MathNet.Yttrium/Conversion.Toolkit/bin/Debug/MathNet.Yttrium.Conversion.Toolkit.dll">
    <Modules>
     <Module Name="mathnet.yttrium.conversion.toolkit.dll">
      <Messages>
       <Message TypeName="AssembliesShouldHaveValidStrongNames" Category="Microsoft.Design" CheckId="CA2210" Created="2007-03-25 19:46:45Z">
        <Issue Name="NoStrongName">
         <Item>MathNet.Yttrium.Conversion.Toolkit</Item>
        </Issue>
       </Message>
      </Messages>
      <Namespaces>
       <Namespace Name="MathNet.Symbolics.Conversion">
        <Types>
         <Type Name="ValueConverter`1">
          <Members>
           <Member Name="AddConverterFrom(MathNet.Symbolics.Conversion.IConversionRouter,System.Boolean,System.Converter`2&lt;MathNet.Symbolics.ICustomData,MathNet.Symbolics.ICustomData&gt;):System.Void">
            <Messages>
             <Message TypeName="DoNotDeclareStaticMembersOnGenericTypes" Category="Microsoft.Design" CheckId="CA1000" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>ValueConverter`1.AddConverterFrom(IConversionRouter, Boolean, Converter`2&lt;MathNet.Symbolics.ICustomData,MathNet.Symbolics.ICustomData&gt;):Void</Item>
               <Item>MathNet.Symbolics.Conversion.ValueConverter`1</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="AddConverterFrom(System.Boolean,System.Converter`2&lt;TSource,TTarget&gt;):System.Void">
            <Messages>
             <Message TypeName="DoNotDeclareStaticMembersOnGenericTypes" Category="Microsoft.Design" CheckId="CA1000" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>ValueConverter`1.AddConverterFrom(Boolean, Converter`2&lt;TSource,TTarget&gt;):Void</Item>
               <Item>MathNet.Symbolics.Conversion.ValueConverter`1</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="AddConverterTo(MathNet.Symbolics.Conversion.IConversionRouter,System.Boolean,System.Converter`2&lt;MathNet.Symbolics.ICustomData,MathNet.Symbolics.ICustomData&gt;):System.Void">
            <Messages>
             <Message TypeName="DoNotDeclareStaticMembersOnGenericTypes" Category="Microsoft.Design" CheckId="CA1000" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>ValueConverter`1.AddConverterTo(IConversionRouter, Boolean, Converter`2&lt;MathNet.Symbolics.ICustomData,MathNet.Symbolics.ICustomData&gt;):Void</Item>
               <Item>MathNet.Symbolics.Conversion.ValueConverter`1</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="AddConverterTo(MathNet.Symbolics.Conversion.IConversionRouter,System.Boolean,System.Converter`2&lt;TTarget,TDestination&gt;):System.Void">
            <Messages>
             <Message TypeName="DoNotDeclareStaticMembersOnGenericTypes" Category="Microsoft.Design" CheckId="CA1000" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>ValueConverter`1.AddConverterTo(IConversionRouter, Boolean, Converter`2&lt;TTarget,TDestination&gt;):Void</Item>
               <Item>MathNet.Symbolics.Conversion.ValueConverter`1</Item>
              </Issue>
             </Message>
             <Message Id="destinationRouter" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2007-03-25 19:46:45Z" FixCategory="Breaking">
              <Issue>
               <Item>destinationRouter</Item>
               <Item>ValueConverter`1.AddConverterTo(IConversionRouter, Boolean, Converter`2&lt;TTarget,TDestination&gt;):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="ConvertFrom(MathNet.Symbolics.ICustomData):TTarget">
            <Messages>
             <Message TypeName="DoNotDeclareStaticMembersOnGenericTypes" Category="Microsoft.Design" CheckId="CA1000" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>ValueConverter`1.ConvertFrom(ICustomData):TTarget</Item>
               <Item>MathNet.Symbolics.Conversion.ValueConverter`1</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Router">
            <Messages>
             <Message TypeName="DoNotDeclareStaticMembersOnGenericTypes" Category="Microsoft.Design" CheckId="CA1000" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>ValueConverter`1.Router:IConversionRouter</Item>
               <Item>MathNet.Symbolics.Conversion.ValueConverter`1</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
        </Types>
       </Namespace>
      </Namespaces>
     </Module>
    </Modules>
   </Target>
   <Target Name="$(ProjectDir)/src/app/MathNet.Yttrium/Interpreter.Contracts/bin/Debug/MathNet.Yttrium.Interpreter.Contracts.dll">
    <Modules>
     <Module Name="mathnet.yttrium.interpreter.contracts.dll">
      <Messages>
       <Message TypeName="AssembliesShouldHaveValidStrongNames" Category="Microsoft.Design" CheckId="CA2210" Created="2007-03-25 19:46:45Z">
        <Issue Name="NoStrongName">
         <Item>MathNet.Yttrium.Interpreter.Contracts</Item>
        </Issue>
       </Message>
      </Messages>
      <Namespaces>
       <Namespace Name="MathNet.Symbolics.Exceptions">
        <Types>
         <Type Name="ParsingException">
          <Messages>
           <Message TypeName="ImplementStandardExceptionConstructors" Category="Microsoft.Design" CheckId="CA1032" Created="2007-03-25 19:46:45Z">
            <Issue>
             <Item>MathNet.Symbolics.Exceptions.ParsingException</Item>
             <Item>public ParsingException()</Item>
            </Issue>
            <Issue>
             <Item>MathNet.Symbolics.Exceptions.ParsingException</Item>
             <Item>public ParsingException(String, Exception)</Item>
            </Issue>
           </Message>
          </Messages>
         </Type>
        </Types>
       </Namespace>
      </Namespaces>
     </Module>
    </Modules>
   </Target>
   <Target Name="$(ProjectDir)/src/app/MathNet.Yttrium/Interpreter.Service/bin/Debug/MathNet.Yttrium.Interpreter.Service.dll">
    <Modules>
     <Module Name="mathnet.yttrium.interpreter.service.dll">
      <Messages>
       <Message TypeName="AssembliesShouldHaveValidStrongNames" Category="Microsoft.Design" CheckId="CA2210" Created="2007-03-25 19:46:45Z">
        <Issue Name="NoStrongName">
         <Item>MathNet.Yttrium.Interpreter.Service</Item>
        </Issue>
       </Message>
      </Messages>
      <Namespaces>
       <Namespace Name="MathNet.Symbolics">
        <Types>
         <Type Name="InterpreterFactory">
          <Messages>
           <Message TypeName="AvoidUninstantiatedInternalClasses" Category="Microsoft.Performance" CheckId="CA1812" Created="2007-03-25 19:46:45Z">
            <Issue>
             <Item>MathNet.Symbolics.InterpreterFactory</Item>
            </Issue>
           </Message>
          </Messages>
         </Type>
        </Types>
       </Namespace>
       <Namespace Name="MathNet.Symbolics.Interpreter">
        <Types>
         <Type Name="EntityStack">
          <Messages>
           <Message TypeName="IdentifiersShouldNotHaveIncorrectSuffix" Category="Microsoft.Naming" CheckId="CA1711" Created="2007-03-25 19:46:45Z">
            <Issue>
             <Item>MathNet.Symbolics.Interpreter.EntityStack</Item>
             <Item>Stack</Item>
            </Issue>
           </Message>
          </Messages>
          <Members>
           <Member Name="Expand():System.Void">
            <Messages>
             <Message Id="MathNet.Symbolics.Exceptions.ParsingException.#ctor(System.String)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>EntityStack.Expand():Void</Item>
               <Item>1</Item>
               <Item>ParsingException.ParsingException(String)</Item>
               <Item>Parsing failed. Maximum token stack size exceeded.</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="Int32Stack">
          <Members>
           <Member Name="Count">
            <Accessors>
             <Accessor Name="get_Count():System.Int32">
              <Messages>
               <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Created="2007-03-25 19:46:45Z">
                <Issue>
                 <Item>Int32Stack.get_Count():Int32</Item>
                </Issue>
               </Message>
              </Messages>
             </Accessor>
            </Accessors>
           </Member>
           <Member Name="Expand():System.Void">
            <Messages>
             <Message Id="MathNet.Symbolics.Exceptions.ParsingException.#ctor(System.String)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>Int32Stack.Expand():Void</Item>
               <Item>1</Item>
               <Item>ParsingException.ParsingException(String)</Item>
               <Item>Parsing failed. Maximum marker stack size exceeded.</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Item[System.Int32]">
            <Accessors>
             <Accessor Name="get_Item(System.Int32):System.Int32">
              <Messages>
               <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Created="2007-03-25 19:46:45Z">
                <Issue>
                 <Item>Int32Stack.get_Item(Int32):Int32</Item>
                </Issue>
               </Message>
              </Messages>
             </Accessor>
            </Accessors>
           </Member>
           <Member Name="Peek():System.Int32">
            <Messages>
             <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>Int32Stack.Peek():Int32</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Remove():System.Void">
            <Messages>
             <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>Int32Stack.Remove():Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Size">
            <Accessors>
             <Accessor Name="get_Size():System.Int32">
              <Messages>
               <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Created="2007-03-25 19:46:45Z">
                <Issue>
                 <Item>Int32Stack.get_Size():Int32</Item>
                </Issue>
               </Message>
              </Messages>
             </Accessor>
            </Accessors>
           </Member>
          </Members>
         </Type>
         <Type Name="LexerBuffer">
          <Members>
           <Member Name="Append(System.Char):System.Void">
            <Messages>
             <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>LexerBuffer.Append(Char):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Count">
            <Accessors>
             <Accessor Name="get_Count():System.Int32">
              <Messages>
               <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Created="2007-03-25 19:46:45Z">
                <Issue>
                 <Item>LexerBuffer.get_Count():Int32</Item>
                </Issue>
               </Message>
              </Messages>
             </Accessor>
            </Accessors>
           </Member>
           <Member Name="Expand():System.Void">
            <Messages>
             <Message Id="MathNet.Symbolics.Exceptions.ParsingException.#ctor(System.String)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>LexerBuffer.Expand():Void</Item>
               <Item>1</Item>
               <Item>ParsingException.ParsingException(String)</Item>
               <Item>Parsing failed. Maximum lexer buffer size exceeded.</Item>
              </Issue>
             </Message>
             <Message Id="lexer" TypeName="LiteralsShouldBeSpelledCorrectly" Category="Microsoft.Usage" CheckId="CA2204" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>lexer</Item>
               <Item>Parsing failed. Maximum lexer buffer size exceeded.</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="RemoveFirst():System.Void">
            <Messages>
             <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>LexerBuffer.RemoveFirst():Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="LexerMarker">
          <Members>
           <Member Name="markerOffset">
            <Messages>
             <Message TypeName="AvoidUnusedPrivateFields" Category="Microsoft.Performance" CheckId="CA1823" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>LexerMarker.markerOffset</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="LexerScanner">
          <Messages>
           <Message Id="Lexer" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2007-03-25 19:46:45Z">
            <Issue Name="Type">
             <Item>Lexer</Item>
             <Item>MathNet.Symbolics.Interpreter.LexerScanner</Item>
            </Issue>
           </Message>
          </Messages>
          <Members>
           <Member Name="NextToken():MathNet.Symbolics.Interpreter.LexerToken">
            <Messages>
             <Message Id="MathNet.Symbolics.Exceptions.ParsingException.#ctor(System.String)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>LexerScanner.NextToken():LexerToken</Item>
               <Item>1</Item>
               <Item>ParsingException.ParsingException(String)</Item>
               <Item>Parsing failed. Lexer Scanner detected unexpected token '____'</Item>
              </Issue>
             </Message>
             <Message Id="Lexer" TypeName="LiteralsShouldBeSpelledCorrectly" Category="Microsoft.Usage" CheckId="CA2204" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>Lexer</Item>
               <Item>Parsing failed. Lexer Scanner detected unexpected token '____'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="ScanClosingPunctuation():MathNet.Symbolics.Interpreter.LexerToken">
            <Messages>
             <Message Id="MathNet.Symbolics.Interpreter.LexerToken.#ctor(System.String,MathNet.Symbolics.Interpreter.TokenTypes)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>LexerScanner.ScanClosingPunctuation():LexerToken</Item>
               <Item>1</Item>
               <Item>LexerToken.LexerToken(String, TokenTypes)</Item>
               <Item>-&gt;</Item>
              </Issue>
              <Issue>
               <Item>LexerScanner.ScanClosingPunctuation():LexerToken</Item>
               <Item>1</Item>
               <Item>LexerToken.LexerToken(String, TokenTypes)</Item>
               <Item>&lt;-</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="ScanLiteral():MathNet.Symbolics.Interpreter.LexerToken">
            <Messages>
             <Message Id="MathNet.Symbolics.Exceptions.ParsingException.#ctor(System.String)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>LexerScanner.ScanLiteral():LexerToken</Item>
               <Item>1</Item>
               <Item>ParsingException.ParsingException(String)</Item>
               <Item>Parsing failed. Unexpected end of file. Did you forget to close a literal encapsulation?</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="ScanOpeningPunctuation():MathNet.Symbolics.Interpreter.LexerToken">
            <Messages>
             <Message Id="MathNet.Symbolics.Interpreter.LexerToken.#ctor(System.String,MathNet.Symbolics.Interpreter.TokenTypes)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>LexerScanner.ScanOpeningPunctuation():LexerToken</Item>
               <Item>1</Item>
               <Item>LexerToken.LexerToken(String, TokenTypes)</Item>
               <Item>-&gt;</Item>
              </Issue>
              <Issue>
               <Item>LexerScanner.ScanOpeningPunctuation():LexerToken</Item>
               <Item>1</Item>
               <Item>LexerToken.LexerToken(String, TokenTypes)</Item>
               <Item>&lt;-</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="ScanSymbolIdentifier():MathNet.Symbolics.Interpreter.LexerToken">
            <Messages>
             <Message Id="MathNet.Symbolics.Interpreter.LexerToken.#ctor(System.String,MathNet.Symbolics.Interpreter.TokenTypes)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>LexerScanner.ScanSymbolIdentifier():LexerToken</Item>
               <Item>1</Item>
               <Item>LexerToken.LexerToken(String, TokenTypes)</Item>
               <Item>-&gt;</Item>
              </Issue>
              <Issue>
               <Item>LexerScanner.ScanSymbolIdentifier():LexerToken</Item>
               <Item>1</Item>
               <Item>LexerToken.LexerToken(String, TokenTypes)</Item>
               <Item>&lt;-</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="LexerToken">
          <Messages>
           <Message Id="Lexer" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2007-03-25 19:46:45Z">
            <Issue Name="Type">
             <Item>Lexer</Item>
             <Item>MathNet.Symbolics.Interpreter.LexerToken</Item>
            </Issue>
           </Message>
          </Messages>
         </Type>
         <Type Name="ParserBuffer">
          <Members>
           <Member Name="Append(MathNet.Symbolics.Interpreter.LexerToken):System.Void">
            <Messages>
             <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>ParserBuffer.Append(LexerToken):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Count">
            <Accessors>
             <Accessor Name="get_Count():System.Int32">
              <Messages>
               <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Created="2007-03-25 19:46:45Z">
                <Issue>
                 <Item>ParserBuffer.get_Count():Int32</Item>
                </Issue>
               </Message>
              </Messages>
             </Accessor>
            </Accessors>
           </Member>
           <Member Name="Expand():System.Void">
            <Messages>
             <Message Id="MathNet.Symbolics.Exceptions.ParsingException.#ctor(System.String)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>ParserBuffer.Expand():Void</Item>
               <Item>1</Item>
               <Item>ParsingException.ParsingException(String)</Item>
               <Item>Parsing failed. Maximum parser buffer size exceeded.</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="RemoveFirst():System.Void">
            <Messages>
             <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>ParserBuffer.RemoveFirst():Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="ParserMarker">
          <Members>
           <Member Name="CommitMark():System.Void">
            <Messages>
             <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>ParserMarker.CommitMark():Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Mark():System.Void">
            <Messages>
             <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>ParserMarker.Mark():Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="markerOffset">
            <Messages>
             <Message TypeName="AvoidUnusedPrivateFields" Category="Microsoft.Performance" CheckId="CA1823" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>ParserMarker.markerOffset</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Match(MathNet.Symbolics.Interpreter.TokenTypes):System.Void">
            <Messages>
             <Message Id="System.String.Format(System.String,System.Object,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>ParserMarker.Match(TokenTypes):Void</Item>
               <Item>System.String.Format(System.String,System.Object,System.Object,System.Object)</Item>
               <Item>System.String.Format(System.IFormatProvider,System.String,System.Object[])</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Match(MathNet.Symbolics.Interpreter.TokenTypes,System.String):System.Void">
            <Messages>
             <Message Id="System.String.Format(System.String,System.Object[])" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>ParserMarker.Match(TokenTypes, String):Void</Item>
               <Item>System.String.Format(System.String,System.Object[])</Item>
               <Item>System.String.Format(System.IFormatProvider,System.String,System.Object[])</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Match(System.String):System.Void">
            <Messages>
             <Message Id="System.String.Format(System.String,System.Object,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>ParserMarker.Match(String):Void</Item>
               <Item>System.String.Format(System.String,System.Object,System.Object,System.Object)</Item>
               <Item>System.String.Format(System.IFormatProvider,System.String,System.Object[])</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="MatchGet(MathNet.Symbolics.Interpreter.TokenTypes):MathNet.Symbolics.Interpreter.LexerToken">
            <Messages>
             <Message Id="System.String.Format(System.String,System.Object,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>ParserMarker.MatchGet(TokenTypes):LexerToken</Item>
               <Item>System.String.Format(System.String,System.Object,System.Object,System.Object)</Item>
               <Item>System.String.Format(System.IFormatProvider,System.String,System.Object[])</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="RollbackMark():System.Void">
            <Messages>
             <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>ParserMarker.RollbackMark():Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="ParserScanner">
          <Members>
           <Member Name="IsBinary(MathNet.Symbolics.Interpreter.LexerToken):System.Boolean">
            <Messages>
             <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>ParserScanner.IsBinary(LexerToken):Boolean</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="ScanDefine():System.Void">
            <Messages>
             <Message Id="MathNet.Symbolics.Exceptions.ParsingException.#ctor(System.String)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>ParserScanner.ScanDefine():Void</Item>
               <Item>1</Item>
               <Item>ParsingException.ParsingException(String)</Item>
               <Item>Parsing failed. Parser Scanner detected unexpected definition token '____'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="ScanEntitySymbol():System.String">
            <Messages>
             <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>ParserScanner.ScanEntitySymbol():String</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="ScanEntitySymbolLiteral():System.String">
            <Messages>
             <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>ParserScanner.ScanEntitySymbolLiteral():String</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="ScanLiteralList():System.Collections.Generic.List`1&lt;System.String&gt;">
            <Messages>
             <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>ParserScanner.ScanLiteralList():List`1&lt;System.String&gt;</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="ScanMathIdentifier():MathNet.Symbolics.MathIdentifier">
            <Messages>
             <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>ParserScanner.ScanMathIdentifier():MathIdentifier</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="ScanOperandPart():MathNet.Symbolics.Signal">
            <Messages>
             <Message Id="MathNet.Symbolics.Exceptions.ParsingException.#ctor(System.String)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>ParserScanner.ScanOperandPart():Signal</Item>
               <Item>1</Item>
               <Item>ParsingException.ParsingException(String)</Item>
               <Item>Parsing failed. Parser Scanner detected unexpected operand part token '____'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="SignalStack">
          <Messages>
           <Message TypeName="IdentifiersShouldNotHaveIncorrectSuffix" Category="Microsoft.Naming" CheckId="CA1711" Created="2007-03-25 19:46:45Z">
            <Issue>
             <Item>MathNet.Symbolics.Interpreter.SignalStack</Item>
             <Item>Stack</Item>
            </Issue>
           </Message>
          </Messages>
          <Members>
           <Member Name="Expand():System.Void">
            <Messages>
             <Message Id="MathNet.Symbolics.Exceptions.ParsingException.#ctor(System.String)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>SignalStack.Expand():Void</Item>
               <Item>1</Item>
               <Item>ParsingException.ParsingException(String)</Item>
               <Item>Parsing failed. Maximum expression stack size exceeded.</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="TokenTypes">
          <Messages>
           <Message TypeName="DoNotMarkEnumsWithFlags" Category="Microsoft.Usage" CheckId="CA2217" Created="2007-03-25 19:46:45Z">
            <Issue>
             <Item>MathNet.Symbolics.Interpreter.TokenTypes</Item>
             <Item>0x100000, 0x200000, 0x400000, 0x800000, 0x10000000, 0x20000000</Item>
            </Issue>
           </Message>
           <Message TypeName="EnumsShouldHaveZeroValue" Category="Microsoft.Design" CheckId="CA1008" Created="2007-03-25 19:46:45Z" FixCategory="Breaking">
            <Issue Name="FlagsRename">
             <Item>MathNet.Symbolics.Interpreter.TokenTypes</Item>
             <Item>TokenTypes.Unknown</Item>
            </Issue>
           </Message>
          </Messages>
         </Type>
        </Types>
       </Namespace>
      </Namespaces>
     </Module>
    </Modules>
   </Target>
   <Target Name="$(ProjectDir)/src/app/MathNet.Yttrium/Library.Contracts/bin/Debug/MathNet.Yttrium.Library.Contracts.dll">
    <Modules>
     <Module Name="mathnet.yttrium.library.contracts.dll">
      <Messages>
       <Message TypeName="AssembliesShouldHaveValidStrongNames" Category="Microsoft.Design" CheckId="CA2210" Created="2007-03-25 19:46:45Z">
        <Issue Name="NoStrongName">
         <Item>MathNet.Yttrium.Library.Contracts</Item>
        </Issue>
       </Message>
      </Messages>
      <Namespaces>
       <Namespace Name="MathNet.Symbolics.Library">
        <Types>
         <Type Name="CustomDataRef">
          <Members>
           <Member Name=".ctor(System.Type,MathNet.Symbolics.Conversion.IConversionRouter)">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>'router'</Item>
               <Item>CustomDataRef.CustomDataRef(Type, IConversionRouter)</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name=".ctor(System.Type,MathNet.Symbolics.Conversion.IConversionRouter,MathNet.Symbolics.ICustomData)">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>'router'</Item>
               <Item>CustomDataRef.CustomDataRef(Type, IConversionRouter, ICustomData)</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="ILibrary">
          <Members>
           <Member Name="AddCustomDataType():System.Void">
            <Messages>
             <Message TypeName="GenericMethodsShouldProvideTypeParameter" Category="Microsoft.Design" CheckId="CA1004" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>ILibrary.AddCustomDataType():Void</Item>
               <Item>TCustomType</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
        </Types>
       </Namespace>
      </Namespaces>
     </Module>
    </Modules>
   </Target>
   <Target Name="$(ProjectDir)/src/app/MathNet.Yttrium/Library.Service/bin/Debug/MathNet.Yttrium.Library.Service.dll">
    <Modules>
     <Module Name="mathnet.yttrium.library.service.dll">
      <Messages>
       <Message TypeName="AssembliesShouldHaveValidStrongNames" Category="Microsoft.Design" CheckId="CA2210" Created="2007-03-25 19:46:45Z">
        <Issue Name="NoStrongName">
         <Item>MathNet.Yttrium.Library.Service</Item>
        </Issue>
       </Message>
      </Messages>
      <Namespaces>
       <Namespace Name="MathNet.Symbolics">
        <Types>
         <Type Name="LibraryFactory">
          <Messages>
           <Message TypeName="AvoidUninstantiatedInternalClasses" Category="Microsoft.Performance" CheckId="CA1812" Created="2007-03-25 19:46:45Z">
            <Issue>
             <Item>MathNet.Symbolics.LibraryFactory</Item>
            </Issue>
           </Message>
          </Messages>
         </Type>
        </Types>
       </Namespace>
       <Namespace Name="MathNet.Symbolics.Library">
        <Types>
         <Type Name="ArchitectureFactoryCollection">
          <Members>
           <Member Name="Contains(MathNet.Symbolics.IEntity):System.Boolean">
            <Messages>
             <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>ArchitectureFactoryCollection.Contains(IEntity):Boolean</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Remove(MathNet.Symbolics.IArchitectureFactory):System.Void">
            <Messages>
             <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>ArchitectureFactoryCollection.Remove(IArchitectureFactory):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="EntityArchitecturesRelation">
          <Members>
           <Member Name="LookupArchitecturesFor(MathNet.Symbolics.Port):System.Collections.Generic.IList`1&lt;MathNet.Symbolics.IArchitectureFactory&gt;">
            <Messages>
             <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>EntityArchitecturesRelation.LookupArchitecturesFor(Port):IList`1&lt;MathNet.Symbolics.IArchitectureFactory&gt;</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="Library">
          <Messages>
           <Message TypeName="TypeNamesShouldNotMatchNamespaces" Category="Microsoft.Naming" CheckId="CA1724" Created="2007-03-25 19:46:45Z">
            <Issue>
             <Item>Library</Item>
             <Item>MathNet.Symbolics.Library</Item>
            </Issue>
           </Message>
          </Messages>
          <Members>
           <Member Name="AddCustomDataType():System.Void">
            <Messages>
             <Message TypeName="GenericMethodsShouldProvideTypeParameter" Category="Microsoft.Design" CheckId="CA1004" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>Library.AddCustomDataType():Void</Item>
               <Item>TCustomType</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="ContainsArchitecture(MathNet.Symbolics.Port):System.Boolean">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>'port'</Item>
               <Item>Library.ContainsArchitecture(Port):Boolean</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="FindEntityByLabel(System.String):MathNet.Symbolics.MathIdentifier">
            <Messages>
             <Message Id="System.Exception.#ctor(System.String)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>Library.FindEntityByLabel(String):MathIdentifier</Item>
               <Item>1</Item>
               <Item>Exception.Exception(String)</Item>
               <Item>No matching entity found.</Item>
              </Issue>
             </Message>
             <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Created="2007-03-25 19:46:45Z">
              <Issue Name="TooGeneric">
               <Item>Library.FindEntityByLabel(String):MathIdentifier</Item>
               <Item>System.Exception</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="LookupArchitecture(MathNet.Symbolics.Port):MathNet.Symbolics.IArchitectureFactory">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>'port'</Item>
               <Item>Library.LookupArchitecture(Port):IArchitectureFactory</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="TryLookupArchitecture(MathNet.Symbolics.Port,MathNet.Symbolics.IArchitectureFactory&amp;):System.Boolean">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>'port'</Item>
               <Item>Library.TryLookupArchitecture(Port, IArchitectureFactory&amp;):Boolean</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="PackageInfo">
          <Members>
           <Member Name="comment">
            <Messages>
             <Message TypeName="AvoidUnusedPrivateFields" Category="Microsoft.Performance" CheckId="CA1823" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>PackageInfo.comment</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="PackageLoader">
          <Members>
           <Member Name=".cctor()">
            <Messages>
             <Message TypeName="InitializeReferenceTypeStaticFieldsInline" Category="Microsoft.Performance" CheckId="CA1810" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>MathNet.Symbolics.Library.PackageLoader</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="LoadPackageInfo(System.String):System.Void">
            <Messages>
             <Message Id="Filename" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Created="2007-03-25 19:46:45Z">
              <Issue Name="ShouldBeCompoundWord">
               <Item>Filename</Item>
               <Item>parameter</Item>
               <Item>sourceFilename</Item>
               <Item>FileName</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="XmlPackagesAdapter">
          <Members>
           <Member Name="GetXmlAttribute(System.Xml.XmlNode,System.String,System.String):System.String">
            <Messages>
             <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>XmlPackagesAdapter.GetXmlAttribute(XmlNode, String, String):String</Item>
               <Item>System.Object</Item>
              </Issue>
             </Message>
             <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Created="2007-03-25 19:46:45Z" FixCategory="NonBreaking">
              <Issue>
               <Item>XmlPackagesAdapter.GetXmlAttribute(XmlNode, String, String):String</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
        </Types>
       </Namespace>
      </Namespaces>
     </Module>
    </Modules>
   </Target>
   <Target Name="$(ProjectDir)/src/app/MathNet.Yttrium/Library/bin/Debug/MathNet.Yttrium.dll">
    <Modules>
     <Module Name="mathnet.yttrium.dll">
      <Messages>
       <Message TypeName="AssembliesShouldHaveValidStrongNames" Category="Microsoft.Design" CheckId="CA2210" Created="2006-08-05 09:39:03Z">
        <Issue Name="NoStrongName">
         <Item>MathNet.Yttrium</Item>
        </Issue>
       </Message>
      </Messages>
      <Namespaces>
       <Namespace Name="MathNet.Symbolics">
        <Types>
         <Type Name="CoreFactory">
          <Messages>
           <Message TypeName="AvoidUninstantiatedInternalClasses" Category="Microsoft.Performance" CheckId="CA1812" Created="2007-03-25 19:46:45Z">
            <Issue>
             <Item>MathNet.Symbolics.CoreFactory</Item>
            </Issue>
           </Message>
          </Messages>
         </Type>
        </Types>
       </Namespace>
       <Namespace Name="MathNet.Symbolics.Backend.Channels">
        <Types>
         <Type Name="CommandReference">
          <Messages>
           <Message TypeName="OverrideEqualsAndOperatorEqualsOnValueTypes" Category="Microsoft.Performance" CheckId="CA1815" Created="2006-08-05 09:39:03Z">
            <Issue Name="Equals">
             <Item>MathNet.Symbolics.Backend.Channels.CommandReference</Item>
            </Issue>
            <Issue Name="op_Equality">
             <Item>MathNet.Symbolics.Backend.Channels.CommandReference</Item>
            </Issue>
           </Message>
          </Messages>
          <Members>
           <Member Name="Deserialize(System.String,System.Runtime.Serialization.SerializationInfo):MathNet.Symbolics.Backend.Channels.CommandReference">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'info'</Item>
               <Item>CommandReference.Deserialize(String, SerializationInfo):CommandReference</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Deserialize(System.String,System.Xml.XmlReader):MathNet.Symbolics.Backend.Channels.CommandReference">
            <Messages>
             <Message Id="System.Int32.Parse(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>CommandReference.Deserialize(String, XmlReader):CommandReference</Item>
               <Item>System.Int32.Parse(System.String)</Item>
               <Item>System.Int32.Parse(System.String,System.IFormatProvider)</Item>
              </Issue>
             </Message>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'reader'</Item>
               <Item>CommandReference.Deserialize(String, XmlReader):CommandReference</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Index">
            <Messages>
             <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>Index</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="InstanceId">
            <Messages>
             <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>InstanceId</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Serialize(System.String,System.Runtime.Serialization.SerializationInfo):System.Void">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'info'</Item>
               <Item>CommandReference.Serialize(String, SerializationInfo):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Serialize(System.String,System.Xml.XmlWriter):System.Void">
            <Messages>
             <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>CommandReference.Serialize(String, XmlWriter):Void</Item>
               <Item>System.Int32.ToString</Item>
               <Item>System.Int32.ToString(System.IFormatProvider)</Item>
              </Issue>
             </Message>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'writer'</Item>
               <Item>CommandReference.Serialize(String, XmlWriter):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="LogAction">
          <Members>
           <Member Name="PortUndrivesSignal">
            <Messages>
             <Message Id="Undrives" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-14 12:24:04Z">
              <Issue Name="Member">
               <Item>Undrives</Item>
               <Item>LogAction.PortUndrivesSignal</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="SignalUndrivesPort">
            <Messages>
             <Message Id="Undrives" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-14 12:24:04Z">
              <Issue Name="Member">
               <Item>Undrives</Item>
               <Item>LogAction.SignalUndrivesPort</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="LogObserver">
          <Members>
           <Member Name="AttachedToSystem(MathNet.Symbolics.IMathSystem):System.Void">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>'system'</Item>
               <Item>LogObserver.AttachedToSystem(IMathSystem):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="OnBusAdded(MathNet.Symbolics.Bus,System.Int32):System.Void">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>'bus'</Item>
               <Item>LogObserver.OnBusAdded(Bus, Int32):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="OnBusAttachedToPort(MathNet.Symbolics.Bus,MathNet.Symbolics.Port,System.Int32):System.Void">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>'bus'</Item>
               <Item>LogObserver.OnBusAttachedToPort(Bus, Port, Int32):Void</Item>
              </Issue>
              <Issue>
               <Item>'port'</Item>
               <Item>LogObserver.OnBusAttachedToPort(Bus, Port, Int32):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="OnBusDetachedFromPort(MathNet.Symbolics.Bus,MathNet.Symbolics.Port,System.Int32):System.Void">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>'bus'</Item>
               <Item>LogObserver.OnBusDetachedFromPort(Bus, Port, Int32):Void</Item>
              </Issue>
              <Issue>
               <Item>'port'</Item>
               <Item>LogObserver.OnBusDetachedFromPort(Bus, Port, Int32):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="OnBusRemoved(MathNet.Symbolics.Bus,System.Int32):System.Void">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>'bus'</Item>
               <Item>LogObserver.OnBusRemoved(Bus, Int32):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="OnInputAdded(MathNet.Symbolics.Signal,System.Int32):System.Void">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>'signal'</Item>
               <Item>LogObserver.OnInputAdded(Signal, Int32):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="OnInputRemoved(MathNet.Symbolics.Signal,System.Int32):System.Void">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>'signal'</Item>
               <Item>LogObserver.OnInputRemoved(Signal, Int32):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="OnOutputAdded(MathNet.Symbolics.Signal,System.Int32):System.Void">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>'signal'</Item>
               <Item>LogObserver.OnOutputAdded(Signal, Int32):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="OnOutputRemoved(MathNet.Symbolics.Signal,System.Int32):System.Void">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>'signal'</Item>
               <Item>LogObserver.OnOutputRemoved(Signal, Int32):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="OnPortAdded(MathNet.Symbolics.Port,System.Int32):System.Void">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>'port'</Item>
               <Item>LogObserver.OnPortAdded(Port, Int32):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="OnPortDrivesSignal(MathNet.Symbolics.Signal,MathNet.Symbolics.Port,System.Int32):System.Void">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>'port'</Item>
               <Item>LogObserver.OnPortDrivesSignal(Signal, Port, Int32):Void</Item>
              </Issue>
              <Issue>
               <Item>'signal'</Item>
               <Item>LogObserver.OnPortDrivesSignal(Signal, Port, Int32):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="OnPortDrivesSignalNoLonger(MathNet.Symbolics.Signal,MathNet.Symbolics.Port,System.Int32):System.Void">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>'port'</Item>
               <Item>LogObserver.OnPortDrivesSignalNoLonger(Signal, Port, Int32):Void</Item>
              </Issue>
              <Issue>
               <Item>'signal'</Item>
               <Item>LogObserver.OnPortDrivesSignalNoLonger(Signal, Port, Int32):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="OnPortRemoved(MathNet.Symbolics.Port,System.Int32):System.Void">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>'port'</Item>
               <Item>LogObserver.OnPortRemoved(Port, Int32):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="OnSignalAdded(MathNet.Symbolics.Signal,System.Int32):System.Void">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>'signal'</Item>
               <Item>LogObserver.OnSignalAdded(Signal, Int32):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="OnSignalDrivesPort(MathNet.Symbolics.Signal,MathNet.Symbolics.Port,System.Int32):System.Void">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>'port'</Item>
               <Item>LogObserver.OnSignalDrivesPort(Signal, Port, Int32):Void</Item>
              </Issue>
              <Issue>
               <Item>'signal'</Item>
               <Item>LogObserver.OnSignalDrivesPort(Signal, Port, Int32):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="OnSignalDrivesPortNoLonger(MathNet.Symbolics.Signal,MathNet.Symbolics.Port,System.Int32):System.Void">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>'port'</Item>
               <Item>LogObserver.OnSignalDrivesPortNoLonger(Signal, Port, Int32):Void</Item>
              </Issue>
              <Issue>
               <Item>'signal'</Item>
               <Item>LogObserver.OnSignalDrivesPortNoLonger(Signal, Port, Int32):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="OnSignalRemoved(MathNet.Symbolics.Signal,System.Int32):System.Void">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>'signal'</Item>
               <Item>LogObserver.OnSignalRemoved(Signal, Int32):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
        </Types>
       </Namespace>
       <Namespace Name="MathNet.Symbolics.Backend.Channels.Commands">
        <Types>
         <Type Name="AbstractBusCommand">
          <Members>
           <Member Name="ReadXml(System.Xml.XmlReader):System.Void">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'reader'</Item>
               <Item>AbstractBusCommand.ReadXml(XmlReader):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="WriteXml(System.Xml.XmlWriter):System.Void">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'writer'</Item>
               <Item>AbstractBusCommand.WriteXml(XmlWriter):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="AbstractNewCommand">
          <Members>
           <Member Name="ReadXml(System.Xml.XmlReader):System.Void">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'reader'</Item>
               <Item>AbstractNewCommand.ReadXml(XmlReader):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="WriteXml(System.Xml.XmlWriter):System.Void">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'writer'</Item>
               <Item>AbstractNewCommand.WriteXml(XmlWriter):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="AbstractPortBusCommand">
          <Members>
           <Member Name="ReadXml(System.Xml.XmlReader):System.Void">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'reader'</Item>
               <Item>AbstractPortBusCommand.ReadXml(XmlReader):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="WriteXml(System.Xml.XmlWriter):System.Void">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'writer'</Item>
               <Item>AbstractPortBusCommand.WriteXml(XmlWriter):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="AbstractPortBusIndexCommand">
          <Members>
           <Member Name=".ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'info'</Item>
               <Item>AbstractPortBusIndexCommand.AbstractPortBusIndexCommand(SerializationInfo, StreamingContext)</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext):System.Void">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'info'</Item>
               <Item>AbstractPortBusIndexCommand.GetObjectData(SerializationInfo, StreamingContext):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="ReadXml(System.Xml.XmlReader):System.Void">
            <Messages>
             <Message Id="System.Int32.Parse(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>AbstractPortBusIndexCommand.ReadXml(XmlReader):Void</Item>
               <Item>System.Int32.Parse(System.String)</Item>
               <Item>System.Int32.Parse(System.String,System.IFormatProvider)</Item>
              </Issue>
             </Message>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'reader'</Item>
               <Item>AbstractPortBusIndexCommand.ReadXml(XmlReader):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="WriteXml(System.Xml.XmlWriter):System.Void">
            <Messages>
             <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>AbstractPortBusIndexCommand.WriteXml(XmlWriter):Void</Item>
               <Item>System.Int32.ToString</Item>
               <Item>System.Int32.ToString(System.IFormatProvider)</Item>
              </Issue>
             </Message>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'writer'</Item>
               <Item>AbstractPortBusIndexCommand.WriteXml(XmlWriter):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="AbstractPortCommand">
          <Members>
           <Member Name="ReadXml(System.Xml.XmlReader):System.Void">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'reader'</Item>
               <Item>AbstractPortCommand.ReadXml(XmlReader):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="WriteXml(System.Xml.XmlWriter):System.Void">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'writer'</Item>
               <Item>AbstractPortCommand.WriteXml(XmlWriter):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="AbstractPortIndexCommand">
          <Members>
           <Member Name=".ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'info'</Item>
               <Item>AbstractPortIndexCommand.AbstractPortIndexCommand(SerializationInfo, StreamingContext)</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext):System.Void">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'info'</Item>
               <Item>AbstractPortIndexCommand.GetObjectData(SerializationInfo, StreamingContext):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="ReadXml(System.Xml.XmlReader):System.Void">
            <Messages>
             <Message Id="System.Int32.Parse(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>AbstractPortIndexCommand.ReadXml(XmlReader):Void</Item>
               <Item>System.Int32.Parse(System.String)</Item>
               <Item>System.Int32.Parse(System.String,System.IFormatProvider)</Item>
              </Issue>
             </Message>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'reader'</Item>
               <Item>AbstractPortIndexCommand.ReadXml(XmlReader):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="WriteXml(System.Xml.XmlWriter):System.Void">
            <Messages>
             <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>AbstractPortIndexCommand.WriteXml(XmlWriter):Void</Item>
               <Item>System.Int32.ToString</Item>
               <Item>System.Int32.ToString(System.IFormatProvider)</Item>
              </Issue>
             </Message>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'writer'</Item>
               <Item>AbstractPortIndexCommand.WriteXml(XmlWriter):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="AbstractPortSignalCommand">
          <Members>
           <Member Name="ReadXml(System.Xml.XmlReader):System.Void">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'reader'</Item>
               <Item>AbstractPortSignalCommand.ReadXml(XmlReader):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="WriteXml(System.Xml.XmlWriter):System.Void">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'writer'</Item>
               <Item>AbstractPortSignalCommand.WriteXml(XmlWriter):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="AbstractPortSignalIndexCommand">
          <Members>
           <Member Name=".ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'info'</Item>
               <Item>AbstractPortSignalIndexCommand.AbstractPortSignalIndexCommand(SerializationInfo, StreamingContext)</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext):System.Void">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'info'</Item>
               <Item>AbstractPortSignalIndexCommand.GetObjectData(SerializationInfo, StreamingContext):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="ReadXml(System.Xml.XmlReader):System.Void">
            <Messages>
             <Message Id="System.Int32.Parse(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>AbstractPortSignalIndexCommand.ReadXml(XmlReader):Void</Item>
               <Item>System.Int32.Parse(System.String)</Item>
               <Item>System.Int32.Parse(System.String,System.IFormatProvider)</Item>
              </Issue>
             </Message>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'reader'</Item>
               <Item>AbstractPortSignalIndexCommand.ReadXml(XmlReader):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="WriteXml(System.Xml.XmlWriter):System.Void">
            <Messages>
             <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>AbstractPortSignalIndexCommand.WriteXml(XmlWriter):Void</Item>
               <Item>System.Int32.ToString</Item>
               <Item>System.Int32.ToString(System.IFormatProvider)</Item>
              </Issue>
             </Message>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'writer'</Item>
               <Item>AbstractPortSignalIndexCommand.WriteXml(XmlWriter):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="AbstractSignalCommand">
          <Members>
           <Member Name="ReadXml(System.Xml.XmlReader):System.Void">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'reader'</Item>
               <Item>AbstractSignalCommand.ReadXml(XmlReader):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="WriteXml(System.Xml.XmlWriter):System.Void">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'writer'</Item>
               <Item>AbstractSignalCommand.WriteXml(XmlWriter):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="BusUnrivePortCommand">
          <Messages>
           <Message Id="Unrive" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-14 12:24:04Z">
            <Issue Name="Type">
             <Item>Unrive</Item>
             <Item>MathNet.Symbolics.Backend.Channels.Commands.BusUnrivePortCommand</Item>
            </Issue>
           </Message>
          </Messages>
         </Type>
         <Type Name="CommandBase">
          <Members>
           <Member Name="GetSchema():System.Xml.Schema.XmlSchema">
            <Messages>
             <Message TypeName="UsePropertiesWhereAppropriate" Category="Microsoft.Design" CheckId="CA1024" Created="2006-08-05 09:39:03Z">
              <Issue Certainty="50">
               <Item>GetSchema</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="LazyVerify(System.Guid,System.Guid):System.Void">
            <Messages>
             <Message Id="MathNet.Symbolics.Exceptions.CommandException.#ctor(System.String)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>CommandBase.LazyVerify(Guid, Guid):Void</Item>
               <Item>1</Item>
               <Item>CommandException.CommandException(String)</Item>
               <Item>Command Failed: InstanceId mismatch.</Item>
              </Issue>
             </Message>
             <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Created="2006-08-05 09:39:03Z" FixCategory="Breaking">
              <Issue>
               <Item>CommandBase.LazyVerify(Guid, Guid):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="NewPortCommand">
          <Members>
           <Member Name=".ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'info'</Item>
               <Item>NewPortCommand.NewPortCommand(SerializationInfo, StreamingContext)</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext):System.Void">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'info'</Item>
               <Item>NewPortCommand.GetObjectData(SerializationInfo, StreamingContext):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="ReadXml(System.Xml.XmlReader):System.Void">
            <Messages>
             <Message Id="System.Int32.Parse(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>NewPortCommand.ReadXml(XmlReader):Void</Item>
               <Item>System.Int32.Parse(System.String)</Item>
               <Item>System.Int32.Parse(System.String,System.IFormatProvider)</Item>
              </Issue>
              <Issue>
               <Item>NewPortCommand.ReadXml(XmlReader):Void</Item>
               <Item>System.Int32.Parse(System.String)</Item>
               <Item>System.Int32.Parse(System.String,System.IFormatProvider)</Item>
              </Issue>
             </Message>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'reader'</Item>
               <Item>NewPortCommand.ReadXml(XmlReader):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="WriteXml(System.Xml.XmlWriter):System.Void">
            <Messages>
             <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>NewPortCommand.WriteXml(XmlWriter):Void</Item>
               <Item>System.Int32.ToString</Item>
               <Item>System.Int32.ToString(System.IFormatProvider)</Item>
              </Issue>
              <Issue>
               <Item>NewPortCommand.WriteXml(XmlWriter):Void</Item>
               <Item>System.Int32.ToString</Item>
               <Item>System.Int32.ToString(System.IFormatProvider)</Item>
              </Issue>
             </Message>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'writer'</Item>
               <Item>NewPortCommand.WriteXml(XmlWriter):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="PortUndriveSignalCommand">
          <Messages>
           <Message Id="Undrive" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-14 12:24:04Z">
            <Issue Name="Type">
             <Item>Undrive</Item>
             <Item>MathNet.Symbolics.Backend.Channels.Commands.PortUndriveSignalCommand</Item>
            </Issue>
           </Message>
          </Messages>
         </Type>
         <Type Name="RemovePortCommand">
          <Members>
           <Member Name=".ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'info'</Item>
               <Item>RemovePortCommand.RemovePortCommand(SerializationInfo, StreamingContext)</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext):System.Void">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'info'</Item>
               <Item>RemovePortCommand.GetObjectData(SerializationInfo, StreamingContext):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="ReadXml(System.Xml.XmlReader):System.Void">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'reader'</Item>
               <Item>RemovePortCommand.ReadXml(XmlReader):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="WriteXml(System.Xml.XmlWriter):System.Void">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'writer'</Item>
               <Item>RemovePortCommand.WriteXml(XmlWriter):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="RemoveSignalCommand">
          <Members>
           <Member Name=".ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'info'</Item>
               <Item>RemoveSignalCommand.RemoveSignalCommand(SerializationInfo, StreamingContext)</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext):System.Void">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'info'</Item>
               <Item>RemoveSignalCommand.GetObjectData(SerializationInfo, StreamingContext):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="ReadXml(System.Xml.XmlReader):System.Void">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'reader'</Item>
               <Item>RemoveSignalCommand.ReadXml(XmlReader):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="WriteXml(System.Xml.XmlWriter):System.Void">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>'writer'</Item>
               <Item>RemoveSignalCommand.WriteXml(XmlWriter):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="SignalUnrivePortCommand">
          <Messages>
           <Message Id="Unrive" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-14 12:24:04Z">
            <Issue Name="Type">
             <Item>Unrive</Item>
             <Item>MathNet.Symbolics.Backend.Channels.Commands.SignalUnrivePortCommand</Item>
            </Issue>
           </Message>
          </Messages>
         </Type>
        </Types>
       </Namespace>
       <Namespace Name="MathNet.Symbolics.Backend.Containers">
        <Types>
         <Type Name="IdentifierDictionary`1">
          <Messages>
           <Message TypeName="ImplementISerializableCorrectly" Category="Microsoft.Usage" CheckId="CA2240" Created="2006-08-05 09:39:03Z">
            <Issue>
             <Item>IdentifierDictionary`1</Item>
            </Issue>
           </Message>
           <Message TypeName="ImplementSerializationConstructors" Category="Microsoft.Usage" CheckId="CA2229" Created="2006-08-05 09:39:03Z">
            <Issue Name="CreateMagicConstructor">
             <Item>IdentifierDictionary`1</Item>
            </Issue>
           </Message>
          </Messages>
         </Type>
        </Types>
       </Namespace>
       <Namespace Name="MathNet.Symbolics.Backend.Properties">
        <Types>
         <Type Name="PropertyBag">
          <Messages>
           <Message TypeName="IdentifiersShouldHaveCorrectSuffix" Category="Microsoft.Naming" CheckId="CA1710" Created="2006-08-05 09:39:03Z">
            <Issue>
             <Item>MathNet.Symbolics.Backend.Properties.PropertyBag</Item>
             <Item>Collection</Item>
            </Issue>
           </Message>
          </Messages>
          <Members>
           <Member Name="ValidatePropertiesAfterUndrive(MathNet.Symbolics.Signal):System.Void">
            <Messages>
             <Message Id="Undrive" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2007-03-25 19:46:45Z">
              <Issue Name="Member">
               <Item>Undrive</Item>
               <Item>PropertyBag.ValidatePropertiesAfterUndrive(Signal):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
        </Types>
       </Namespace>
       <Namespace Name="MathNet.Symbolics.Core">
        <Types>
         <Type Name="Bus">
          <Members>
           <Member Name="MathNet.Symbolics.IBus_BuilderAdapter.AcceptSystemBuilderAfter(MathNet.Symbolics.ISystemBuilder,System.Collections.Generic.Dictionary`2&lt;System.Guid,System.Guid&gt;,System.Collections.Generic.Dictionary`2&lt;System.Guid,System.Guid&gt;):System.Void">
            <Messages>
             <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>Bus</Item>
               <Item>IBus_BuilderAdapter.AcceptSystemBuilderAfter(ISystemBuilder, Dictionary`2&lt;System.Guid,System.Guid&gt;, Dictionary`2&lt;System.Guid,System.Guid&gt;):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="MathNet.Symbolics.IBus_BuilderAdapter.AcceptSystemBuilderBefore(MathNet.Symbolics.ISystemBuilder):System.Guid">
            <Messages>
             <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>Bus</Item>
               <Item>IBus_BuilderAdapter.AcceptSystemBuilderBefore(ISystemBuilder):Guid</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="MathNet.Symbolics.Simulation.ISchedulable.CurrentValue">
            <Accessors>
             <Accessor Name="MathNet.Symbolics.Simulation.ISchedulable.get_CurrentValue():MathNet.Symbolics.IValueStructure">
              <Messages>
               <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Created="2007-03-25 19:46:45Z">
                <Issue>
                 <Item>Bus</Item>
                 <Item>ISchedulable.get_CurrentValue():IValueStructure</Item>
                </Issue>
               </Message>
              </Messages>
             </Accessor>
             <Accessor Name="MathNet.Symbolics.Simulation.ISchedulable.set_CurrentValue(MathNet.Symbolics.IValueStructure):System.Void">
              <Messages>
               <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Created="2007-03-25 19:46:45Z">
                <Issue>
                 <Item>Bus</Item>
                 <Item>ISchedulable.set_CurrentValue(IValueStructure):Void</Item>
                </Issue>
               </Message>
              </Messages>
             </Accessor>
            </Accessors>
           </Member>
           <Member Name="MathNet.Symbolics.Simulation.ISchedulable.get_InstanceId():System.Guid">
            <Messages>
             <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>Bus</Item>
               <Item>ISchedulable.get_InstanceId():Guid</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="MathNet.Symbolics.Simulation.ISchedulable.HasEvent">
            <Accessors>
             <Accessor Name="MathNet.Symbolics.Simulation.ISchedulable.get_HasEvent():System.Boolean">
              <Messages>
               <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Created="2007-03-25 19:46:45Z">
                <Issue>
                 <Item>Bus</Item>
                 <Item>ISchedulable.get_HasEvent():Boolean</Item>
                </Issue>
               </Message>
              </Messages>
             </Accessor>
             <Accessor Name="MathNet.Symbolics.Simulation.ISchedulable.set_HasEvent(System.Boolean):System.Void">
              <Messages>
               <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Created="2007-03-25 19:46:45Z">
                <Issue>
                 <Item>Bus</Item>
                 <Item>ISchedulable.set_HasEvent(Boolean):Void</Item>
                </Issue>
               </Message>
              </Messages>
             </Accessor>
            </Accessors>
           </Member>
           <Member Name="MathNet.Symbolics.Simulation.ISchedulable.NotifyOutputsNewValue():System.Void">
            <Messages>
             <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>Bus</Item>
               <Item>ISchedulable.NotifyOutputsNewValue():Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="Entity">
          <Members>
           <Member Name="Equals(MathNet.Symbolics.Core.Entity):System.Boolean">
            <Messages>
             <Message TypeName="ProvideObsoleteAttributeMessage" Category="Microsoft.Design" CheckId="CA1041" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>Entity.Equals(Entity):Boolean</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="Port">
          <Members>
           <Member Name="BuilderMapBuses(MathNet.Symbolics.Backend.Containers.BusSet,System.Collections.Generic.Dictionary`2&lt;System.Guid,System.Guid&gt;):MathNet.Symbolics.Backend.Containers.InstanceIdSet">
            <Messages>
             <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Created="2007-03-25 19:46:45Z" FixCategory="NonBreaking">
              <Issue>
               <Item>Port.BuilderMapBuses(BusSet, Dictionary`2&lt;System.Guid,System.Guid&gt;):InstanceIdSet</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="BuilderMapSignals(MathNet.Symbolics.Backend.Containers.SignalSet,System.Collections.Generic.Dictionary`2&lt;System.Guid,System.Guid&gt;):MathNet.Symbolics.Backend.Containers.InstanceIdSet">
            <Messages>
             <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Created="2007-03-25 19:46:45Z" FixCategory="NonBreaking">
              <Issue>
               <Item>Port.BuilderMapSignals(SignalSet, Dictionary`2&lt;System.Guid,System.Guid&gt;):InstanceIdSet</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="MathNet.Symbolics.IPort_BuilderAdapter.AcceptSystemBuilder(MathNet.Symbolics.ISystemBuilder,System.Collections.Generic.Dictionary`2&lt;System.Guid,System.Guid&gt;,System.Collections.Generic.Dictionary`2&lt;System.Guid,System.Guid&gt;):System.Guid">
            <Messages>
             <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>Port</Item>
               <Item>IPort_BuilderAdapter.AcceptSystemBuilder(ISystemBuilder, Dictionary`2&lt;System.Guid,System.Guid&gt;, Dictionary`2&lt;System.Guid,System.Guid&gt;):Guid</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="MathNet.Symbolics.IPort_CycleAnalysis.DeTag(System.Int32):System.Void">
            <Messages>
             <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>Port</Item>
               <Item>IPort_CycleAnalysis.DeTag(Int32):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="MathNet.Symbolics.IPort_CycleAnalysis.TagWasTagged(System.Int32):System.Boolean">
            <Messages>
             <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>Port</Item>
               <Item>IPort_CycleAnalysis.TagWasTagged(Int32):Boolean</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="Signal">
          <Members>
           <Member Name="MathNet.Symbolics.ISignal_BuilderAdapter.AcceptSystemBuilderAfter(MathNet.Symbolics.ISystemBuilder,System.Collections.Generic.Dictionary`2&lt;System.Guid,System.Guid&gt;,System.Collections.Generic.Dictionary`2&lt;System.Guid,System.Guid&gt;):System.Void">
            <Messages>
             <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>Signal</Item>
               <Item>ISignal_BuilderAdapter.AcceptSystemBuilderAfter(ISystemBuilder, Dictionary`2&lt;System.Guid,System.Guid&gt;, Dictionary`2&lt;System.Guid,System.Guid&gt;):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="MathNet.Symbolics.ISignal_BuilderAdapter.AcceptSystemBuilderBefore(MathNet.Symbolics.ISystemBuilder):System.Guid">
            <Messages>
             <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>Signal</Item>
               <Item>ISignal_BuilderAdapter.AcceptSystemBuilderBefore(ISystemBuilder):Guid</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="MathNet.Symbolics.ISignal_BuilderAdapter.BuilderAppendConstraint(MathNet.Symbolics.IProperty):System.Void">
            <Messages>
             <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>Signal</Item>
               <Item>ISignal_BuilderAdapter.BuilderAppendConstraint(IProperty):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="MathNet.Symbolics.ISignal_BuilderAdapter.BuilderAppendProperty(MathNet.Symbolics.IProperty):System.Void">
            <Messages>
             <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>Signal</Item>
               <Item>ISignal_BuilderAdapter.BuilderAppendProperty(IProperty):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="MathNet.Symbolics.ISignal_BuilderAdapter.BuilderSetValue(MathNet.Symbolics.IValueStructure):System.Void">
            <Messages>
             <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>Signal</Item>
               <Item>ISignal_BuilderAdapter.BuilderSetValue(IValueStructure):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="MathNet.Symbolics.ISignal_Drive.DriveSignal(MathNet.Symbolics.Port,System.Int32):System.Void">
            <Messages>
             <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>Signal</Item>
               <Item>ISignal_Drive.DriveSignal(Port, Int32):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="MathNet.Symbolics.ISignal_Drive.UndriveSignal(System.Int32):System.Void">
            <Messages>
             <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>Signal</Item>
               <Item>ISignal_Drive.UndriveSignal(Int32):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="MathNet.Symbolics.Simulation.ISchedulable.CurrentValue">
            <Accessors>
             <Accessor Name="MathNet.Symbolics.Simulation.ISchedulable.get_CurrentValue():MathNet.Symbolics.IValueStructure">
              <Messages>
               <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Created="2007-03-25 19:46:45Z">
                <Issue>
                 <Item>Signal</Item>
                 <Item>ISchedulable.get_CurrentValue():IValueStructure</Item>
                </Issue>
               </Message>
              </Messages>
             </Accessor>
             <Accessor Name="MathNet.Symbolics.Simulation.ISchedulable.set_CurrentValue(MathNet.Symbolics.IValueStructure):System.Void">
              <Messages>
               <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Created="2007-03-25 19:46:45Z">
                <Issue>
                 <Item>Signal</Item>
                 <Item>ISchedulable.set_CurrentValue(IValueStructure):Void</Item>
                </Issue>
               </Message>
              </Messages>
             </Accessor>
            </Accessors>
           </Member>
           <Member Name="MathNet.Symbolics.Simulation.ISchedulable.get_InstanceId():System.Guid">
            <Messages>
             <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>Signal</Item>
               <Item>ISchedulable.get_InstanceId():Guid</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="MathNet.Symbolics.Simulation.ISchedulable.HasEvent">
            <Accessors>
             <Accessor Name="MathNet.Symbolics.Simulation.ISchedulable.get_HasEvent():System.Boolean">
              <Messages>
               <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Created="2007-03-25 19:46:45Z">
                <Issue>
                 <Item>Signal</Item>
                 <Item>ISchedulable.get_HasEvent():Boolean</Item>
                </Issue>
               </Message>
              </Messages>
             </Accessor>
             <Accessor Name="MathNet.Symbolics.Simulation.ISchedulable.set_HasEvent(System.Boolean):System.Void">
              <Messages>
               <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Created="2007-03-25 19:46:45Z">
                <Issue>
                 <Item>Signal</Item>
                 <Item>ISchedulable.set_HasEvent(Boolean):Void</Item>
                </Issue>
               </Message>
              </Messages>
             </Accessor>
            </Accessors>
           </Member>
           <Member Name="MathNet.Symbolics.Simulation.ISchedulable.NotifyOutputsNewValue():System.Void">
            <Messages>
             <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>Signal</Item>
               <Item>ISchedulable.NotifyOutputsNewValue():Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="ValueStructure">
          <Messages>
           <Message TypeName="OverrideGetHashCodeOnOverridingEquals" Category="Microsoft.Usage" CheckId="CA2218" Created="2006-08-05 09:39:03Z">
            <Issue>
             <Item>MathNet.Symbolics.Core.ValueStructure</Item>
            </Issue>
           </Message>
          </Messages>
         </Type>
        </Types>
       </Namespace>
       <Namespace Name="MathNet.Symbolics.Workplace">
        <Types>
         <Type Name="MathSystem">
          <Members>
           <Member Name="Evaluate(MathNet.Symbolics.IValueStructure[]):MathNet.Symbolics.IValueStructure[]">
            <Messages>
             <Message Id="System.ArgumentException.#ctor(System.String,System.String)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>MathSystem.Evaluate(IValueStructure[]):IValueStructure[]</Item>
               <Item>1</Item>
               <Item>ArgumentException.ArgumentException(String, String)</Item>
               <Item>The count of inputs doesn't match the systems count of input signals.</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Evaluate(System.Double[]):System.Double[]">
            <Messages>
             <Message Id="System.ArgumentException.#ctor(System.String,System.String)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Created="2006-08-05 09:39:03Z">
              <Issue>
               <Item>MathSystem.Evaluate(Double[]):Double[]</Item>
               <Item>1</Item>
               <Item>ArgumentException.ArgumentException(String, String)</Item>
               <Item>The count of inputs doesn't match the systems count of input signals.</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="Project">
          <Members>
           <Member Name="LoadSystem(System.Guid):System.Void">
            <Messages>
             <Message Id="0#iid" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-14 12:24:04Z">
              <Issue Name="Parameter">
               <Item>Project.LoadSystem(Guid):Void</Item>
               <Item>iid</Item>
               <Item>iid</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="LoadSystem(System.Int32):System.Void">
            <Messages>
             <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Created="2006-08-05 09:39:03Z" FixCategory="Breaking">
              <Issue>
               <Item>Project.LoadSystem(Int32):Void</Item>
              </Issue>
             </Message>
             <Message Id="index" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2006-08-05 09:39:03Z" FixCategory="Breaking">
              <Issue>
               <Item>index</Item>
               <Item>Project.LoadSystem(Int32):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="MathNet.Symbolics.Mediator.IObserver.OnBusAttachedToPort(MathNet.Symbolics.Bus,MathNet.Symbolics.Port,System.Int32):System.Void">
            <Messages>
             <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>Project</Item>
               <Item>IObserver.OnBusAttachedToPort(Bus, Port, Int32):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="MathNet.Symbolics.Mediator.IObserver.OnBusDetachedFromPort(MathNet.Symbolics.Bus,MathNet.Symbolics.Port,System.Int32):System.Void">
            <Messages>
             <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>Project</Item>
               <Item>IObserver.OnBusDetachedFromPort(Bus, Port, Int32):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="MathNet.Symbolics.Mediator.IObserver.OnBusValueChanged(MathNet.Symbolics.Bus):System.Void">
            <Messages>
             <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>Project</Item>
               <Item>IObserver.OnBusValueChanged(Bus):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="MathNet.Symbolics.Mediator.IObserver.OnNewBusCreated(MathNet.Symbolics.Bus):System.Void">
            <Messages>
             <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>Project</Item>
               <Item>IObserver.OnNewBusCreated(Bus):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="MathNet.Symbolics.Mediator.IObserver.OnNewPortCreated(MathNet.Symbolics.Port):System.Void">
            <Messages>
             <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>Project</Item>
               <Item>IObserver.OnNewPortCreated(Port):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="MathNet.Symbolics.Mediator.IObserver.OnNewSignalCreated(MathNet.Symbolics.Signal):System.Void">
            <Messages>
             <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>Project</Item>
               <Item>IObserver.OnNewSignalCreated(Signal):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="MathNet.Symbolics.Mediator.IObserver.OnPortDrivesSignal(MathNet.Symbolics.Signal,MathNet.Symbolics.Port,System.Int32):System.Void">
            <Messages>
             <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>Project</Item>
               <Item>IObserver.OnPortDrivesSignal(Signal, Port, Int32):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="MathNet.Symbolics.Mediator.IObserver.OnPortDrivesSignalNoLonger(MathNet.Symbolics.Signal,MathNet.Symbolics.Port,System.Int32):System.Void">
            <Messages>
             <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>Project</Item>
               <Item>IObserver.OnPortDrivesSignalNoLonger(Signal, Port, Int32):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="MathNet.Symbolics.Mediator.IObserver.OnSignalDrivesPort(MathNet.Symbolics.Signal,MathNet.Symbolics.Port,System.Int32):System.Void">
            <Messages>
             <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>Project</Item>
               <Item>IObserver.OnSignalDrivesPort(Signal, Port, Int32):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="MathNet.Symbolics.Mediator.IObserver.OnSignalDrivesPortNoLonger(MathNet.Symbolics.Signal,MathNet.Symbolics.Port,System.Int32):System.Void">
            <Messages>
             <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>Project</Item>
               <Item>IObserver.OnSignalDrivesPortNoLonger(Signal, Port, Int32):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="MathNet.Symbolics.Mediator.IObserver.OnSignalValueChanged(MathNet.Symbolics.Signal):System.Void">
            <Messages>
             <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>Project</Item>
               <Item>IObserver.OnSignalValueChanged(Signal):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="SimulateFor(System.Int32):System.TimeSpan">
            <Messages>
             <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Created="2007-03-25 19:46:45Z" FixCategory="Breaking">
              <Issue>
               <Item>Project.SimulateFor(Int32):TimeSpan</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="SimulateFor(System.TimeSpan):System.TimeSpan">
            <Messages>
             <Message Id="0#timespan" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-14 12:24:04Z">
              <Issue Name="Parameter">
               <Item>Project.SimulateFor(TimeSpan):TimeSpan</Item>
               <Item>timespan</Item>
               <Item>timespan</Item>
              </Issue>
             </Message>
             <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Created="2007-03-25 19:46:45Z" FixCategory="Breaking">
              <Issue>
               <Item>Project.SimulateFor(TimeSpan):TimeSpan</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="SimulateInstant():System.Boolean">
            <Messages>
             <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Created="2007-03-25 19:46:45Z" FixCategory="Breaking">
              <Issue>
               <Item>Project.SimulateInstant():Boolean</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
        </Types>
       </Namespace>
      </Namespaces>
      <Resources>
       <Resource Name="MathNet.Symbolics.Properties.Resources.resources">
        <Messages>
         <Message Id="Faile" TypeName="ResourceStringsShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1703" Created="2006-08-14 12:24:04Z">
          <Issue>
           <Item>Faile</Item>
           <Item>ex_Deserialize_Failed_UnexpectedPosition</Item>
           <Item>Faile to deserialize an item, due to an invalid data file or a usage error. Expected '{0}' but got '{1}' instead. Check the data file for errors and report to the developer.</Item>
           <Item>MathNet.Symbolics.Properties.Resources.resources</Item>
          </Issue>
         </Message>
        </Messages>
       </Resource>
      </Resources>
     </Module>
    </Modules>
   </Target>
   <Target Name="$(ProjectDir)/src/app/MathNet.Yttrium/Manipulation.Contracts/bin/Debug/MathNet.Yttrium.Manipulation.Contracts.dll">
    <Modules>
     <Module Name="mathnet.yttrium.manipulation.contracts.dll">
      <Messages>
       <Message TypeName="AssembliesShouldHaveValidStrongNames" Category="Microsoft.Design" CheckId="CA2210" Created="2007-03-25 19:46:45Z">
        <Issue Name="NoStrongName">
         <Item>MathNet.Yttrium.Manipulation.Contracts</Item>
        </Issue>
       </Message>
      </Messages>
      <Namespaces>
       <Namespace Name="MathNet.Symbolics.Manipulation">
        <Types>
         <Type Name="ITransformationTheoremProvider">
          <Members>
           <Member Name="Item[MathNet.Symbolics.MathIdentifier]">
            <Messages>
             <Message TypeName="UseIntegralOrStringArgumentForIndexers" Category="Microsoft.Design" CheckId="CA1043" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>ITransformationTheoremProvider.Item[MathIdentifier]:ITransformationTheorem</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="LookupBest(MathNet.Symbolics.Signal,MathNet.Symbolics.Port,MathNet.Symbolics.Patterns.Toolkit.GroupCollection&amp;):MathNet.Symbolics.Manipulation.ITransformationTheorem">
            <Messages>
             <Message Id="2#" TypeName="AvoidOutParameters" Category="Microsoft.Design" CheckId="CA1021" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>groups</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="LookupFirst(MathNet.Symbolics.Signal,MathNet.Symbolics.Port,MathNet.Symbolics.Patterns.Toolkit.GroupCollection&amp;):MathNet.Symbolics.Manipulation.ITransformationTheorem">
            <Messages>
             <Message Id="2#" TypeName="AvoidOutParameters" Category="Microsoft.Design" CheckId="CA1021" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>groups</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="TryLookupBest(MathNet.Symbolics.Signal,MathNet.Symbolics.Port,MathNet.Symbolics.Manipulation.ITransformationTheorem&amp;,MathNet.Symbolics.Patterns.Toolkit.GroupCollection&amp;):System.Boolean">
            <Messages>
             <Message Id="2#" TypeName="AvoidOutParameters" Category="Microsoft.Design" CheckId="CA1021" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>theorem</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="TryLookupFirst(MathNet.Symbolics.Signal,MathNet.Symbolics.Port,MathNet.Symbolics.Manipulation.ITransformationTheorem&amp;,MathNet.Symbolics.Patterns.Toolkit.GroupCollection&amp;):System.Boolean">
            <Messages>
             <Message Id="2#" TypeName="AvoidOutParameters" Category="Microsoft.Design" CheckId="CA1021" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>theorem</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="ManipulationPlan">
          <Members>
           <Member Name="DontAlter">
            <Messages>
             <Message Id="Dont" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2007-03-25 19:46:45Z">
              <Issue Name="Member">
               <Item>Dont</Item>
               <Item>ManipulationPlan.DontAlter</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
        </Types>
       </Namespace>
      </Namespaces>
     </Module>
    </Modules>
   </Target>
   <Target Name="$(ProjectDir)/src/app/MathNet.Yttrium/Manipulation.Service/bin/Debug/MathNet.Yttrium.Manipulation.Service.dll">
    <Modules>
     <Module Name="mathnet.yttrium.manipulation.service.dll">
      <Messages>
       <Message TypeName="AssembliesShouldHaveValidStrongNames" Category="Microsoft.Design" CheckId="CA2210" Created="2007-03-25 19:46:45Z">
        <Issue Name="NoStrongName">
         <Item>MathNet.Yttrium.Manipulation.Service</Item>
        </Issue>
       </Message>
      </Messages>
      <Namespaces>
       <Namespace Name="MathNet.Symbolics">
        <Types>
         <Type Name="ManipulationFactory">
          <Messages>
           <Message TypeName="AvoidUninstantiatedInternalClasses" Category="Microsoft.Performance" CheckId="CA1812" Created="2007-03-25 19:46:45Z">
            <Issue>
             <Item>MathNet.Symbolics.ManipulationFactory</Item>
            </Issue>
           </Message>
          </Messages>
         </Type>
        </Types>
       </Namespace>
       <Namespace Name="MathNet.Symbolics.Manipulation">
        <Types>
         <Type Name="Manipulator">
          <Members>
           <Member Name="CreateSubstituteVisitor(MathNet.Symbolics.Signal,MathNet.Symbolics.Signal):MathNet.Symbolics.Manipulation.IManipulationVisitor">
            <Messages>
             <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Created="2007-03-25 19:46:45Z" FixCategory="NonBreaking">
              <Issue>
               <Item>Manipulator.CreateSubstituteVisitor(Signal, Signal):IManipulationVisitor</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="FixSentinel(MathNet.Symbolics.Signal&amp;,System.Collections.Generic.Dictionary`2&lt;System.Guid,MathNet.Symbolics.Signal&gt;,System.Collections.Generic.Dictionary`2&lt;System.Guid,MathNet.Symbolics.Signal&gt;):System.Boolean">
            <Messages>
             <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Created="2007-03-25 19:46:45Z" FixCategory="NonBreaking">
              <Issue>
               <Item>Manipulator.FixSentinel(Signal&amp;, Dictionary`2&lt;System.Guid,MathNet.Symbolics.Signal&gt;, Dictionary`2&lt;System.Guid,MathNet.Symbolics.Signal&gt;):Boolean</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="Manipulator+ManipulatorPlanExecutor">
          <Members>
           <Member Name="DefaultStrategy">
            <Accessors>
             <Accessor Name="get_DefaultStrategy():MathNet.Symbolics.Traversing.IScanStrategy">
              <Messages>
               <Message Id="System.Exception.#ctor(System.String)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Created="2007-03-25 19:46:45Z">
                <Issue>
                 <Item>ManipulatorPlanExecutor.get_DefaultStrategy():IScanStrategy</Item>
                 <Item>1</Item>
                 <Item>Exception.Exception(String)</Item>
                 <Item>The method or operation is not implemented.</Item>
                </Issue>
               </Message>
               <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Created="2007-03-25 19:46:45Z">
                <Issue Name="TooGeneric">
                 <Item>ManipulatorPlanExecutor.get_DefaultStrategy():IScanStrategy</Item>
                 <Item>System.Exception</Item>
                </Issue>
               </Message>
              </Messages>
             </Accessor>
            </Accessors>
           </Member>
          </Members>
         </Type>
         <Type Name="Manipulator+ManipulatorPlanReducer">
          <Members>
           <Member Name="DefaultStrategy">
            <Accessors>
             <Accessor Name="get_DefaultStrategy():MathNet.Symbolics.Traversing.IScanStrategy">
              <Messages>
               <Message Id="System.Exception.#ctor(System.String)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Created="2007-03-25 19:46:45Z">
                <Issue>
                 <Item>ManipulatorPlanReducer.get_DefaultStrategy():IScanStrategy</Item>
                 <Item>1</Item>
                 <Item>Exception.Exception(String)</Item>
                 <Item>The method or operation is not implemented.</Item>
                </Issue>
               </Message>
               <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Created="2007-03-25 19:46:45Z">
                <Issue Name="TooGeneric">
                 <Item>ManipulatorPlanReducer.get_DefaultStrategy():IScanStrategy</Item>
                 <Item>System.Exception</Item>
                </Issue>
               </Message>
              </Messages>
             </Accessor>
            </Accessors>
           </Member>
          </Members>
         </Type>
         <Type Name="TransformationTheoremProvider">
          <Messages>
           <Message TypeName="IdentifiersShouldHaveCorrectSuffix" Category="Microsoft.Naming" CheckId="CA1710" Created="2007-03-25 19:46:45Z">
            <Issue>
             <Item>MathNet.Symbolics.Manipulation.TransformationTheoremProvider</Item>
             <Item>Collection</Item>
            </Issue>
           </Message>
          </Messages>
          <Members>
           <Member Name="MathNet.Symbolics.Manipulation.ITransformationTheoremProvider.get_Item(MathNet.Symbolics.MathIdentifier):MathNet.Symbolics.Manipulation.ITransformationTheorem">
            <Messages>
             <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>TransformationTheoremProvider</Item>
               <Item>ITransformationTheoremProvider.get_Item(MathIdentifier):ITransformationTheorem</Item>
              </Issue>
             </Message>
             <Message Id="0#" TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>param0</Item>
               <Item>TransformationTheoremProvider.MathNet.Symbolics.Manipulation.ITransformationTheoremProvider.get_Item(MathIdentifier):ITransformationTheorem</Item>
               <Item>theoremId</Item>
               <Item>ITransformationTheoremProvider.get_Item(MathIdentifier):ITransformationTheorem</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
        </Types>
       </Namespace>
      </Namespaces>
     </Module>
    </Modules>
   </Target>
   <Target Name="$(ProjectDir)/src/app/MathNet.Yttrium/Mediator.Contracts/bin/Debug/MathNet.Yttrium.Mediator.Contracts.dll">
    <Modules>
     <Module Name="mathnet.yttrium.mediator.contracts.dll">
      <Messages>
       <Message TypeName="AssembliesShouldHaveValidStrongNames" Category="Microsoft.Design" CheckId="CA2210" Created="2007-03-25 19:46:45Z">
        <Issue Name="NoStrongName">
         <Item>MathNet.Yttrium.Mediator.Contracts</Item>
        </Issue>
       </Message>
      </Messages>
     </Module>
    </Modules>
   </Target>
   <Target Name="$(ProjectDir)/src/app/MathNet.Yttrium/Mediator.Service/bin/Debug/MathNet.Yttrium.Mediator.Service.dll">
    <Modules>
     <Module Name="mathnet.yttrium.mediator.service.dll">
      <Messages>
       <Message TypeName="AssembliesShouldHaveValidStrongNames" Category="Microsoft.Design" CheckId="CA2210" Created="2007-03-25 19:46:45Z">
        <Issue Name="NoStrongName">
         <Item>MathNet.Yttrium.Mediator.Service</Item>
        </Issue>
       </Message>
      </Messages>
      <Namespaces>
       <Namespace Name="MathNet.Symbolics">
        <Types>
         <Type Name="MediatorFactory">
          <Messages>
           <Message TypeName="AvoidUninstantiatedInternalClasses" Category="Microsoft.Performance" CheckId="CA1812" Created="2007-03-25 19:46:45Z">
            <Issue>
             <Item>MathNet.Symbolics.MediatorFactory</Item>
            </Issue>
           </Message>
          </Messages>
         </Type>
        </Types>
       </Namespace>
       <Namespace Name="MathNet.Symbolics.Mediator">
        <Types>
         <Type Name="Mediator">
          <Messages>
           <Message TypeName="TypeNamesShouldNotMatchNamespaces" Category="Microsoft.Naming" CheckId="CA1724" Created="2007-03-25 19:46:45Z">
            <Issue>
             <Item>Mediator</Item>
             <Item>MathNet.Symbolics.Mediator</Item>
            </Issue>
           </Message>
          </Messages>
         </Type>
         <Type Name="SystemMediator">
          <Members>
           <Member Name="MathNet.Symbolics.Mediator.IObserver.OnBusAttachedToPort(MathNet.Symbolics.Bus,MathNet.Symbolics.Port,System.Int32):System.Void">
            <Messages>
             <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>SystemMediator</Item>
               <Item>IObserver.OnBusAttachedToPort(Bus, Port, Int32):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="MathNet.Symbolics.Mediator.IObserver.OnBusDetachedFromPort(MathNet.Symbolics.Bus,MathNet.Symbolics.Port,System.Int32):System.Void">
            <Messages>
             <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>SystemMediator</Item>
               <Item>IObserver.OnBusDetachedFromPort(Bus, Port, Int32):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="MathNet.Symbolics.Mediator.IObserver.OnBusValueChanged(MathNet.Symbolics.Bus):System.Void">
            <Messages>
             <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>SystemMediator</Item>
               <Item>IObserver.OnBusValueChanged(Bus):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="MathNet.Symbolics.Mediator.IObserver.OnNewBusCreated(MathNet.Symbolics.Bus):System.Void">
            <Messages>
             <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>SystemMediator</Item>
               <Item>IObserver.OnNewBusCreated(Bus):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="MathNet.Symbolics.Mediator.IObserver.OnNewPortCreated(MathNet.Symbolics.Port):System.Void">
            <Messages>
             <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>SystemMediator</Item>
               <Item>IObserver.OnNewPortCreated(Port):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="MathNet.Symbolics.Mediator.IObserver.OnNewSignalCreated(MathNet.Symbolics.Signal):System.Void">
            <Messages>
             <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>SystemMediator</Item>
               <Item>IObserver.OnNewSignalCreated(Signal):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="MathNet.Symbolics.Mediator.IObserver.OnPortDrivesSignal(MathNet.Symbolics.Signal,MathNet.Symbolics.Port,System.Int32):System.Void">
            <Messages>
             <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>SystemMediator</Item>
               <Item>IObserver.OnPortDrivesSignal(Signal, Port, Int32):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="MathNet.Symbolics.Mediator.IObserver.OnPortDrivesSignalNoLonger(MathNet.Symbolics.Signal,MathNet.Symbolics.Port,System.Int32):System.Void">
            <Messages>
             <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>SystemMediator</Item>
               <Item>IObserver.OnPortDrivesSignalNoLonger(Signal, Port, Int32):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="MathNet.Symbolics.Mediator.IObserver.OnSignalDrivesPort(MathNet.Symbolics.Signal,MathNet.Symbolics.Port,System.Int32):System.Void">
            <Messages>
             <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>SystemMediator</Item>
               <Item>IObserver.OnSignalDrivesPort(Signal, Port, Int32):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="MathNet.Symbolics.Mediator.IObserver.OnSignalDrivesPortNoLonger(MathNet.Symbolics.Signal,MathNet.Symbolics.Port,System.Int32):System.Void">
            <Messages>
             <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>SystemMediator</Item>
               <Item>IObserver.OnSignalDrivesPortNoLonger(Signal, Port, Int32):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="MathNet.Symbolics.Mediator.IObserver.OnSignalValueChanged(MathNet.Symbolics.Signal):System.Void">
            <Messages>
             <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>SystemMediator</Item>
               <Item>IObserver.OnSignalValueChanged(Signal):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
        </Types>
       </Namespace>
      </Namespaces>
     </Module>
    </Modules>
   </Target>
   <Target Name="$(ProjectDir)/src/app/MathNet.Yttrium/Microkernel/bin/Debug/MathNet.Yttrium.Microkernel.dll">
    <Modules>
     <Module Name="mathnet.yttrium.microkernel.dll">
      <Messages>
       <Message TypeName="AssembliesShouldHaveValidStrongNames" Category="Microsoft.Design" CheckId="CA2210" Created="2007-03-25 19:46:45Z">
        <Issue Name="NoStrongName">
         <Item>MathNet.Yttrium.Microkernel</Item>
        </Issue>
       </Message>
      </Messages>
      <Namespaces>
       <Namespace Name="MathNet.Symbolics">
        <Types>
         <Type Name="Binder">
          <Members>
           <Member Name=".cctor()">
            <Messages>
             <Message TypeName="InitializeReferenceTypeStaticFieldsInline" Category="Microsoft.Performance" CheckId="CA1810" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>MathNet.Symbolics.Binder</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="GetInstance():T">
            <Messages>
             <Message TypeName="GenericMethodsShouldProvideTypeParameter" Category="Microsoft.Design" CheckId="CA1004" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>Binder.GetInstance():T</Item>
               <Item>T</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="GetInstance(T1):T">
            <Messages>
             <Message TypeName="GenericMethodsShouldProvideTypeParameter" Category="Microsoft.Design" CheckId="CA1004" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>Binder.GetInstance(T1):T</Item>
               <Item>T</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="GetInstance(T1,T2):T">
            <Messages>
             <Message TypeName="GenericMethodsShouldProvideTypeParameter" Category="Microsoft.Design" CheckId="CA1004" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>Binder.GetInstance(T1, T2):T</Item>
               <Item>T</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="GetInstance(T1,T2,T3):T">
            <Messages>
             <Message TypeName="GenericMethodsShouldProvideTypeParameter" Category="Microsoft.Design" CheckId="CA1004" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>Binder.GetInstance(T1, T2, T3):T</Item>
               <Item>T</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="GetInstance(T1,T2,T3,T4):T">
            <Messages>
             <Message TypeName="GenericMethodsShouldProvideTypeParameter" Category="Microsoft.Design" CheckId="CA1004" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>Binder.GetInstance(T1, T2, T3, T4):T</Item>
               <Item>T</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="GetInstance(T1,T2,T3,T4,T5):T">
            <Messages>
             <Message TypeName="GenericMethodsShouldProvideTypeParameter" Category="Microsoft.Design" CheckId="CA1004" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>Binder.GetInstance(T1, T2, T3, T4, T5):T</Item>
               <Item>T</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="GetInstance(T1,T2,T3,T4,T5,T6):T">
            <Messages>
             <Message TypeName="GenericMethodsShouldProvideTypeParameter" Category="Microsoft.Design" CheckId="CA1004" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>Binder.GetInstance(T1, T2, T3, T4, T5, T6):T</Item>
               <Item>T</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="GetInstance(T1,T2,T3,T4,T5,T6,T7):T">
            <Messages>
             <Message TypeName="GenericMethodsShouldProvideTypeParameter" Category="Microsoft.Design" CheckId="CA1004" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>Binder.GetInstance(T1, T2, T3, T4, T5, T6, T7):T</Item>
               <Item>T</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="GetInstance(T1,T2,T3,T4,T5,T6,T7,T8):T">
            <Messages>
             <Message TypeName="GenericMethodsShouldProvideTypeParameter" Category="Microsoft.Design" CheckId="CA1004" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>Binder.GetInstance(T1, T2, T3, T4, T5, T6, T7, T8):T</Item>
               <Item>T</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="GetSpecificInstance(MathNet.Symbolics.MathIdentifier):T">
            <Messages>
             <Message TypeName="GenericMethodsShouldProvideTypeParameter" Category="Microsoft.Design" CheckId="CA1004" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>Binder.GetSpecificInstance(MathIdentifier):T</Item>
               <Item>T</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="GetSpecificInstance(MathNet.Symbolics.MathIdentifier,T1):T">
            <Messages>
             <Message TypeName="GenericMethodsShouldProvideTypeParameter" Category="Microsoft.Design" CheckId="CA1004" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>Binder.GetSpecificInstance(MathIdentifier, T1):T</Item>
               <Item>T</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="GetSpecificInstance(MathNet.Symbolics.MathIdentifier,T1,T2):T">
            <Messages>
             <Message TypeName="GenericMethodsShouldProvideTypeParameter" Category="Microsoft.Design" CheckId="CA1004" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>Binder.GetSpecificInstance(MathIdentifier, T1, T2):T</Item>
               <Item>T</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="GetSpecificInstance(MathNet.Symbolics.MathIdentifier,T1,T2,T3):T">
            <Messages>
             <Message TypeName="GenericMethodsShouldProvideTypeParameter" Category="Microsoft.Design" CheckId="CA1004" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>Binder.GetSpecificInstance(MathIdentifier, T1, T2, T3):T</Item>
               <Item>T</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="GetSpecificInstance(MathNet.Symbolics.MathIdentifier,T1,T2,T3,T4):T">
            <Messages>
             <Message TypeName="GenericMethodsShouldProvideTypeParameter" Category="Microsoft.Design" CheckId="CA1004" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>Binder.GetSpecificInstance(MathIdentifier, T1, T2, T3, T4):T</Item>
               <Item>T</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="GetSpecificInstance(MathNet.Symbolics.MathIdentifier,T1,T2,T3,T4,T5):T">
            <Messages>
             <Message TypeName="GenericMethodsShouldProvideTypeParameter" Category="Microsoft.Design" CheckId="CA1004" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>Binder.GetSpecificInstance(MathIdentifier, T1, T2, T3, T4, T5):T</Item>
               <Item>T</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="GetSpecificInstance(MathNet.Symbolics.MathIdentifier,T1,T2,T3,T4,T5,T6):T">
            <Messages>
             <Message TypeName="GenericMethodsShouldProvideTypeParameter" Category="Microsoft.Design" CheckId="CA1004" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>Binder.GetSpecificInstance(MathIdentifier, T1, T2, T3, T4, T5, T6):T</Item>
               <Item>T</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="GetSpecificInstance(MathNet.Symbolics.MathIdentifier,T1,T2,T3,T4,T5,T6,T7):T">
            <Messages>
             <Message TypeName="GenericMethodsShouldProvideTypeParameter" Category="Microsoft.Design" CheckId="CA1004" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>Binder.GetSpecificInstance(MathIdentifier, T1, T2, T3, T4, T5, T6, T7):T</Item>
               <Item>T</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="GetSpecificInstance(MathNet.Symbolics.MathIdentifier,T1,T2,T3,T4,T5,T6,T7,T8):T">
            <Messages>
             <Message TypeName="GenericMethodsShouldProvideTypeParameter" Category="Microsoft.Design" CheckId="CA1004" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>Binder.GetSpecificInstance(MathIdentifier, T1, T2, T3, T4, T5, T6, T7, T8):T</Item>
               <Item>T</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="LoadBindings(System.String):System.Void">
            <Messages>
             <Message Id="Filename" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Created="2007-03-25 19:46:45Z">
              <Issue Name="ShouldBeCompoundWord">
               <Item>Filename</Item>
               <Item>parameter</Item>
               <Item>sourceFilename</Item>
               <Item>FileName</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="Config">
          <Members>
           <Member Name=".cctor()">
            <Messages>
             <Message TypeName="InitializeReferenceTypeStaticFieldsInline" Category="Microsoft.Performance" CheckId="CA1810" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>MathNet.Symbolics.Config</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="GenerateTag():System.Int32">
            <Messages>
             <Message TypeName="ProvideObsoleteAttributeMessage" Category="Microsoft.Design" CheckId="CA1041" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>Config.GenerateTag():Int32</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="EncapsulationFormat">
          <Messages>
           <Message TypeName="OverrideEqualsAndOperatorEqualsOnValueTypes" Category="Microsoft.Performance" CheckId="CA1815" Created="2007-03-25 19:46:45Z">
            <Issue Name="Equals">
             <Item>MathNet.Symbolics.EncapsulationFormat</Item>
            </Issue>
            <Issue Name="op_Equality">
             <Item>MathNet.Symbolics.EncapsulationFormat</Item>
            </Issue>
           </Message>
          </Messages>
         </Type>
         <Type Name="MathContext">
          <Messages>
           <Message TypeName="ImplementIDisposableCorrectly" Category="Microsoft.Design" CheckId="CA1063" Created="2007-03-25 19:46:45Z">
            <Issue Name="ProvideDisposeBool">
             <Item>MathNet.Symbolics.MathContext</Item>
            </Issue>
           </Message>
          </Messages>
          <Members>
           <Member Name="System.IDisposable.Dispose():System.Void">
            <Messages>
             <Message TypeName="ImplementIDisposableCorrectly" Category="Microsoft.Design" CheckId="CA1063" Created="2007-03-25 19:46:45Z">
              <Issue Name="DisposeImplementation">
               <Item>MathContext.System.IDisposable.Dispose():Void</Item>
              </Issue>
              <Issue Name="RenameDispose">
               <Item>MathContext.System.IDisposable.Dispose():Void</Item>
              </Issue>
             </Message>
             <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>MathContext</Item>
               <Item>IDisposable.Dispose():Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="Service`1">
          <Members>
           <Member Name=".cctor()">
            <Messages>
             <Message TypeName="InitializeReferenceTypeStaticFieldsInline" Category="Microsoft.Performance" CheckId="CA1810" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>MathNet.Symbolics.Service`1</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Instance">
            <Messages>
             <Message TypeName="DoNotDeclareStaticMembersOnGenericTypes" Category="Microsoft.Design" CheckId="CA1000" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>Service`1.Instance:T</Item>
               <Item>MathNet.Symbolics.Service`1</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
        </Types>
       </Namespace>
       <Namespace Name="MathNet.Symbolics.Backend.Mapping">
        <Types>
         <Type Name="Mapper">
          <Members>
           <Member Name="AddBinding(MathNet.Symbolics.IFactory`1&lt;T&gt;,MathNet.Symbolics.MathIdentifier):System.Void">
            <Messages>
             <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>Mapper.AddBinding(IFactory`1&lt;T&gt;, MathIdentifier):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="ImportBindings(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Backend.Mapping.RawBinding&gt;):System.Void">
            <Messages>
             <Message Id="System.String.Format(System.String,System.Object,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>Mapper.ImportBindings(IEnumerable`1&lt;MathNet.Symbolics.Backend.Mapping.RawBinding&gt;):Void</Item>
               <Item>System.String.Format(System.String,System.Object,System.Object,System.Object)</Item>
               <Item>System.String.Format(System.IFormatProvider,System.String,System.Object[])</Item>
              </Issue>
              <Issue>
               <Item>Mapper.ImportBindings(IEnumerable`1&lt;MathNet.Symbolics.Backend.Mapping.RawBinding&gt;):Void</Item>
               <Item>System.String.Format(System.String,System.Object,System.Object,System.Object)</Item>
               <Item>System.String.Format(System.IFormatProvider,System.String,System.Object[])</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="XmlMappingAdapter">
          <Members>
           <Member Name="GetXmlAttribute(System.Xml.XmlNode,System.String,System.String):System.String">
            <Messages>
             <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>XmlMappingAdapter.GetXmlAttribute(XmlNode, String, String):String</Item>
               <Item>System.Object</Item>
              </Issue>
             </Message>
             <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Created="2007-03-25 19:46:45Z" FixCategory="NonBreaking">
              <Issue>
               <Item>XmlMappingAdapter.GetXmlAttribute(XmlNode, String, String):String</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
        </Types>
       </Namespace>
       <Namespace Name="MathNet.Symbolics.Backend.Persistence">
        <Types>
         <Type Name="Serializer">
          <Members>
           <Member Name="Deserialize(System.Xml.XmlReader,System.Collections.Generic.IDictionary`2&lt;System.Guid,MathNet.Symbolics.Signal&gt;,System.Collections.Generic.IDictionary`2&lt;System.Guid,MathNet.Symbolics.Bus&gt;):T">
            <Messages>
             <Message TypeName="GenericMethodsShouldProvideTypeParameter" Category="Microsoft.Design" CheckId="CA1004" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>Serializer.Deserialize(XmlReader, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Signal&gt;, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Bus&gt;):T</Item>
               <Item>T</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="DeserializeFromString(System.String,System.Collections.Generic.IDictionary`2&lt;System.Guid,MathNet.Symbolics.Signal&gt;,System.Collections.Generic.IDictionary`2&lt;System.Guid,MathNet.Symbolics.Bus&gt;):T">
            <Messages>
             <Message TypeName="GenericMethodsShouldProvideTypeParameter" Category="Microsoft.Design" CheckId="CA1004" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>Serializer.DeserializeFromString(String, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Signal&gt;, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Bus&gt;):T</Item>
               <Item>T</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="DeserializeList(System.Xml.XmlReader,System.Collections.Generic.IDictionary`2&lt;System.Guid,MathNet.Symbolics.Signal&gt;,System.Collections.Generic.IDictionary`2&lt;System.Guid,MathNet.Symbolics.Bus&gt;,System.String):System.Collections.Generic.List`1&lt;T&gt;">
            <Messages>
             <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>System.Collections.Generic.List`1&lt;T&gt;</Item>
               <Item>Serializer.DeserializeList(XmlReader, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Signal&gt;, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Bus&gt;, String):List`1&lt;T&gt;</Item>
              </Issue>
             </Message>
             <Message TypeName="GenericMethodsShouldProvideTypeParameter" Category="Microsoft.Design" CheckId="CA1004" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>Serializer.DeserializeList(XmlReader, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Signal&gt;, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Bus&gt;, String):List`1&lt;T&gt;</Item>
               <Item>T</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="DeserializeListFromString(System.String,System.Collections.Generic.IDictionary`2&lt;System.Guid,MathNet.Symbolics.Signal&gt;,System.Collections.Generic.IDictionary`2&lt;System.Guid,MathNet.Symbolics.Bus&gt;,System.String):System.Collections.Generic.List`1&lt;T&gt;">
            <Messages>
             <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>System.Collections.Generic.List`1&lt;T&gt;</Item>
               <Item>Serializer.DeserializeListFromString(String, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Signal&gt;, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Bus&gt;, String):List`1&lt;T&gt;</Item>
              </Issue>
             </Message>
             <Message TypeName="GenericMethodsShouldProvideTypeParameter" Category="Microsoft.Design" CheckId="CA1004" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>Serializer.DeserializeListFromString(String, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Signal&gt;, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Bus&gt;, String):List`1&lt;T&gt;</Item>
               <Item>T</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="TypeToDescription(System.Type):System.String">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>'type'</Item>
               <Item>Serializer.TypeToDescription(Type):String</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
        </Types>
       </Namespace>
       <Namespace Name="MathNet.Symbolics.Backend.Utils">
        <Types>
         <Type Name="BindingSingletonProvider`1">
          <Members>
           <Member Name=".cctor()">
            <Messages>
             <Message TypeName="InitializeReferenceTypeStaticFieldsInline" Category="Microsoft.Performance" CheckId="CA1810" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>MathNet.Symbolics.Backend.Utils.BindingSingletonProvider`1</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Instance">
            <Messages>
             <Message TypeName="DoNotDeclareStaticMembersOnGenericTypes" Category="Microsoft.Design" CheckId="CA1000" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>BindingSingletonProvider`1.Instance:T</Item>
               <Item>MathNet.Symbolics.Backend.Utils.BindingSingletonProvider`1</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="EmptyIterator`1">
          <Messages>
           <Message TypeName="IdentifiersShouldHaveCorrectSuffix" Category="Microsoft.Naming" CheckId="CA1710" Created="2007-03-25 19:46:45Z">
            <Issue>
             <Item>MathNet.Symbolics.Backend.Utils.EmptyIterator`1</Item>
             <Item>Collection</Item>
            </Issue>
           </Message>
           <Message TypeName="ImplementIDisposableCorrectly" Category="Microsoft.Design" CheckId="CA1063" Created="2007-03-25 19:46:45Z">
            <Issue Name="ProvideDisposeBool">
             <Item>MathNet.Symbolics.Backend.Utils.EmptyIterator`1</Item>
            </Issue>
           </Message>
          </Messages>
          <Members>
           <Member Name="Dispose():System.Void">
            <Messages>
             <Message TypeName="ImplementIDisposableCorrectly" Category="Microsoft.Design" CheckId="CA1063" Created="2007-03-25 19:46:45Z">
              <Issue Name="DisposeImplementation">
               <Item>EmptyIterator`1.Dispose():Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="SingletonProvider`1">
          <Members>
           <Member Name=".cctor()">
            <Messages>
             <Message TypeName="InitializeReferenceTypeStaticFieldsInline" Category="Microsoft.Performance" CheckId="CA1810" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>MathNet.Symbolics.Backend.Utils.SingletonProvider`1</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Instance">
            <Messages>
             <Message TypeName="DoNotDeclareStaticMembersOnGenericTypes" Category="Microsoft.Design" CheckId="CA1000" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>SingletonProvider`1.Instance:T</Item>
               <Item>MathNet.Symbolics.Backend.Utils.SingletonProvider`1</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
        </Types>
       </Namespace>
       <Namespace Name="MathNet.Symbolics.Exceptions">
        <Types>
         <Type Name="MicrokernelException">
          <Messages>
           <Message TypeName="ImplementStandardExceptionConstructors" Category="Microsoft.Design" CheckId="CA1032" Created="2007-03-25 19:46:45Z">
            <Issue>
             <Item>MathNet.Symbolics.Exceptions.MicrokernelException</Item>
             <Item>protected MicrokernelException(SerializationInfo, StreamingContext)</Item>
            </Issue>
            <Issue>
             <Item>MathNet.Symbolics.Exceptions.MicrokernelException</Item>
             <Item>public MicrokernelException()</Item>
            </Issue>
           </Message>
           <Message TypeName="MarkISerializableTypesWithSerializable" Category="Microsoft.Usage" CheckId="CA2237" Created="2007-03-25 19:46:45Z">
            <Issue Level="Error">
             <Item>MicrokernelException</Item>
            </Issue>
           </Message>
          </Messages>
          <Members>
           <Member Name=".ctor(System.String)">
            <Messages>
             <Message TypeName="ImplementStandardExceptionConstructors" Category="Microsoft.Design" CheckId="CA1032" Created="2007-03-25 19:46:45Z">
              <Issue Name="Accessibility">
               <Item>MicrokernelException.MicrokernelException(String)</Item>
               <Item>public</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
        </Types>
       </Namespace>
      </Namespaces>
     </Module>
    </Modules>
   </Target>
   <Target Name="$(ProjectDir)/src/app/MathNet.Yttrium/Packages.Helper/bin/Debug/MathNet.Yttrium.Packages.Helper.dll">
    <Modules>
     <Module Name="mathnet.yttrium.packages.helper.dll">
      <Messages>
       <Message TypeName="AssembliesShouldHaveValidStrongNames" Category="Microsoft.Design" CheckId="CA2210" Created="2007-03-25 19:46:45Z">
        <Issue Name="NoStrongName">
         <Item>MathNet.Yttrium.Packages.Helper</Item>
        </Issue>
       </Message>
      </Messages>
      <Namespaces>
       <Namespace Name="MathNet.Symbolics.Packages.ObjectModel">
        <Types>
         <Type Name="CategoryBase">
          <Members>
           <Member Name="Equals(MathNet.Symbolics.Packages.ObjectModel.CategoryBase):System.Boolean">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>'other'</Item>
               <Item>CategoryBase.Equals(CategoryBase):Boolean</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="EqualsById(MathNet.Symbolics.ICategory):System.Boolean">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>'other'</Item>
               <Item>CategoryBase.EqualsById(ICategory):Boolean</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="TryGetCachedMembership(MathNet.Symbolics.Signal,MathNet.Symbolics.CategoryMembershipLevel&amp;):System.Boolean">
            <Messages>
             <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Created="2007-03-25 19:46:45Z" FixCategory="Breaking">
              <Issue>
               <Item>CategoryBase.TryGetCachedMembership(Signal, CategoryMembershipLevel&amp;):Boolean</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="CategoryMembershipProperty">
          <Members>
           <Member Name="Deserialize(System.Xml.XmlReader,System.Collections.Generic.IDictionary`2&lt;System.Guid,MathNet.Symbolics.Signal&gt;,System.Collections.Generic.IDictionary`2&lt;System.Guid,MathNet.Symbolics.Bus&gt;):MathNet.Symbolics.Packages.ObjectModel.CategoryMembershipProperty">
            <Messages>
             <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>CategoryMembershipProperty.Deserialize(XmlReader, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Signal&gt;, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Bus&gt;):CategoryMembershipProperty</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="EntityBase">
          <Members>
           <Member Name="Equals(MathNet.Symbolics.Packages.ObjectModel.EntityBase):System.Boolean">
            <Messages>
             <Message TypeName="ProvideObsoleteAttributeMessage" Category="Microsoft.Design" CheckId="CA1041" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>EntityBase.Equals(EntityBase):Boolean</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="GenericFunctionProcess">
          <Members>
           <Member Name=".ctor(System.Int32,System.Int32,System.Int32)">
            <Messages>
             <Message Id="output+1" TypeName="OperationsShouldNotOverflow" Category="Microsoft.Usage" CheckId="CA2233" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>output+1</Item>
               <Item>GenericFunctionProcess.GenericFunctionProcess(Int32, Int32, Int32)</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Inputs">
            <Messages>
             <Message TypeName="PropertiesShouldNotReturnArrays" Category="Microsoft.Performance" CheckId="CA1819" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>GenericFunctionProcess.Inputs:Signal[]</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Outputs">
            <Messages>
             <Message TypeName="PropertiesShouldNotReturnArrays" Category="Microsoft.Performance" CheckId="CA1819" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>GenericFunctionProcess.Outputs:Signal[]</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="GenericMathOpArchitecture">
          <Messages>
           <Message TypeName="ShortAcronymsShouldBeUppercase" Category="Microsoft.Naming" CheckId="CA1706" Created="2007-03-25 19:46:45Z">
            <Issue Name="Type">
             <Item>Op</Item>
             <Item>MathNet.Symbolics.Packages.ObjectModel.GenericMathOpArchitecture</Item>
            </Issue>
           </Message>
          </Messages>
         </Type>
         <Type Name="GenericSimpleArchitecture">
          <Members>
           <Member Name=".ctor(MathNet.Symbolics.MathIdentifier,System.Boolean,MathNet.Symbolics.Port,System.Int32)">
            <Messages>
             <Message TypeName="DoNotCallOverridableMethodsInConstructors" Category="Microsoft.Usage" CheckId="CA2214" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>GenericSimpleArchitecture.GenericSimpleArchitecture(MathIdentifier, Boolean, Port, Int32)</Item>
               <Item>&#xD;&#xA;&#xD;&#xA;GenericSimpleArchitecture.GenericSimpleArchitecture(MathIdentifier, Boolean, Port, Int32)&#xD;&#xA;GenericSimpleArchitecture.Action(IList`1&lt;MathNet.Symbolics.Signal&gt;, IList`1&lt;MathNet.Symbolics.Signal&gt;, IList`1&lt;MathNet.Symbolics.Signal&gt;, IList`1&lt;MathNet.Symbolics.Bus&gt;):Void</Item>
              </Issue>
              <Issue>
               <Item>GenericSimpleArchitecture.GenericSimpleArchitecture(MathIdentifier, Boolean, Port, Int32)</Item>
               <Item>&#xD;&#xA;&#xD;&#xA;GenericSimpleArchitecture.GenericSimpleArchitecture(MathIdentifier, Boolean, Port, Int32)&#xD;&#xA;GenericSimpleArchitecture.SenseSignals(IList`1&lt;MathNet.Symbolics.Signal&gt;, IList`1&lt;MathNet.Symbolics.Signal&gt;, IList`1&lt;MathNet.Symbolics.Bus&gt;, IList`1&lt;MathNet.Symbolics.Signal&gt;):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="PropertyBase">
          <Messages>
           <Message TypeName="OverrideGetHashCodeOnOverridingEquals" Category="Microsoft.Usage" CheckId="CA2218" Created="2007-03-25 19:46:45Z">
            <Issue>
             <Item>MathNet.Symbolics.Packages.ObjectModel.PropertyBase</Item>
            </Issue>
           </Message>
          </Messages>
         </Type>
         <Type Name="ValueStructureBase">
          <Messages>
           <Message TypeName="OverrideGetHashCodeOnOverridingEquals" Category="Microsoft.Usage" CheckId="CA2218" Created="2007-03-25 19:46:45Z">
            <Issue>
             <Item>MathNet.Symbolics.Packages.ObjectModel.ValueStructureBase</Item>
            </Issue>
           </Message>
          </Messages>
         </Type>
        </Types>
       </Namespace>
      </Namespaces>
     </Module>
    </Modules>
   </Target>
   <Target Name="$(ProjectDir)/src/app/MathNet.Yttrium/Packages.Standard/bin/Debug/MathNet.Yttrium.Packages.Standard.dll">
    <Modules>
     <Module Name="mathnet.yttrium.packages.standard.dll">
      <Messages>
       <Message TypeName="AssembliesShouldHaveValidStrongNames" Category="Microsoft.Design" CheckId="CA2210" Created="2007-03-25 19:46:45Z">
        <Issue Name="NoStrongName">
         <Item>MathNet.Yttrium.Packages.Standard</Item>
        </Issue>
       </Message>
      </Messages>
      <Namespaces>
       <Namespace Name="MathNet.Symbolics.Packages.Standard">
        <Types>
         <Type Name="AlgebraicExpressionCategory">
          <Members>
           <Member Name="Deserialize(System.Xml.XmlReader,System.Collections.Generic.IDictionary`2&lt;System.Guid,MathNet.Symbolics.Signal&gt;,System.Collections.Generic.IDictionary`2&lt;System.Guid,MathNet.Symbolics.Bus&gt;):MathNet.Symbolics.Packages.Standard.AlgebraicExpressionCategory">
            <Messages>
             <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>AlgebraicExpressionCategory.Deserialize(XmlReader, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Signal&gt;, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Bus&gt;):AlgebraicExpressionCategory</Item>
              </Issue>
             </Message>
             <Message Id="buses" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2007-03-25 19:46:45Z" FixCategory="NonBreaking">
              <Issue>
               <Item>buses</Item>
               <Item>AlgebraicExpressionCategory.Deserialize(XmlReader, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Signal&gt;, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Bus&gt;):AlgebraicExpressionCategory</Item>
              </Issue>
             </Message>
             <Message Id="reader" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2007-03-25 19:46:45Z" FixCategory="NonBreaking">
              <Issue>
               <Item>reader</Item>
               <Item>AlgebraicExpressionCategory.Deserialize(XmlReader, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Signal&gt;, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Bus&gt;):AlgebraicExpressionCategory</Item>
              </Issue>
             </Message>
             <Message Id="signals" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2007-03-25 19:46:45Z" FixCategory="NonBreaking">
              <Issue>
               <Item>signals</Item>
               <Item>AlgebraicExpressionCategory.Deserialize(XmlReader, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Signal&gt;, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Bus&gt;):AlgebraicExpressionCategory</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="AlgebraicStructureCategory">
          <Members>
           <Member Name=".ctor(MathNet.Symbolics.Packages.Standard.EAlgebraicStructure,MathNet.Symbolics.IEntity)">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>'additive'</Item>
               <Item>AlgebraicStructureCategory.AlgebraicStructureCategory(EAlgebraicStructure, IEntity)</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name=".ctor(MathNet.Symbolics.Packages.Standard.EAlgebraicStructure,MathNet.Symbolics.IEntity,MathNet.Symbolics.IEntity)">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>'additive'</Item>
               <Item>AlgebraicStructureCategory.AlgebraicStructureCategory(EAlgebraicStructure, IEntity, IEntity)</Item>
              </Issue>
              <Issue>
               <Item>'multiplicative'</Item>
               <Item>AlgebraicStructureCategory.AlgebraicStructureCategory(EAlgebraicStructure, IEntity, IEntity)</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Deserialize(System.Xml.XmlReader,System.Collections.Generic.IDictionary`2&lt;System.Guid,MathNet.Symbolics.Signal&gt;,System.Collections.Generic.IDictionary`2&lt;System.Guid,MathNet.Symbolics.Bus&gt;):MathNet.Symbolics.Packages.Standard.AlgebraicStructureCategory">
            <Messages>
             <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>AlgebraicStructureCategory.Deserialize(XmlReader, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Signal&gt;, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Bus&gt;):AlgebraicStructureCategory</Item>
              </Issue>
             </Message>
             <Message Id="buses" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2007-03-25 19:46:45Z" FixCategory="NonBreaking">
              <Issue>
               <Item>buses</Item>
               <Item>AlgebraicStructureCategory.Deserialize(XmlReader, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Signal&gt;, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Bus&gt;):AlgebraicStructureCategory</Item>
              </Issue>
             </Message>
             <Message Id="signals" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2007-03-25 19:46:45Z" FixCategory="NonBreaking">
              <Issue>
               <Item>signals</Item>
               <Item>AlgebraicStructureCategory.Deserialize(XmlReader, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Signal&gt;, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Bus&gt;):AlgebraicStructureCategory</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Serialize(System.Xml.XmlWriter,System.Collections.Generic.IDictionary`2&lt;System.Guid,System.Guid&gt;,System.Collections.Generic.IDictionary`2&lt;System.Guid,System.Guid&gt;):System.Void">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>'writer'</Item>
               <Item>AlgebraicStructureCategory.Serialize(XmlWriter, IDictionary`2&lt;System.Guid,System.Guid&gt;, IDictionary`2&lt;System.Guid,System.Guid&gt;):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="EAlgebraicStructure">
          <Messages>
           <Message TypeName="FlagsEnumsShouldHavePluralNames" Category="Microsoft.Naming" CheckId="CA1714" Created="2007-03-25 19:46:45Z">
            <Issue>
             <Item>EAlgebraicStructure</Item>
            </Issue>
           </Message>
          </Messages>
          <Members>
           <Member Name="AbelianGroup">
            <Messages>
             <Message Id="Abelian" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2007-03-25 19:46:45Z">
              <Issue Name="Member">
               <Item>Abelian</Item>
               <Item>EAlgebraicStructure.AbelianGroup</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="AbelianMonoid">
            <Messages>
             <Message Id="Abelian" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2007-03-25 19:46:45Z">
              <Issue Name="Member">
               <Item>Abelian</Item>
               <Item>EAlgebraicStructure.AbelianMonoid</Item>
              </Issue>
             </Message>
             <Message Id="Monoid" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2007-03-25 19:46:45Z">
              <Issue Name="Member">
               <Item>Monoid</Item>
               <Item>EAlgebraicStructure.AbelianMonoid</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="AbelianSemigroup">
            <Messages>
             <Message Id="Abelian" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2007-03-25 19:46:45Z">
              <Issue Name="Member">
               <Item>Abelian</Item>
               <Item>EAlgebraicStructure.AbelianSemigroup</Item>
              </Issue>
             </Message>
             <Message Id="Semigroup" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2007-03-25 19:46:45Z">
              <Issue Name="Member">
               <Item>Semigroup</Item>
               <Item>EAlgebraicStructure.AbelianSemigroup</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="CommutativeSemiring">
            <Messages>
             <Message Id="Semiring" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2007-03-25 19:46:45Z">
              <Issue Name="Member">
               <Item>Semiring</Item>
               <Item>EAlgebraicStructure.CommutativeSemiring</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Monoid">
            <Messages>
             <Message Id="Monoid" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2007-03-25 19:46:45Z">
              <Issue Name="Member">
               <Item>Monoid</Item>
               <Item>EAlgebraicStructure.Monoid</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Semigroup">
            <Messages>
             <Message Id="Semigroup" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2007-03-25 19:46:45Z">
              <Issue Name="Member">
               <Item>Semigroup</Item>
               <Item>EAlgebraicStructure.Semigroup</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Semiring">
            <Messages>
             <Message Id="Semiring" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2007-03-25 19:46:45Z">
              <Issue Name="Member">
               <Item>Semiring</Item>
               <Item>EAlgebraicStructure.Semiring</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="IAlgebraicAbelianGroup`1">
          <Messages>
           <Message Id="Abelian" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2007-03-25 19:46:45Z">
            <Issue Name="Type">
             <Item>Abelian</Item>
             <Item>MathNet.Symbolics.Packages.Standard.IAlgebraicAbelianGroup`1</Item>
            </Issue>
           </Message>
          </Messages>
         </Type>
         <Type Name="IAlgebraicMonoid">
          <Messages>
           <Message Id="Monoid" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2007-03-25 19:46:45Z">
            <Issue Name="Type">
             <Item>Monoid</Item>
             <Item>MathNet.Symbolics.Packages.Standard.IAlgebraicMonoid</Item>
            </Issue>
           </Message>
          </Messages>
         </Type>
         <Type Name="Std">
          <Members>
           <Member Name="IsAdditiveIdentity(MathNet.Symbolics.Signal):System.Boolean">
            <Messages>
             <Message TypeName="ConsiderPassingBaseTypesAsParameters" Category="Microsoft.Design" CheckId="CA1011" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>signal</Item>
               <Item>Std.IsAdditiveIdentity(Signal):Boolean</Item>
               <Item>MathNet.Symbolics.Signal</Item>
               <Item>MathNet.Symbolics.ValueNode</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="IsMultiplicativeIdentity(MathNet.Symbolics.Signal):System.Boolean">
            <Messages>
             <Message TypeName="ConsiderPassingBaseTypesAsParameters" Category="Microsoft.Design" CheckId="CA1011" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>signal</Item>
               <Item>Std.IsMultiplicativeIdentity(Signal):Boolean</Item>
               <Item>MathNet.Symbolics.Signal</Item>
               <Item>MathNet.Symbolics.ValueNode</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="IsUndefined(MathNet.Symbolics.Signal):System.Boolean">
            <Messages>
             <Message TypeName="ConsiderPassingBaseTypesAsParameters" Category="Microsoft.Design" CheckId="CA1011" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>signal</Item>
               <Item>Std.IsUndefined(Signal):Boolean</Item>
               <Item>MathNet.Symbolics.Signal</Item>
               <Item>MathNet.Symbolics.ValueNode</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="MonomialCoefficient(MathNet.Symbolics.Signal,MathNet.Symbolics.Signal,MathNet.Symbolics.IValueStructure&amp;):MathNet.Symbolics.Signal">
            <Messages>
             <Message Id="2#" TypeName="AvoidOutParameters" Category="Microsoft.Design" CheckId="CA1021" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>degree</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="PolynomialCoefficient(MathNet.Symbolics.Signal,MathNet.Symbolics.Signal,System.Int32):MathNet.Symbolics.Signal">
            <Messages>
             <Message TypeName="DoNotCastUnnecessarily" Category="Microsoft.Performance" CheckId="CA1800" Created="2007-03-25 19:46:45Z">
              <Issue Name="Local">
               <Item>vs</Item>
               <Item>MathNet.Symbolics.Packages.Standard.Structures.IntegerValue</Item>
               <Item>Std.PolynomialCoefficient(Signal, Signal, Int32):Signal</Item>
               <Item>isint</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="PolynomialCoefficients(MathNet.Symbolics.Signal,MathNet.Symbolics.Signal):MathNet.Symbolics.Signal[]">
            <Messages>
             <Message TypeName="DoNotCastUnnecessarily" Category="Microsoft.Performance" CheckId="CA1800" Created="2007-03-25 19:46:45Z">
              <Issue Name="Local">
               <Item>vs</Item>
               <Item>MathNet.Symbolics.Packages.Standard.Structures.IntegerValue</Item>
               <Item>Std.PolynomialCoefficients(Signal, Signal):Signal[]</Item>
               <Item>isint</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="SeparateFactors(MathNet.Symbolics.Signal,MathNet.Symbolics.Signal):MathNet.Symbolics.Signal[]">
            <Messages>
             <Message Id="1#x" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2007-03-25 19:46:45Z">
              <Issue Name="ParameterOneLetter">
               <Item>Std.SeparateFactors(Signal, Signal):Signal[]</Item>
               <Item>x</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="StdPackageManager">
          <Members>
           <Member Name="RegisterArchitectures(MathNet.Symbolics.Library.ILibrary):System.Void">
            <Messages>
             <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Created="2007-03-25 19:46:45Z" FixCategory="Breaking">
              <Issue>
               <Item>StdPackageManager.RegisterArchitectures(ILibrary):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="RegisterEntities(MathNet.Symbolics.Library.ILibrary):System.Void">
            <Messages>
             <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Created="2007-03-25 19:46:45Z" FixCategory="Breaking">
              <Issue>
               <Item>StdPackageManager.RegisterEntities(ILibrary):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="RegisterStructures(MathNet.Symbolics.Library.ILibrary):System.Void">
            <Messages>
             <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Created="2007-03-25 19:46:45Z" FixCategory="Breaking">
              <Issue>
               <Item>StdPackageManager.RegisterStructures(ILibrary):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="RegisterTheorems(MathNet.Symbolics.Library.ILibrary):System.Void">
            <Messages>
             <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Created="2007-03-25 19:46:45Z" FixCategory="Breaking">
              <Issue>
               <Item>StdPackageManager.RegisterTheorems(ILibrary):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
        </Types>
       </Namespace>
       <Namespace Name="MathNet.Symbolics.Packages.Standard.Arithmetics">
        <Types>
         <Type Name="AbsoluteArchitectures">
          <Members>
           <Member Name="RegisterTheorems(MathNet.Symbolics.Library.ILibrary):System.Void">
            <Messages>
             <Message Id="library" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2007-03-25 19:46:45Z" FixCategory="Breaking">
              <Issue>
               <Item>library</Item>
               <Item>AbsoluteArchitectures.RegisterTheorems(ILibrary):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="AdditionArchitectures">
          <Members>
           <Member Name="RegisterTheorems(MathNet.Symbolics.Library.ILibrary):System.Void">
            <Messages>
             <Message Id="library" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2007-03-25 19:46:45Z" FixCategory="Breaking">
              <Issue>
               <Item>library</Item>
               <Item>AdditionArchitectures.RegisterTheorems(ILibrary):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="DivisionArchitectures">
          <Members>
           <Member Name="RegisterTheorems(MathNet.Symbolics.Library.ILibrary):System.Void">
            <Messages>
             <Message Id="library" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2007-03-25 19:46:45Z" FixCategory="Breaking">
              <Issue>
               <Item>library</Item>
               <Item>DivisionArchitectures.RegisterTheorems(ILibrary):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="ExponentialArchitectures">
          <Members>
           <Member Name="RegisterTheorems(MathNet.Symbolics.Library.ILibrary):System.Void">
            <Messages>
             <Message Id="library" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2007-03-25 19:46:45Z" FixCategory="Breaking">
              <Issue>
               <Item>library</Item>
               <Item>ExponentialArchitectures.RegisterTheorems(ILibrary):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="InvertArchitectures">
          <Members>
           <Member Name="RegisterTheorems(MathNet.Symbolics.Library.ILibrary):System.Void">
            <Messages>
             <Message Id="library" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2007-03-25 19:46:45Z" FixCategory="Breaking">
              <Issue>
               <Item>library</Item>
               <Item>InvertArchitectures.RegisterTheorems(ILibrary):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="MultiplicationArchitectures">
          <Members>
           <Member Name="RegisterTheorems(MathNet.Symbolics.Library.ILibrary):System.Void">
            <Messages>
             <Message Id="library" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2007-03-25 19:46:45Z" FixCategory="Breaking">
              <Issue>
               <Item>library</Item>
               <Item>MultiplicationArchitectures.RegisterTheorems(ILibrary):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="NaturalLogarithmArchitectures">
          <Members>
           <Member Name="RegisterTheorems(MathNet.Symbolics.Library.ILibrary):System.Void">
            <Messages>
             <Message Id="library" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2007-03-25 19:46:45Z" FixCategory="Breaking">
              <Issue>
               <Item>library</Item>
               <Item>NaturalLogarithmArchitectures.RegisterTheorems(ILibrary):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="NegateArchitectures">
          <Members>
           <Member Name="RegisterTheorems(MathNet.Symbolics.Library.ILibrary):System.Void">
            <Messages>
             <Message Id="library" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2007-03-25 19:46:45Z" FixCategory="Breaking">
              <Issue>
               <Item>library</Item>
               <Item>NegateArchitectures.RegisterTheorems(ILibrary):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="PowerArchitectures">
          <Members>
           <Member Name="RegisterTheorems(MathNet.Symbolics.Library.ILibrary):System.Void">
            <Messages>
             <Message Id="library" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2007-03-25 19:46:45Z" FixCategory="Breaking">
              <Issue>
               <Item>library</Item>
               <Item>PowerArchitectures.RegisterTheorems(ILibrary):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="SquareArchitectures">
          <Members>
           <Member Name="RegisterTheorems(MathNet.Symbolics.Library.ILibrary):System.Void">
            <Messages>
             <Message Id="library" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2007-03-25 19:46:45Z" FixCategory="Breaking">
              <Issue>
               <Item>library</Item>
               <Item>SquareArchitectures.RegisterTheorems(ILibrary):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="SubtractionArchitectures">
          <Members>
           <Member Name="RegisterTheorems(MathNet.Symbolics.Library.ILibrary):System.Void">
            <Messages>
             <Message Id="library" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2007-03-25 19:46:45Z" FixCategory="Breaking">
              <Issue>
               <Item>library</Item>
               <Item>SubtractionArchitectures.RegisterTheorems(ILibrary):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
        </Types>
       </Namespace>
       <Namespace Name="MathNet.Symbolics.Packages.Standard.Flow">
        <Types>
         <Type Name="TransportArchitecture">
          <Members>
           <Member Name="RegisterTheorems(MathNet.Symbolics.Library.ILibrary):System.Void">
            <Messages>
             <Message Id="library" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2007-03-25 19:46:45Z" FixCategory="Breaking">
              <Issue>
               <Item>library</Item>
               <Item>TransportArchitecture.RegisterTheorems(ILibrary):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
        </Types>
       </Namespace>
       <Namespace Name="MathNet.Symbolics.Packages.Standard.Logic">
        <Types>
         <Type Name="NandArchitectures">
          <Messages>
           <Message Id="Nand" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2007-03-25 19:46:45Z">
            <Issue Name="Type">
             <Item>Nand</Item>
             <Item>MathNet.Symbolics.Packages.Standard.Logic.NandArchitectures</Item>
            </Issue>
           </Message>
          </Messages>
         </Type>
         <Type Name="XnorArchitectures">
          <Messages>
           <Message Id="Xnor" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2007-03-25 19:46:45Z">
            <Issue Name="Type">
             <Item>Xnor</Item>
             <Item>MathNet.Symbolics.Packages.Standard.Logic.XnorArchitectures</Item>
            </Issue>
           </Message>
          </Messages>
         </Type>
        </Types>
       </Namespace>
       <Namespace Name="MathNet.Symbolics.Packages.Standard.Properties">
        <Types>
         <Type Name="ConstantSignalProperty">
          <Members>
           <Member Name="Deserialize(System.Xml.XmlReader,System.Collections.Generic.IDictionary`2&lt;System.Guid,MathNet.Symbolics.Signal&gt;,System.Collections.Generic.IDictionary`2&lt;System.Guid,MathNet.Symbolics.Bus&gt;):MathNet.Symbolics.Packages.Standard.Properties.ConstantSignalProperty">
            <Messages>
             <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>ConstantSignalProperty.Deserialize(XmlReader, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Signal&gt;, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Bus&gt;):ConstantSignalProperty</Item>
              </Issue>
             </Message>
             <Message Id="buses" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2007-03-25 19:46:45Z" FixCategory="NonBreaking">
              <Issue>
               <Item>buses</Item>
               <Item>ConstantSignalProperty.Deserialize(XmlReader, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Signal&gt;, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Bus&gt;):ConstantSignalProperty</Item>
              </Issue>
             </Message>
             <Message Id="reader" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2007-03-25 19:46:45Z" FixCategory="NonBreaking">
              <Issue>
               <Item>reader</Item>
               <Item>ConstantSignalProperty.Deserialize(XmlReader, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Signal&gt;, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Bus&gt;):ConstantSignalProperty</Item>
              </Issue>
             </Message>
             <Message Id="signals" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2007-03-25 19:46:45Z" FixCategory="NonBreaking">
              <Issue>
               <Item>signals</Item>
               <Item>ConstantSignalProperty.Deserialize(XmlReader, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Signal&gt;, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Bus&gt;):ConstantSignalProperty</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="IntegerSetProperty">
          <Members>
           <Member Name="Deserialize(System.Xml.XmlReader,System.Collections.Generic.IDictionary`2&lt;System.Guid,MathNet.Symbolics.Signal&gt;,System.Collections.Generic.IDictionary`2&lt;System.Guid,MathNet.Symbolics.Bus&gt;):MathNet.Symbolics.Packages.Standard.Properties.IntegerSetProperty">
            <Messages>
             <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>IntegerSetProperty.Deserialize(XmlReader, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Signal&gt;, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Bus&gt;):IntegerSetProperty</Item>
              </Issue>
             </Message>
             <Message Id="buses" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2007-03-25 19:46:45Z" FixCategory="NonBreaking">
              <Issue>
               <Item>buses</Item>
               <Item>IntegerSetProperty.Deserialize(XmlReader, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Signal&gt;, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Bus&gt;):IntegerSetProperty</Item>
              </Issue>
             </Message>
             <Message Id="reader" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2007-03-25 19:46:45Z" FixCategory="NonBreaking">
              <Issue>
               <Item>reader</Item>
               <Item>IntegerSetProperty.Deserialize(XmlReader, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Signal&gt;, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Bus&gt;):IntegerSetProperty</Item>
              </Issue>
             </Message>
             <Message Id="signals" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2007-03-25 19:46:45Z" FixCategory="NonBreaking">
              <Issue>
               <Item>signals</Item>
               <Item>IntegerSetProperty.Deserialize(XmlReader, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Signal&gt;, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Bus&gt;):IntegerSetProperty</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="PositiveIntegerSetProperty">
          <Members>
           <Member Name="Deserialize(System.Xml.XmlReader,System.Collections.Generic.IDictionary`2&lt;System.Guid,MathNet.Symbolics.Signal&gt;,System.Collections.Generic.IDictionary`2&lt;System.Guid,MathNet.Symbolics.Bus&gt;):MathNet.Symbolics.Packages.Standard.Properties.PositiveIntegerSetProperty">
            <Messages>
             <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>PositiveIntegerSetProperty.Deserialize(XmlReader, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Signal&gt;, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Bus&gt;):PositiveIntegerSetProperty</Item>
              </Issue>
             </Message>
             <Message Id="buses" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2007-03-25 19:46:45Z" FixCategory="NonBreaking">
              <Issue>
               <Item>buses</Item>
               <Item>PositiveIntegerSetProperty.Deserialize(XmlReader, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Signal&gt;, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Bus&gt;):PositiveIntegerSetProperty</Item>
              </Issue>
             </Message>
             <Message Id="reader" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2007-03-25 19:46:45Z" FixCategory="NonBreaking">
              <Issue>
               <Item>reader</Item>
               <Item>PositiveIntegerSetProperty.Deserialize(XmlReader, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Signal&gt;, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Bus&gt;):PositiveIntegerSetProperty</Item>
              </Issue>
             </Message>
             <Message Id="signals" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2007-03-25 19:46:45Z" FixCategory="NonBreaking">
              <Issue>
               <Item>signals</Item>
               <Item>PositiveIntegerSetProperty.Deserialize(XmlReader, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Signal&gt;, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Bus&gt;):PositiveIntegerSetProperty</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="RationalSetProperty">
          <Members>
           <Member Name="Deserialize(System.Xml.XmlReader,System.Collections.Generic.IDictionary`2&lt;System.Guid,MathNet.Symbolics.Signal&gt;,System.Collections.Generic.IDictionary`2&lt;System.Guid,MathNet.Symbolics.Bus&gt;):MathNet.Symbolics.Packages.Standard.Properties.RationalSetProperty">
            <Messages>
             <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>RationalSetProperty.Deserialize(XmlReader, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Signal&gt;, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Bus&gt;):RationalSetProperty</Item>
              </Issue>
             </Message>
             <Message Id="buses" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2007-03-25 19:46:45Z" FixCategory="NonBreaking">
              <Issue>
               <Item>buses</Item>
               <Item>RationalSetProperty.Deserialize(XmlReader, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Signal&gt;, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Bus&gt;):RationalSetProperty</Item>
              </Issue>
             </Message>
             <Message Id="reader" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2007-03-25 19:46:45Z" FixCategory="NonBreaking">
              <Issue>
               <Item>reader</Item>
               <Item>RationalSetProperty.Deserialize(XmlReader, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Signal&gt;, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Bus&gt;):RationalSetProperty</Item>
              </Issue>
             </Message>
             <Message Id="signals" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2007-03-25 19:46:45Z" FixCategory="NonBreaking">
              <Issue>
               <Item>signals</Item>
               <Item>RationalSetProperty.Deserialize(XmlReader, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Signal&gt;, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Bus&gt;):RationalSetProperty</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="RealSetProperty">
          <Members>
           <Member Name="Deserialize(System.Xml.XmlReader,System.Collections.Generic.IDictionary`2&lt;System.Guid,MathNet.Symbolics.Signal&gt;,System.Collections.Generic.IDictionary`2&lt;System.Guid,MathNet.Symbolics.Bus&gt;):MathNet.Symbolics.Packages.Standard.Properties.RealSetProperty">
            <Messages>
             <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>RealSetProperty.Deserialize(XmlReader, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Signal&gt;, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Bus&gt;):RealSetProperty</Item>
              </Issue>
             </Message>
             <Message Id="buses" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2007-03-25 19:46:45Z" FixCategory="NonBreaking">
              <Issue>
               <Item>buses</Item>
               <Item>RealSetProperty.Deserialize(XmlReader, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Signal&gt;, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Bus&gt;):RealSetProperty</Item>
              </Issue>
             </Message>
             <Message Id="reader" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2007-03-25 19:46:45Z" FixCategory="NonBreaking">
              <Issue>
               <Item>reader</Item>
               <Item>RealSetProperty.Deserialize(XmlReader, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Signal&gt;, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Bus&gt;):RealSetProperty</Item>
              </Issue>
             </Message>
             <Message Id="signals" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2007-03-25 19:46:45Z" FixCategory="NonBreaking">
              <Issue>
               <Item>signals</Item>
               <Item>RealSetProperty.Deserialize(XmlReader, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Signal&gt;, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Bus&gt;):RealSetProperty</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
        </Types>
       </Namespace>
       <Namespace Name="MathNet.Symbolics.Packages.Standard.Structures">
        <Types>
         <Type Name="ComplexInfinitySymbol">
          <Members>
           <Member Name="CanConvertLosslessFrom(MathNet.Symbolics.IValueStructure):System.Boolean">
            <Messages>
             <Message TypeName="ConsiderPassingBaseTypesAsParameters" Category="Microsoft.Design" CheckId="CA1011" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>value</Item>
               <Item>ComplexInfinitySymbol.CanConvertLosslessFrom(IValueStructure):Boolean</Item>
               <Item>MathNet.Symbolics.IValueStructure</Item>
               <Item>MathNet.Symbolics.ICustomData</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="ConvertFrom(MathNet.Symbolics.IValueStructure):MathNet.Symbolics.Packages.Standard.Structures.ComplexInfinitySymbol">
            <Messages>
             <Message Id="value" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2007-03-25 19:46:45Z" FixCategory="Breaking">
              <Issue>
               <Item>value</Item>
               <Item>ComplexInfinitySymbol.ConvertFrom(IValueStructure):ComplexInfinitySymbol</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Deserialize(System.Xml.XmlReader,System.Collections.Generic.IDictionary`2&lt;System.Guid,MathNet.Symbolics.Signal&gt;,System.Collections.Generic.IDictionary`2&lt;System.Guid,MathNet.Symbolics.Bus&gt;):MathNet.Symbolics.Packages.Standard.Structures.ComplexInfinitySymbol">
            <Messages>
             <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>ComplexInfinitySymbol.Deserialize(XmlReader, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Signal&gt;, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Bus&gt;):ComplexInfinitySymbol</Item>
              </Issue>
             </Message>
             <Message Id="buses" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2007-03-25 19:46:45Z" FixCategory="NonBreaking">
              <Issue>
               <Item>buses</Item>
               <Item>ComplexInfinitySymbol.Deserialize(XmlReader, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Signal&gt;, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Bus&gt;):ComplexInfinitySymbol</Item>
              </Issue>
             </Message>
             <Message Id="reader" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2007-03-25 19:46:45Z" FixCategory="NonBreaking">
              <Issue>
               <Item>reader</Item>
               <Item>ComplexInfinitySymbol.Deserialize(XmlReader, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Signal&gt;, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Bus&gt;):ComplexInfinitySymbol</Item>
              </Issue>
             </Message>
             <Message Id="signals" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2007-03-25 19:46:45Z" FixCategory="NonBreaking">
              <Issue>
               <Item>signals</Item>
               <Item>ComplexInfinitySymbol.Deserialize(XmlReader, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Signal&gt;, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Bus&gt;):ComplexInfinitySymbol</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="op_Explicit(MathNet.Symbolics.Packages.Standard.Structures.NegativeInfinitySymbol):MathNet.Symbolics.Packages.Standard.Structures.ComplexInfinitySymbol">
            <Messages>
             <Message TypeName="OperatorOverloadsHaveNamedAlternates" Category="Microsoft.Usage" CheckId="CA2225" Created="2007-03-25 19:46:45Z">
              <Issue Name="Multiple">
               <Item>ToXXX</Item>
               <Item>FromXXX</Item>
               <Item>ComplexInfinitySymbol.op_Explicit(NegativeInfinitySymbol):ComplexInfinitySymbol</Item>
              </Issue>
             </Message>
             <Message Id="value" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2007-03-25 19:46:45Z" FixCategory="Breaking">
              <Issue>
               <Item>value</Item>
               <Item>ComplexInfinitySymbol.op_Explicit(NegativeInfinitySymbol):ComplexInfinitySymbol</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="op_Explicit(MathNet.Symbolics.Packages.Standard.Structures.PositiveInfinitySymbol):MathNet.Symbolics.Packages.Standard.Structures.ComplexInfinitySymbol">
            <Messages>
             <Message TypeName="OperatorOverloadsHaveNamedAlternates" Category="Microsoft.Usage" CheckId="CA2225" Created="2007-03-25 19:46:45Z">
              <Issue Name="Multiple">
               <Item>ToXXX</Item>
               <Item>FromXXX</Item>
               <Item>ComplexInfinitySymbol.op_Explicit(PositiveInfinitySymbol):ComplexInfinitySymbol</Item>
              </Issue>
             </Message>
             <Message Id="value" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2007-03-25 19:46:45Z" FixCategory="Breaking">
              <Issue>
               <Item>value</Item>
               <Item>ComplexInfinitySymbol.op_Explicit(PositiveInfinitySymbol):ComplexInfinitySymbol</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="ComplexValue">
          <Members>
           <Member Name=".ctor(MathNet.Symbolics.Packages.Standard.Structures.IntegerValue)">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>'realValue'</Item>
               <Item>ComplexValue.ComplexValue(IntegerValue)</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name=".ctor(MathNet.Symbolics.Packages.Standard.Structures.RationalValue)">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>'realValue'</Item>
               <Item>ComplexValue.ComplexValue(RationalValue)</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name=".ctor(MathNet.Symbolics.Packages.Standard.Structures.RealValue)">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>'realValue'</Item>
               <Item>ComplexValue.ComplexValue(RealValue)</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name=".ctor(MathNet.Symbolics.Packages.Standard.Structures.RealValue,MathNet.Symbolics.Packages.Standard.Structures.RealValue)">
            <Messages>
             <Message Id="1#imag" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2007-03-25 19:46:45Z">
              <Issue Name="Parameter">
               <Item>ComplexValue.ComplexValue(RealValue, RealValue)</Item>
               <Item>imag</Item>
               <Item>imagValue</Item>
              </Issue>
             </Message>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>'imagValue'</Item>
               <Item>ComplexValue.ComplexValue(RealValue, RealValue)</Item>
              </Issue>
              <Issue>
               <Item>'realValue'</Item>
               <Item>ComplexValue.ComplexValue(RealValue, RealValue)</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name=".ctor(System.Double,System.Double)">
            <Messages>
             <Message Id="1#imag" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2007-03-25 19:46:45Z">
              <Issue Name="Parameter">
               <Item>ComplexValue.ComplexValue(Double, Double)</Item>
               <Item>imag</Item>
               <Item>imagValue</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Absolute(MathNet.Symbolics.Packages.Standard.Structures.ComplexValue):MathNet.Symbolics.Packages.Standard.Structures.RealValue">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>'complex'</Item>
               <Item>ComplexValue.Absolute(ComplexValue):RealValue</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Add(MathNet.Symbolics.Packages.Standard.Structures.ComplexValue):MathNet.Symbolics.Packages.Standard.Structures.ComplexValue">
            <Messages>
             <Message Id="0#" TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>summand</Item>
               <Item>ComplexValue.Add(ComplexValue):ComplexValue</Item>
               <Item>other</Item>
               <Item>IAlgebraicAdditiveClose`1&lt;MathNet.Symbolics.Packages.Standard.Structures.ComplexValue&gt;.Add(ComplexValue):ComplexValue</Item>
              </Issue>
             </Message>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>'summand'</Item>
               <Item>ComplexValue.Add(ComplexValue):ComplexValue</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Add(MathNet.Symbolics.Packages.Standard.Structures.ComplexValue,MathNet.Symbolics.Packages.Standard.Structures.ComplexValue):MathNet.Symbolics.Packages.Standard.Structures.ComplexValue">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>'summand1'</Item>
               <Item>ComplexValue.Add(ComplexValue, ComplexValue):ComplexValue</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="CanConvertLosslessFrom(MathNet.Symbolics.IValueStructure):System.Boolean">
            <Messages>
             <Message TypeName="ConsiderPassingBaseTypesAsParameters" Category="Microsoft.Design" CheckId="CA1011" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>value</Item>
               <Item>ComplexValue.CanConvertLosslessFrom(IValueStructure):Boolean</Item>
               <Item>MathNet.Symbolics.IValueStructure</Item>
               <Item>MathNet.Symbolics.ICustomData</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="CompareTo(MathNet.Symbolics.Packages.Standard.Structures.ComplexValue):System.Int32">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>'other'</Item>
               <Item>ComplexValue.CompareTo(ComplexValue):Int32</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Conjugate(MathNet.Symbolics.Packages.Standard.Structures.ComplexValue):MathNet.Symbolics.Packages.Standard.Structures.ComplexValue">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>'complex'</Item>
               <Item>ComplexValue.Conjugate(ComplexValue):ComplexValue</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="ConvertFrom(MathNet.Symbolics.IValueStructure):MathNet.Symbolics.Packages.Standard.Structures.ComplexValue">
            <Messages>
             <Message TypeName="ConsiderPassingBaseTypesAsParameters" Category="Microsoft.Design" CheckId="CA1011" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>value</Item>
               <Item>ComplexValue.ConvertFrom(IValueStructure):ComplexValue</Item>
               <Item>MathNet.Symbolics.IValueStructure</Item>
               <Item>MathNet.Symbolics.ICustomData</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Deserialize(System.Xml.XmlReader,System.Collections.Generic.IDictionary`2&lt;System.Guid,MathNet.Symbolics.Signal&gt;,System.Collections.Generic.IDictionary`2&lt;System.Guid,MathNet.Symbolics.Bus&gt;):MathNet.Symbolics.Packages.Standard.Structures.ComplexValue">
            <Messages>
             <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>ComplexValue.Deserialize(XmlReader, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Signal&gt;, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Bus&gt;):ComplexValue</Item>
              </Issue>
             </Message>
             <Message Id="buses" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2007-03-25 19:46:45Z" FixCategory="NonBreaking">
              <Issue>
               <Item>buses</Item>
               <Item>ComplexValue.Deserialize(XmlReader, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Signal&gt;, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Bus&gt;):ComplexValue</Item>
              </Issue>
             </Message>
             <Message Id="signals" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2007-03-25 19:46:45Z" FixCategory="NonBreaking">
              <Issue>
               <Item>signals</Item>
               <Item>ComplexValue.Deserialize(XmlReader, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Signal&gt;, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Bus&gt;):ComplexValue</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Divide(MathNet.Symbolics.Packages.Standard.Structures.ComplexValue):MathNet.Symbolics.Packages.Standard.Structures.ComplexValue">
            <Messages>
             <Message Id="0#" TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>divisor</Item>
               <Item>ComplexValue.Divide(ComplexValue):ComplexValue</Item>
               <Item>other</Item>
               <Item>IAlgebraicSkewField`1&lt;MathNet.Symbolics.Packages.Standard.Structures.ComplexValue&gt;.Divide(ComplexValue):ComplexValue</Item>
              </Issue>
             </Message>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>'divisor'</Item>
               <Item>ComplexValue.Divide(ComplexValue):ComplexValue</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Divide(MathNet.Symbolics.Packages.Standard.Structures.ComplexValue,MathNet.Symbolics.Packages.Standard.Structures.ComplexValue):MathNet.Symbolics.Packages.Standard.Structures.ComplexValue">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>'dividend'</Item>
               <Item>ComplexValue.Divide(ComplexValue, ComplexValue):ComplexValue</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Exponential(MathNet.Symbolics.Packages.Standard.Structures.ComplexValue):MathNet.Symbolics.Packages.Standard.Structures.ComplexValue">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>'exponent'</Item>
               <Item>ComplexValue.Exponential(ComplexValue):ComplexValue</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="I">
            <Messages>
             <Message Id="I" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2007-03-25 19:46:45Z">
              <Issue Name="MemberOneLetter">
               <Item>I</Item>
               <Item>ComplexValue.I:ComplexValue</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Invert(MathNet.Symbolics.Packages.Standard.Structures.ComplexValue):MathNet.Symbolics.Packages.Standard.Structures.ComplexValue">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>'divisor'</Item>
               <Item>ComplexValue.Invert(ComplexValue):ComplexValue</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Multiply(MathNet.Symbolics.Packages.Standard.Structures.ComplexValue):MathNet.Symbolics.Packages.Standard.Structures.ComplexValue">
            <Messages>
             <Message Id="0#" TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>multiplier</Item>
               <Item>ComplexValue.Multiply(ComplexValue):ComplexValue</Item>
               <Item>other</Item>
               <Item>IAlgebraicMultiplicativeClose`1&lt;MathNet.Symbolics.Packages.Standard.Structures.ComplexValue&gt;.Multiply(ComplexValue):ComplexValue</Item>
              </Issue>
             </Message>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>'multiplier'</Item>
               <Item>ComplexValue.Multiply(ComplexValue):ComplexValue</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Multiply(MathNet.Symbolics.Packages.Standard.Structures.ComplexValue,MathNet.Symbolics.Packages.Standard.Structures.ComplexValue):MathNet.Symbolics.Packages.Standard.Structures.ComplexValue">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>'multiplicand'</Item>
               <Item>ComplexValue.Multiply(ComplexValue, ComplexValue):ComplexValue</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="NaturalLogarithm(MathNet.Symbolics.Packages.Standard.Structures.ComplexValue):MathNet.Symbolics.Packages.Standard.Structures.ComplexValue">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>'antilogarithm'</Item>
               <Item>ComplexValue.NaturalLogarithm(ComplexValue):ComplexValue</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Negate(MathNet.Symbolics.Packages.Standard.Structures.ComplexValue):MathNet.Symbolics.Packages.Standard.Structures.ComplexValue">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>'subtrahend'</Item>
               <Item>ComplexValue.Negate(ComplexValue):ComplexValue</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Power(MathNet.Symbolics.Packages.Standard.Structures.ComplexValue):MathNet.Symbolics.Packages.Standard.Structures.ComplexValue">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>'exponent'</Item>
               <Item>ComplexValue.Power(ComplexValue):ComplexValue</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Power(MathNet.Symbolics.Packages.Standard.Structures.ComplexValue,MathNet.Symbolics.Packages.Standard.Structures.ComplexValue):MathNet.Symbolics.Packages.Standard.Structures.ComplexValue">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>'radix'</Item>
               <Item>ComplexValue.Power(ComplexValue, ComplexValue):ComplexValue</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Root(MathNet.Symbolics.Packages.Standard.Structures.ComplexValue):MathNet.Symbolics.Packages.Standard.Structures.ComplexValue">
            <Messages>
             <Message Id="0#rootexponent" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2007-03-25 19:46:45Z">
              <Issue Name="Parameter">
               <Item>ComplexValue.Root(ComplexValue):ComplexValue</Item>
               <Item>rootexponent</Item>
               <Item>rootexponent</Item>
              </Issue>
             </Message>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>'rootexponent'</Item>
               <Item>ComplexValue.Root(ComplexValue):ComplexValue</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Root(MathNet.Symbolics.Packages.Standard.Structures.ComplexValue,MathNet.Symbolics.Packages.Standard.Structures.ComplexValue):MathNet.Symbolics.Packages.Standard.Structures.ComplexValue">
            <Messages>
             <Message Id="1#rootexponent" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2007-03-25 19:46:45Z">
              <Issue Name="Parameter">
               <Item>ComplexValue.Root(ComplexValue, ComplexValue):ComplexValue</Item>
               <Item>rootexponent</Item>
               <Item>rootexponent</Item>
              </Issue>
             </Message>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>'radicand'</Item>
               <Item>ComplexValue.Root(ComplexValue, ComplexValue):ComplexValue</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Serialize(System.Xml.XmlWriter,System.Collections.Generic.IDictionary`2&lt;System.Guid,System.Guid&gt;,System.Collections.Generic.IDictionary`2&lt;System.Guid,System.Guid&gt;):System.Void">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>'writer'</Item>
               <Item>ComplexValue.Serialize(XmlWriter, IDictionary`2&lt;System.Guid,System.Guid&gt;, IDictionary`2&lt;System.Guid,System.Guid&gt;):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Square(MathNet.Symbolics.Packages.Standard.Structures.ComplexValue):MathNet.Symbolics.Packages.Standard.Structures.ComplexValue">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>'radix'</Item>
               <Item>ComplexValue.Square(ComplexValue):ComplexValue</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="SquareRoot(MathNet.Symbolics.Packages.Standard.Structures.ComplexValue):MathNet.Symbolics.Packages.Standard.Structures.ComplexValue">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>'radicand'</Item>
               <Item>ComplexValue.SquareRoot(ComplexValue):ComplexValue</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Subtract(MathNet.Symbolics.Packages.Standard.Structures.ComplexValue):MathNet.Symbolics.Packages.Standard.Structures.ComplexValue">
            <Messages>
             <Message Id="0#" TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>subtrahend</Item>
               <Item>ComplexValue.Subtract(ComplexValue):ComplexValue</Item>
               <Item>other</Item>
               <Item>IAlgebraicGroup`1&lt;MathNet.Symbolics.Packages.Standard.Structures.ComplexValue&gt;.Subtract(ComplexValue):ComplexValue</Item>
              </Issue>
             </Message>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>'subtrahend'</Item>
               <Item>ComplexValue.Subtract(ComplexValue):ComplexValue</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Subtract(MathNet.Symbolics.Packages.Standard.Structures.ComplexValue,MathNet.Symbolics.Packages.Standard.Structures.ComplexValue):MathNet.Symbolics.Packages.Standard.Structures.ComplexValue">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>'minuend'</Item>
               <Item>ComplexValue.Subtract(ComplexValue, ComplexValue):ComplexValue</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="ComplexValueCategory">
          <Members>
           <Member Name="Deserialize(System.Xml.XmlReader,System.Collections.Generic.IDictionary`2&lt;System.Guid,MathNet.Symbolics.Signal&gt;,System.Collections.Generic.IDictionary`2&lt;System.Guid,MathNet.Symbolics.Bus&gt;):MathNet.Symbolics.Packages.Standard.Structures.ComplexValueCategory">
            <Messages>
             <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>ComplexValueCategory.Deserialize(XmlReader, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Signal&gt;, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Bus&gt;):ComplexValueCategory</Item>
              </Issue>
             </Message>
             <Message Id="buses" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2007-03-25 19:46:45Z" FixCategory="NonBreaking">
              <Issue>
               <Item>buses</Item>
               <Item>ComplexValueCategory.Deserialize(XmlReader, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Signal&gt;, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Bus&gt;):ComplexValueCategory</Item>
              </Issue>
             </Message>
             <Message Id="reader" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2007-03-25 19:46:45Z" FixCategory="NonBreaking">
              <Issue>
               <Item>reader</Item>
               <Item>ComplexValueCategory.Deserialize(XmlReader, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Signal&gt;, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Bus&gt;):ComplexValueCategory</Item>
              </Issue>
             </Message>
             <Message Id="signals" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2007-03-25 19:46:45Z" FixCategory="NonBreaking">
              <Issue>
               <Item>signals</Item>
               <Item>ComplexValueCategory.Deserialize(XmlReader, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Signal&gt;, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Bus&gt;):ComplexValueCategory</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="IntegerValue">
          <Members>
           <Member Name="Add(MathNet.Symbolics.Packages.Standard.Structures.IntegerValue):MathNet.Symbolics.Packages.Standard.Structures.IntegerValue">
            <Messages>
             <Message Id="0#" TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>op</Item>
               <Item>IntegerValue.Add(IntegerValue):IntegerValue</Item>
               <Item>other</Item>
               <Item>IAlgebraicAdditiveClose`1&lt;MathNet.Symbolics.Packages.Standard.Structures.IntegerValue&gt;.Add(IntegerValue):IntegerValue</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="CanConvertLosslessFrom(MathNet.Symbolics.IValueStructure):System.Boolean">
            <Messages>
             <Message TypeName="ConsiderPassingBaseTypesAsParameters" Category="Microsoft.Design" CheckId="CA1011" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>value</Item>
               <Item>IntegerValue.CanConvertLosslessFrom(IValueStructure):Boolean</Item>
               <Item>MathNet.Symbolics.IValueStructure</Item>
               <Item>MathNet.Symbolics.ICustomData</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="CompareTo(MathNet.Symbolics.Packages.Standard.Structures.IntegerValue):System.Int32">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>'other'</Item>
               <Item>IntegerValue.CompareTo(IntegerValue):Int32</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="ConvertFrom(MathNet.Symbolics.IValueStructure):MathNet.Symbolics.Packages.Standard.Structures.IntegerValue">
            <Messages>
             <Message TypeName="ConsiderPassingBaseTypesAsParameters" Category="Microsoft.Design" CheckId="CA1011" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>value</Item>
               <Item>IntegerValue.ConvertFrom(IValueStructure):IntegerValue</Item>
               <Item>MathNet.Symbolics.IValueStructure</Item>
               <Item>MathNet.Symbolics.ICustomData</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Deserialize(System.Xml.XmlReader,System.Collections.Generic.IDictionary`2&lt;System.Guid,MathNet.Symbolics.Signal&gt;,System.Collections.Generic.IDictionary`2&lt;System.Guid,MathNet.Symbolics.Bus&gt;):MathNet.Symbolics.Packages.Standard.Structures.IntegerValue">
            <Messages>
             <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>IntegerValue.Deserialize(XmlReader, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Signal&gt;, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Bus&gt;):IntegerValue</Item>
              </Issue>
             </Message>
             <Message Id="buses" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2007-03-25 19:46:45Z" FixCategory="NonBreaking">
              <Issue>
               <Item>buses</Item>
               <Item>IntegerValue.Deserialize(XmlReader, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Signal&gt;, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Bus&gt;):IntegerValue</Item>
              </Issue>
             </Message>
             <Message Id="signals" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2007-03-25 19:46:45Z" FixCategory="NonBreaking">
              <Issue>
               <Item>signals</Item>
               <Item>IntegerValue.Deserialize(XmlReader, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Signal&gt;, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Bus&gt;):IntegerValue</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Multiply(MathNet.Symbolics.Packages.Standard.Structures.IntegerValue):MathNet.Symbolics.Packages.Standard.Structures.IntegerValue">
            <Messages>
             <Message Id="0#" TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>op</Item>
               <Item>IntegerValue.Multiply(IntegerValue):IntegerValue</Item>
               <Item>other</Item>
               <Item>IAlgebraicMultiplicativeClose`1&lt;MathNet.Symbolics.Packages.Standard.Structures.IntegerValue&gt;.Multiply(IntegerValue):IntegerValue</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="op_GreaterThan(MathNet.Symbolics.Packages.Standard.Structures.IntegerValue,MathNet.Symbolics.Packages.Standard.Structures.IntegerValue):System.Boolean">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>'left'</Item>
               <Item>IntegerValue.op_GreaterThan(IntegerValue, IntegerValue):Boolean</Item>
              </Issue>
              <Issue>
               <Item>'right'</Item>
               <Item>IntegerValue.op_GreaterThan(IntegerValue, IntegerValue):Boolean</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="op_LessThan(MathNet.Symbolics.Packages.Standard.Structures.IntegerValue,MathNet.Symbolics.Packages.Standard.Structures.IntegerValue):System.Boolean">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>'left'</Item>
               <Item>IntegerValue.op_LessThan(IntegerValue, IntegerValue):Boolean</Item>
              </Issue>
              <Issue>
               <Item>'right'</Item>
               <Item>IntegerValue.op_LessThan(IntegerValue, IntegerValue):Boolean</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Serialize(System.Xml.XmlWriter,System.Collections.Generic.IDictionary`2&lt;System.Guid,System.Guid&gt;,System.Collections.Generic.IDictionary`2&lt;System.Guid,System.Guid&gt;):System.Void">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>'writer'</Item>
               <Item>IntegerValue.Serialize(XmlWriter, IDictionary`2&lt;System.Guid,System.Guid&gt;, IDictionary`2&lt;System.Guid,System.Guid&gt;):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="IntegerValue+AddProcess">
          <Messages>
           <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Created="2007-03-25 19:46:45Z">
            <Issue>
             <Item>MathNet.Symbolics.Packages.Standard.Structures.IntegerValue+AddProcess</Item>
            </Issue>
           </Message>
          </Messages>
         </Type>
         <Type Name="IntegerValue+DivideProcess">
          <Messages>
           <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Created="2007-03-25 19:46:45Z">
            <Issue>
             <Item>MathNet.Symbolics.Packages.Standard.Structures.IntegerValue+DivideProcess</Item>
            </Issue>
           </Message>
          </Messages>
         </Type>
         <Type Name="IntegerValue+MultiplyProcess">
          <Messages>
           <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Created="2007-03-25 19:46:45Z">
            <Issue>
             <Item>MathNet.Symbolics.Packages.Standard.Structures.IntegerValue+MultiplyProcess</Item>
            </Issue>
           </Message>
          </Messages>
         </Type>
         <Type Name="IntegerValue+SubtractProcess">
          <Messages>
           <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Created="2007-03-25 19:46:45Z">
            <Issue>
             <Item>MathNet.Symbolics.Packages.Standard.Structures.IntegerValue+SubtractProcess</Item>
            </Issue>
           </Message>
          </Messages>
         </Type>
         <Type Name="IntegerValueCategory">
          <Members>
           <Member Name="Deserialize(System.Xml.XmlReader,System.Collections.Generic.IDictionary`2&lt;System.Guid,MathNet.Symbolics.Signal&gt;,System.Collections.Generic.IDictionary`2&lt;System.Guid,MathNet.Symbolics.Bus&gt;):MathNet.Symbolics.Packages.Standard.Structures.IntegerValueCategory">
            <Messages>
             <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>IntegerValueCategory.Deserialize(XmlReader, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Signal&gt;, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Bus&gt;):IntegerValueCategory</Item>
              </Issue>
             </Message>
             <Message Id="buses" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2007-03-25 19:46:45Z" FixCategory="NonBreaking">
              <Issue>
               <Item>buses</Item>
               <Item>IntegerValueCategory.Deserialize(XmlReader, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Signal&gt;, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Bus&gt;):IntegerValueCategory</Item>
              </Issue>
             </Message>
             <Message Id="reader" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2007-03-25 19:46:45Z" FixCategory="NonBreaking">
              <Issue>
               <Item>reader</Item>
               <Item>IntegerValueCategory.Deserialize(XmlReader, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Signal&gt;, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Bus&gt;):IntegerValueCategory</Item>
              </Issue>
             </Message>
             <Message Id="signals" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2007-03-25 19:46:45Z" FixCategory="NonBreaking">
              <Issue>
               <Item>signals</Item>
               <Item>IntegerValueCategory.Deserialize(XmlReader, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Signal&gt;, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Bus&gt;):IntegerValueCategory</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="LiteralValue">
          <Members>
           <Member Name="CanConvertLosslessFrom(MathNet.Symbolics.IValueStructure):System.Boolean">
            <Messages>
             <Message TypeName="ConsiderPassingBaseTypesAsParameters" Category="Microsoft.Design" CheckId="CA1011" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>value</Item>
               <Item>LiteralValue.CanConvertLosslessFrom(IValueStructure):Boolean</Item>
               <Item>MathNet.Symbolics.IValueStructure</Item>
               <Item>MathNet.Symbolics.ICustomData</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="CompareTo(MathNet.Symbolics.Packages.Standard.Structures.LiteralValue):System.Int32">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>'other'</Item>
               <Item>LiteralValue.CompareTo(LiteralValue):Int32</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="ConvertFrom(MathNet.Symbolics.IValueStructure):MathNet.Symbolics.Packages.Standard.Structures.LiteralValue">
            <Messages>
             <Message TypeName="ConsiderPassingBaseTypesAsParameters" Category="Microsoft.Design" CheckId="CA1011" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>value</Item>
               <Item>LiteralValue.ConvertFrom(IValueStructure):LiteralValue</Item>
               <Item>MathNet.Symbolics.IValueStructure</Item>
               <Item>MathNet.Symbolics.ICustomData</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="ConvertFrom(MathNet.Symbolics.Packages.Standard.Structures.IntegerValue):MathNet.Symbolics.Packages.Standard.Structures.LiteralValue">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>'value'</Item>
               <Item>LiteralValue.ConvertFrom(IntegerValue):LiteralValue</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Deserialize(System.Xml.XmlReader,System.Collections.Generic.IDictionary`2&lt;System.Guid,MathNet.Symbolics.Signal&gt;,System.Collections.Generic.IDictionary`2&lt;System.Guid,MathNet.Symbolics.Bus&gt;):MathNet.Symbolics.Packages.Standard.Structures.LiteralValue">
            <Messages>
             <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>LiteralValue.Deserialize(XmlReader, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Signal&gt;, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Bus&gt;):LiteralValue</Item>
              </Issue>
             </Message>
             <Message Id="buses" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2007-03-25 19:46:45Z" FixCategory="NonBreaking">
              <Issue>
               <Item>buses</Item>
               <Item>LiteralValue.Deserialize(XmlReader, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Signal&gt;, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Bus&gt;):LiteralValue</Item>
              </Issue>
             </Message>
             <Message Id="signals" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2007-03-25 19:46:45Z" FixCategory="NonBreaking">
              <Issue>
               <Item>signals</Item>
               <Item>LiteralValue.Deserialize(XmlReader, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Signal&gt;, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Bus&gt;):LiteralValue</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="op_Explicit(MathNet.Symbolics.Packages.Standard.Structures.IntegerValue):MathNet.Symbolics.Packages.Standard.Structures.LiteralValue">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>'value'</Item>
               <Item>LiteralValue.op_Explicit(IntegerValue):LiteralValue</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Serialize(System.Xml.XmlWriter,System.Collections.Generic.IDictionary`2&lt;System.Guid,System.Guid&gt;,System.Collections.Generic.IDictionary`2&lt;System.Guid,System.Guid&gt;):System.Void">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>'writer'</Item>
               <Item>LiteralValue.Serialize(XmlWriter, IDictionary`2&lt;System.Guid,System.Guid&gt;, IDictionary`2&lt;System.Guid,System.Guid&gt;):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="LogicValue">
          <Members>
           <Member Name="Add(MathNet.Symbolics.Packages.Standard.Structures.LogicValue):MathNet.Symbolics.Packages.Standard.Structures.LogicValue">
            <Messages>
             <Message Id="0#" TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>op</Item>
               <Item>LogicValue.Add(LogicValue):LogicValue</Item>
               <Item>other</Item>
               <Item>IAlgebraicAdditiveClose`1&lt;MathNet.Symbolics.Packages.Standard.Structures.LogicValue&gt;.Add(LogicValue):LogicValue</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="CanConvertLosslessFrom(MathNet.Symbolics.IValueStructure):System.Boolean">
            <Messages>
             <Message TypeName="ConsiderPassingBaseTypesAsParameters" Category="Microsoft.Design" CheckId="CA1011" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>value</Item>
               <Item>LogicValue.CanConvertLosslessFrom(IValueStructure):Boolean</Item>
               <Item>MathNet.Symbolics.IValueStructure</Item>
               <Item>MathNet.Symbolics.ICustomData</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="CompareTo(MathNet.Symbolics.Packages.Standard.Structures.LogicValue):System.Int32">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>'other'</Item>
               <Item>LogicValue.CompareTo(LogicValue):Int32</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="ConvertFrom(MathNet.Symbolics.IValueStructure):MathNet.Symbolics.Packages.Standard.Structures.LogicValue">
            <Messages>
             <Message TypeName="ConsiderPassingBaseTypesAsParameters" Category="Microsoft.Design" CheckId="CA1011" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>value</Item>
               <Item>LogicValue.ConvertFrom(IValueStructure):LogicValue</Item>
               <Item>MathNet.Symbolics.IValueStructure</Item>
               <Item>MathNet.Symbolics.ICustomData</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="CreateNandProcess(System.Boolean[],System.Boolean[],System.Boolean[],System.Boolean[]):MathNet.Symbolics.Packages.ObjectModel.ProcessBase">
            <Messages>
             <Message Id="Nand" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2007-03-25 19:46:45Z">
              <Issue Name="Member">
               <Item>Nand</Item>
               <Item>LogicValue.CreateNandProcess(Boolean[], Boolean[], Boolean[], Boolean[]):ProcessBase</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="CreateNandProcess(System.Int32,System.Int32,System.Int32):MathNet.Symbolics.Packages.ObjectModel.ProcessBase">
            <Messages>
             <Message Id="Nand" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2007-03-25 19:46:45Z">
              <Issue Name="Member">
               <Item>Nand</Item>
               <Item>LogicValue.CreateNandProcess(Int32, Int32, Int32):ProcessBase</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="CreateXnorProcess(System.Boolean[],System.Boolean[],System.Boolean[],System.Boolean[]):MathNet.Symbolics.Packages.ObjectModel.ProcessBase">
            <Messages>
             <Message Id="Xnor" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2007-03-25 19:46:45Z">
              <Issue Name="Member">
               <Item>Xnor</Item>
               <Item>LogicValue.CreateXnorProcess(Boolean[], Boolean[], Boolean[], Boolean[]):ProcessBase</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="CreateXnorProcess(System.Int32,System.Int32,System.Int32):MathNet.Symbolics.Packages.ObjectModel.ProcessBase">
            <Messages>
             <Message Id="Xnor" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2007-03-25 19:46:45Z">
              <Issue Name="Member">
               <Item>Xnor</Item>
               <Item>LogicValue.CreateXnorProcess(Int32, Int32, Int32):ProcessBase</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Deserialize(System.Xml.XmlReader,System.Collections.Generic.IDictionary`2&lt;System.Guid,MathNet.Symbolics.Signal&gt;,System.Collections.Generic.IDictionary`2&lt;System.Guid,MathNet.Symbolics.Bus&gt;):MathNet.Symbolics.Packages.Standard.Structures.LogicValue">
            <Messages>
             <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>LogicValue.Deserialize(XmlReader, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Signal&gt;, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Bus&gt;):LogicValue</Item>
              </Issue>
             </Message>
             <Message Id="buses" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2007-03-25 19:46:45Z" FixCategory="NonBreaking">
              <Issue>
               <Item>buses</Item>
               <Item>LogicValue.Deserialize(XmlReader, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Signal&gt;, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Bus&gt;):LogicValue</Item>
              </Issue>
             </Message>
             <Message Id="signals" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2007-03-25 19:46:45Z" FixCategory="NonBreaking">
              <Issue>
               <Item>signals</Item>
               <Item>LogicValue.Deserialize(XmlReader, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Signal&gt;, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Bus&gt;):LogicValue</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Multiply(MathNet.Symbolics.Packages.Standard.Structures.LogicValue):MathNet.Symbolics.Packages.Standard.Structures.LogicValue">
            <Messages>
             <Message Id="0#" TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>op</Item>
               <Item>LogicValue.Multiply(LogicValue):LogicValue</Item>
               <Item>other</Item>
               <Item>IAlgebraicMultiplicativeClose`1&lt;MathNet.Symbolics.Packages.Standard.Structures.LogicValue&gt;.Multiply(LogicValue):LogicValue</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Nand(MathNet.Symbolics.Packages.Standard.Structures.LogicValue):MathNet.Symbolics.Packages.Standard.Structures.LogicValue">
            <Messages>
             <Message Id="Nand" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2007-03-25 19:46:45Z">
              <Issue Name="Member">
               <Item>Nand</Item>
               <Item>LogicValue.Nand(LogicValue):LogicValue</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Serialize(System.Xml.XmlWriter,System.Collections.Generic.IDictionary`2&lt;System.Guid,System.Guid&gt;,System.Collections.Generic.IDictionary`2&lt;System.Guid,System.Guid&gt;):System.Void">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>'writer'</Item>
               <Item>LogicValue.Serialize(XmlWriter, IDictionary`2&lt;System.Guid,System.Guid&gt;, IDictionary`2&lt;System.Guid,System.Guid&gt;):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Xnor(MathNet.Symbolics.Packages.Standard.Structures.LogicValue):MathNet.Symbolics.Packages.Standard.Structures.LogicValue">
            <Messages>
             <Message Id="Xnor" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2007-03-25 19:46:45Z">
              <Issue Name="Member">
               <Item>Xnor</Item>
               <Item>LogicValue.Xnor(LogicValue):LogicValue</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="LogicValueCategory">
          <Members>
           <Member Name="Deserialize(System.Xml.XmlReader,System.Collections.Generic.IDictionary`2&lt;System.Guid,MathNet.Symbolics.Signal&gt;,System.Collections.Generic.IDictionary`2&lt;System.Guid,MathNet.Symbolics.Bus&gt;):MathNet.Symbolics.Packages.Standard.Structures.LogicValueCategory">
            <Messages>
             <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>LogicValueCategory.Deserialize(XmlReader, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Signal&gt;, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Bus&gt;):LogicValueCategory</Item>
              </Issue>
             </Message>
             <Message Id="buses" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2007-03-25 19:46:45Z" FixCategory="NonBreaking">
              <Issue>
               <Item>buses</Item>
               <Item>LogicValueCategory.Deserialize(XmlReader, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Signal&gt;, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Bus&gt;):LogicValueCategory</Item>
              </Issue>
             </Message>
             <Message Id="reader" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2007-03-25 19:46:45Z" FixCategory="NonBreaking">
              <Issue>
               <Item>reader</Item>
               <Item>LogicValueCategory.Deserialize(XmlReader, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Signal&gt;, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Bus&gt;):LogicValueCategory</Item>
              </Issue>
             </Message>
             <Message Id="signals" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2007-03-25 19:46:45Z" FixCategory="NonBreaking">
              <Issue>
               <Item>signals</Item>
               <Item>LogicValueCategory.Deserialize(XmlReader, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Signal&gt;, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Bus&gt;):LogicValueCategory</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="NegativeInfinitySymbol">
          <Members>
           <Member Name="CanConvertLosslessFrom(MathNet.Symbolics.IValueStructure):System.Boolean">
            <Messages>
             <Message TypeName="ConsiderPassingBaseTypesAsParameters" Category="Microsoft.Design" CheckId="CA1011" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>value</Item>
               <Item>NegativeInfinitySymbol.CanConvertLosslessFrom(IValueStructure):Boolean</Item>
               <Item>MathNet.Symbolics.IValueStructure</Item>
               <Item>MathNet.Symbolics.ICustomData</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="ConvertFrom(MathNet.Symbolics.IValueStructure):MathNet.Symbolics.Packages.Standard.Structures.NegativeInfinitySymbol">
            <Messages>
             <Message Id="value" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2007-03-25 19:46:45Z" FixCategory="Breaking">
              <Issue>
               <Item>value</Item>
               <Item>NegativeInfinitySymbol.ConvertFrom(IValueStructure):NegativeInfinitySymbol</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Deserialize(System.Xml.XmlReader,System.Collections.Generic.IDictionary`2&lt;System.Guid,MathNet.Symbolics.Signal&gt;,System.Collections.Generic.IDictionary`2&lt;System.Guid,MathNet.Symbolics.Bus&gt;):MathNet.Symbolics.Packages.Standard.Structures.NegativeInfinitySymbol">
            <Messages>
             <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>NegativeInfinitySymbol.Deserialize(XmlReader, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Signal&gt;, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Bus&gt;):NegativeInfinitySymbol</Item>
              </Issue>
             </Message>
             <Message Id="buses" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2007-03-25 19:46:45Z" FixCategory="NonBreaking">
              <Issue>
               <Item>buses</Item>
               <Item>NegativeInfinitySymbol.Deserialize(XmlReader, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Signal&gt;, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Bus&gt;):NegativeInfinitySymbol</Item>
              </Issue>
             </Message>
             <Message Id="reader" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2007-03-25 19:46:45Z" FixCategory="NonBreaking">
              <Issue>
               <Item>reader</Item>
               <Item>NegativeInfinitySymbol.Deserialize(XmlReader, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Signal&gt;, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Bus&gt;):NegativeInfinitySymbol</Item>
              </Issue>
             </Message>
             <Message Id="signals" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2007-03-25 19:46:45Z" FixCategory="NonBreaking">
              <Issue>
               <Item>signals</Item>
               <Item>NegativeInfinitySymbol.Deserialize(XmlReader, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Signal&gt;, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Bus&gt;):NegativeInfinitySymbol</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="PositiveInfinitySymbol">
          <Members>
           <Member Name="CanConvertLosslessFrom(MathNet.Symbolics.IValueStructure):System.Boolean">
            <Messages>
             <Message TypeName="ConsiderPassingBaseTypesAsParameters" Category="Microsoft.Design" CheckId="CA1011" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>value</Item>
               <Item>PositiveInfinitySymbol.CanConvertLosslessFrom(IValueStructure):Boolean</Item>
               <Item>MathNet.Symbolics.IValueStructure</Item>
               <Item>MathNet.Symbolics.ICustomData</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="ConvertFrom(MathNet.Symbolics.IValueStructure):MathNet.Symbolics.Packages.Standard.Structures.PositiveInfinitySymbol">
            <Messages>
             <Message Id="value" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2007-03-25 19:46:45Z" FixCategory="Breaking">
              <Issue>
               <Item>value</Item>
               <Item>PositiveInfinitySymbol.ConvertFrom(IValueStructure):PositiveInfinitySymbol</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Deserialize(System.Xml.XmlReader,System.Collections.Generic.IDictionary`2&lt;System.Guid,MathNet.Symbolics.Signal&gt;,System.Collections.Generic.IDictionary`2&lt;System.Guid,MathNet.Symbolics.Bus&gt;):MathNet.Symbolics.Packages.Standard.Structures.PositiveInfinitySymbol">
            <Messages>
             <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>PositiveInfinitySymbol.Deserialize(XmlReader, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Signal&gt;, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Bus&gt;):PositiveInfinitySymbol</Item>
              </Issue>
             </Message>
             <Message Id="buses" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2007-03-25 19:46:45Z" FixCategory="NonBreaking">
              <Issue>
               <Item>buses</Item>
               <Item>PositiveInfinitySymbol.Deserialize(XmlReader, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Signal&gt;, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Bus&gt;):PositiveInfinitySymbol</Item>
              </Issue>
             </Message>
             <Message Id="reader" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2007-03-25 19:46:45Z" FixCategory="NonBreaking">
              <Issue>
               <Item>reader</Item>
               <Item>PositiveInfinitySymbol.Deserialize(XmlReader, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Signal&gt;, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Bus&gt;):PositiveInfinitySymbol</Item>
              </Issue>
             </Message>
             <Message Id="signals" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2007-03-25 19:46:45Z" FixCategory="NonBreaking">
              <Issue>
               <Item>signals</Item>
               <Item>PositiveInfinitySymbol.Deserialize(XmlReader, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Signal&gt;, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Bus&gt;):PositiveInfinitySymbol</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="RationalValue">
          <Members>
           <Member Name="Add(MathNet.Symbolics.Packages.Standard.Structures.RationalValue):MathNet.Symbolics.Packages.Standard.Structures.RationalValue">
            <Messages>
             <Message Id="0#" TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>op</Item>
               <Item>RationalValue.Add(RationalValue):RationalValue</Item>
               <Item>other</Item>
               <Item>IAlgebraicAdditiveClose`1&lt;MathNet.Symbolics.Packages.Standard.Structures.RationalValue&gt;.Add(RationalValue):RationalValue</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="CanConvertLosslessFrom(MathNet.Symbolics.IValueStructure):System.Boolean">
            <Messages>
             <Message TypeName="ConsiderPassingBaseTypesAsParameters" Category="Microsoft.Design" CheckId="CA1011" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>value</Item>
               <Item>RationalValue.CanConvertLosslessFrom(IValueStructure):Boolean</Item>
               <Item>MathNet.Symbolics.IValueStructure</Item>
               <Item>MathNet.Symbolics.ICustomData</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="CompareTo(MathNet.Symbolics.Packages.Standard.Structures.RationalValue):System.Int32">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>'other'</Item>
               <Item>RationalValue.CompareTo(RationalValue):Int32</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="ConvertFrom(MathNet.Symbolics.IValueStructure):MathNet.Symbolics.Packages.Standard.Structures.RationalValue">
            <Messages>
             <Message TypeName="ConsiderPassingBaseTypesAsParameters" Category="Microsoft.Design" CheckId="CA1011" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>value</Item>
               <Item>RationalValue.ConvertFrom(IValueStructure):RationalValue</Item>
               <Item>MathNet.Symbolics.IValueStructure</Item>
               <Item>MathNet.Symbolics.ICustomData</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Deserialize(System.Xml.XmlReader,System.Collections.Generic.IDictionary`2&lt;System.Guid,MathNet.Symbolics.Signal&gt;,System.Collections.Generic.IDictionary`2&lt;System.Guid,MathNet.Symbolics.Bus&gt;):MathNet.Symbolics.Packages.Standard.Structures.RationalValue">
            <Messages>
             <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>RationalValue.Deserialize(XmlReader, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Signal&gt;, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Bus&gt;):RationalValue</Item>
              </Issue>
             </Message>
             <Message Id="buses" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2007-03-25 19:46:45Z" FixCategory="NonBreaking">
              <Issue>
               <Item>buses</Item>
               <Item>RationalValue.Deserialize(XmlReader, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Signal&gt;, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Bus&gt;):RationalValue</Item>
              </Issue>
             </Message>
             <Message Id="signals" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2007-03-25 19:46:45Z" FixCategory="NonBreaking">
              <Issue>
               <Item>signals</Item>
               <Item>RationalValue.Deserialize(XmlReader, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Signal&gt;, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Bus&gt;):RationalValue</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Divide(MathNet.Symbolics.Packages.Standard.Structures.RationalValue):MathNet.Symbolics.Packages.Standard.Structures.RationalValue">
            <Messages>
             <Message Id="0#" TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>op</Item>
               <Item>RationalValue.Divide(RationalValue):RationalValue</Item>
               <Item>other</Item>
               <Item>IAlgebraicSkewField`1&lt;MathNet.Symbolics.Packages.Standard.Structures.RationalValue&gt;.Divide(RationalValue):RationalValue</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Multiply(MathNet.Symbolics.Packages.Standard.Structures.RationalValue):MathNet.Symbolics.Packages.Standard.Structures.RationalValue">
            <Messages>
             <Message Id="0#" TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>op</Item>
               <Item>RationalValue.Multiply(RationalValue):RationalValue</Item>
               <Item>other</Item>
               <Item>IAlgebraicMultiplicativeClose`1&lt;MathNet.Symbolics.Packages.Standard.Structures.RationalValue&gt;.Multiply(RationalValue):RationalValue</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="op_GreaterThan(MathNet.Symbolics.Packages.Standard.Structures.RationalValue,MathNet.Symbolics.Packages.Standard.Structures.RationalValue):System.Boolean">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>'left'</Item>
               <Item>RationalValue.op_GreaterThan(RationalValue, RationalValue):Boolean</Item>
              </Issue>
              <Issue>
               <Item>'right'</Item>
               <Item>RationalValue.op_GreaterThan(RationalValue, RationalValue):Boolean</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="op_LessThan(MathNet.Symbolics.Packages.Standard.Structures.RationalValue,MathNet.Symbolics.Packages.Standard.Structures.RationalValue):System.Boolean">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>'left'</Item>
               <Item>RationalValue.op_LessThan(RationalValue, RationalValue):Boolean</Item>
              </Issue>
              <Issue>
               <Item>'right'</Item>
               <Item>RationalValue.op_LessThan(RationalValue, RationalValue):Boolean</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Serialize(System.Xml.XmlWriter,System.Collections.Generic.IDictionary`2&lt;System.Guid,System.Guid&gt;,System.Collections.Generic.IDictionary`2&lt;System.Guid,System.Guid&gt;):System.Void">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>'writer'</Item>
               <Item>RationalValue.Serialize(XmlWriter, IDictionary`2&lt;System.Guid,System.Guid&gt;, IDictionary`2&lt;System.Guid,System.Guid&gt;):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Subtract(MathNet.Symbolics.Packages.Standard.Structures.RationalValue):MathNet.Symbolics.Packages.Standard.Structures.RationalValue">
            <Messages>
             <Message Id="0#" TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>op</Item>
               <Item>RationalValue.Subtract(RationalValue):RationalValue</Item>
               <Item>other</Item>
               <Item>IAlgebraicGroup`1&lt;MathNet.Symbolics.Packages.Standard.Structures.RationalValue&gt;.Subtract(RationalValue):RationalValue</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="RationalValue+AddProcess">
          <Messages>
           <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Created="2007-03-25 19:46:45Z">
            <Issue>
             <Item>MathNet.Symbolics.Packages.Standard.Structures.RationalValue+AddProcess</Item>
            </Issue>
           </Message>
          </Messages>
         </Type>
         <Type Name="RationalValue+DivideProcess">
          <Messages>
           <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Created="2007-03-25 19:46:45Z">
            <Issue>
             <Item>MathNet.Symbolics.Packages.Standard.Structures.RationalValue+DivideProcess</Item>
            </Issue>
           </Message>
          </Messages>
         </Type>
         <Type Name="RationalValue+MultiplyProcess">
          <Messages>
           <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Created="2007-03-25 19:46:45Z">
            <Issue>
             <Item>MathNet.Symbolics.Packages.Standard.Structures.RationalValue+MultiplyProcess</Item>
            </Issue>
           </Message>
          </Messages>
         </Type>
         <Type Name="RationalValue+SubtractProcess">
          <Messages>
           <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Created="2007-03-25 19:46:45Z">
            <Issue>
             <Item>MathNet.Symbolics.Packages.Standard.Structures.RationalValue+SubtractProcess</Item>
            </Issue>
           </Message>
          </Messages>
         </Type>
         <Type Name="RationalValueCategory">
          <Members>
           <Member Name="Deserialize(System.Xml.XmlReader,System.Collections.Generic.IDictionary`2&lt;System.Guid,MathNet.Symbolics.Signal&gt;,System.Collections.Generic.IDictionary`2&lt;System.Guid,MathNet.Symbolics.Bus&gt;):MathNet.Symbolics.Packages.Standard.Structures.RationalValueCategory">
            <Messages>
             <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>RationalValueCategory.Deserialize(XmlReader, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Signal&gt;, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Bus&gt;):RationalValueCategory</Item>
              </Issue>
             </Message>
             <Message Id="buses" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2007-03-25 19:46:45Z" FixCategory="NonBreaking">
              <Issue>
               <Item>buses</Item>
               <Item>RationalValueCategory.Deserialize(XmlReader, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Signal&gt;, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Bus&gt;):RationalValueCategory</Item>
              </Issue>
             </Message>
             <Message Id="reader" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2007-03-25 19:46:45Z" FixCategory="NonBreaking">
              <Issue>
               <Item>reader</Item>
               <Item>RationalValueCategory.Deserialize(XmlReader, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Signal&gt;, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Bus&gt;):RationalValueCategory</Item>
              </Issue>
             </Message>
             <Message Id="signals" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2007-03-25 19:46:45Z" FixCategory="NonBreaking">
              <Issue>
               <Item>signals</Item>
               <Item>RationalValueCategory.Deserialize(XmlReader, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Signal&gt;, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Bus&gt;):RationalValueCategory</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="RealValue">
          <Members>
           <Member Name="Add(MathNet.Symbolics.Packages.Standard.Structures.RealValue):MathNet.Symbolics.Packages.Standard.Structures.RealValue">
            <Messages>
             <Message Id="0#" TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>op</Item>
               <Item>RealValue.Add(RealValue):RealValue</Item>
               <Item>other</Item>
               <Item>IAlgebraicAdditiveClose`1&lt;MathNet.Symbolics.Packages.Standard.Structures.RealValue&gt;.Add(RealValue):RealValue</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="CanConvertLosslessFrom(MathNet.Symbolics.IValueStructure):System.Boolean">
            <Messages>
             <Message TypeName="ConsiderPassingBaseTypesAsParameters" Category="Microsoft.Design" CheckId="CA1011" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>value</Item>
               <Item>RealValue.CanConvertLosslessFrom(IValueStructure):Boolean</Item>
               <Item>MathNet.Symbolics.IValueStructure</Item>
               <Item>MathNet.Symbolics.ICustomData</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="CompareTo(MathNet.Symbolics.Packages.Standard.Structures.RealValue):System.Int32">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>'other'</Item>
               <Item>RealValue.CompareTo(RealValue):Int32</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="ConvertFrom(MathNet.Symbolics.IValueStructure):MathNet.Symbolics.Packages.Standard.Structures.RealValue">
            <Messages>
             <Message TypeName="ConsiderPassingBaseTypesAsParameters" Category="Microsoft.Design" CheckId="CA1011" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>value</Item>
               <Item>RealValue.ConvertFrom(IValueStructure):RealValue</Item>
               <Item>MathNet.Symbolics.IValueStructure</Item>
               <Item>MathNet.Symbolics.ICustomData</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Deserialize(System.Xml.XmlReader,System.Collections.Generic.IDictionary`2&lt;System.Guid,MathNet.Symbolics.Signal&gt;,System.Collections.Generic.IDictionary`2&lt;System.Guid,MathNet.Symbolics.Bus&gt;):MathNet.Symbolics.Packages.Standard.Structures.RealValue">
            <Messages>
             <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>RealValue.Deserialize(XmlReader, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Signal&gt;, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Bus&gt;):RealValue</Item>
              </Issue>
             </Message>
             <Message Id="buses" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2007-03-25 19:46:45Z" FixCategory="NonBreaking">
              <Issue>
               <Item>buses</Item>
               <Item>RealValue.Deserialize(XmlReader, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Signal&gt;, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Bus&gt;):RealValue</Item>
              </Issue>
             </Message>
             <Message Id="signals" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2007-03-25 19:46:45Z" FixCategory="NonBreaking">
              <Issue>
               <Item>signals</Item>
               <Item>RealValue.Deserialize(XmlReader, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Signal&gt;, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Bus&gt;):RealValue</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Divide(MathNet.Symbolics.Packages.Standard.Structures.RealValue):MathNet.Symbolics.Packages.Standard.Structures.RealValue">
            <Messages>
             <Message Id="0#" TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>op</Item>
               <Item>RealValue.Divide(RealValue):RealValue</Item>
               <Item>other</Item>
               <Item>IAlgebraicSkewField`1&lt;MathNet.Symbolics.Packages.Standard.Structures.RealValue&gt;.Divide(RealValue):RealValue</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="E">
            <Messages>
             <Message Id="E" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2007-03-25 19:46:45Z">
              <Issue Name="MemberOneLetter">
               <Item>E</Item>
               <Item>RealValue.E:RealValue</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Multiply(MathNet.Symbolics.Packages.Standard.Structures.RealValue):MathNet.Symbolics.Packages.Standard.Structures.RealValue">
            <Messages>
             <Message Id="0#" TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>op</Item>
               <Item>RealValue.Multiply(RealValue):RealValue</Item>
               <Item>other</Item>
               <Item>IAlgebraicMultiplicativeClose`1&lt;MathNet.Symbolics.Packages.Standard.Structures.RealValue&gt;.Multiply(RealValue):RealValue</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Serialize(System.Xml.XmlWriter,System.Collections.Generic.IDictionary`2&lt;System.Guid,System.Guid&gt;,System.Collections.Generic.IDictionary`2&lt;System.Guid,System.Guid&gt;):System.Void">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>'writer'</Item>
               <Item>RealValue.Serialize(XmlWriter, IDictionary`2&lt;System.Guid,System.Guid&gt;, IDictionary`2&lt;System.Guid,System.Guid&gt;):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Subtract(MathNet.Symbolics.Packages.Standard.Structures.RealValue):MathNet.Symbolics.Packages.Standard.Structures.RealValue">
            <Messages>
             <Message Id="0#" TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>op</Item>
               <Item>RealValue.Subtract(RealValue):RealValue</Item>
               <Item>other</Item>
               <Item>IAlgebraicGroup`1&lt;MathNet.Symbolics.Packages.Standard.Structures.RealValue&gt;.Subtract(RealValue):RealValue</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="RealValue+AddProcess">
          <Messages>
           <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Created="2007-03-25 19:46:45Z">
            <Issue>
             <Item>MathNet.Symbolics.Packages.Standard.Structures.RealValue+AddProcess</Item>
            </Issue>
           </Message>
          </Messages>
         </Type>
         <Type Name="RealValue+DivideProcess">
          <Messages>
           <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Created="2007-03-25 19:46:45Z">
            <Issue>
             <Item>MathNet.Symbolics.Packages.Standard.Structures.RealValue+DivideProcess</Item>
            </Issue>
           </Message>
          </Messages>
         </Type>
         <Type Name="RealValue+MultiplyProcess">
          <Messages>
           <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Created="2007-03-25 19:46:45Z">
            <Issue>
             <Item>MathNet.Symbolics.Packages.Standard.Structures.RealValue+MultiplyProcess</Item>
            </Issue>
           </Message>
          </Messages>
         </Type>
         <Type Name="RealValue+SubtractProcess">
          <Messages>
           <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Created="2007-03-25 19:46:45Z">
            <Issue>
             <Item>MathNet.Symbolics.Packages.Standard.Structures.RealValue+SubtractProcess</Item>
            </Issue>
           </Message>
          </Messages>
         </Type>
         <Type Name="RealValueCategory">
          <Members>
           <Member Name="Deserialize(System.Xml.XmlReader,System.Collections.Generic.IDictionary`2&lt;System.Guid,MathNet.Symbolics.Signal&gt;,System.Collections.Generic.IDictionary`2&lt;System.Guid,MathNet.Symbolics.Bus&gt;):MathNet.Symbolics.Packages.Standard.Structures.RealValueCategory">
            <Messages>
             <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>RealValueCategory.Deserialize(XmlReader, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Signal&gt;, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Bus&gt;):RealValueCategory</Item>
              </Issue>
             </Message>
             <Message Id="buses" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2007-03-25 19:46:45Z" FixCategory="NonBreaking">
              <Issue>
               <Item>buses</Item>
               <Item>RealValueCategory.Deserialize(XmlReader, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Signal&gt;, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Bus&gt;):RealValueCategory</Item>
              </Issue>
             </Message>
             <Message Id="reader" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2007-03-25 19:46:45Z" FixCategory="NonBreaking">
              <Issue>
               <Item>reader</Item>
               <Item>RealValueCategory.Deserialize(XmlReader, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Signal&gt;, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Bus&gt;):RealValueCategory</Item>
              </Issue>
             </Message>
             <Message Id="signals" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2007-03-25 19:46:45Z" FixCategory="NonBreaking">
              <Issue>
               <Item>signals</Item>
               <Item>RealValueCategory.Deserialize(XmlReader, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Signal&gt;, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Bus&gt;):RealValueCategory</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="ToggleValue">
          <Members>
           <Member Name="CanConvertLosslessFrom(MathNet.Symbolics.IValueStructure):System.Boolean">
            <Messages>
             <Message TypeName="ConsiderPassingBaseTypesAsParameters" Category="Microsoft.Design" CheckId="CA1011" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>value</Item>
               <Item>ToggleValue.CanConvertLosslessFrom(IValueStructure):Boolean</Item>
               <Item>MathNet.Symbolics.IValueStructure</Item>
               <Item>MathNet.Symbolics.ICustomData</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="CompareTo(MathNet.Symbolics.Packages.Standard.Structures.ToggleValue):System.Int32">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>'other'</Item>
               <Item>ToggleValue.CompareTo(ToggleValue):Int32</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="ConvertFrom(MathNet.Symbolics.IValueStructure):MathNet.Symbolics.Packages.Standard.Structures.ToggleValue">
            <Messages>
             <Message TypeName="ConsiderPassingBaseTypesAsParameters" Category="Microsoft.Design" CheckId="CA1011" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>value</Item>
               <Item>ToggleValue.ConvertFrom(IValueStructure):ToggleValue</Item>
               <Item>MathNet.Symbolics.IValueStructure</Item>
               <Item>MathNet.Symbolics.ICustomData</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Deserialize(System.Xml.XmlReader,System.Collections.Generic.IDictionary`2&lt;System.Guid,MathNet.Symbolics.Signal&gt;,System.Collections.Generic.IDictionary`2&lt;System.Guid,MathNet.Symbolics.Bus&gt;):MathNet.Symbolics.Packages.Standard.Structures.ToggleValue">
            <Messages>
             <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>ToggleValue.Deserialize(XmlReader, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Signal&gt;, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Bus&gt;):ToggleValue</Item>
              </Issue>
             </Message>
             <Message Id="buses" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2007-03-25 19:46:45Z" FixCategory="NonBreaking">
              <Issue>
               <Item>buses</Item>
               <Item>ToggleValue.Deserialize(XmlReader, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Signal&gt;, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Bus&gt;):ToggleValue</Item>
              </Issue>
             </Message>
             <Message Id="signals" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2007-03-25 19:46:45Z" FixCategory="NonBreaking">
              <Issue>
               <Item>signals</Item>
               <Item>ToggleValue.Deserialize(XmlReader, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Signal&gt;, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Bus&gt;):ToggleValue</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Serialize(System.Xml.XmlWriter,System.Collections.Generic.IDictionary`2&lt;System.Guid,System.Guid&gt;,System.Collections.Generic.IDictionary`2&lt;System.Guid,System.Guid&gt;):System.Void">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>'writer'</Item>
               <Item>ToggleValue.Serialize(XmlWriter, IDictionary`2&lt;System.Guid,System.Guid&gt;, IDictionary`2&lt;System.Guid,System.Guid&gt;):Void</Item>
              </Issue>
              <Issue>
               <Item>'writer'</Item>
               <Item>ToggleValue.Serialize(XmlWriter, IDictionary`2&lt;System.Guid,System.Guid&gt;, IDictionary`2&lt;System.Guid,System.Guid&gt;):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="UndefinedSymbol">
          <Members>
           <Member Name="CanConvertLosslessFrom(MathNet.Symbolics.IValueStructure):System.Boolean">
            <Messages>
             <Message TypeName="ConsiderPassingBaseTypesAsParameters" Category="Microsoft.Design" CheckId="CA1011" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>value</Item>
               <Item>UndefinedSymbol.CanConvertLosslessFrom(IValueStructure):Boolean</Item>
               <Item>MathNet.Symbolics.IValueStructure</Item>
               <Item>MathNet.Symbolics.ICustomData</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="ConvertFrom(MathNet.Symbolics.IValueStructure):MathNet.Symbolics.Packages.Standard.Structures.UndefinedSymbol">
            <Messages>
             <Message Id="value" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2007-03-25 19:46:45Z" FixCategory="Breaking">
              <Issue>
               <Item>value</Item>
               <Item>UndefinedSymbol.ConvertFrom(IValueStructure):UndefinedSymbol</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Deserialize(System.Xml.XmlReader,System.Collections.Generic.IDictionary`2&lt;System.Guid,MathNet.Symbolics.Signal&gt;,System.Collections.Generic.IDictionary`2&lt;System.Guid,MathNet.Symbolics.Bus&gt;):MathNet.Symbolics.Packages.Standard.Structures.UndefinedSymbol">
            <Messages>
             <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>UndefinedSymbol.Deserialize(XmlReader, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Signal&gt;, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Bus&gt;):UndefinedSymbol</Item>
              </Issue>
             </Message>
             <Message Id="buses" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2007-03-25 19:46:45Z" FixCategory="NonBreaking">
              <Issue>
               <Item>buses</Item>
               <Item>UndefinedSymbol.Deserialize(XmlReader, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Signal&gt;, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Bus&gt;):UndefinedSymbol</Item>
              </Issue>
             </Message>
             <Message Id="reader" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2007-03-25 19:46:45Z" FixCategory="NonBreaking">
              <Issue>
               <Item>reader</Item>
               <Item>UndefinedSymbol.Deserialize(XmlReader, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Signal&gt;, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Bus&gt;):UndefinedSymbol</Item>
              </Issue>
             </Message>
             <Message Id="signals" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2007-03-25 19:46:45Z" FixCategory="NonBreaking">
              <Issue>
               <Item>signals</Item>
               <Item>UndefinedSymbol.Deserialize(XmlReader, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Signal&gt;, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Bus&gt;):UndefinedSymbol</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="VectorValue`1">
          <Members>
           <Member Name="Add(MathNet.Symbolics.Packages.Standard.Structures.VectorValue`1&lt;TScalar&gt;):MathNet.Symbolics.Packages.Standard.Structures.VectorValue`1&lt;TScalar&gt;">
            <Messages>
             <Message Id="0#" TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>summand</Item>
               <Item>VectorValue`1.Add(VectorValue`1&lt;TScalar&gt;):VectorValue`1&lt;TScalar&gt;</Item>
               <Item>other</Item>
               <Item>IAlgebraicAdditiveClose`1&lt;MathNet.Symbolics.Packages.Standard.Structures.VectorValue`1&lt;TScalar&gt;&gt;.Add(VectorValue`1&lt;TScalar&gt;):VectorValue`1&lt;TScalar&gt;</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Add(MathNet.Symbolics.Packages.Standard.Structures.VectorValue`1&lt;TScalar&gt;,MathNet.Symbolics.Packages.Standard.Structures.VectorValue`1&lt;TScalar&gt;):MathNet.Symbolics.Packages.Standard.Structures.VectorValue`1&lt;TScalar&gt;">
            <Messages>
             <Message TypeName="DoNotDeclareStaticMembersOnGenericTypes" Category="Microsoft.Design" CheckId="CA1000" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>VectorValue`1.Add(VectorValue`1&lt;TScalar&gt;, VectorValue`1&lt;TScalar&gt;):VectorValue`1&lt;TScalar&gt;</Item>
               <Item>MathNet.Symbolics.Packages.Standard.Structures.VectorValue`1</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="AdditiveIdentity">
            <Messages>
             <Message TypeName="DoNotDeclareStaticMembersOnGenericTypes" Category="Microsoft.Design" CheckId="CA1000" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>VectorValue`1.AdditiveIdentity:VectorValue`1&lt;TScalar&gt;</Item>
               <Item>MathNet.Symbolics.Packages.Standard.Structures.VectorValue`1</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="CanConvertLosslessFrom(MathNet.Symbolics.IValueStructure):System.Boolean">
            <Messages>
             <Message TypeName="ConsiderPassingBaseTypesAsParameters" Category="Microsoft.Design" CheckId="CA1011" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>value</Item>
               <Item>VectorValue`1.CanConvertLosslessFrom(IValueStructure):Boolean</Item>
               <Item>MathNet.Symbolics.IValueStructure</Item>
               <Item>MathNet.Symbolics.ICustomData</Item>
              </Issue>
             </Message>
             <Message TypeName="DoNotDeclareStaticMembersOnGenericTypes" Category="Microsoft.Design" CheckId="CA1000" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>VectorValue`1.CanConvertLosslessFrom(IValueStructure):Boolean</Item>
               <Item>MathNet.Symbolics.Packages.Standard.Structures.VectorValue`1</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Constant(TScalar[]):MathNet.Symbolics.Signal">
            <Messages>
             <Message TypeName="DoNotDeclareStaticMembersOnGenericTypes" Category="Microsoft.Design" CheckId="CA1000" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>VectorValue`1.Constant(TScalar[]):Signal</Item>
               <Item>MathNet.Symbolics.Packages.Standard.Structures.VectorValue`1</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Constant(TScalar[],System.String):MathNet.Symbolics.Signal">
            <Messages>
             <Message TypeName="DoNotDeclareStaticMembersOnGenericTypes" Category="Microsoft.Design" CheckId="CA1000" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>VectorValue`1.Constant(TScalar[], String):Signal</Item>
               <Item>MathNet.Symbolics.Packages.Standard.Structures.VectorValue`1</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="ConvertFrom(MathNet.Symbolics.IValueStructure):MathNet.Symbolics.Packages.Standard.Structures.VectorValue`1&lt;TScalar&gt;">
            <Messages>
             <Message TypeName="ConsiderPassingBaseTypesAsParameters" Category="Microsoft.Design" CheckId="CA1011" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>value</Item>
               <Item>VectorValue`1.ConvertFrom(IValueStructure):VectorValue`1&lt;TScalar&gt;</Item>
               <Item>MathNet.Symbolics.IValueStructure</Item>
               <Item>MathNet.Symbolics.ICustomData</Item>
              </Issue>
             </Message>
             <Message TypeName="DoNotDeclareStaticMembersOnGenericTypes" Category="Microsoft.Design" CheckId="CA1000" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>VectorValue`1.ConvertFrom(IValueStructure):VectorValue`1&lt;TScalar&gt;</Item>
               <Item>MathNet.Symbolics.Packages.Standard.Structures.VectorValue`1</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Deserialize(System.Xml.XmlReader,System.Collections.Generic.IDictionary`2&lt;System.Guid,MathNet.Symbolics.Signal&gt;,System.Collections.Generic.IDictionary`2&lt;System.Guid,MathNet.Symbolics.Bus&gt;):MathNet.Symbolics.Packages.Standard.Structures.VectorValue`1&lt;TScalar&gt;">
            <Messages>
             <Message Id="cnt" TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>VectorValue`1.Deserialize(XmlReader, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Signal&gt;, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Bus&gt;):VectorValue`1&lt;TScalar&gt;</Item>
               <Item>cnt</Item>
               <Item>System.Int32</Item>
              </Issue>
             </Message>
             <Message Id="System.Int32.Parse(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>VectorValue`1.Deserialize(XmlReader, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Signal&gt;, IDictionary`2&lt;System.Guid,MathNet.Symbolics.Bus&gt;):VectorValue`1&lt;TScalar&gt;</Item>
               <Item>System.Int32.Parse(System.String)</Item>
               <Item>System.Int32.Parse(System.String,System.IFormatProvider)</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Negate(MathNet.Symbolics.Packages.Standard.Structures.VectorValue`1&lt;TScalar&gt;):MathNet.Symbolics.Packages.Standard.Structures.VectorValue`1&lt;TScalar&gt;">
            <Messages>
             <Message TypeName="DoNotDeclareStaticMembersOnGenericTypes" Category="Microsoft.Design" CheckId="CA1000" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>VectorValue`1.Negate(VectorValue`1&lt;TScalar&gt;):VectorValue`1&lt;TScalar&gt;</Item>
               <Item>MathNet.Symbolics.Packages.Standard.Structures.VectorValue`1</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Register(MathNet.Symbolics.Library.ILibrary):System.Void">
            <Messages>
             <Message TypeName="DoNotDeclareStaticMembersOnGenericTypes" Category="Microsoft.Design" CheckId="CA1000" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>VectorValue`1.Register(ILibrary):Void</Item>
               <Item>MathNet.Symbolics.Packages.Standard.Structures.VectorValue`1</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Serialize(System.Xml.XmlWriter,System.Collections.Generic.IDictionary`2&lt;System.Guid,System.Guid&gt;,System.Collections.Generic.IDictionary`2&lt;System.Guid,System.Guid&gt;):System.Void">
            <Messages>
             <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>VectorValue`1.Serialize(XmlWriter, IDictionary`2&lt;System.Guid,System.Guid&gt;, IDictionary`2&lt;System.Guid,System.Guid&gt;):Void</Item>
               <Item>System.Int32.ToString</Item>
               <Item>System.Int32.ToString(System.IFormatProvider)</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Subtract(MathNet.Symbolics.Packages.Standard.Structures.VectorValue`1&lt;TScalar&gt;):MathNet.Symbolics.Packages.Standard.Structures.VectorValue`1&lt;TScalar&gt;">
            <Messages>
             <Message Id="0#" TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>subtrahend</Item>
               <Item>VectorValue`1.Subtract(VectorValue`1&lt;TScalar&gt;):VectorValue`1&lt;TScalar&gt;</Item>
               <Item>other</Item>
               <Item>IAlgebraicGroup`1&lt;MathNet.Symbolics.Packages.Standard.Structures.VectorValue`1&lt;TScalar&gt;&gt;.Subtract(VectorValue`1&lt;TScalar&gt;):VectorValue`1&lt;TScalar&gt;</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Subtract(MathNet.Symbolics.Packages.Standard.Structures.VectorValue`1&lt;TScalar&gt;,MathNet.Symbolics.Packages.Standard.Structures.VectorValue`1&lt;TScalar&gt;):MathNet.Symbolics.Packages.Standard.Structures.VectorValue`1&lt;TScalar&gt;">
            <Messages>
             <Message TypeName="DoNotDeclareStaticMembersOnGenericTypes" Category="Microsoft.Design" CheckId="CA1000" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>VectorValue`1.Subtract(VectorValue`1&lt;TScalar&gt;, VectorValue`1&lt;TScalar&gt;):VectorValue`1&lt;TScalar&gt;</Item>
               <Item>MathNet.Symbolics.Packages.Standard.Structures.VectorValue`1</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="TypeIdentifier">
            <Messages>
             <Message TypeName="DoNotDeclareStaticMembersOnGenericTypes" Category="Microsoft.Design" CheckId="CA1000" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>VectorValue`1.TypeIdentifier:MathIdentifier</Item>
               <Item>MathNet.Symbolics.Packages.Standard.Structures.VectorValue`1</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Value">
            <Messages>
             <Message TypeName="PropertiesShouldNotReturnArrays" Category="Microsoft.Performance" CheckId="CA1819" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>VectorValue`1.Value:TScalar[]</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Zero">
            <Messages>
             <Message TypeName="DoNotDeclareStaticMembersOnGenericTypes" Category="Microsoft.Design" CheckId="CA1000" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>VectorValue`1.Zero:VectorValue`1&lt;TScalar&gt;</Item>
               <Item>MathNet.Symbolics.Packages.Standard.Structures.VectorValue`1</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
        </Types>
       </Namespace>
       <Namespace Name="MathNet.Symbolics.Packages.Standard.TimeCurves">
        <Types>
         <Type Name="Curve+CurveSegment">
          <Messages>
           <Message TypeName="AvoidUninstantiatedInternalClasses" Category="Microsoft.Performance" CheckId="CA1812" Created="2007-03-25 19:46:45Z">
            <Issue>
             <Item>MathNet.Symbolics.Packages.Standard.TimeCurves.Curve+CurveSegment</Item>
            </Issue>
           </Message>
          </Messages>
          <Members>
           <Member Name="Begin">
            <Messages>
             <Message TypeName="AvoidUnusedPrivateFields" Category="Microsoft.Performance" CheckId="CA1823" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>CurveSegment.Begin</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Offset">
            <Messages>
             <Message TypeName="AvoidUnusedPrivateFields" Category="Microsoft.Performance" CheckId="CA1823" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>CurveSegment.Offset</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Segment">
            <Messages>
             <Message TypeName="AvoidUnusedPrivateFields" Category="Microsoft.Performance" CheckId="CA1823" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>CurveSegment.Segment</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="CurveSegment`1">
          <Members>
           <Member Name=".ctor(System.TimeSpan,T,T)">
            <Messages>
             <Message Id="slopePerSecond" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2007-03-25 19:46:45Z" FixCategory="Breaking">
              <Issue>
               <Item>slopePerSecond</Item>
               <Item>CurveSegment`1.CurveSegment`1(TimeSpan, T, T)</Item>
              </Issue>
             </Message>
             <Message Id="timeOffset" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2007-03-25 19:46:45Z" FixCategory="Breaking">
              <Issue>
               <Item>timeOffset</Item>
               <Item>CurveSegment`1.CurveSegment`1(TimeSpan, T, T)</Item>
              </Issue>
             </Message>
             <Message Id="valueOffset" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2007-03-25 19:46:45Z" FixCategory="Breaking">
              <Issue>
               <Item>valueOffset</Item>
               <Item>CurveSegment`1.CurveSegment`1(TimeSpan, T, T)</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
        </Types>
       </Namespace>
       <Namespace Name="MathNet.Symbolics.Packages.Standard.Trigonometry">
        <Types>
         <Type Name="CosineArchitectures">
          <Members>
           <Member Name="RegisterTheorems(MathNet.Symbolics.Library.ILibrary):System.Void">
            <Messages>
             <Message Id="library" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2007-03-25 19:46:45Z" FixCategory="Breaking">
              <Issue>
               <Item>library</Item>
               <Item>CosineArchitectures.RegisterTheorems(ILibrary):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="HyperbolicCosecantArchitectures">
          <Members>
           <Member Name="RegisterTheorems(MathNet.Symbolics.Library.ILibrary):System.Void">
            <Messages>
             <Message Id="library" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2007-03-25 19:46:45Z" FixCategory="Breaking">
              <Issue>
               <Item>library</Item>
               <Item>HyperbolicCosecantArchitectures.RegisterTheorems(ILibrary):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="HyperbolicCosineArchitectures">
          <Members>
           <Member Name="RegisterTheorems(MathNet.Symbolics.Library.ILibrary):System.Void">
            <Messages>
             <Message Id="library" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2007-03-25 19:46:45Z" FixCategory="Breaking">
              <Issue>
               <Item>library</Item>
               <Item>HyperbolicCosineArchitectures.RegisterTheorems(ILibrary):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="HyperbolicCotangentArchitectures">
          <Members>
           <Member Name="RegisterTheorems(MathNet.Symbolics.Library.ILibrary):System.Void">
            <Messages>
             <Message Id="library" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2007-03-25 19:46:45Z" FixCategory="Breaking">
              <Issue>
               <Item>library</Item>
               <Item>HyperbolicCotangentArchitectures.RegisterTheorems(ILibrary):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="HyperbolicSecantArchitectures">
          <Members>
           <Member Name="RegisterTheorems(MathNet.Symbolics.Library.ILibrary):System.Void">
            <Messages>
             <Message Id="library" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2007-03-25 19:46:45Z" FixCategory="Breaking">
              <Issue>
               <Item>library</Item>
               <Item>HyperbolicSecantArchitectures.RegisterTheorems(ILibrary):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="HyperbolicSineArchitectures">
          <Members>
           <Member Name="RegisterTheorems(MathNet.Symbolics.Library.ILibrary):System.Void">
            <Messages>
             <Message Id="library" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2007-03-25 19:46:45Z" FixCategory="Breaking">
              <Issue>
               <Item>library</Item>
               <Item>HyperbolicSineArchitectures.RegisterTheorems(ILibrary):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="HyperbolicTangentArchitectures">
          <Members>
           <Member Name="RegisterTheorems(MathNet.Symbolics.Library.ILibrary):System.Void">
            <Messages>
             <Message Id="library" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2007-03-25 19:46:45Z" FixCategory="Breaking">
              <Issue>
               <Item>library</Item>
               <Item>HyperbolicTangentArchitectures.RegisterTheorems(ILibrary):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="SineArchitectures">
          <Members>
           <Member Name="RegisterTheorems(MathNet.Symbolics.Library.ILibrary):System.Void">
            <Messages>
             <Message Id="library" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2007-03-25 19:46:45Z" FixCategory="Breaking">
              <Issue>
               <Item>library</Item>
               <Item>SineArchitectures.RegisterTheorems(ILibrary):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
        </Types>
       </Namespace>
      </Namespaces>
     </Module>
    </Modules>
   </Target>
   <Target Name="$(ProjectDir)/src/app/MathNet.Yttrium/Patterns.Toolkit/bin/Debug/MathNet.Yttrium.Patterns.Toolkit.dll">
    <Modules>
     <Module Name="mathnet.yttrium.patterns.toolkit.dll">
      <Messages>
       <Message TypeName="AssembliesShouldHaveValidStrongNames" Category="Microsoft.Design" CheckId="CA2210" Created="2007-03-25 19:46:45Z">
        <Issue Name="NoStrongName">
         <Item>MathNet.Yttrium.Patterns.Toolkit</Item>
        </Issue>
       </Message>
      </Messages>
      <Namespaces>
       <Namespace Name="MathNet.Symbolics.Patterns.Toolkit">
        <Types>
         <Type Name="AlwaysTrueCondition">
          <Members>
           <Member Name="MergeToCoalescedTreeNode(MathNet.Symbolics.Patterns.Toolkit.CoalescedTreeNode,System.Collections.Generic.List`1&lt;MathNet.Symbolics.Patterns.Toolkit.CoalescedTreeNode&gt;):System.Void">
            <Messages>
             <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>System.Collections.Generic.List`1&lt;MathNet.Symbolics.Patterns.Toolkit.CoalescedTreeNode&gt;</Item>
               <Item>AlwaysTrueCondition.MergeToCoalescedTreeNode(CoalescedTreeNode, List`1&lt;MathNet.Symbolics.Patterns.Toolkit.CoalescedTreeNode&gt;):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="AndCondition">
          <Members>
           <Member Name="MergeToCoalescedTreeNode(MathNet.Symbolics.Patterns.Toolkit.CoalescedTreeNode,System.Collections.Generic.List`1&lt;MathNet.Symbolics.Patterns.Toolkit.CoalescedTreeNode&gt;):System.Void">
            <Messages>
             <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>System.Collections.Generic.List`1&lt;MathNet.Symbolics.Patterns.Toolkit.CoalescedTreeNode&gt;</Item>
               <Item>AndCondition.MergeToCoalescedTreeNode(CoalescedTreeNode, List`1&lt;MathNet.Symbolics.Patterns.Toolkit.CoalescedTreeNode&gt;):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="CoalescedChildPattern">
          <Members>
           <Member Name="MatchAll(MathNet.Symbolics.Port,System.Int32):MathNet.Symbolics.Patterns.Toolkit.MatchCollection">
            <Messages>
             <Message Id="score+3" TypeName="OperationsShouldNotOverflow" Category="Microsoft.Usage" CheckId="CA2233" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>score+3</Item>
               <Item>CoalescedChildPattern.MatchAll(Port, Int32):MatchCollection</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="CoalescedTreeNode">
          <Members>
           <Member Name="CreateRootTree():System.Collections.Generic.List`1&lt;MathNet.Symbolics.Patterns.Toolkit.CoalescedTreeNode&gt;">
            <Messages>
             <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>System.Collections.Generic.List`1&lt;MathNet.Symbolics.Patterns.Toolkit.CoalescedTreeNode&gt;</Item>
               <Item>CoalescedTreeNode.CreateRootTree():List`1&lt;MathNet.Symbolics.Patterns.Toolkit.CoalescedTreeNode&gt;</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="CreateRootTree(MathNet.Symbolics.Patterns.Toolkit.CoalescedTreeNode&amp;):System.Collections.Generic.List`1&lt;MathNet.Symbolics.Patterns.Toolkit.CoalescedTreeNode&gt;">
            <Messages>
             <Message Id="0#" TypeName="AvoidOutParameters" Category="Microsoft.Design" CheckId="CA1021" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>root</Item>
              </Issue>
             </Message>
             <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>System.Collections.Generic.List`1&lt;MathNet.Symbolics.Patterns.Toolkit.CoalescedTreeNode&gt;</Item>
               <Item>CoalescedTreeNode.CreateRootTree(CoalescedTreeNode&amp;):List`1&lt;MathNet.Symbolics.Patterns.Toolkit.CoalescedTreeNode&gt;</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="Condition">
          <Members>
           <Member Name="IteratorEquals(System.Collections.Generic.IEnumerator`1&lt;MathNet.Symbolics.Patterns.Toolkit.Condition&gt;,System.Collections.Generic.IEnumerator`1&lt;MathNet.Symbolics.Patterns.Toolkit.Condition&gt;):System.Boolean">
            <Messages>
             <Message Id="0#a" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2007-03-25 19:46:45Z">
              <Issue Name="ParameterOneLetter">
               <Item>Condition.IteratorEquals(IEnumerator`1&lt;MathNet.Symbolics.Patterns.Toolkit.Condition&gt;, IEnumerator`1&lt;MathNet.Symbolics.Patterns.Toolkit.Condition&gt;):Boolean</Item>
               <Item>a</Item>
              </Issue>
             </Message>
             <Message Id="1#b" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2007-03-25 19:46:45Z">
              <Issue Name="ParameterOneLetter">
               <Item>Condition.IteratorEquals(IEnumerator`1&lt;MathNet.Symbolics.Patterns.Toolkit.Condition&gt;, IEnumerator`1&lt;MathNet.Symbolics.Patterns.Toolkit.Condition&gt;):Boolean</Item>
               <Item>b</Item>
              </Issue>
             </Message>
             <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Created="2007-03-25 19:46:45Z" FixCategory="Breaking">
              <Issue>
               <Item>Condition.IteratorEquals(IEnumerator`1&lt;MathNet.Symbolics.Patterns.Toolkit.Condition&gt;, IEnumerator`1&lt;MathNet.Symbolics.Patterns.Toolkit.Condition&gt;):Boolean</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="MergeToCoalescedTreeNode(MathNet.Symbolics.Patterns.Toolkit.CoalescedTreeNode,System.Collections.Generic.List`1&lt;MathNet.Symbolics.Patterns.Toolkit.CoalescedTreeNode&gt;):System.Void">
            <Messages>
             <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>System.Collections.Generic.List`1&lt;MathNet.Symbolics.Patterns.Toolkit.CoalescedTreeNode&gt;</Item>
               <Item>Condition.MergeToCoalescedTreeNode(CoalescedTreeNode, List`1&lt;MathNet.Symbolics.Patterns.Toolkit.CoalescedTreeNode&gt;):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="TryGetExistingNode(MathNet.Symbolics.Patterns.Toolkit.CoalescedTreeNode,MathNet.Symbolics.Patterns.Toolkit.Condition,MathNet.Symbolics.Patterns.Toolkit.CoalescedTreeNode&amp;):System.Boolean">
            <Messages>
             <Message Id="condition" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2007-03-25 19:46:45Z" FixCategory="Breaking">
              <Issue>
               <Item>condition</Item>
               <Item>Condition.TryGetExistingNode(CoalescedTreeNode, Condition, CoalescedTreeNode&amp;):Boolean</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="Group">
          <Messages>
           <Message TypeName="IdentifiersShouldHaveCorrectSuffix" Category="Microsoft.Naming" CheckId="CA1710" Created="2007-03-25 19:46:45Z">
            <Issue>
             <Item>MathNet.Symbolics.Patterns.Toolkit.Group</Item>
             <Item>Collection</Item>
            </Issue>
           </Message>
          </Messages>
          <Members>
           <Member Name="AddRange(System.Collections.Generic.IEnumerable`1&lt;MathNet.Numerics.Tuple`2&lt;MathNet.Symbolics.Signal,MathNet.Symbolics.Port&gt;&gt;):System.Void">
            <Messages>
             <Message TypeName="DoNotNestGenericTypesInMemberSignatures" Category="Microsoft.Design" CheckId="CA1006" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>Group.AddRange(IEnumerable`1&lt;MathNet.Numerics.Tuple`2&lt;MathNet.Symbolics.Signal,MathNet.Symbolics.Port&gt;&gt;):Void</Item>
               <Item>System.Collections.Generic.IEnumerable`1&lt;MathNet.Numerics.Tuple`2&lt;MathNet.Symbolics.Signal,MathNet.Symbolics.Port&gt;&gt;</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="GroupCollection">
          <Members>
           <Member Name="Append(System.String,System.Collections.Generic.IEnumerable`1&lt;MathNet.Numerics.Tuple`2&lt;MathNet.Symbolics.Signal,MathNet.Symbolics.Port&gt;&gt;):System.Void">
            <Messages>
             <Message TypeName="DoNotNestGenericTypesInMemberSignatures" Category="Microsoft.Design" CheckId="CA1006" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>GroupCollection.Append(String, IEnumerable`1&lt;MathNet.Numerics.Tuple`2&lt;MathNet.Symbolics.Signal,MathNet.Symbolics.Port&gt;&gt;):Void</Item>
               <Item>System.Collections.Generic.IEnumerable`1&lt;MathNet.Numerics.Tuple`2&lt;MathNet.Symbolics.Signal,MathNet.Symbolics.Port&gt;&gt;</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="GetKeyForItem(MathNet.Symbolics.Patterns.Toolkit.Group):System.String">
            <Messages>
             <Message Id="0#" TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>group</Item>
               <Item>GroupCollection.GetKeyForItem(Group):String</Item>
               <Item>item</Item>
               <Item>KeyedCollection`2&lt;System.String,MathNet.Symbolics.Patterns.Toolkit.Group&gt;.GetKeyForItem(Group):String</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="Match">
          <Messages>
           <Message TypeName="IdentifiersShouldHaveCorrectSuffix" Category="Microsoft.Naming" CheckId="CA1710" Created="2007-03-25 19:46:45Z">
            <Issue>
             <Item>MathNet.Symbolics.Patterns.Toolkit.Match</Item>
             <Item>Collection</Item>
            </Issue>
           </Message>
          </Messages>
          <Members>
           <Member Name="AppendGroup(System.String,System.Collections.Generic.IList`1&lt;MathNet.Numerics.Tuple`2&lt;MathNet.Symbolics.Signal,MathNet.Symbolics.Port&gt;&gt;):System.Void">
            <Messages>
             <Message TypeName="DoNotNestGenericTypesInMemberSignatures" Category="Microsoft.Design" CheckId="CA1006" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>Match.AppendGroup(String, IList`1&lt;MathNet.Numerics.Tuple`2&lt;MathNet.Symbolics.Signal,MathNet.Symbolics.Port&gt;&gt;):Void</Item>
               <Item>System.Collections.Generic.IList`1&lt;MathNet.Numerics.Tuple`2&lt;MathNet.Symbolics.Signal,MathNet.Symbolics.Port&gt;&gt;</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="OrCondition">
          <Members>
           <Member Name="MergeToCoalescedTreeNode(MathNet.Symbolics.Patterns.Toolkit.CoalescedTreeNode,System.Collections.Generic.List`1&lt;MathNet.Symbolics.Patterns.Toolkit.CoalescedTreeNode&gt;):System.Void">
            <Messages>
             <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>System.Collections.Generic.List`1&lt;MathNet.Symbolics.Patterns.Toolkit.CoalescedTreeNode&gt;</Item>
               <Item>OrCondition.MergeToCoalescedTreeNode(CoalescedTreeNode, List`1&lt;MathNet.Symbolics.Patterns.Toolkit.CoalescedTreeNode&gt;):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="TreePattern">
          <Members>
           <Member Name="MergeToCoalescedTree(MathNet.Symbolics.MathIdentifier,System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Patterns.Toolkit.CoalescedTreeNode&gt;):System.Void">
            <Messages>
             <Message Id="atc" TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>TreePattern.MergeToCoalescedTree(MathIdentifier, IList`1&lt;MathNet.Symbolics.Patterns.Toolkit.CoalescedTreeNode&gt;):Void</Item>
               <Item>atc</Item>
               <Item>MathNet.Symbolics.Patterns.Toolkit.AlwaysTrueCondition</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
        </Types>
       </Namespace>
      </Namespaces>
     </Module>
    </Modules>
   </Target>
   <Target Name="$(ProjectDir)/src/app/MathNet.Yttrium/Repository.Contracts/bin/Debug/MathNet.Yttrium.Repository.Contracts.dll">
    <Modules>
     <Module Name="mathnet.yttrium.repository.contracts.dll">
      <Messages>
       <Message TypeName="AssembliesShouldHaveValidStrongNames" Category="Microsoft.Design" CheckId="CA2210" Created="2007-03-25 19:46:45Z">
        <Issue Name="NoStrongName">
         <Item>MathNet.Yttrium.Repository.Contracts</Item>
        </Issue>
       </Message>
      </Messages>
     </Module>
    </Modules>
   </Target>
   <Target Name="$(ProjectDir)/src/app/MathNet.Yttrium/Repository.Service/bin/Debug/MathNet.Yttrium.Repository.Service.dll">
    <Modules>
     <Module Name="mathnet.yttrium.repository.service.dll">
      <Messages>
       <Message TypeName="AssembliesShouldHaveValidStrongNames" Category="Microsoft.Design" CheckId="CA2210" Created="2007-03-25 19:46:45Z">
        <Issue Name="NoStrongName">
         <Item>MathNet.Yttrium.Repository.Service</Item>
        </Issue>
       </Message>
      </Messages>
      <Namespaces>
       <Namespace Name="MathNet.Symbolics">
        <Types>
         <Type Name="RepositoryFactory">
          <Messages>
           <Message TypeName="AvoidUninstantiatedInternalClasses" Category="Microsoft.Performance" CheckId="CA1812" Created="2007-03-25 19:46:45Z">
            <Issue>
             <Item>MathNet.Symbolics.RepositoryFactory</Item>
            </Issue>
           </Message>
          </Messages>
         </Type>
        </Types>
       </Namespace>
       <Namespace Name="MathNet.Symbolics.Repository">
        <Types>
         <Type Name="SignalCache">
          <Messages>
           <Message TypeName="IdentifiersShouldHaveCorrectSuffix" Category="Microsoft.Naming" CheckId="CA1710" Created="2007-03-25 19:46:45Z">
            <Issue>
             <Item>MathNet.Symbolics.Repository.SignalCache</Item>
             <Item>Dictionary</Item>
            </Issue>
           </Message>
           <Message TypeName="MarkISerializableTypesWithSerializable" Category="Microsoft.Usage" CheckId="CA2237" Created="2007-03-25 19:46:45Z">
            <Issue Certainty="75" Level="Warning">
             <Item>SignalCache</Item>
            </Issue>
           </Message>
          </Messages>
         </Type>
        </Types>
       </Namespace>
      </Namespaces>
     </Module>
    </Modules>
   </Target>
   <Target Name="$(ProjectDir)/src/app/MathNet.Yttrium/Simulation.Contracts/bin/Debug/MathNet.Yttrium.Simulation.Contracts.dll">
    <Modules>
     <Module Name="mathnet.yttrium.simulation.contracts.dll">
      <Messages>
       <Message TypeName="AssembliesShouldHaveValidStrongNames" Category="Microsoft.Design" CheckId="CA2210" Created="2007-03-25 19:46:45Z">
        <Issue Name="NoStrongName">
         <Item>MathNet.Yttrium.Simulation.Contracts</Item>
        </Issue>
       </Message>
      </Messages>
      <Namespaces>
       <Namespace Name="MathNet.Symbolics.Simulation">
        <Types>
         <Type Name="IScheduler">
          <Members>
           <Member Name="SimulateFor(System.TimeSpan):System.TimeSpan">
            <Messages>
             <Message Id="0#timespan" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2007-03-25 19:46:45Z">
              <Issue Name="Parameter">
               <Item>IScheduler.SimulateFor(TimeSpan):TimeSpan</Item>
               <Item>timespan</Item>
               <Item>timespan</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="ISimulationMediator">
          <Members>
           <Member Name="CreateSimulationApartement(MathNet.Symbolics.Simulation.IScheduler):System.Void">
            <Messages>
             <Message Id="Apartement" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2007-03-25 19:46:45Z">
              <Issue Name="Member">
               <Item>Apartement</Item>
               <Item>ISimulationMediator.CreateSimulationApartement(IScheduler):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="GetCurrentScheduler():MathNet.Symbolics.Simulation.IScheduler">
            <Messages>
             <Message TypeName="UsePropertiesWhereAppropriate" Category="Microsoft.Design" CheckId="CA1024" Created="2007-03-25 19:46:45Z">
              <Issue Certainty="50">
               <Item>GetCurrentScheduler</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="SimulateFor(System.TimeSpan):System.TimeSpan">
            <Messages>
             <Message Id="0#timespan" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2007-03-25 19:46:45Z">
              <Issue Name="Parameter">
               <Item>ISimulationMediator.SimulateFor(TimeSpan):TimeSpan</Item>
               <Item>timespan</Item>
               <Item>timespan</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
        </Types>
       </Namespace>
      </Namespaces>
     </Module>
    </Modules>
   </Target>
   <Target Name="$(ProjectDir)/src/app/MathNet.Yttrium/Simulation.Service/bin/Debug/MathNet.Yttrium.Simulation.Service.dll">
    <Modules>
     <Module Name="mathnet.yttrium.simulation.service.dll">
      <Messages>
       <Message TypeName="AssembliesShouldHaveValidStrongNames" Category="Microsoft.Design" CheckId="CA2210" Created="2007-03-25 19:46:45Z">
        <Issue Name="NoStrongName">
         <Item>MathNet.Yttrium.Simulation.Service</Item>
        </Issue>
       </Message>
      </Messages>
      <Namespaces>
       <Namespace Name="MathNet.Symbolics">
        <Types>
         <Type Name="SimulationFactory">
          <Messages>
           <Message TypeName="AvoidUninstantiatedInternalClasses" Category="Microsoft.Performance" CheckId="CA1812" Created="2007-03-25 19:46:45Z">
            <Issue>
             <Item>MathNet.Symbolics.SimulationFactory</Item>
            </Issue>
           </Message>
          </Messages>
         </Type>
        </Types>
       </Namespace>
       <Namespace Name="MathNet.Symbolics.Simulation">
        <Types>
         <Type Name="ImmediateScheduler">
          <Members>
           <Member Name="_phase">
            <Messages>
             <Message TypeName="AvoidUnusedPrivateFields" Category="Microsoft.Performance" CheckId="CA1823" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>ImmediateScheduler._phase</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="SchedulerEventItem">
          <Messages>
           <Message TypeName="OverrideEqualsAndOperatorEqualsOnValueTypes" Category="Microsoft.Performance" CheckId="CA1815" Created="2007-03-25 19:46:45Z">
            <Issue Name="Equals">
             <Item>MathNet.Symbolics.Simulation.SchedulerEventItem</Item>
            </Issue>
            <Issue Name="op_Equality">
             <Item>MathNet.Symbolics.Simulation.SchedulerEventItem</Item>
            </Issue>
           </Message>
          </Messages>
         </Type>
         <Type Name="ScheduleStore">
          <Members>
           <Member Name="ProgressTime(System.TimeSpan,MathNet.Symbolics.Simulation.IScheduler):System.Void">
            <Messages>
             <Message Id="0#timespan" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2007-03-25 19:46:45Z">
              <Issue Name="Parameter">
               <Item>ScheduleStore.ProgressTime(TimeSpan, IScheduler):Void</Item>
               <Item>timespan</Item>
               <Item>timespan</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="RemoveAllAfterIncluding(System.Collections.Generic.LinkedList`1&lt;MathNet.Symbolics.Simulation.SchedulerEventItem&gt;,System.Collections.Generic.LinkedListNode`1&lt;MathNet.Symbolics.Simulation.SchedulerEventItem&gt;):System.Void">
            <Messages>
             <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Created="2007-03-25 19:46:45Z" FixCategory="NonBreaking">
              <Issue>
               <Item>ScheduleStore.RemoveAllAfterIncluding(LinkedList`1&lt;MathNet.Symbolics.Simulation.SchedulerEventItem&gt;, LinkedListNode`1&lt;MathNet.Symbolics.Simulation.SchedulerEventItem&gt;):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="Timeline">
          <Members>
           <Member Name="TryNextEventTime(System.TimeSpan&amp;):System.Boolean">
            <Messages>
             <Message Id="0#timespan" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2007-03-25 19:46:45Z">
              <Issue Name="Parameter">
               <Item>Timeline.TryNextEventTime(TimeSpan&amp;):Boolean</Item>
               <Item>timespan</Item>
               <Item>timespan</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
        </Types>
       </Namespace>
      </Namespaces>
     </Module>
    </Modules>
   </Target>
   <Target Name="$(ProjectDir)/src/app/MathNet.Yttrium/SystemBuilder.Toolkit/bin/Debug/MathNet.Yttrium.SystemBuilder.Toolkit.dll">
    <Modules>
     <Module Name="mathnet.yttrium.systembuilder.toolkit.dll">
      <Messages>
       <Message TypeName="AssembliesShouldHaveValidStrongNames" Category="Microsoft.Design" CheckId="CA2210" Created="2007-03-25 19:46:45Z">
        <Issue Name="NoStrongName">
         <Item>MathNet.Yttrium.SystemBuilder.Toolkit</Item>
        </Issue>
       </Message>
      </Messages>
      <Namespaces>
       <Namespace Name="MathNet.Symbolics.SystemBuilder.Toolkit">
        <Types>
         <Type Name="BuilderStateMachine">
          <Members>
           <Member Name="AdvanceTo(MathNet.Symbolics.SystemBuilder.Toolkit.BuilderState):System.Void">
            <Messages>
             <Message Id="System.InvalidOperationException.#ctor(System.String)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>BuilderStateMachine.AdvanceTo(BuilderState):Void</Item>
               <Item>1</Item>
               <Item>InvalidOperationException.InvalidOperationException(String)</Item>
               <Item>Can't move from state ____ to state ____.</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="CustomDataPack`1">
          <Members>
           <Member Name="Pack(T,System.Collections.Generic.IDictionary`2&lt;System.Guid,System.Guid&gt;,System.Collections.Generic.IDictionary`2&lt;System.Guid,System.Guid&gt;):MathNet.Symbolics.SystemBuilder.Toolkit.CustomDataPack`1&lt;T&gt;">
            <Messages>
             <Message TypeName="DoNotDeclareStaticMembersOnGenericTypes" Category="Microsoft.Design" CheckId="CA1000" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>CustomDataPack`1.Pack(T, IDictionary`2&lt;System.Guid,System.Guid&gt;, IDictionary`2&lt;System.Guid,System.Guid&gt;):CustomDataPack`1&lt;T&gt;</Item>
               <Item>MathNet.Symbolics.SystemBuilder.Toolkit.CustomDataPack`1</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Repack(System.String,System.Collections.Generic.IDictionary`2&lt;System.Guid,System.Guid&gt;,System.Collections.Generic.IDictionary`2&lt;System.Guid,System.Guid&gt;):MathNet.Symbolics.SystemBuilder.Toolkit.CustomDataPack`1&lt;T&gt;">
            <Messages>
             <Message TypeName="DoNotDeclareStaticMembersOnGenericTypes" Category="Microsoft.Design" CheckId="CA1000" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>CustomDataPack`1.Repack(String, IDictionary`2&lt;System.Guid,System.Guid&gt;, IDictionary`2&lt;System.Guid,System.Guid&gt;):CustomDataPack`1&lt;T&gt;</Item>
               <Item>MathNet.Symbolics.SystemBuilder.Toolkit.CustomDataPack`1</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="XmlSystemReader+StateMachine">
          <Members>
           <Member Name=".ctor(System.Xml.XmlReader)">
            <Messages>
             <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>StateMachine.StateMachine(XmlReader)</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Reader">
            <Accessors>
             <Accessor Name="get_Reader():System.Xml.XmlReader">
              <Messages>
               <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Created="2007-03-25 19:46:45Z">
                <Issue>
                 <Item>StateMachine.get_Reader():XmlReader</Item>
                </Issue>
               </Message>
              </Messages>
             </Accessor>
            </Accessors>
           </Member>
          </Members>
         </Type>
         <Type Name="XmlSystemWriter+StateMachine">
          <Members>
           <Member Name="Writer">
            <Accessors>
             <Accessor Name="get_Writer():System.Xml.XmlWriter">
              <Messages>
               <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Created="2007-03-25 19:46:45Z">
                <Issue>
                 <Item>StateMachine.get_Writer():XmlWriter</Item>
                </Issue>
               </Message>
              </Messages>
             </Accessor>
            </Accessors>
           </Member>
          </Members>
         </Type>
        </Types>
       </Namespace>
      </Namespaces>
     </Module>
    </Modules>
   </Target>
   <Target Name="$(ProjectDir)/src/app/MathNet.Yttrium/Traversing.Contracts/bin/Debug/MathNet.Yttrium.Traversing.Contracts.dll">
    <Modules>
     <Module Name="mathnet.yttrium.traversing.contracts.dll">
      <Messages>
       <Message TypeName="AssembliesShouldHaveValidStrongNames" Category="Microsoft.Design" CheckId="CA2210" Created="2007-03-25 19:46:45Z">
        <Issue Name="NoStrongName">
         <Item>MathNet.Yttrium.Traversing.Contracts</Item>
        </Issue>
       </Message>
      </Messages>
      <Namespaces>
       <Namespace Name="MathNet.Symbolics.Exceptions">
        <Types>
         <Type Name="TraversingException">
          <Messages>
           <Message TypeName="ImplementStandardExceptionConstructors" Category="Microsoft.Design" CheckId="CA1032" Created="2007-03-25 19:46:45Z">
            <Issue>
             <Item>MathNet.Symbolics.Exceptions.TraversingException</Item>
             <Item>public TraversingException()</Item>
            </Issue>
           </Message>
          </Messages>
         </Type>
        </Types>
       </Namespace>
       <Namespace Name="MathNet.Symbolics.Traversing">
        <Types>
         <Type Name="IPortPathCollectVisitor">
          <Members>
           <Member Name="Paths">
            <Messages>
             <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>System.Collections.Generic.List`1&lt;System.Collections.Generic.List`1&lt;MathNet.Symbolics.Port&gt;&gt;</Item>
               <Item>IPortPathCollectVisitor.Paths:List`1&lt;System.Collections.Generic.List`1&lt;MathNet.Symbolics.Port&gt;&gt;</Item>
              </Issue>
             </Message>
             <Message TypeName="DoNotNestGenericTypesInMemberSignatures" Category="Microsoft.Design" CheckId="CA1006" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>IPortPathCollectVisitor.Paths:List`1&lt;System.Collections.Generic.List`1&lt;MathNet.Symbolics.Port&gt;&gt;</Item>
               <Item>System.Collections.Generic.List`1&lt;System.Collections.Generic.List`1&lt;MathNet.Symbolics.Port&gt;&gt;</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="IScanner">
          <Members>
           <Member Name="ExistsPort(MathNet.Symbolics.Port,System.Predicate`1&lt;MathNet.Symbolics.Port&gt;,System.Boolean,MathNet.Symbolics.Port&amp;,MathNet.Symbolics.Signal&amp;):System.Boolean">
            <Messages>
             <Message Id="3#" TypeName="AvoidOutParameters" Category="Microsoft.Design" CheckId="CA1021" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>foundPort</Item>
              </Issue>
             </Message>
             <Message Id="4#" TypeName="AvoidOutParameters" Category="Microsoft.Design" CheckId="CA1021" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>foundPortTarget</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="ExistsPort(MathNet.Symbolics.Signal,System.Predicate`1&lt;MathNet.Symbolics.Port&gt;,System.Boolean,MathNet.Symbolics.Port&amp;,MathNet.Symbolics.Signal&amp;):System.Boolean">
            <Messages>
             <Message Id="3#" TypeName="AvoidOutParameters" Category="Microsoft.Design" CheckId="CA1021" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>foundPort</Item>
              </Issue>
             </Message>
             <Message Id="4#" TypeName="AvoidOutParameters" Category="Microsoft.Design" CheckId="CA1021" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>foundPortTarget</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="ExistsPort(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Signal&gt;,System.Predicate`1&lt;MathNet.Symbolics.Port&gt;,System.Boolean,MathNet.Symbolics.Port&amp;,MathNet.Symbolics.Signal&amp;):System.Boolean">
            <Messages>
             <Message Id="3#" TypeName="AvoidOutParameters" Category="Microsoft.Design" CheckId="CA1021" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>foundPort</Item>
              </Issue>
             </Message>
             <Message Id="4#" TypeName="AvoidOutParameters" Category="Microsoft.Design" CheckId="CA1021" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>foundPortTarget</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="ExistsSignal(MathNet.Symbolics.Port,System.Predicate`1&lt;MathNet.Symbolics.Signal&gt;,System.Boolean,MathNet.Symbolics.Signal&amp;,MathNet.Symbolics.Port&amp;):System.Boolean">
            <Messages>
             <Message Id="3#" TypeName="AvoidOutParameters" Category="Microsoft.Design" CheckId="CA1021" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>foundSignal</Item>
              </Issue>
             </Message>
             <Message Id="4#" TypeName="AvoidOutParameters" Category="Microsoft.Design" CheckId="CA1021" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>foundSignalTarget</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="ExistsSignal(MathNet.Symbolics.Signal,System.Predicate`1&lt;MathNet.Symbolics.Signal&gt;,System.Boolean,MathNet.Symbolics.Signal&amp;,MathNet.Symbolics.Port&amp;):System.Boolean">
            <Messages>
             <Message Id="3#" TypeName="AvoidOutParameters" Category="Microsoft.Design" CheckId="CA1021" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>foundSignal</Item>
              </Issue>
             </Message>
             <Message Id="4#" TypeName="AvoidOutParameters" Category="Microsoft.Design" CheckId="CA1021" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>foundSignalTarget</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="ExistsSignal(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Signal&gt;,System.Predicate`1&lt;MathNet.Symbolics.Signal&gt;,System.Boolean,MathNet.Symbolics.Signal&amp;,MathNet.Symbolics.Port&amp;):System.Boolean">
            <Messages>
             <Message Id="3#" TypeName="AvoidOutParameters" Category="Microsoft.Design" CheckId="CA1021" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>foundSignal</Item>
              </Issue>
             </Message>
             <Message Id="4#" TypeName="AvoidOutParameters" Category="Microsoft.Design" CheckId="CA1021" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>foundSignalTarget</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="FindAll(MathNet.Symbolics.Port,System.Boolean,System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Signal&gt;&amp;,System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Port&gt;&amp;):System.Void">
            <Messages>
             <Message Id="2#" TypeName="AvoidOutParameters" Category="Microsoft.Design" CheckId="CA1021" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>signals</Item>
              </Issue>
             </Message>
             <Message Id="3#" TypeName="AvoidOutParameters" Category="Microsoft.Design" CheckId="CA1021" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>ports</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="FindAll(MathNet.Symbolics.Signal,System.Boolean,System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Signal&gt;&amp;,System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Port&gt;&amp;):System.Void">
            <Messages>
             <Message Id="2#" TypeName="AvoidOutParameters" Category="Microsoft.Design" CheckId="CA1021" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>signals</Item>
              </Issue>
             </Message>
             <Message Id="3#" TypeName="AvoidOutParameters" Category="Microsoft.Design" CheckId="CA1021" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>ports</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="FindAll(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Signal&gt;,System.Boolean,System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Signal&gt;&amp;,System.Collections.Generic.IList`1&lt;MathNet.Symbolics.Port&gt;&amp;):System.Void">
            <Messages>
             <Message Id="2#" TypeName="AvoidOutParameters" Category="Microsoft.Design" CheckId="CA1021" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>signals</Item>
              </Issue>
             </Message>
             <Message Id="3#" TypeName="AvoidOutParameters" Category="Microsoft.Design" CheckId="CA1021" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>ports</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="FindAllPortPathsFrom(MathNet.Symbolics.Port,MathNet.Symbolics.Port,System.Boolean):System.Collections.Generic.List`1&lt;System.Collections.Generic.List`1&lt;MathNet.Symbolics.Port&gt;&gt;">
            <Messages>
             <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>System.Collections.Generic.List`1&lt;System.Collections.Generic.List`1&lt;MathNet.Symbolics.Port&gt;&gt;</Item>
               <Item>IScanner.FindAllPortPathsFrom(Port, Port, Boolean):List`1&lt;System.Collections.Generic.List`1&lt;MathNet.Symbolics.Port&gt;&gt;</Item>
              </Issue>
             </Message>
             <Message TypeName="DoNotNestGenericTypesInMemberSignatures" Category="Microsoft.Design" CheckId="CA1006" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>IScanner.FindAllPortPathsFrom(Port, Port, Boolean):List`1&lt;System.Collections.Generic.List`1&lt;MathNet.Symbolics.Port&gt;&gt;</Item>
               <Item>System.Collections.Generic.List`1&lt;System.Collections.Generic.List`1&lt;MathNet.Symbolics.Port&gt;&gt;</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="FindAllPortPathsFrom(MathNet.Symbolics.Signal,MathNet.Symbolics.Port,System.Boolean):System.Collections.Generic.List`1&lt;System.Collections.Generic.List`1&lt;MathNet.Symbolics.Port&gt;&gt;">
            <Messages>
             <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>System.Collections.Generic.List`1&lt;System.Collections.Generic.List`1&lt;MathNet.Symbolics.Port&gt;&gt;</Item>
               <Item>IScanner.FindAllPortPathsFrom(Signal, Port, Boolean):List`1&lt;System.Collections.Generic.List`1&lt;MathNet.Symbolics.Port&gt;&gt;</Item>
              </Issue>
             </Message>
             <Message TypeName="DoNotNestGenericTypesInMemberSignatures" Category="Microsoft.Design" CheckId="CA1006" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>IScanner.FindAllPortPathsFrom(Signal, Port, Boolean):List`1&lt;System.Collections.Generic.List`1&lt;MathNet.Symbolics.Port&gt;&gt;</Item>
               <Item>System.Collections.Generic.List`1&lt;System.Collections.Generic.List`1&lt;MathNet.Symbolics.Port&gt;&gt;</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="FindAllPortPathsFrom(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Signal&gt;,MathNet.Symbolics.Port,System.Boolean):System.Collections.Generic.List`1&lt;System.Collections.Generic.List`1&lt;MathNet.Symbolics.Port&gt;&gt;">
            <Messages>
             <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>System.Collections.Generic.List`1&lt;System.Collections.Generic.List`1&lt;MathNet.Symbolics.Port&gt;&gt;</Item>
               <Item>IScanner.FindAllPortPathsFrom(IEnumerable`1&lt;MathNet.Symbolics.Signal&gt;, Port, Boolean):List`1&lt;System.Collections.Generic.List`1&lt;MathNet.Symbolics.Port&gt;&gt;</Item>
              </Issue>
             </Message>
             <Message TypeName="DoNotNestGenericTypesInMemberSignatures" Category="Microsoft.Design" CheckId="CA1006" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>IScanner.FindAllPortPathsFrom(IEnumerable`1&lt;MathNet.Symbolics.Signal&gt;, Port, Boolean):List`1&lt;System.Collections.Generic.List`1&lt;MathNet.Symbolics.Port&gt;&gt;</Item>
               <Item>System.Collections.Generic.List`1&lt;System.Collections.Generic.List`1&lt;MathNet.Symbolics.Port&gt;&gt;</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="FindAllSignalPathsFrom(MathNet.Symbolics.Port,MathNet.Symbolics.Signal,System.Boolean):System.Collections.Generic.List`1&lt;System.Collections.Generic.List`1&lt;MathNet.Symbolics.Signal&gt;&gt;">
            <Messages>
             <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>System.Collections.Generic.List`1&lt;System.Collections.Generic.List`1&lt;MathNet.Symbolics.Signal&gt;&gt;</Item>
               <Item>IScanner.FindAllSignalPathsFrom(Port, Signal, Boolean):List`1&lt;System.Collections.Generic.List`1&lt;MathNet.Symbolics.Signal&gt;&gt;</Item>
              </Issue>
             </Message>
             <Message TypeName="DoNotNestGenericTypesInMemberSignatures" Category="Microsoft.Design" CheckId="CA1006" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>IScanner.FindAllSignalPathsFrom(Port, Signal, Boolean):List`1&lt;System.Collections.Generic.List`1&lt;MathNet.Symbolics.Signal&gt;&gt;</Item>
               <Item>System.Collections.Generic.List`1&lt;System.Collections.Generic.List`1&lt;MathNet.Symbolics.Signal&gt;&gt;</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="FindAllSignalPathsFrom(MathNet.Symbolics.Signal,MathNet.Symbolics.Signal,System.Boolean):System.Collections.Generic.List`1&lt;System.Collections.Generic.List`1&lt;MathNet.Symbolics.Signal&gt;&gt;">
            <Messages>
             <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>System.Collections.Generic.List`1&lt;System.Collections.Generic.List`1&lt;MathNet.Symbolics.Signal&gt;&gt;</Item>
               <Item>IScanner.FindAllSignalPathsFrom(Signal, Signal, Boolean):List`1&lt;System.Collections.Generic.List`1&lt;MathNet.Symbolics.Signal&gt;&gt;</Item>
              </Issue>
             </Message>
             <Message TypeName="DoNotNestGenericTypesInMemberSignatures" Category="Microsoft.Design" CheckId="CA1006" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>IScanner.FindAllSignalPathsFrom(Signal, Signal, Boolean):List`1&lt;System.Collections.Generic.List`1&lt;MathNet.Symbolics.Signal&gt;&gt;</Item>
               <Item>System.Collections.Generic.List`1&lt;System.Collections.Generic.List`1&lt;MathNet.Symbolics.Signal&gt;&gt;</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="FindAllSignalPathsFrom(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Signal&gt;,MathNet.Symbolics.Signal,System.Boolean):System.Collections.Generic.List`1&lt;System.Collections.Generic.List`1&lt;MathNet.Symbolics.Signal&gt;&gt;">
            <Messages>
             <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>System.Collections.Generic.List`1&lt;System.Collections.Generic.List`1&lt;MathNet.Symbolics.Signal&gt;&gt;</Item>
               <Item>IScanner.FindAllSignalPathsFrom(IEnumerable`1&lt;MathNet.Symbolics.Signal&gt;, Signal, Boolean):List`1&lt;System.Collections.Generic.List`1&lt;MathNet.Symbolics.Signal&gt;&gt;</Item>
              </Issue>
             </Message>
             <Message TypeName="DoNotNestGenericTypesInMemberSignatures" Category="Microsoft.Design" CheckId="CA1006" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>IScanner.FindAllSignalPathsFrom(IEnumerable`1&lt;MathNet.Symbolics.Signal&gt;, Signal, Boolean):List`1&lt;System.Collections.Generic.List`1&lt;MathNet.Symbolics.Signal&gt;&gt;</Item>
               <Item>System.Collections.Generic.List`1&lt;System.Collections.Generic.List`1&lt;MathNet.Symbolics.Signal&gt;&gt;</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="TrueForAllPorts(MathNet.Symbolics.Port,System.Predicate`1&lt;MathNet.Symbolics.Port&gt;,System.Boolean,MathNet.Symbolics.Port&amp;,MathNet.Symbolics.Signal&amp;):System.Boolean">
            <Messages>
             <Message Id="3#" TypeName="AvoidOutParameters" Category="Microsoft.Design" CheckId="CA1021" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>failedPort</Item>
              </Issue>
             </Message>
             <Message Id="4#" TypeName="AvoidOutParameters" Category="Microsoft.Design" CheckId="CA1021" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>failedPortTarget</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="TrueForAllPorts(MathNet.Symbolics.Signal,System.Predicate`1&lt;MathNet.Symbolics.Port&gt;,System.Boolean,MathNet.Symbolics.Port&amp;,MathNet.Symbolics.Signal&amp;):System.Boolean">
            <Messages>
             <Message Id="3#" TypeName="AvoidOutParameters" Category="Microsoft.Design" CheckId="CA1021" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>failedPort</Item>
              </Issue>
             </Message>
             <Message Id="4#" TypeName="AvoidOutParameters" Category="Microsoft.Design" CheckId="CA1021" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>failedPortTarget</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="TrueForAllPorts(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Signal&gt;,System.Predicate`1&lt;MathNet.Symbolics.Port&gt;,System.Boolean,MathNet.Symbolics.Port&amp;,MathNet.Symbolics.Signal&amp;):System.Boolean">
            <Messages>
             <Message Id="3#" TypeName="AvoidOutParameters" Category="Microsoft.Design" CheckId="CA1021" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>failedPort</Item>
              </Issue>
             </Message>
             <Message Id="4#" TypeName="AvoidOutParameters" Category="Microsoft.Design" CheckId="CA1021" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>failedPortTarget</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="TrueForAllSignals(MathNet.Symbolics.Port,System.Predicate`1&lt;MathNet.Symbolics.Signal&gt;,System.Boolean,MathNet.Symbolics.Signal&amp;,MathNet.Symbolics.Port&amp;):System.Boolean">
            <Messages>
             <Message Id="3#" TypeName="AvoidOutParameters" Category="Microsoft.Design" CheckId="CA1021" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>failedSignal</Item>
              </Issue>
             </Message>
             <Message Id="4#" TypeName="AvoidOutParameters" Category="Microsoft.Design" CheckId="CA1021" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>failedSignalTarget</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="TrueForAllSignals(MathNet.Symbolics.Signal,System.Predicate`1&lt;MathNet.Symbolics.Signal&gt;,System.Boolean,MathNet.Symbolics.Signal&amp;,MathNet.Symbolics.Port&amp;):System.Boolean">
            <Messages>
             <Message Id="3#" TypeName="AvoidOutParameters" Category="Microsoft.Design" CheckId="CA1021" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>failedSignal</Item>
              </Issue>
             </Message>
             <Message Id="4#" TypeName="AvoidOutParameters" Category="Microsoft.Design" CheckId="CA1021" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>failedSignalTarget</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="TrueForAllSignals(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Signal&gt;,System.Predicate`1&lt;MathNet.Symbolics.Signal&gt;,System.Boolean,MathNet.Symbolics.Signal&amp;,MathNet.Symbolics.Port&amp;):System.Boolean">
            <Messages>
             <Message Id="3#" TypeName="AvoidOutParameters" Category="Microsoft.Design" CheckId="CA1021" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>failedSignal</Item>
              </Issue>
             </Message>
             <Message Id="4#" TypeName="AvoidOutParameters" Category="Microsoft.Design" CheckId="CA1021" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>failedSignalTarget</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="ISignalPathCollectVisitor">
          <Members>
           <Member Name="Paths">
            <Messages>
             <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>System.Collections.Generic.List`1&lt;System.Collections.Generic.List`1&lt;MathNet.Symbolics.Signal&gt;&gt;</Item>
               <Item>ISignalPathCollectVisitor.Paths:List`1&lt;System.Collections.Generic.List`1&lt;MathNet.Symbolics.Signal&gt;&gt;</Item>
              </Issue>
             </Message>
             <Message TypeName="DoNotNestGenericTypesInMemberSignatures" Category="Microsoft.Design" CheckId="CA1006" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>ISignalPathCollectVisitor.Paths:List`1&lt;System.Collections.Generic.List`1&lt;MathNet.Symbolics.Signal&gt;&gt;</Item>
               <Item>System.Collections.Generic.List`1&lt;System.Collections.Generic.List`1&lt;MathNet.Symbolics.Signal&gt;&gt;</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
        </Types>
       </Namespace>
      </Namespaces>
     </Module>
    </Modules>
   </Target>
   <Target Name="$(ProjectDir)/src/app/MathNet.Yttrium/Traversing.Service/bin/Debug/MathNet.Yttrium.Traversing.Service.dll">
    <Modules>
     <Module Name="mathnet.yttrium.traversing.service.dll">
      <Messages>
       <Message TypeName="AssembliesShouldHaveValidStrongNames" Category="Microsoft.Design" CheckId="CA2210" Created="2007-03-25 19:46:45Z">
        <Issue Name="NoStrongName">
         <Item>MathNet.Yttrium.Traversing.Service</Item>
        </Issue>
       </Message>
      </Messages>
      <Namespaces>
       <Namespace Name="MathNet.Symbolics">
        <Types>
         <Type Name="AllPathsStrategyFactory">
          <Messages>
           <Message TypeName="AvoidUninstantiatedInternalClasses" Category="Microsoft.Performance" CheckId="CA1812" Created="2007-03-25 19:46:45Z">
            <Issue>
             <Item>MathNet.Symbolics.AllPathsStrategyFactory</Item>
            </Issue>
           </Message>
          </Messages>
         </Type>
         <Type Name="AllPortsStrategyFactory">
          <Messages>
           <Message TypeName="AvoidUninstantiatedInternalClasses" Category="Microsoft.Performance" CheckId="CA1812" Created="2007-03-25 19:46:45Z">
            <Issue>
             <Item>MathNet.Symbolics.AllPortsStrategyFactory</Item>
            </Issue>
           </Message>
          </Messages>
         </Type>
         <Type Name="AllSignalsStrategyFactory">
          <Messages>
           <Message TypeName="AvoidUninstantiatedInternalClasses" Category="Microsoft.Performance" CheckId="CA1812" Created="2007-03-25 19:46:45Z">
            <Issue>
             <Item>MathNet.Symbolics.AllSignalsStrategyFactory</Item>
            </Issue>
           </Message>
          </Messages>
         </Type>
         <Type Name="AllSpanningTreeStrategyFactory">
          <Messages>
           <Message TypeName="AvoidUninstantiatedInternalClasses" Category="Microsoft.Performance" CheckId="CA1812" Created="2007-03-25 19:46:45Z">
            <Issue>
             <Item>MathNet.Symbolics.AllSpanningTreeStrategyFactory</Item>
            </Issue>
           </Message>
          </Messages>
         </Type>
         <Type Name="AllStrategyFactory">
          <Messages>
           <Message TypeName="AvoidUninstantiatedInternalClasses" Category="Microsoft.Performance" CheckId="CA1812" Created="2007-03-25 19:46:45Z">
            <Issue>
             <Item>MathNet.Symbolics.AllStrategyFactory</Item>
            </Issue>
           </Message>
          </Messages>
         </Type>
         <Type Name="VisitorFactory">
          <Messages>
           <Message TypeName="AvoidUninstantiatedInternalClasses" Category="Microsoft.Performance" CheckId="CA1812" Created="2007-03-25 19:46:45Z">
            <Issue>
             <Item>MathNet.Symbolics.VisitorFactory</Item>
            </Issue>
           </Message>
          </Messages>
         </Type>
        </Types>
       </Namespace>
       <Namespace Name="MathNet.Symbolics.Traversing">
        <Types>
         <Type Name="Scanner">
          <Members>
           <Member Name="FindAllPortPathsFrom(MathNet.Symbolics.Port,MathNet.Symbolics.Port,System.Boolean):System.Collections.Generic.List`1&lt;System.Collections.Generic.List`1&lt;MathNet.Symbolics.Port&gt;&gt;">
            <Messages>
             <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>System.Collections.Generic.List`1&lt;System.Collections.Generic.List`1&lt;MathNet.Symbolics.Port&gt;&gt;</Item>
               <Item>Scanner.FindAllPortPathsFrom(Port, Port, Boolean):List`1&lt;System.Collections.Generic.List`1&lt;MathNet.Symbolics.Port&gt;&gt;</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="FindAllPortPathsFrom(MathNet.Symbolics.Signal,MathNet.Symbolics.Port,System.Boolean):System.Collections.Generic.List`1&lt;System.Collections.Generic.List`1&lt;MathNet.Symbolics.Port&gt;&gt;">
            <Messages>
             <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>System.Collections.Generic.List`1&lt;System.Collections.Generic.List`1&lt;MathNet.Symbolics.Port&gt;&gt;</Item>
               <Item>Scanner.FindAllPortPathsFrom(Signal, Port, Boolean):List`1&lt;System.Collections.Generic.List`1&lt;MathNet.Symbolics.Port&gt;&gt;</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="FindAllPortPathsFrom(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Signal&gt;,MathNet.Symbolics.Port,System.Boolean):System.Collections.Generic.List`1&lt;System.Collections.Generic.List`1&lt;MathNet.Symbolics.Port&gt;&gt;">
            <Messages>
             <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>System.Collections.Generic.List`1&lt;System.Collections.Generic.List`1&lt;MathNet.Symbolics.Port&gt;&gt;</Item>
               <Item>Scanner.FindAllPortPathsFrom(IEnumerable`1&lt;MathNet.Symbolics.Signal&gt;, Port, Boolean):List`1&lt;System.Collections.Generic.List`1&lt;MathNet.Symbolics.Port&gt;&gt;</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="FindAllSignalPathsFrom(MathNet.Symbolics.Port,MathNet.Symbolics.Signal,System.Boolean):System.Collections.Generic.List`1&lt;System.Collections.Generic.List`1&lt;MathNet.Symbolics.Signal&gt;&gt;">
            <Messages>
             <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>System.Collections.Generic.List`1&lt;System.Collections.Generic.List`1&lt;MathNet.Symbolics.Signal&gt;&gt;</Item>
               <Item>Scanner.FindAllSignalPathsFrom(Port, Signal, Boolean):List`1&lt;System.Collections.Generic.List`1&lt;MathNet.Symbolics.Signal&gt;&gt;</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="FindAllSignalPathsFrom(MathNet.Symbolics.Signal,MathNet.Symbolics.Signal,System.Boolean):System.Collections.Generic.List`1&lt;System.Collections.Generic.List`1&lt;MathNet.Symbolics.Signal&gt;&gt;">
            <Messages>
             <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>System.Collections.Generic.List`1&lt;System.Collections.Generic.List`1&lt;MathNet.Symbolics.Signal&gt;&gt;</Item>
               <Item>Scanner.FindAllSignalPathsFrom(Signal, Signal, Boolean):List`1&lt;System.Collections.Generic.List`1&lt;MathNet.Symbolics.Signal&gt;&gt;</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="FindAllSignalPathsFrom(System.Collections.Generic.IEnumerable`1&lt;MathNet.Symbolics.Signal&gt;,MathNet.Symbolics.Signal,System.Boolean):System.Collections.Generic.List`1&lt;System.Collections.Generic.List`1&lt;MathNet.Symbolics.Signal&gt;&gt;">
            <Messages>
             <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>System.Collections.Generic.List`1&lt;System.Collections.Generic.List`1&lt;MathNet.Symbolics.Signal&gt;&gt;</Item>
               <Item>Scanner.FindAllSignalPathsFrom(IEnumerable`1&lt;MathNet.Symbolics.Signal&gt;, Signal, Boolean):List`1&lt;System.Collections.Generic.List`1&lt;MathNet.Symbolics.Signal&gt;&gt;</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="ScanStrategy">
          <Members>
           <Member Name="ProvideExecutableInstance():MathNet.Symbolics.Traversing.ScanStrategy">
            <Messages>
             <Message Id="MathNet.Symbolics.Exceptions.TraversingException.#ctor(System.String)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>ScanStrategy.ProvideExecutableInstance():ScanStrategy</Item>
               <Item>1</Item>
               <Item>TraversingException.TraversingException(String)</Item>
               <Item>A mutual exclusive system traversing strategy is already in use and may not be executed again before the other finishes its operation.</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="ScanStrategy+ConcurrencyMode">
          <Members>
           <Member Name="ParallelStateful">
            <Messages>
             <Message Id="Stateful" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2007-03-25 19:46:45Z">
              <Issue Name="Member">
               <Item>Stateful</Item>
               <Item>ConcurrencyMode.ParallelStateful</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
        </Types>
       </Namespace>
       <Namespace Name="MathNet.Symbolics.Traversing.Visitors">
        <Types>
         <Type Name="PortPathCollectVisitor">
          <Members>
           <Member Name="Paths">
            <Messages>
             <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>System.Collections.Generic.List`1&lt;System.Collections.Generic.List`1&lt;MathNet.Symbolics.Port&gt;&gt;</Item>
               <Item>PortPathCollectVisitor.Paths:List`1&lt;System.Collections.Generic.List`1&lt;MathNet.Symbolics.Port&gt;&gt;</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="SignalPathCollectVisitor">
          <Members>
           <Member Name="Paths">
            <Messages>
             <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Created="2007-03-25 19:46:45Z">
              <Issue>
               <Item>System.Collections.Generic.List`1&lt;System.Collections.Generic.List`1&lt;MathNet.Symbolics.Signal&gt;&gt;</Item>
               <Item>SignalPathCollectVisitor.Paths:List`1&lt;System.Collections.Generic.List`1&lt;MathNet.Symbolics.Signal&gt;&gt;</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
        </Types>
       </Namespace>
      </Namespaces>
     </Module>
    </Modules>
   </Target>
  </Targets>
  <Rules>
   <Rule TypeName="AssembliesShouldHaveValidStrongNames" Category="Microsoft.Design" CheckId="CA2210">
    <Resolution Name="NoStrongName">Sign '{0}' with a strong name key.</Resolution>
   </Rule>
   <Rule TypeName="AvoidEmptyInterfaces" Category="Microsoft.Design" CheckId="CA1040">
    <Resolution Name="Default">Define a custom attribute to replace '{0}'.</Resolution>
   </Rule>
   <Rule TypeName="AvoidExcessiveParametersOnGenericTypes" Category="Microsoft.Design" CheckId="CA1005">
    <Resolution Name="Default">Consider a design where '{0}' has no more than 2 type parameters.</Resolution>
   </Rule>
   <Rule TypeName="AvoidNamespacesWithFewTypes" Category="Microsoft.Design" CheckId="CA1020">
    <Resolution Name="Default">Consider merging the types defined in '{0}' with another namespace.</Resolution>
   </Rule>
   <Rule TypeName="AvoidOutParameters" Category="Microsoft.Design" CheckId="CA1021">
    <Resolution Name="Default">Consider a design that does not require that '{0}' be an out parameter.</Resolution>
   </Rule>
   <Rule TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811">
    <Resolution Name="Default">'{0}' appears to have no upstream public or protected callers.</Resolution>
   </Rule>
   <Rule TypeName="AvoidUninstantiatedInternalClasses" Category="Microsoft.Performance" CheckId="CA1812">
    <Resolution Name="Default">'{0}' is an internal class that is apparently never instantiated. If so, remove the code from the assembly. If this class is intended to contain only static methods, consider adding a private constructor to prevent the compiler from generating a default constructor.</Resolution>
   </Rule>
   <Rule TypeName="AvoidUnusedPrivateFields" Category="Microsoft.Performance" CheckId="CA1823">
    <Resolution Name="Default">It appears that field '{0}' is never used or is only ever assigned to. Use this field or remove it.</Resolution>
   </Rule>
   <Rule TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702">
    <Resolution Name="ShouldBeCompoundWord">The discrete term '{0}' in {1} '{2}' should be expressed as a compound term, '{3}'.</Resolution>
    <Resolution Name="ShouldBeDiscreteTerm">The compound word '{0}' in {1} '{2}' exists as a discrete term. If your usage is intended to be single word, case it as '{3}'.</Resolution>
   </Rule>
   <Rule TypeName="ConsiderPassingBaseTypesAsParameters" Category="Microsoft.Design" CheckId="CA1011">
    <Resolution Name="Default">Consider changing the type of parameter '{0}' in {1} from {2} to its base type {3}. This method appears to only require base class members in its implementation. Suppress this violation if there is a compelling reason to require the more derived type in the method signature.</Resolution>
   </Rule>
   <Rule TypeName="DoNotCallOverridableMethodsInConstructors" Category="Microsoft.Usage" CheckId="CA2214">
    <Resolution Name="Default">'{0}' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: {1}</Resolution>
   </Rule>
   <Rule TypeName="DoNotCastUnnecessarily" Category="Microsoft.Performance" CheckId="CA1800">
    <Resolution Name="Local">'{0}', a local, is cast to type '{1}' multiple times in method {2}. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant {3} instruction.</Resolution>
   </Rule>
   <Rule TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031">
    <Resolution Name="Default">Modify '{0}' to catch a more specific exception than '{1}' or rethrow the exception.</Resolution>
   </Rule>
   <Rule TypeName="DoNotDeclareStaticMembersOnGenericTypes" Category="Microsoft.Design" CheckId="CA1000">
    <Resolution Name="Default">Remove {0} from '{1}' or make it an instance member.</Resolution>
   </Rule>
   <Rule TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051">
    <Resolution Name="Default">Make '{0}' private or internal (Friend in VB, public private in C++) and provide a public or protected property to access it.</Resolution>
   </Rule>
   <Rule TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002">
    <Resolution Name="Default">Change '{0}' in {1} to use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt;</Resolution>
   </Rule>
   <Rule TypeName="DoNotMarkEnumsWithFlags" Category="Microsoft.Usage" CheckId="CA2217">
    <Resolution Name="Default">{0} is marked with FlagsAttribute but a discrete member cannot be found for every settable bit that is used across the range of enum values. Remove FlagsAttribute from the type or define new members for the following (currently missing) values: {1}</Resolution>
   </Rule>
   <Rule TypeName="DoNotNestGenericTypesInMemberSignatures" Category="Microsoft.Design" CheckId="CA1006">
    <Resolution Name="Default">Consider a design where {0} doesn't nest generic type '{1}'.</Resolution>
   </Rule>
   <Rule TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303">
    <Resolution Name="Default">{0} passes a literal as parameter {1} of a call to {2}. Retrieve the following string argument from a resource table instead: '{3}'</Resolution>
   </Rule>
   <Rule TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201">
    <Resolution Name="TooGeneric">{0} creates an exception of type '{1}', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Resolution>
   </Rule>
   <Rule TypeName="EnumsShouldHaveZeroValue" Category="Microsoft.Design" CheckId="CA1008">
    <Resolution Name="FlagsRename">In enum '{0}', change the name of '{1}' to 'None'.</Resolution>
   </Rule>
   <Rule TypeName="FlagsEnumsShouldHavePluralNames" Category="Microsoft.Naming" CheckId="CA1714">
    <Resolution Name="Default">If enumeration name '{0}' is singular, change it to a plural form.</Resolution>
   </Rule>
   <Rule TypeName="GenericMethodsShouldProvideTypeParameter" Category="Microsoft.Design" CheckId="CA1004">
    <Resolution Name="Default">Consider a design where {0} doesn't require explicit type parameter '{1}' in any call to it.</Resolution>
   </Rule>
   <Rule TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704">
    <Resolution Name="Member">Correct the spelling of the unrecognized token '{0}' in member name '{1}'.</Resolution>
    <Resolution Name="MemberOneLetter">Consider providing a more meaningful name than the one-letter token '{0}' in member name '{1}'.</Resolution>
    <Resolution Name="Namespace">Correct the spelling of the unrecognized token '{0}' in namespace '{1}'.</Resolution>
    <Resolution Name="Parameter">In method {0}, correct the spelling of the unrecognized token '{1}' in parameter name '{2}' or strip it entirely if it represents any sort of hungarian notation.</Resolution>
    <Resolution Name="ParameterOneLetter">In method {0}, consider providing a more meaningful name than the one-letter parameter name '{1}'.</Resolution>
    <Resolution Name="Type">Correct the spelling of the unrecognized token '{0}' in type name '{1}'.</Resolution>
   </Rule>
   <Rule TypeName="IdentifiersShouldHaveCorrectSuffix" Category="Microsoft.Naming" CheckId="CA1710">
    <Resolution Name="Default">Rename '{0}' to end in '{1}'.</Resolution>
   </Rule>
   <Rule TypeName="IdentifiersShouldNotHaveIncorrectSuffix" Category="Microsoft.Naming" CheckId="CA1711">
    <Resolution Name="Default">Rename '{0}' so that it does not end in '{1}'.</Resolution>
   </Rule>
   <Rule TypeName="ImplementIDisposableCorrectly" Category="Microsoft.Design" CheckId="CA1063">
    <Resolution Name="DisposeImplementation">Modify {0} so that it calls Dispose(true), then calls GC.SuppressFinalize on the current object instance ('this' or 'Me' in VB), and then returns.</Resolution>
    <Resolution Name="ProvideDisposeBool">Provide an overridable implementation of Dispose(bool) on {0} or mark the type as sealed. A call to Dispose(false) should only clean up native resources. A call to Dispose(true) should clean up both managed and native resources.</Resolution>
    <Resolution Name="RenameDispose">Rename {0} to 'Dispose' and ensure that it is declared as public and sealed.</Resolution>
   </Rule>
   <Rule TypeName="ImplementISerializableCorrectly" Category="Microsoft.Usage" CheckId="CA2240">
    <Resolution Name="Default">Add an implementation of GetObjectData to type '{0}'.</Resolution>
   </Rule>
   <Rule TypeName="ImplementSerializationConstructors" Category="Microsoft.Usage" CheckId="CA2229">
    <Resolution Name="CreateMagicConstructor">Add a constructor to '{0}' with the following signature: 'protected {0}(SerializationInfo info, StreamingContext context)'.</Resolution>
   </Rule>
   <Rule TypeName="ImplementStandardExceptionConstructors" Category="Microsoft.Design" CheckId="CA1032">
    <Resolution Name="Accessibility">Change the accessibility of {0} to {1}.</Resolution>
    <Resolution Name="Default">Add the following constructor to {0}: {1}.</Resolution>
   </Rule>
   <Rule TypeName="InitializeReferenceTypeStaticFieldsInline" Category="Microsoft.Performance" CheckId="CA1810">
    <Resolution Name="Default">Initialize all static fields in {0} when those fields are declared and remove the explicit static constructor.</Resolution>
   </Rule>
   <Rule TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033">
    <Resolution Name="Default">Make '{0}' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of '{1}' and is visible to derived classes.</Resolution>
   </Rule>
   <Rule TypeName="LiteralsShouldBeSpelledCorrectly" Category="Microsoft.Usage" CheckId="CA2204">
    <Resolution Name="Default">Correct the spelling of the unrecognized token '{0}' in the literal '{1}'.</Resolution>
   </Rule>
   <Rule TypeName="MarkISerializableTypesWithSerializable" Category="Microsoft.Usage" CheckId="CA2237">
    <Resolution Name="Default">Add [Serializable] to '{0}' as this type implements ISerializable.</Resolution>
   </Rule>
   <Rule TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822">
    <Resolution Name="Default">The 'this' parameter (or 'Me' in VB) of {0} is never used. Mark the member as static (or Shared in VB) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Resolution>
   </Rule>
   <Rule TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034">
    <Resolution Name="Default">Do not nest type '{0}'. Alternatively, change its accessibility so that it is not externally visible.</Resolution>
   </Rule>
   <Rule TypeName="OperationsShouldNotOverflow" Category="Microsoft.Usage" CheckId="CA2233">
    <Resolution Name="Default">Correct the potential overflow in the operation '{0}' in '{1}'.</Resolution>
   </Rule>
   <Rule TypeName="OperatorOverloadsHaveNamedAlternates" Category="Microsoft.Usage" CheckId="CA2225">
    <Resolution Name="Default">Provide a method named '{0}' as a friendly alternate for operator {1}.</Resolution>
    <Resolution Name="Multiple">Provide a method named '{0}' or '{1}' as an alternate for operator {1}.</Resolution>
   </Rule>
   <Rule TypeName="OverloadOperatorEqualsOnOverloadingAddAndSubtract" Category="Microsoft.Design" CheckId="CA1013">
    <Resolution Name="Default">Consider adding an overload of the equality operator for '{0}' that takes the same parameters as {1}.</Resolution>
   </Rule>
   <Rule TypeName="OverrideEqualsAndOperatorEqualsOnValueTypes" Category="Microsoft.Performance" CheckId="CA1815">
    <Resolution Name="Equals">'{0}' should override Equals.</Resolution>
    <Resolution Name="op_Equality">'{0}' should override the equality (==) and inequality (!=) operators.</Resolution>
   </Rule>
   <Rule TypeName="OverrideGetHashCodeOnOverridingEquals" Category="Microsoft.Usage" CheckId="CA2218">
    <Resolution Name="Default">Since '{0}' redefines Equals, it should also redefine GetHashCode.</Resolution>
   </Rule>
   <Rule TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725">
    <Resolution Name="Default">Change parameter name '{0}' of method {1} to '{2}' in order to match the identifier as it has been declared in {3}.</Resolution>
   </Rule>
   <Rule TypeName="PropertiesShouldNotReturnArrays" Category="Microsoft.Performance" CheckId="CA1819">
    <Resolution Name="Default">Change {0} to return a collection or make it a method.</Resolution>
   </Rule>
   <Rule TypeName="ProvideObsoleteAttributeMessage" Category="Microsoft.Design" CheckId="CA1041">
    <Resolution Name="Default">Provide a message for the ObsoleteAttribute that marks '{0}'.</Resolution>
   </Rule>
   <Rule TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804">
    <Resolution Name="Default">{0} declares a local, '{1}', of type {2}, which is never used or is only assigned to. Use this local or remove it.</Resolution>
   </Rule>
   <Rule TypeName="ResourceStringsShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1703">
    <Resolution Name="Default">Correct the spelling of '{0}' in '{1}' == '{2}' contained in resource stream '{3}'.</Resolution>
   </Rule>
   <Rule TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801">
    <Resolution Name="Default">Parameter '{0}' of {1} is never used. Remove the parameter or use it in the method body.</Resolution>
   </Rule>
   <Rule TypeName="ShortAcronymsShouldBeUppercase" Category="Microsoft.Naming" CheckId="CA1706">
    <Resolution Name="Parameter">Correct the capitalization of '{0}' in parameter name '{1}'.</Resolution>
    <Resolution Name="Type">Correct the capitalization of '{0}' in type name '{1}'.</Resolution>
   </Rule>
   <Rule TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305">
    <Resolution Name="Default">{0} makes a call to {1} that does not explicitly provide an IFormatProvider. This should be replaced with a call to {2}.</Resolution>
   </Rule>
   <Rule TypeName="TypeNamesShouldNotMatchNamespaces" Category="Microsoft.Naming" CheckId="CA1724">
    <Resolution Name="Default">The type name '{0}' conflicts in whole or in part with the namespace name '{1}'. Change either name to eliminate the conflict.</Resolution>
   </Rule>
   <Rule TypeName="UseIntegralOrStringArgumentForIndexers" Category="Microsoft.Design" CheckId="CA1043">
    <Resolution Name="Default">Use an integral value or string as the parameter to indexer {0}.</Resolution>
   </Rule>
   <Rule TypeName="UsePropertiesWhereAppropriate" Category="Microsoft.Design" CheckId="CA1024">
    <Resolution Name="Default">Change '{0}' to a property if appropriate.</Resolution>
   </Rule>
   <Rule TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062">
    <Resolution Name="Default">Validate parameter {0} passed to externally visible method {1}.</Resolution>
   </Rule>
  </Rules>
 </FxCopReport>
</FxCopProject>
