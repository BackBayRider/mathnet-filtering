<?xml version="1.0" encoding="utf-8"?>
<FxCopProject Version="1.35" Name="IridiumAnalysis">
 <ProjectOptions>
  <SharedProject>True</SharedProject>
  <Stylesheet Apply="False">http://www.gotdotnet.com/team/fxcop//xsl/1.35/FxCopReport.xsl</Stylesheet>
  <SaveMessages>
   <Project Status="Active, Excluded" NewOnly="False" />
   <Report Status="Active" NewOnly="False" />
  </SaveMessages>
  <ProjectFile Compress="False" DefaultTargetCheck="True" DefaultRuleCheck="True" SaveByRuleGroup="" Deterministic="True" />
  <EnableMultithreadedLoad>True</EnableMultithreadedLoad>
  <EnableMultithreadedAnalysis>True</EnableMultithreadedAnalysis>
  <SourceLookup>True</SourceLookup>
  <AnalysisExceptionsThreshold>10</AnalysisExceptionsThreshold>
  <RuleExceptionsThreshold>1</RuleExceptionsThreshold>
  <Spelling Locale="en-us" />
  <VersionAware>False</VersionAware>
  <OverrideRuleVisibilities>False</OverrideRuleVisibilities>
  <CustomDictionaries SearchFxCopDir="True" SearchUserProfile="True" SearchProjectDir="True" />
  <SearchGlobalAssemblyCache>False</SearchGlobalAssemblyCache>
  <DeadlockDetectionTimeout>120</DeadlockDetectionTimeout>
 </ProjectOptions>
 <Targets>
  <AssemblyReferenceDirectories>
   <Directory>$(ProjectDir)/../build/checkout/src/app/MathNet.Iridium/Library/bin/Debug/</Directory>
  </AssemblyReferenceDirectories>
  <Target Name="$(ProjectDir)/src/app/MathNet.Iridium/Library/bin/Debug/MathNet.Iridium.dll" Analyze="True">
   <Modules>
    <Module Name="mathnet.iridium.dll" Analyze="True">
     <Namespaces>
      <Namespace Name="" Analyze="True">
       <Types>
        <Type Name="&lt;Module&gt;" Analyze="True" />
        <Type Name="&lt;PrivateImplementationDetails&gt;{D6A492B0-F881-4B77-B4DB-D01949E6E480}" Analyze="True">
         <Members>
          <Member Name="$$method0x6000312-1" Analyze="True" />
          <Member Name="$$method0x60003a0-1" Analyze="True" />
          <Member Name="$$method0x60003a1-1" Analyze="True" />
          <Member Name="$$method0x60003a1-2" Analyze="True" />
          <Member Name="$$method0x60003a1-3" Analyze="True" />
          <Member Name="$$method0x60003a1-4" Analyze="True" />
         </Members>
        </Type>
        <Type Name="&lt;PrivateImplementationDetails&gt;{D6A492B0-F881-4B77-B4DB-D01949E6E480}+__StaticArrayInitTypeSize=32" Analyze="True" />
        <Type Name="&lt;PrivateImplementationDetails&gt;{D6A492B0-F881-4B77-B4DB-D01949E6E480}+__StaticArrayInitTypeSize=40" Analyze="True" />
        <Type Name="&lt;PrivateImplementationDetails&gt;{D6A492B0-F881-4B77-B4DB-D01949E6E480}+__StaticArrayInitTypeSize=48" Analyze="True" />
        <Type Name="&lt;PrivateImplementationDetails&gt;{D6A492B0-F881-4B77-B4DB-D01949E6E480}+__StaticArrayInitTypeSize=56" Analyze="True" />
       </Types>
      </Namespace>
      <Namespace Name="MathNet.Numerics" Analyze="True">
       <Types>
        <Type Name="Collection" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="Concat(System.Collections.ICollection,System.Collections.ICollection):System.Collections.ICollection" Analyze="True" />
          <Member Name="Inter(System.Collections.ICollection,System.Collections.ICollection):System.Collections.ICollection" Analyze="True" />
          <Member Name="Minus(System.Collections.ICollection,System.Collections.ICollection):System.Collections.ICollection" Analyze="True" />
          <Member Name="Product(System.Collections.ICollection,System.Collections.ICollection):System.Collections.ICollection" Analyze="True" />
          <Member Name="Union(System.Collections.ICollection,System.Collections.ICollection):System.Collections.ICollection" Analyze="True" />
         </Members>
        </Type>
        <Type Name="Collection+ConcatCollection" Analyze="True">
         <Members>
          <Member Name=".ctor(System.Collections.ICollection,System.Collections.ICollection)" Analyze="True" />
          <Member Name="c1" Analyze="True" />
          <Member Name="c2" Analyze="True" />
          <Member Name="CopyTo(System.Array,System.Int32):System.Void" Analyze="True" />
          <Member Name="Count" Analyze="True">
           <Accessors>
            <Accessor Name="get_Count():System.Int32" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="GetEnumerator():System.Collections.IEnumerator" Analyze="True" />
          <Member Name="IsSynchronized" Analyze="True">
           <Accessors>
            <Accessor Name="get_IsSynchronized():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="SyncRoot" Analyze="True">
           <Accessors>
            <Accessor Name="get_SyncRoot():System.Object" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="Collection+ConcatCollection+ConcatEnumerator" Analyze="True">
         <Members>
          <Member Name=".ctor(MathNet.Numerics.Collection+ConcatCollection)" Analyze="True" />
          <Member Name="Current" Analyze="True">
           <Accessors>
            <Accessor Name="get_Current():System.Object" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="enumerator1" Analyze="True" />
          <Member Name="enumerator2" Analyze="True" />
          <Member Name="isEnumator1Current" Analyze="True" />
          <Member Name="MoveNext():System.Boolean" Analyze="True" />
          <Member Name="Reset():System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="Collection+InterCollection" Analyze="True">
         <Members>
          <Member Name=".ctor(System.Collections.ICollection,System.Collections.ICollection)" Analyze="True" />
          <Member Name="CopyTo(System.Array,System.Int32):System.Void" Analyze="True" />
          <Member Name="Count" Analyze="True">
           <Accessors>
            <Accessor Name="get_Count():System.Int32" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="GetEnumerator():System.Collections.IEnumerator" Analyze="True" />
          <Member Name="intersection" Analyze="True" />
          <Member Name="IsSynchronized" Analyze="True">
           <Accessors>
            <Accessor Name="get_IsSynchronized():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="SyncRoot" Analyze="True">
           <Accessors>
            <Accessor Name="get_SyncRoot():System.Object" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="Collection+MinusCollection" Analyze="True">
         <Members>
          <Member Name=".ctor(System.Collections.ICollection,System.Collections.ICollection)" Analyze="True" />
          <Member Name="CopyTo(System.Array,System.Int32):System.Void" Analyze="True" />
          <Member Name="Count" Analyze="True">
           <Accessors>
            <Accessor Name="get_Count():System.Int32" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="GetEnumerator():System.Collections.IEnumerator" Analyze="True" />
          <Member Name="IsSynchronized" Analyze="True">
           <Accessors>
            <Accessor Name="get_IsSynchronized():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="minus" Analyze="True" />
          <Member Name="SyncRoot" Analyze="True">
           <Accessors>
            <Accessor Name="get_SyncRoot():System.Object" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="Collection+UnionCollection" Analyze="True">
         <Members>
          <Member Name=".ctor(System.Collections.ICollection,System.Collections.ICollection)" Analyze="True" />
          <Member Name="CopyTo(System.Array,System.Int32):System.Void" Analyze="True" />
          <Member Name="Count" Analyze="True">
           <Accessors>
            <Accessor Name="get_Count():System.Int32" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="GetEnumerator():System.Collections.IEnumerator" Analyze="True" />
          <Member Name="IsSynchronized" Analyze="True">
           <Accessors>
            <Accessor Name="get_IsSynchronized():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="SyncRoot" Analyze="True">
           <Accessors>
            <Accessor Name="get_SyncRoot():System.Object" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="union" Analyze="True" />
         </Members>
        </Type>
        <Type Name="Combinatorics" Analyze="True">
         <Members>
          <Member Name="Combinations(System.Int32,System.Int32):System.Double" Analyze="True" />
          <Member Name="CombinationsWithRepetition(System.Int32,System.Int32):System.Double" Analyze="True" />
          <Member Name="Permutations(System.Int32):System.Double" Analyze="True" />
          <Member Name="Variations(System.Int32,System.Int32):System.Double" Analyze="True" />
          <Member Name="VariationsWithRepetition(System.Int32,System.Int32):System.Double" Analyze="True" />
         </Members>
        </Type>
        <Type Name="Complex" Analyze="True">
         <Members>
          <Member Name=".cctor()" Analyze="True" />
          <Member Name=".ctor(System.Double,System.Double)" Analyze="True" />
          <Member Name="Argument" Analyze="True">
           <Accessors>
            <Accessor Name="get_Argument():System.Double" Analyze="True" />
            <Accessor Name="set_Argument(System.Double):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="argumentModulusComparer" Analyze="True" />
          <Member Name="ArgumentModulusComparer" Analyze="True">
           <Accessors>
            <Accessor Name="get_ArgumentModulusComparer():System.Collections.IComparer" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="CompareTo(MathNet.Numerics.Complex):System.Int32" Analyze="True" />
          <Member Name="Conjugate" Analyze="True">
           <Accessors>
            <Accessor Name="get_Conjugate():MathNet.Numerics.Complex" Analyze="True" />
            <Accessor Name="set_Conjugate(MathNet.Numerics.Complex):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Cosecant():MathNet.Numerics.Complex" Analyze="True" />
          <Member Name="Cosine():MathNet.Numerics.Complex" Analyze="True" />
          <Member Name="Cotangent():MathNet.Numerics.Complex" Analyze="True" />
          <Member Name="Equals(MathNet.Numerics.Complex):System.Boolean" Analyze="True" />
          <Member Name="Equals(System.Object):System.Boolean" Analyze="True" />
          <Member Name="Exponential():MathNet.Numerics.Complex" Analyze="True" />
          <Member Name="FromModulusArgument(System.Double,System.Double):MathNet.Numerics.Complex" Analyze="True" />
          <Member Name="FromRealImaginary(System.Double,System.Double):MathNet.Numerics.Complex" Analyze="True" />
          <Member Name="GetHashCode():System.Int32" Analyze="True" />
          <Member Name="halfOfRoot2" Analyze="True" />
          <Member Name="HyperbolicCosecant():MathNet.Numerics.Complex" Analyze="True" />
          <Member Name="HyperbolicCosine():MathNet.Numerics.Complex" Analyze="True" />
          <Member Name="HyperbolicCotangent():MathNet.Numerics.Complex" Analyze="True" />
          <Member Name="HyperbolicSecant():MathNet.Numerics.Complex" Analyze="True" />
          <Member Name="HyperbolicSine():MathNet.Numerics.Complex" Analyze="True" />
          <Member Name="HyperbolicTangent():MathNet.Numerics.Complex" Analyze="True" />
          <Member Name="I" Analyze="True">
           <Accessors>
            <Accessor Name="get_I():MathNet.Numerics.Complex" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="imag" Analyze="True" />
          <Member Name="Imag" Analyze="True">
           <Accessors>
            <Accessor Name="get_Imag():System.Double" Analyze="True" />
            <Accessor Name="set_Imag(System.Double):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Infinity" Analyze="True">
           <Accessors>
            <Accessor Name="get_Infinity():MathNet.Numerics.Complex" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="InverseCosecant():MathNet.Numerics.Complex" Analyze="True" />
          <Member Name="InverseCosine():MathNet.Numerics.Complex" Analyze="True" />
          <Member Name="InverseCotangent():MathNet.Numerics.Complex" Analyze="True" />
          <Member Name="InverseHyperbolicCosecant():MathNet.Numerics.Complex" Analyze="True" />
          <Member Name="InverseHyperbolicCosine():MathNet.Numerics.Complex" Analyze="True" />
          <Member Name="InverseHyperbolicCotangent():MathNet.Numerics.Complex" Analyze="True" />
          <Member Name="InverseHyperbolicSecant():MathNet.Numerics.Complex" Analyze="True" />
          <Member Name="InverseHyperbolicSine():MathNet.Numerics.Complex" Analyze="True" />
          <Member Name="InverseHyperbolicTangent():MathNet.Numerics.Complex" Analyze="True" />
          <Member Name="InverseSecant():MathNet.Numerics.Complex" Analyze="True" />
          <Member Name="InverseSine():MathNet.Numerics.Complex" Analyze="True" />
          <Member Name="InverseTangent():MathNet.Numerics.Complex" Analyze="True" />
          <Member Name="IsI" Analyze="True">
           <Accessors>
            <Accessor Name="get_IsI():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="IsImaginary" Analyze="True">
           <Accessors>
            <Accessor Name="get_IsImaginary():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="IsInfinity" Analyze="True">
           <Accessors>
            <Accessor Name="get_IsInfinity():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="IsNaN" Analyze="True">
           <Accessors>
            <Accessor Name="get_IsNaN():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="IsOne" Analyze="True">
           <Accessors>
            <Accessor Name="get_IsOne():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="IsReal" Analyze="True">
           <Accessors>
            <Accessor Name="get_IsReal():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="IsZero" Analyze="True">
           <Accessors>
            <Accessor Name="get_IsZero():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Modulus" Analyze="True">
           <Accessors>
            <Accessor Name="get_Modulus():System.Double" Analyze="True" />
            <Accessor Name="set_Modulus(System.Double):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="modulusArgumentComparer" Analyze="True" />
          <Member Name="ModulusArgumentComparer" Analyze="True">
           <Accessors>
            <Accessor Name="get_ModulusArgumentComparer():System.Collections.IComparer" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ModulusSquared" Analyze="True">
           <Accessors>
            <Accessor Name="get_ModulusSquared():System.Double" Analyze="True" />
            <Accessor Name="set_ModulusSquared(System.Double):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="NaN" Analyze="True">
           <Accessors>
            <Accessor Name="get_NaN():MathNet.Numerics.Complex" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="NaturalLogarithm():MathNet.Numerics.Complex" Analyze="True" />
          <Member Name="NormalizeToUnityOrNull():System.Void" Analyze="True" />
          <Member Name="One" Analyze="True">
           <Accessors>
            <Accessor Name="get_One():MathNet.Numerics.Complex" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="op_Addition(MathNet.Numerics.Complex,MathNet.Numerics.Complex):MathNet.Numerics.Complex" Analyze="True" />
          <Member Name="op_Addition(MathNet.Numerics.Complex,System.Double):MathNet.Numerics.Complex" Analyze="True" />
          <Member Name="op_Addition(System.Double,MathNet.Numerics.Complex):MathNet.Numerics.Complex" Analyze="True" />
          <Member Name="op_Division(MathNet.Numerics.Complex,MathNet.Numerics.Complex):MathNet.Numerics.Complex" Analyze="True" />
          <Member Name="op_Division(MathNet.Numerics.Complex,System.Double):MathNet.Numerics.Complex" Analyze="True" />
          <Member Name="op_Division(System.Double,MathNet.Numerics.Complex):MathNet.Numerics.Complex" Analyze="True" />
          <Member Name="op_Equality(MathNet.Numerics.Complex,MathNet.Numerics.Complex):System.Boolean" Analyze="True" />
          <Member Name="op_Implicit(System.Double):MathNet.Numerics.Complex" Analyze="True" />
          <Member Name="op_Inequality(MathNet.Numerics.Complex,MathNet.Numerics.Complex):System.Boolean" Analyze="True" />
          <Member Name="op_Multiply(MathNet.Numerics.Complex,MathNet.Numerics.Complex):MathNet.Numerics.Complex" Analyze="True" />
          <Member Name="op_Multiply(MathNet.Numerics.Complex,System.Double):MathNet.Numerics.Complex" Analyze="True" />
          <Member Name="op_Multiply(System.Double,MathNet.Numerics.Complex):MathNet.Numerics.Complex" Analyze="True" />
          <Member Name="op_Subtraction(MathNet.Numerics.Complex,MathNet.Numerics.Complex):MathNet.Numerics.Complex" Analyze="True" />
          <Member Name="op_Subtraction(MathNet.Numerics.Complex,System.Double):MathNet.Numerics.Complex" Analyze="True" />
          <Member Name="op_Subtraction(System.Double,MathNet.Numerics.Complex):MathNet.Numerics.Complex" Analyze="True" />
          <Member Name="op_UnaryNegation(MathNet.Numerics.Complex):MathNet.Numerics.Complex" Analyze="True" />
          <Member Name="op_UnaryPlus(MathNet.Numerics.Complex):MathNet.Numerics.Complex" Analyze="True" />
          <Member Name="Parse(System.String):MathNet.Numerics.Complex" Analyze="True" />
          <Member Name="Power(MathNet.Numerics.Complex):MathNet.Numerics.Complex" Analyze="True" />
          <Member Name="real" Analyze="True" />
          <Member Name="Real" Analyze="True">
           <Accessors>
            <Accessor Name="get_Real():System.Double" Analyze="True" />
            <Accessor Name="set_Real(System.Double):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="realImaginaryComparer" Analyze="True" />
          <Member Name="RealImaginaryComparer" Analyze="True">
           <Accessors>
            <Accessor Name="get_RealImaginaryComparer():System.Collections.IComparer" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Root(MathNet.Numerics.Complex):MathNet.Numerics.Complex" Analyze="True" />
          <Member Name="Secant():MathNet.Numerics.Complex" Analyze="True" />
          <Member Name="Sine():MathNet.Numerics.Complex" Analyze="True" />
          <Member Name="Square():MathNet.Numerics.Complex" Analyze="True" />
          <Member Name="SquareRoot():MathNet.Numerics.Complex" Analyze="True" />
          <Member Name="Tangent():MathNet.Numerics.Complex" Analyze="True" />
          <Member Name="ToString():System.String" Analyze="True" />
          <Member Name="Zero" Analyze="True">
           <Accessors>
            <Accessor Name="get_Zero():MathNet.Numerics.Complex" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="Complex+ArgumentModulusLexComparer" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="Compare(System.Object,System.Object):System.Int32" Analyze="True" />
         </Members>
        </Type>
        <Type Name="Complex+ComplexParser" Analyze="True">
         <Members>
          <Member Name=".ctor(System.String)" Analyze="True" />
          <Member Name="complex" Analyze="True" />
          <Member Name="Complex" Analyze="True">
           <Accessors>
            <Accessor Name="get_Complex():MathNet.Numerics.Complex" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Consume():System.Char" Analyze="True" />
          <Member Name="cursor" Analyze="True" />
          <Member Name="Imaginary" Analyze="True">
           <Accessors>
            <Accessor Name="get_Imaginary():System.Double" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="IsDecimal(System.Char):System.Boolean" Analyze="True" />
          <Member Name="IsE(System.Char):System.Boolean" Analyze="True" />
          <Member Name="IsI(System.Char):System.Boolean" Analyze="True" />
          <Member Name="IsMult(System.Char):System.Boolean" Analyze="True" />
          <Member Name="IsNegativeSign(System.Char):System.Boolean" Analyze="True" />
          <Member Name="IsNotWhiteSpace(System.Char):System.Boolean" Analyze="True" />
          <Member Name="IsNumber(System.Char):System.Boolean" Analyze="True" />
          <Member Name="IsSign(System.Char):System.Boolean" Analyze="True" />
          <Member Name="LookAheadCharacter" Analyze="True">
           <Accessors>
            <Accessor Name="get_LookAheadCharacter():System.Char" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="LookAheadCharacterOrNull" Analyze="True">
           <Accessors>
            <Accessor Name="get_LookAheadCharacterOrNull():System.Char" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Real" Analyze="True">
           <Accessors>
            <Accessor Name="get_Real():System.Double" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ScanComplex():MathNet.Numerics.Complex" Analyze="True" />
          <Member Name="ScanComplexNumberPart():MathNet.Numerics.Complex" Analyze="True" />
          <Member Name="ScanInteger(System.Text.StringBuilder):System.Void" Analyze="True" />
          <Member Name="ScanNumber():System.Double" Analyze="True" />
          <Member Name="ScanSignedComplexNumberPart():MathNet.Numerics.Complex" Analyze="True" />
          <Member Name="ScanSkipWhitespace():System.Void" Analyze="True" />
          <Member Name="source" Analyze="True" />
         </Members>
        </Type>
        <Type Name="Complex+ModulusArgumentLexComparer" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="Compare(System.Object,System.Object):System.Int32" Analyze="True" />
         </Members>
        </Type>
        <Type Name="Complex+RealImaginaryLexComparer" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="Compare(System.Object,System.Object):System.Int32" Analyze="True" />
         </Members>
        </Type>
        <Type Name="Double" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="ToExactString(System.Double):System.String" Analyze="True" />
         </Members>
        </Type>
        <Type Name="Double+ArbitraryDecimal" Analyze="True">
         <Members>
          <Member Name=".ctor(System.Int64)" Analyze="True" />
          <Member Name="decimalPoint" Analyze="True" />
          <Member Name="digits" Analyze="True" />
          <Member Name="MultiplyBy(System.Int32):System.Void" Analyze="True" />
          <Member Name="Normalize():System.Void" Analyze="True" />
          <Member Name="Shift(System.Int32):System.Void" Analyze="True" />
          <Member Name="ToString():System.String" Analyze="True" />
         </Members>
        </Type>
        <Type Name="Fn" Analyze="True">
         <Members>
          <Member Name="Beta(System.Double,System.Double):System.Double" Analyze="True" />
          <Member Name="BinomialCoefficient(System.Int32,System.Int32):System.Double" Analyze="True" />
          <Member Name="Factorial(System.Int32):System.Double" Analyze="True" />
          <Member Name="FactorialLn(System.Int32):System.Double" Analyze="True" />
          <Member Name="GammaLn(System.Double):System.Double" Analyze="True" />
          <Member Name="Gcd(System.Int64,System.Int64):System.Int64" Analyze="True" />
          <Member Name="Gcd(System.Int64,System.Int64,System.Int64&amp;,System.Int64&amp;):System.Int64" Analyze="True" />
          <Member Name="Hypot(System.Double,System.Double):System.Double" Analyze="True" />
          <Member Name="Lcm(System.Int64,System.Int64):System.Int64" Analyze="True" />
         </Members>
        </Type>
        <Type Name="IRealFunction" Analyze="True">
         <Members>
          <Member Name="ValueOf(System.Double):System.Double" Analyze="True" />
         </Members>
        </Type>
        <Type Name="IRealGenerator" Analyze="True">
         <Members>
          <Member Name="Next():System.Double" Analyze="True" />
         </Members>
        </Type>
        <Type Name="ISet`1" Analyze="True">
         <Members>
          <Member Name="Exists(System.Predicate`1&lt;T&gt;):System.Boolean" Analyze="True" />
          <Member Name="Find(System.Predicate`1&lt;T&gt;):T" Analyze="True" />
          <Member Name="FindAll(System.Predicate`1&lt;T&gt;):MathNet.Numerics.Set`1&lt;T&gt;" Analyze="True" />
          <Member Name="FindIndex(System.Int32,System.Int32,System.Predicate`1&lt;T&gt;):System.Int32" Analyze="True" />
          <Member Name="FindIndex(System.Int32,System.Predicate`1&lt;T&gt;):System.Int32" Analyze="True" />
          <Member Name="FindIndex(System.Predicate`1&lt;T&gt;):System.Int32" Analyze="True" />
          <Member Name="FindLast(System.Predicate`1&lt;T&gt;):T" Analyze="True" />
          <Member Name="FindLastIndex(System.Int32,System.Int32,System.Predicate`1&lt;T&gt;):System.Int32" Analyze="True" />
          <Member Name="FindLastIndex(System.Int32,System.Predicate`1&lt;T&gt;):System.Int32" Analyze="True" />
          <Member Name="FindLastIndex(System.Predicate`1&lt;T&gt;):System.Int32" Analyze="True" />
          <Member Name="ForEach(System.Action`1&lt;T&gt;):System.Void" Analyze="True" />
          <Member Name="HasEqualElements(System.Collections.Generic.IEnumerable`1&lt;T&gt;):System.Boolean" Analyze="True" />
          <Member Name="IsSubset(System.Collections.Generic.IEnumerable`1&lt;T&gt;):System.Boolean" Analyze="True" />
          <Member Name="IsSuperset(System.Collections.Generic.IEnumerable`1&lt;T&gt;):System.Boolean" Analyze="True" />
          <Member Name="LastIndexOf(T):System.Int32" Analyze="True" />
          <Member Name="ToArray():T[]" Analyze="True" />
          <Member Name="TrueForAll(System.Predicate`1&lt;T&gt;):System.Boolean" Analyze="True" />
         </Members>
        </Type>
        <Type Name="NamespaceDoc" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
         </Members>
        </Type>
        <Type Name="Natural" Analyze="True">
         <Members>
          <Member Name=".ctor(System.UInt32)" Analyze="True" />
          <Member Name=".ctor(System.UInt32,System.UInt32[])" Analyze="True" />
          <Member Name=".ctor(System.UInt32[])" Analyze="True" />
          <Member Name="_bound" Analyze="True" />
          <Member Name="_bound32" Analyze="True" />
          <Member Name="_bound64" Analyze="True" />
          <Member Name="_coeff" Analyze="True" />
          <Member Name="_radix" Analyze="True" />
          <Member Name="_radixBits" Analyze="True" />
          <Member Name="Add(MathNet.Numerics.Natural):MathNet.Numerics.Natural" Analyze="True" />
          <Member Name="Add(MathNet.Numerics.Natural,System.UInt32):MathNet.Numerics.Natural" Analyze="True" />
          <Member Name="AddCoefficientInplace(System.UInt64,System.UInt32):System.Void" Analyze="True" />
          <Member Name="CompareTo(MathNet.Numerics.Natural):System.Int32" Analyze="True" />
          <Member Name="Degree" Analyze="True">
           <Accessors>
            <Accessor Name="get_Degree():System.UInt32" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Equals(MathNet.Numerics.Natural):System.Boolean" Analyze="True" />
          <Member Name="ExtendCapacity(System.UInt32):System.Void" Analyze="True" />
          <Member Name="From(System.UInt32):MathNet.Numerics.Natural" Analyze="True" />
          <Member Name="From(System.UInt64):MathNet.Numerics.Natural" Analyze="True" />
          <Member Name="IsZero" Analyze="True">
           <Accessors>
            <Accessor Name="get_IsZero():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Item[System.UInt32]" Analyze="True">
           <Accessors>
            <Accessor Name="get_Item(System.UInt32):System.UInt32" Analyze="True" />
            <Accessor Name="set_Item(System.UInt32,System.UInt32):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Max(MathNet.Numerics.Natural,MathNet.Numerics.Natural):MathNet.Numerics.Natural" Analyze="True" />
          <Member Name="Min(MathNet.Numerics.Natural,MathNet.Numerics.Natural):MathNet.Numerics.Natural" Analyze="True" />
          <Member Name="Multiply(MathNet.Numerics.Natural):MathNet.Numerics.Natural" Analyze="True" />
          <Member Name="Multiply(System.UInt32):MathNet.Numerics.Natural" Analyze="True" />
          <Member Name="MultiplyLarge(MathNet.Numerics.Natural):MathNet.Numerics.Natural" Analyze="True" />
          <Member Name="MultiplySmall(MathNet.Numerics.Natural):MathNet.Numerics.Natural" Analyze="True" />
          <Member Name="Normalize():System.Void" Analyze="True" />
          <Member Name="One" Analyze="True">
           <Accessors>
            <Accessor Name="get_One():MathNet.Numerics.Natural" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="op_Addition(MathNet.Numerics.Natural,MathNet.Numerics.Natural):MathNet.Numerics.Natural" Analyze="True" />
          <Member Name="op_GreaterThan(MathNet.Numerics.Natural,MathNet.Numerics.Natural):System.Boolean" Analyze="True" />
          <Member Name="op_GreaterThanOrEqual(MathNet.Numerics.Natural,MathNet.Numerics.Natural):System.Boolean" Analyze="True" />
          <Member Name="op_LessThan(MathNet.Numerics.Natural,MathNet.Numerics.Natural):System.Boolean" Analyze="True" />
          <Member Name="op_LessThanOrEqual(MathNet.Numerics.Natural,MathNet.Numerics.Natural):System.Boolean" Analyze="True" />
          <Member Name="op_Multiply(MathNet.Numerics.Natural,MathNet.Numerics.Natural):MathNet.Numerics.Natural" Analyze="True" />
          <Member Name="op_Subtraction(MathNet.Numerics.Natural,MathNet.Numerics.Natural):MathNet.Numerics.Natural" Analyze="True" />
          <Member Name="Radix" Analyze="True">
           <Accessors>
            <Accessor Name="get_Radix():System.UInt64" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Restrict(System.UInt32):MathNet.Numerics.Natural" Analyze="True" />
          <Member Name="ShiftDown(System.UInt32):MathNet.Numerics.Natural" Analyze="True" />
          <Member Name="ShiftUp(System.UInt32):MathNet.Numerics.Natural" Analyze="True" />
          <Member Name="Subtract(MathNet.Numerics.Natural):MathNet.Numerics.Natural" Analyze="True" />
          <Member Name="Subtract(MathNet.Numerics.Natural,System.Boolean&amp;):MathNet.Numerics.Natural" Analyze="True" />
          <Member Name="Subtract(MathNet.Numerics.Natural,System.UInt32,System.Boolean&amp;):MathNet.Numerics.Natural" Analyze="True" />
          <Member Name="SubtractCoefficientInplace(System.UInt64,System.UInt32):System.Void" Analyze="True" />
          <Member Name="SubtractCoefficientInplace(System.UInt64,System.UInt32,System.Boolean&amp;):System.Void" Analyze="True" />
          <Member Name="Two" Analyze="True">
           <Accessors>
            <Accessor Name="get_Two():MathNet.Numerics.Natural" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Zero" Analyze="True">
           <Accessors>
            <Accessor Name="get_Zero():MathNet.Numerics.Natural" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="Polynomial" Analyze="True">
         <Members>
          <Member Name=".ctor(MathNet.Numerics.Polynomial)" Analyze="True" />
          <Member Name=".ctor(System.Double[])" Analyze="True" />
          <Member Name=".ctor(System.Int32)" Analyze="True" />
          <Member Name="AddInplace(MathNet.Numerics.Polynomial):System.Void" Analyze="True" />
          <Member Name="AddInplace(System.Double):System.Void" Analyze="True" />
          <Member Name="Clone():MathNet.Numerics.Polynomial" Analyze="True" />
          <Member Name="coefficients" Analyze="True" />
          <Member Name="CompareTo(MathNet.Numerics.Polynomial):System.Int32" Analyze="True" />
          <Member Name="CompareTo(System.Object):System.Int32" Analyze="True" />
          <Member Name="Divide(MathNet.Numerics.Polynomial):MathNet.Numerics.Rational" Analyze="True" />
          <Member Name="DivideInplace(System.Double):System.Void" Analyze="True" />
          <Member Name="DivideLinearInplace(System.Double,System.Double,System.Double&amp;):System.Void" Analyze="True" />
          <Member Name="DivideShiftInplace(System.Int32,System.Double[]&amp;):System.Void" Analyze="True" />
          <Member Name="DivideSyntheticInplace(System.Double,System.Double&amp;):System.Void" Analyze="True" />
          <Member Name="EnsureSupportForOrder(System.Int32):System.Void" Analyze="True" />
          <Member Name="Equals(MathNet.Numerics.Polynomial):System.Boolean" Analyze="True" />
          <Member Name="Equals(MathNet.Numerics.Polynomial,MathNet.Numerics.Polynomial):System.Boolean" Analyze="True" />
          <Member Name="Equals(System.Object):System.Boolean" Analyze="True" />
          <Member Name="Evaluate(System.Double):System.Double" Analyze="True" />
          <Member Name="Evaluate(System.Double,System.Double&amp;):System.Double" Analyze="True" />
          <Member Name="Evaluate(System.Double,System.Int32):System.Double[]" Analyze="True" />
          <Member Name="FindOrder(System.Double[]):System.Int32" Analyze="True" />
          <Member Name="GetHashCode():System.Int32" Analyze="True" />
          <Member Name="Item[System.Int32]" Analyze="True">
           <Accessors>
            <Accessor Name="get_Item(System.Int32):System.Double" Analyze="True" />
            <Accessor Name="set_Item(System.Int32,System.Double):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Multiply(MathNet.Numerics.Polynomial):MathNet.Numerics.Polynomial" Analyze="True" />
          <Member Name="MultiplyInplace(System.Double):System.Void" Analyze="True" />
          <Member Name="MultiplyKaratsuba(System.Double[],System.Double[],System.Int32,System.Int32,System.Int32,System.Int32):MathNet.Numerics.Polynomial" Analyze="True" />
          <Member Name="MultiplyLinearInplace(System.Double,System.Double):System.Void" Analyze="True" />
          <Member Name="MultiplyShiftInplace(System.Int32):System.Void" Analyze="True" />
          <Member Name="MultiplySlow(MathNet.Numerics.Polynomial):MathNet.Numerics.Polynomial" Analyze="True" />
          <Member Name="MultiplySyntheticInplace(System.Double):System.Void" Analyze="True" />
          <Member Name="NegateInplace():System.Void" Analyze="True" />
          <Member Name="Normalize():System.Void" Analyze="True" />
          <Member Name="NormalizeOrder():System.Void" Analyze="True" />
          <Member Name="op_Addition(MathNet.Numerics.Polynomial,MathNet.Numerics.Polynomial):MathNet.Numerics.Polynomial" Analyze="True" />
          <Member Name="op_Addition(MathNet.Numerics.Polynomial,System.Double):MathNet.Numerics.Polynomial" Analyze="True" />
          <Member Name="op_Addition(System.Double,MathNet.Numerics.Polynomial):MathNet.Numerics.Polynomial" Analyze="True" />
          <Member Name="op_Division(MathNet.Numerics.Polynomial,System.Double):MathNet.Numerics.Polynomial" Analyze="True" />
          <Member Name="op_Equality(MathNet.Numerics.Polynomial,MathNet.Numerics.Polynomial):System.Boolean" Analyze="True" />
          <Member Name="op_GreaterThan(MathNet.Numerics.Polynomial,MathNet.Numerics.Polynomial):System.Boolean" Analyze="True" />
          <Member Name="op_GreaterThanOrEqual(MathNet.Numerics.Polynomial,MathNet.Numerics.Polynomial):System.Boolean" Analyze="True" />
          <Member Name="op_Inequality(MathNet.Numerics.Polynomial,MathNet.Numerics.Polynomial):System.Boolean" Analyze="True" />
          <Member Name="op_LessThan(MathNet.Numerics.Polynomial,MathNet.Numerics.Polynomial):System.Boolean" Analyze="True" />
          <Member Name="op_LessThanOrEqual(MathNet.Numerics.Polynomial,MathNet.Numerics.Polynomial):System.Boolean" Analyze="True" />
          <Member Name="op_Multiply(MathNet.Numerics.Polynomial,MathNet.Numerics.Polynomial):MathNet.Numerics.Polynomial" Analyze="True" />
          <Member Name="op_Multiply(MathNet.Numerics.Polynomial,System.Double):MathNet.Numerics.Polynomial" Analyze="True" />
          <Member Name="op_Multiply(System.Double,MathNet.Numerics.Polynomial):MathNet.Numerics.Polynomial" Analyze="True" />
          <Member Name="op_Subtraction(MathNet.Numerics.Polynomial,MathNet.Numerics.Polynomial):MathNet.Numerics.Polynomial" Analyze="True" />
          <Member Name="op_Subtraction(MathNet.Numerics.Polynomial,System.Double):MathNet.Numerics.Polynomial" Analyze="True" />
          <Member Name="op_Subtraction(System.Double,MathNet.Numerics.Polynomial):MathNet.Numerics.Polynomial" Analyze="True" />
          <Member Name="op_UnaryNegation(MathNet.Numerics.Polynomial):MathNet.Numerics.Polynomial" Analyze="True" />
          <Member Name="op_UnaryPlus(MathNet.Numerics.Polynomial):MathNet.Numerics.Polynomial" Analyze="True" />
          <Member Name="order" Analyze="True" />
          <Member Name="Order" Analyze="True">
           <Accessors>
            <Accessor Name="get_Order():System.Int32" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ResizeDouble():System.Void" Analyze="True" />
          <Member Name="ResizeOptimalForOrder(System.Int32):System.Void" Analyze="True" />
          <Member Name="Size" Analyze="True">
           <Accessors>
            <Accessor Name="get_Size():System.Int32" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="SizeOfOrder(System.Int32):System.Int32" Analyze="True" />
          <Member Name="SubtractInplace(MathNet.Numerics.Polynomial):System.Void" Analyze="True" />
          <Member Name="SubtractInplace(System.Double):System.Void" Analyze="True" />
          <Member Name="System.ICloneable.Clone():System.Object" Analyze="True" />
          <Member Name="ToString():System.String" Analyze="True" />
          <Member Name="ToString(System.String):System.String" Analyze="True" />
         </Members>
        </Type>
        <Type Name="Quaternion" Analyze="True">
         <Members>
          <Member Name=".ctor(System.Double,System.Double,System.Double,System.Double)" Analyze="True" />
          <Member Name=".ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)" Analyze="True" />
          <Member Name="Abs" Analyze="True">
           <Accessors>
            <Accessor Name="get_Abs():System.Double" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Add(MathNet.Numerics.Quaternion):MathNet.Numerics.Quaternion" Analyze="True" />
          <Member Name="Add(System.Double):MathNet.Numerics.Quaternion" Analyze="True" />
          <Member Name="Arg" Analyze="True">
           <Accessors>
            <Accessor Name="get_Arg():System.Double" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Clone():System.Object" Analyze="True" />
          <Member Name="CompareTo(System.Object):System.Int32" Analyze="True" />
          <Member Name="Conjugate():MathNet.Numerics.Quaternion" Analyze="True" />
          <Member Name="Distance(MathNet.Numerics.Quaternion,MathNet.Numerics.Quaternion):System.Double" Analyze="True" />
          <Member Name="Divide(MathNet.Numerics.Quaternion):MathNet.Numerics.Quaternion" Analyze="True" />
          <Member Name="Divide(System.Double):MathNet.Numerics.Quaternion" Analyze="True" />
          <Member Name="Exp():MathNet.Numerics.Quaternion" Analyze="True" />
          <Member Name="ImagX" Analyze="True">
           <Accessors>
            <Accessor Name="get_ImagX():System.Double" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ImagY" Analyze="True">
           <Accessors>
            <Accessor Name="get_ImagY():System.Double" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ImagZ" Analyze="True">
           <Accessors>
            <Accessor Name="get_ImagZ():System.Double" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Inverse():MathNet.Numerics.Quaternion" Analyze="True" />
          <Member Name="IsUnitQuaternion" Analyze="True">
           <Accessors>
            <Accessor Name="get_IsUnitQuaternion():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Lg():MathNet.Numerics.Quaternion" Analyze="True" />
          <Member Name="Ln():MathNet.Numerics.Quaternion" Analyze="True" />
          <Member Name="Log(System.Double):MathNet.Numerics.Quaternion" Analyze="True" />
          <Member Name="Multiply(MathNet.Numerics.Quaternion):MathNet.Numerics.Quaternion" Analyze="True" />
          <Member Name="Multiply(System.Double):MathNet.Numerics.Quaternion" Analyze="True" />
          <Member Name="Negate():MathNet.Numerics.Quaternion" Analyze="True" />
          <Member Name="Norm" Analyze="True">
           <Accessors>
            <Accessor Name="get_Norm():System.Double" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="op_Addition(MathNet.Numerics.Quaternion,MathNet.Numerics.Quaternion):MathNet.Numerics.Quaternion" Analyze="True" />
          <Member Name="op_Addition(MathNet.Numerics.Quaternion,System.Double):MathNet.Numerics.Quaternion" Analyze="True" />
          <Member Name="op_Division(MathNet.Numerics.Quaternion,MathNet.Numerics.Quaternion):MathNet.Numerics.Quaternion" Analyze="True" />
          <Member Name="op_Division(MathNet.Numerics.Quaternion,System.Double):MathNet.Numerics.Quaternion" Analyze="True" />
          <Member Name="op_ExclusiveOr(MathNet.Numerics.Quaternion,MathNet.Numerics.Quaternion):MathNet.Numerics.Quaternion" Analyze="True" />
          <Member Name="op_ExclusiveOr(MathNet.Numerics.Quaternion,System.Double):MathNet.Numerics.Quaternion" Analyze="True" />
          <Member Name="op_Implicit(System.Double):MathNet.Numerics.Quaternion" Analyze="True" />
          <Member Name="op_Multiply(MathNet.Numerics.Quaternion,MathNet.Numerics.Quaternion):MathNet.Numerics.Quaternion" Analyze="True" />
          <Member Name="op_Multiply(MathNet.Numerics.Quaternion,System.Double):MathNet.Numerics.Quaternion" Analyze="True" />
          <Member Name="op_Subtraction(MathNet.Numerics.Quaternion,MathNet.Numerics.Quaternion):MathNet.Numerics.Quaternion" Analyze="True" />
          <Member Name="op_Subtraction(MathNet.Numerics.Quaternion,System.Double):MathNet.Numerics.Quaternion" Analyze="True" />
          <Member Name="op_UnaryNegation(MathNet.Numerics.Quaternion):MathNet.Numerics.Quaternion" Analyze="True" />
          <Member Name="op_UnaryPlus(MathNet.Numerics.Quaternion):MathNet.Numerics.Quaternion" Analyze="True" />
          <Member Name="Pow(MathNet.Numerics.Quaternion):MathNet.Numerics.Quaternion" Analyze="True" />
          <Member Name="Pow(System.Double):MathNet.Numerics.Quaternion" Analyze="True" />
          <Member Name="qabs" Analyze="True" />
          <Member Name="qarg" Analyze="True" />
          <Member Name="qnorm" Analyze="True" />
          <Member Name="qw" Analyze="True" />
          <Member Name="qx" Analyze="True" />
          <Member Name="qy" Analyze="True" />
          <Member Name="qz" Analyze="True" />
          <Member Name="Real" Analyze="True">
           <Accessors>
            <Accessor Name="get_Real():System.Double" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Scalar():MathNet.Numerics.Quaternion" Analyze="True" />
          <Member Name="Sign():MathNet.Numerics.Quaternion" Analyze="True" />
          <Member Name="Sqr():MathNet.Numerics.Quaternion" Analyze="True" />
          <Member Name="Sqrt():MathNet.Numerics.Quaternion" Analyze="True" />
          <Member Name="Subtract(MathNet.Numerics.Quaternion):MathNet.Numerics.Quaternion" Analyze="True" />
          <Member Name="Subtract(System.Double):MathNet.Numerics.Quaternion" Analyze="True" />
          <Member Name="ToNorm(System.Double,System.Double,System.Double,System.Double):System.Double" Analyze="True" />
          <Member Name="ToUnitQuaternion(System.Double,System.Double,System.Double,System.Double):MathNet.Numerics.Quaternion" Analyze="True" />
          <Member Name="UnitVector():MathNet.Numerics.Quaternion" Analyze="True" />
          <Member Name="Vector():MathNet.Numerics.Quaternion" Analyze="True" />
         </Members>
        </Type>
        <Type Name="Rational" Analyze="True">
         <Members>
          <Member Name=".ctor(MathNet.Numerics.Polynomial,MathNet.Numerics.Polynomial)" Analyze="True" />
          <Member Name=".ctor(MathNet.Numerics.Rational)" Analyze="True" />
          <Member Name=".ctor(System.Double[],System.Double[])" Analyze="True" />
          <Member Name=".ctor(System.Int32,System.Int32)" Analyze="True" />
          <Member Name="Add(MathNet.Numerics.Rational):MathNet.Numerics.Rational" Analyze="True" />
          <Member Name="AddInplace(MathNet.Numerics.Polynomial):System.Void" Analyze="True" />
          <Member Name="AddInplace(System.Double):System.Void" Analyze="True" />
          <Member Name="Clone():MathNet.Numerics.Rational" Analyze="True" />
          <Member Name="CompareTo(MathNet.Numerics.Rational):System.Int32" Analyze="True" />
          <Member Name="CompareTo(System.Object):System.Int32" Analyze="True" />
          <Member Name="denominator" Analyze="True" />
          <Member Name="Denominator" Analyze="True">
           <Accessors>
            <Accessor Name="get_Denominator():MathNet.Numerics.Polynomial" Analyze="True" />
            <Accessor Name="set_Denominator(MathNet.Numerics.Polynomial):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="DenominatorOrder" Analyze="True">
           <Accessors>
            <Accessor Name="get_DenominatorOrder():System.Int32" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Divide(MathNet.Numerics.Polynomial):MathNet.Numerics.Rational" Analyze="True" />
          <Member Name="Divide(MathNet.Numerics.Rational):MathNet.Numerics.Rational" Analyze="True" />
          <Member Name="DivideInplace(System.Double):System.Void" Analyze="True" />
          <Member Name="Equals(MathNet.Numerics.Rational):System.Boolean" Analyze="True" />
          <Member Name="Equals(MathNet.Numerics.Rational,MathNet.Numerics.Rational):System.Boolean" Analyze="True" />
          <Member Name="Equals(System.Object):System.Boolean" Analyze="True" />
          <Member Name="Evaluate(System.Double):System.Double" Analyze="True" />
          <Member Name="GetHashCode():System.Int32" Analyze="True" />
          <Member Name="InvertInplace():System.Void" Analyze="True" />
          <Member Name="Multiply(MathNet.Numerics.Polynomial):MathNet.Numerics.Rational" Analyze="True" />
          <Member Name="Multiply(MathNet.Numerics.Rational):MathNet.Numerics.Rational" Analyze="True" />
          <Member Name="MultiplyInplace(System.Double):System.Void" Analyze="True" />
          <Member Name="NegateInplace():System.Void" Analyze="True" />
          <Member Name="Normalize():System.Void" Analyze="True" />
          <Member Name="numerator" Analyze="True" />
          <Member Name="Numerator" Analyze="True">
           <Accessors>
            <Accessor Name="get_Numerator():MathNet.Numerics.Polynomial" Analyze="True" />
            <Accessor Name="set_Numerator(MathNet.Numerics.Polynomial):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="NumeratorOrder" Analyze="True">
           <Accessors>
            <Accessor Name="get_NumeratorOrder():System.Int32" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="op_Addition(MathNet.Numerics.Polynomial,MathNet.Numerics.Rational):MathNet.Numerics.Rational" Analyze="True" />
          <Member Name="op_Addition(MathNet.Numerics.Rational,MathNet.Numerics.Polynomial):MathNet.Numerics.Rational" Analyze="True" />
          <Member Name="op_Addition(MathNet.Numerics.Rational,MathNet.Numerics.Rational):MathNet.Numerics.Rational" Analyze="True" />
          <Member Name="op_Addition(MathNet.Numerics.Rational,System.Double):MathNet.Numerics.Rational" Analyze="True" />
          <Member Name="op_Addition(System.Double,MathNet.Numerics.Rational):MathNet.Numerics.Rational" Analyze="True" />
          <Member Name="op_Division(MathNet.Numerics.Polynomial,MathNet.Numerics.Rational):MathNet.Numerics.Rational" Analyze="True" />
          <Member Name="op_Division(MathNet.Numerics.Rational,MathNet.Numerics.Polynomial):MathNet.Numerics.Rational" Analyze="True" />
          <Member Name="op_Division(MathNet.Numerics.Rational,MathNet.Numerics.Rational):MathNet.Numerics.Rational" Analyze="True" />
          <Member Name="op_Division(MathNet.Numerics.Rational,System.Double):MathNet.Numerics.Rational" Analyze="True" />
          <Member Name="op_Division(System.Double,MathNet.Numerics.Rational):MathNet.Numerics.Rational" Analyze="True" />
          <Member Name="op_Equality(MathNet.Numerics.Rational,MathNet.Numerics.Rational):System.Boolean" Analyze="True" />
          <Member Name="op_GreaterThan(MathNet.Numerics.Rational,MathNet.Numerics.Rational):System.Boolean" Analyze="True" />
          <Member Name="op_GreaterThanOrEqual(MathNet.Numerics.Rational,MathNet.Numerics.Rational):System.Boolean" Analyze="True" />
          <Member Name="op_Inequality(MathNet.Numerics.Rational,MathNet.Numerics.Rational):System.Boolean" Analyze="True" />
          <Member Name="op_LessThan(MathNet.Numerics.Rational,MathNet.Numerics.Rational):System.Boolean" Analyze="True" />
          <Member Name="op_LessThanOrEqual(MathNet.Numerics.Rational,MathNet.Numerics.Rational):System.Boolean" Analyze="True" />
          <Member Name="op_Multiply(MathNet.Numerics.Polynomial,MathNet.Numerics.Rational):MathNet.Numerics.Rational" Analyze="True" />
          <Member Name="op_Multiply(MathNet.Numerics.Rational,MathNet.Numerics.Polynomial):MathNet.Numerics.Rational" Analyze="True" />
          <Member Name="op_Multiply(MathNet.Numerics.Rational,MathNet.Numerics.Rational):MathNet.Numerics.Rational" Analyze="True" />
          <Member Name="op_Multiply(MathNet.Numerics.Rational,System.Double):MathNet.Numerics.Rational" Analyze="True" />
          <Member Name="op_Multiply(System.Double,MathNet.Numerics.Rational):MathNet.Numerics.Rational" Analyze="True" />
          <Member Name="op_Subtraction(MathNet.Numerics.Polynomial,MathNet.Numerics.Rational):MathNet.Numerics.Rational" Analyze="True" />
          <Member Name="op_Subtraction(MathNet.Numerics.Rational,MathNet.Numerics.Polynomial):MathNet.Numerics.Rational" Analyze="True" />
          <Member Name="op_Subtraction(MathNet.Numerics.Rational,MathNet.Numerics.Rational):MathNet.Numerics.Rational" Analyze="True" />
          <Member Name="op_Subtraction(MathNet.Numerics.Rational,System.Double):MathNet.Numerics.Rational" Analyze="True" />
          <Member Name="op_Subtraction(System.Double,MathNet.Numerics.Rational):MathNet.Numerics.Rational" Analyze="True" />
          <Member Name="op_UnaryNegation(MathNet.Numerics.Rational):MathNet.Numerics.Rational" Analyze="True" />
          <Member Name="op_UnaryPlus(MathNet.Numerics.Rational):MathNet.Numerics.Rational" Analyze="True" />
          <Member Name="Subtract(MathNet.Numerics.Rational):MathNet.Numerics.Rational" Analyze="True" />
          <Member Name="SubtractInplace(MathNet.Numerics.Polynomial):System.Void" Analyze="True" />
          <Member Name="SubtractInplace(System.Double):System.Void" Analyze="True" />
          <Member Name="System.ICloneable.Clone():System.Object" Analyze="True" />
          <Member Name="ToString():System.String" Analyze="True" />
          <Member Name="ToString(System.String):System.String" Analyze="True" />
         </Members>
        </Type>
        <Type Name="ReadOnlySet`1" Analyze="True">
         <Members>
          <Member Name=".ctor(System.Collections.Generic.IList`1&lt;T&gt;)" Analyze="True" />
          <Member Name="CreateNewSet():MathNet.Numerics.Set`1&lt;T&gt;" Analyze="True" />
          <Member Name="Exists(System.Predicate`1&lt;T&gt;):System.Boolean" Analyze="True" />
          <Member Name="Exists(System.Predicate`1&lt;T&gt;,T&amp;):System.Boolean" Analyze="True" />
          <Member Name="Find(System.Predicate`1&lt;T&gt;):T" Analyze="True" />
          <Member Name="FindAll(System.Predicate`1&lt;T&gt;):MathNet.Numerics.Set`1&lt;T&gt;" Analyze="True" />
          <Member Name="FindIndex(System.Int32,System.Int32,System.Predicate`1&lt;T&gt;):System.Int32" Analyze="True" />
          <Member Name="FindIndex(System.Int32,System.Predicate`1&lt;T&gt;):System.Int32" Analyze="True" />
          <Member Name="FindIndex(System.Predicate`1&lt;T&gt;):System.Int32" Analyze="True" />
          <Member Name="FindLast(System.Predicate`1&lt;T&gt;):T" Analyze="True" />
          <Member Name="FindLastIndex(System.Int32,System.Int32,System.Predicate`1&lt;T&gt;):System.Int32" Analyze="True" />
          <Member Name="FindLastIndex(System.Int32,System.Predicate`1&lt;T&gt;):System.Int32" Analyze="True" />
          <Member Name="FindLastIndex(System.Predicate`1&lt;T&gt;):System.Int32" Analyze="True" />
          <Member Name="ForEach(System.Action`1&lt;T&gt;):System.Void" Analyze="True" />
          <Member Name="HasEqualElements(System.Collections.Generic.IEnumerable`1&lt;T&gt;):System.Boolean" Analyze="True" />
          <Member Name="IsSubset(System.Collections.Generic.IEnumerable`1&lt;T&gt;):System.Boolean" Analyze="True" />
          <Member Name="IsSuperset(System.Collections.Generic.IEnumerable`1&lt;T&gt;):System.Boolean" Analyze="True" />
          <Member Name="LastIndexOf(T):System.Int32" Analyze="True" />
          <Member Name="ToArray():T[]" Analyze="True" />
          <Member Name="TrueForAll(System.Predicate`1&lt;T&gt;):System.Boolean" Analyze="True" />
         </Members>
        </Type>
        <Type Name="SampleList" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name=".ctor(System.Collections.IDictionary)" Analyze="True" />
          <Member Name=".ctor(System.Collections.IDictionary,System.Int32)" Analyze="True" />
          <Member Name=".ctor(System.Int32)" Analyze="True" />
          <Member Name="Add(System.Double,System.Double):System.Void" Analyze="True" />
          <Member Name="AppendMean(System.Int32,System.Double):System.Void" Analyze="True" />
          <Member Name="Capacity" Analyze="True">
           <Accessors>
            <Accessor Name="get_Capacity():System.Int32" Analyze="True" />
            <Accessor Name="set_Capacity(System.Int32):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Clear():System.Void" Analyze="True" />
          <Member Name="Clone():MathNet.Numerics.SampleList" Analyze="True" />
          <Member Name="ContainsT(System.Double):System.Boolean" Analyze="True" />
          <Member Name="ContainsX(System.Double):System.Boolean" Analyze="True" />
          <Member Name="Count" Analyze="True">
           <Accessors>
            <Accessor Name="get_Count():System.Int32" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="SampleAltered" Kind="Event" Analyze="True">
           <Accessors>
            <Accessor Name="add_SampleAltered(MathNet.Numerics.SampleList+SampleAlteredEventHandler):System.Void" Analyze="True" />
            <Accessor Name="remove_SampleAltered(MathNet.Numerics.SampleList+SampleAlteredEventHandler):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="EnsureCapacity(System.Int32):System.Void" Analyze="True" />
          <Member Name="GetT(System.Int32):System.Double" Analyze="True" />
          <Member Name="GetX(System.Int32):System.Double" Analyze="True" />
          <Member Name="IndexOfT(System.Double):System.Int32" Analyze="True" />
          <Member Name="IndexOfX(System.Double):System.Int32" Analyze="True" />
          <Member Name="Insert(System.Int32,System.Double,System.Double):System.Void" Analyze="True" />
          <Member Name="keyList" Analyze="True" />
          <Member Name="Locate(System.Double):System.Int32" Analyze="True" />
          <Member Name="Locate(System.Double,System.Int32):System.Int32" Analyze="True" />
          <Member Name="LocateBisection(System.Double,System.Int32,System.Int32):System.Int32" Analyze="True" />
          <Member Name="MaxT" Analyze="True">
           <Accessors>
            <Accessor Name="get_MaxT():System.Double" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="MinT" Analyze="True">
           <Accessors>
            <Accessor Name="get_MinT():System.Double" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Remove(System.Double):System.Void" Analyze="True" />
          <Member Name="RemoveAt(System.Int32):System.Void" Analyze="True" />
          <Member Name="SampleAltered" Analyze="True" />
          <Member Name="sampleCount" Analyze="True" />
          <Member Name="sampleT" Analyze="True" />
          <Member Name="sampleX" Analyze="True" />
          <Member Name="SetX(System.Double,System.Double):System.Void" Analyze="True" />
          <Member Name="size" Analyze="True" />
          <Member Name="System.Collections.ICollection.CopyTo(System.Array,System.Int32):System.Void" Analyze="True" />
          <Member Name="System.Collections.ICollection.IsSynchronized" Analyze="True">
           <Accessors>
            <Accessor Name="System.Collections.ICollection.get_IsSynchronized():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="System.Collections.ICollection.SyncRoot" Analyze="True">
           <Accessors>
            <Accessor Name="System.Collections.ICollection.get_SyncRoot():System.Object" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="System.Collections.IDictionary.Add(System.Object,System.Object):System.Void" Analyze="True" />
          <Member Name="System.Collections.IDictionary.Contains(System.Object):System.Boolean" Analyze="True" />
          <Member Name="System.Collections.IDictionary.GetEnumerator():System.Collections.IDictionaryEnumerator" Analyze="True" />
          <Member Name="System.Collections.IDictionary.IsFixedSize" Analyze="True">
           <Accessors>
            <Accessor Name="System.Collections.IDictionary.get_IsFixedSize():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="System.Collections.IDictionary.IsReadOnly" Analyze="True">
           <Accessors>
            <Accessor Name="System.Collections.IDictionary.get_IsReadOnly():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="System.Collections.IDictionary.Item[System.Object]" Analyze="True">
           <Accessors>
            <Accessor Name="System.Collections.IDictionary.get_Item(System.Object):System.Object" Analyze="True" />
            <Accessor Name="System.Collections.IDictionary.set_Item(System.Object,System.Object):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="System.Collections.IDictionary.Keys" Analyze="True">
           <Accessors>
            <Accessor Name="System.Collections.IDictionary.get_Keys():System.Collections.ICollection" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="System.Collections.IDictionary.Remove(System.Object):System.Void" Analyze="True" />
          <Member Name="System.Collections.IDictionary.Values" Analyze="True">
           <Accessors>
            <Accessor Name="System.Collections.IDictionary.get_Values():System.Collections.ICollection" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="System.Collections.IEnumerable.GetEnumerator():System.Collections.IEnumerator" Analyze="True" />
          <Member Name="System.ICloneable.Clone():System.Object" Analyze="True" />
          <Member Name="valueList" Analyze="True" />
         </Members>
        </Type>
        <Type Name="SampleList+KeyList" Analyze="True">
         <Members>
          <Member Name=".ctor(MathNet.Numerics.SampleList)" Analyze="True" />
          <Member Name="Add(System.Object):System.Int32" Analyze="True" />
          <Member Name="Clear():System.Void" Analyze="True" />
          <Member Name="Contains(System.Object):System.Boolean" Analyze="True" />
          <Member Name="CopyTo(System.Array,System.Int32):System.Void" Analyze="True" />
          <Member Name="Count" Analyze="True">
           <Accessors>
            <Accessor Name="get_Count():System.Int32" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="GetEnumerator():System.Collections.IEnumerator" Analyze="True" />
          <Member Name="IndexOf(System.Object):System.Int32" Analyze="True" />
          <Member Name="Insert(System.Int32,System.Object):System.Void" Analyze="True" />
          <Member Name="IsFixedSize" Analyze="True">
           <Accessors>
            <Accessor Name="get_IsFixedSize():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="IsReadOnly" Analyze="True">
           <Accessors>
            <Accessor Name="get_IsReadOnly():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="IsSynchronized" Analyze="True">
           <Accessors>
            <Accessor Name="get_IsSynchronized():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Item[System.Int32]" Analyze="True">
           <Accessors>
            <Accessor Name="get_Item(System.Int32):System.Object" Analyze="True" />
            <Accessor Name="set_Item(System.Int32,System.Object):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Remove(System.Object):System.Void" Analyze="True" />
          <Member Name="RemoveAt(System.Int32):System.Void" Analyze="True" />
          <Member Name="sampleList" Analyze="True" />
          <Member Name="SyncRoot" Analyze="True">
           <Accessors>
            <Accessor Name="get_SyncRoot():System.Object" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="SampleList+SampleAlteredEventArgs" Analyze="True">
         <Members>
          <Member Name=".ctor(System.Double)" Analyze="True" />
          <Member Name="t" Analyze="True" />
          <Member Name="T" Analyze="True">
           <Accessors>
            <Accessor Name="get_T():System.Double" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="SampleList+SampleAlteredEventHandler" Analyze="True">
         <Members>
          <Member Name=".ctor(System.Object,System.IntPtr)" Analyze="True" />
          <Member Name="BeginInvoke(System.Object,MathNet.Numerics.SampleList+SampleAlteredEventArgs,System.AsyncCallback,System.Object):System.IAsyncResult" Analyze="True" />
          <Member Name="EndInvoke(System.IAsyncResult):System.Void" Analyze="True" />
          <Member Name="Invoke(System.Object,MathNet.Numerics.SampleList+SampleAlteredEventArgs):System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="SampleList+SampleListEnumerator" Analyze="True">
         <Members>
          <Member Name=".ctor(MathNet.Numerics.SampleList,System.Int32,System.Int32,MathNet.Numerics.SampleList+SampleListEnumerator+EnumerationMode)" Analyze="True" />
          <Member Name="Clone():System.Object" Analyze="True" />
          <Member Name="current" Analyze="True" />
          <Member Name="Current" Analyze="True">
           <Accessors>
            <Accessor Name="get_Current():System.Object" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="endIndex" Analyze="True" />
          <Member Name="Entry" Analyze="True">
           <Accessors>
            <Accessor Name="get_Entry():System.Collections.DictionaryEntry" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="index" Analyze="True" />
          <Member Name="key" Analyze="True" />
          <Member Name="Key" Analyze="True">
           <Accessors>
            <Accessor Name="get_Key():System.Object" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="mode" Analyze="True" />
          <Member Name="MoveNext():System.Boolean" Analyze="True" />
          <Member Name="Reset():System.Void" Analyze="True" />
          <Member Name="sampleList" Analyze="True" />
          <Member Name="startIndex" Analyze="True" />
          <Member Name="value" Analyze="True" />
          <Member Name="Value" Analyze="True">
           <Accessors>
            <Accessor Name="get_Value():System.Object" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="SampleList+SampleListEnumerator+EnumerationMode" Analyze="True">
         <Members>
          <Member Name="DictEntry" Analyze="True" />
          <Member Name="Keys" Analyze="True" />
          <Member Name="value__" Analyze="True" />
          <Member Name="Values" Analyze="True" />
         </Members>
        </Type>
        <Type Name="SampleList+ValueList" Analyze="True">
         <Members>
          <Member Name=".ctor(MathNet.Numerics.SampleList)" Analyze="True" />
          <Member Name="Add(System.Object):System.Int32" Analyze="True" />
          <Member Name="Clear():System.Void" Analyze="True" />
          <Member Name="Contains(System.Object):System.Boolean" Analyze="True" />
          <Member Name="CopyTo(System.Array,System.Int32):System.Void" Analyze="True" />
          <Member Name="Count" Analyze="True">
           <Accessors>
            <Accessor Name="get_Count():System.Int32" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="GetEnumerator():System.Collections.IEnumerator" Analyze="True" />
          <Member Name="IndexOf(System.Object):System.Int32" Analyze="True" />
          <Member Name="Insert(System.Int32,System.Object):System.Void" Analyze="True" />
          <Member Name="IsFixedSize" Analyze="True">
           <Accessors>
            <Accessor Name="get_IsFixedSize():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="IsReadOnly" Analyze="True">
           <Accessors>
            <Accessor Name="get_IsReadOnly():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="IsSynchronized" Analyze="True">
           <Accessors>
            <Accessor Name="get_IsSynchronized():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Item[System.Int32]" Analyze="True">
           <Accessors>
            <Accessor Name="get_Item(System.Int32):System.Object" Analyze="True" />
            <Accessor Name="set_Item(System.Int32,System.Object):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Remove(System.Object):System.Void" Analyze="True" />
          <Member Name="RemoveAt(System.Int32):System.Void" Analyze="True" />
          <Member Name="sampleList" Analyze="True" />
          <Member Name="SyncRoot" Analyze="True">
           <Accessors>
            <Accessor Name="get_SyncRoot():System.Object" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="Set`1" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name=".ctor(System.Collections.Generic.IEnumerable`1&lt;T&gt;)" Analyze="True" />
          <Member Name=".ctor(System.Collections.Generic.IList`1&lt;T&gt;)" Analyze="True" />
          <Member Name=".ctor(System.Int32)" Analyze="True" />
          <Member Name=".ctor(T[])" Analyze="True" />
          <Member Name="AddDistinct(T):System.Void" Analyze="True" />
          <Member Name="AddRange(System.Collections.Generic.IEnumerable`1&lt;T&gt;):System.Void" Analyze="True" />
          <Member Name="AddRangeDistinct(System.Collections.Generic.IEnumerable`1&lt;T&gt;):System.Void" Analyze="True" />
          <Member Name="AsReadOnly" Analyze="True">
           <Accessors>
            <Accessor Name="get_AsReadOnly():MathNet.Numerics.ReadOnlySet`1&lt;T&gt;" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Concatenate(System.Collections.Generic.IEnumerable`1&lt;T&gt;):MathNet.Numerics.Set`1&lt;T&gt;" Analyze="True" />
          <Member Name="Concatenate(System.Collections.Generic.IEnumerable`1&lt;T&gt;,System.Collections.Generic.IEnumerable`1&lt;T&gt;):MathNet.Numerics.Set`1&lt;T&gt;" Analyze="True" />
          <Member Name="ConcatenateInplace(System.Collections.Generic.IEnumerable`1&lt;T&gt;):System.Void" Analyze="True" />
          <Member Name="ConvertAll(System.Converter`2&lt;T,TOutput&gt;):MathNet.Numerics.Set`1&lt;TOutput&gt;" Analyze="True" />
          <Member Name="CreateNewReadOnlyWrapper(System.Collections.Generic.IList`1&lt;T&gt;):MathNet.Numerics.ReadOnlySet`1&lt;T&gt;" Analyze="True" />
          <Member Name="CreateNewSet():MathNet.Numerics.Set`1&lt;T&gt;" Analyze="True" />
          <Member Name="OnSetChanged" Kind="Event" Analyze="True">
           <Accessors>
            <Accessor Name="add_OnSetChanged(System.EventHandler`1&lt;MathNet.Numerics.SetChangedEventArgs`1&lt;T&gt;&gt;):System.Void" Analyze="True" />
            <Accessor Name="remove_OnSetChanged(System.EventHandler`1&lt;MathNet.Numerics.SetChangedEventArgs`1&lt;T&gt;&gt;):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Exists(System.Predicate`1&lt;T&gt;):System.Boolean" Analyze="True" />
          <Member Name="Exists(System.Predicate`1&lt;T&gt;,T&amp;):System.Boolean" Analyze="True" />
          <Member Name="Find(System.Predicate`1&lt;T&gt;):T" Analyze="True" />
          <Member Name="FindAll(System.Predicate`1&lt;T&gt;):MathNet.Numerics.Set`1&lt;T&gt;" Analyze="True" />
          <Member Name="FindIndex(System.Int32,System.Int32,System.Predicate`1&lt;T&gt;):System.Int32" Analyze="True" />
          <Member Name="FindIndex(System.Int32,System.Predicate`1&lt;T&gt;):System.Int32" Analyze="True" />
          <Member Name="FindIndex(System.Predicate`1&lt;T&gt;):System.Int32" Analyze="True" />
          <Member Name="FindLast(System.Predicate`1&lt;T&gt;):T" Analyze="True" />
          <Member Name="FindLastIndex(System.Int32,System.Int32,System.Predicate`1&lt;T&gt;):System.Int32" Analyze="True" />
          <Member Name="FindLastIndex(System.Int32,System.Predicate`1&lt;T&gt;):System.Int32" Analyze="True" />
          <Member Name="FindLastIndex(System.Predicate`1&lt;T&gt;):System.Int32" Analyze="True" />
          <Member Name="ForEach(System.Action`1&lt;T&gt;):System.Void" Analyze="True" />
          <Member Name="HasEqualElements(System.Collections.Generic.IEnumerable`1&lt;T&gt;):System.Boolean" Analyze="True" />
          <Member Name="InsertItem(System.Int32,T):System.Void" Analyze="True" />
          <Member Name="Intersect(System.Collections.Generic.IEnumerable`1&lt;T&gt;):MathNet.Numerics.Set`1&lt;T&gt;" Analyze="True" />
          <Member Name="Intersect(System.Collections.Generic.IEnumerable`1&lt;T&gt;,System.Collections.Generic.IEnumerable`1&lt;T&gt;):MathNet.Numerics.Set`1&lt;T&gt;" Analyze="True" />
          <Member Name="IntersectInplace(System.Collections.Generic.IEnumerable`1&lt;T&gt;):System.Void" Analyze="True" />
          <Member Name="IsSubset(System.Collections.Generic.IEnumerable`1&lt;T&gt;):System.Boolean" Analyze="True" />
          <Member Name="IsSuperset(System.Collections.Generic.IEnumerable`1&lt;T&gt;):System.Boolean" Analyze="True" />
          <Member Name="LastIndexOf(T):System.Int32" Analyze="True" />
          <Member Name="OnSetChanged" Analyze="True" />
          <Member Name="readonlyWrapper" Analyze="True" />
          <Member Name="RemoveAll(System.Predicate`1&lt;T&gt;):System.Int32" Analyze="True" />
          <Member Name="RemoveDuplicates():System.Void" Analyze="True" />
          <Member Name="RemoveItem(System.Int32):System.Void" Analyze="True" />
          <Member Name="ReplaceRange(System.Collections.Generic.IEnumerable`1&lt;T&gt;):System.Void" Analyze="True" />
          <Member Name="SetItem(System.Int32,T):System.Void" Analyze="True" />
          <Member Name="Subtract(System.Collections.Generic.IEnumerable`1&lt;T&gt;):MathNet.Numerics.Set`1&lt;T&gt;" Analyze="True" />
          <Member Name="Subtract(System.Collections.Generic.IEnumerable`1&lt;T&gt;,System.Collections.Generic.IEnumerable`1&lt;T&gt;):MathNet.Numerics.Set`1&lt;T&gt;" Analyze="True" />
          <Member Name="SubtractInplace(System.Collections.Generic.IEnumerable`1&lt;T&gt;):System.Void" Analyze="True" />
          <Member Name="ToArray():T[]" Analyze="True" />
          <Member Name="TrueForAll(System.Predicate`1&lt;T&gt;):System.Boolean" Analyze="True" />
          <Member Name="Union(System.Collections.Generic.IEnumerable`1&lt;T&gt;):MathNet.Numerics.Set`1&lt;T&gt;" Analyze="True" />
          <Member Name="Union(System.Collections.Generic.IEnumerable`1&lt;T&gt;,System.Collections.Generic.IEnumerable`1&lt;T&gt;):MathNet.Numerics.Set`1&lt;T&gt;" Analyze="True" />
          <Member Name="UnionInplace(System.Collections.Generic.IEnumerable`1&lt;T&gt;):System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="SetChangedEventArgs`1" Analyze="True">
         <Members>
          <Member Name=".ctor(MathNet.Numerics.SetElementOperation,T,System.Int32,System.Int32)" Analyze="True" />
          <Member Name="Added(T,System.Int32):MathNet.Numerics.SetChangedEventArgs`1&lt;T&gt;" Analyze="True" />
          <Member Name="element" Analyze="True" />
          <Member Name="Element" Analyze="True">
           <Accessors>
            <Accessor Name="get_Element():T" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ElementAdded" Analyze="True">
           <Accessors>
            <Accessor Name="get_ElementAdded():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ElementMoved" Analyze="True">
           <Accessors>
            <Accessor Name="get_ElementMoved():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ElementRemoved" Analyze="True">
           <Accessors>
            <Accessor Name="get_ElementRemoved():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="indexAfter" Analyze="True" />
          <Member Name="IndexAfter" Analyze="True">
           <Accessors>
            <Accessor Name="get_IndexAfter():System.Int32" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="indexBefore" Analyze="True" />
          <Member Name="IndexBefore" Analyze="True">
           <Accessors>
            <Accessor Name="get_IndexBefore():System.Int32" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Moved(T,System.Int32,System.Int32):MathNet.Numerics.SetChangedEventArgs`1&lt;T&gt;" Analyze="True" />
          <Member Name="op" Analyze="True" />
          <Member Name="Operation" Analyze="True">
           <Accessors>
            <Accessor Name="get_Operation():MathNet.Numerics.SetElementOperation" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Removed(T,System.Int32):MathNet.Numerics.SetChangedEventArgs`1&lt;T&gt;" Analyze="True" />
         </Members>
        </Type>
        <Type Name="SetElementOperation" Analyze="True">
         <Members>
          <Member Name="Added" Analyze="True" />
          <Member Name="Moved" Analyze="True" />
          <Member Name="Removed" Analyze="True" />
          <Member Name="value__" Analyze="True" />
         </Members>
        </Type>
        <Type Name="Trig" Analyze="True">
         <Members>
          <Member Name="Cosecant(System.Double):System.Double" Analyze="True" />
          <Member Name="Cosine(System.Double):System.Double" Analyze="True" />
          <Member Name="Cotangent(System.Double):System.Double" Analyze="True" />
          <Member Name="DegreeToNewgrad(System.Double):System.Double" Analyze="True" />
          <Member Name="DegreeToRadian(System.Double):System.Double" Analyze="True" />
          <Member Name="HyperbolicCosecant(System.Double):System.Double" Analyze="True" />
          <Member Name="HyperbolicCosine(System.Double):System.Double" Analyze="True" />
          <Member Name="HyperbolicCotangent(System.Double):System.Double" Analyze="True" />
          <Member Name="HyperbolicSecant(System.Double):System.Double" Analyze="True" />
          <Member Name="HyperbolicSine(System.Double):System.Double" Analyze="True" />
          <Member Name="HyperbolicTangent(System.Double):System.Double" Analyze="True" />
          <Member Name="InverseCosecant(System.Double):System.Double" Analyze="True" />
          <Member Name="InverseCosine(System.Double):System.Double" Analyze="True" />
          <Member Name="InverseCotangent(System.Double):System.Double" Analyze="True" />
          <Member Name="InverseHyperbolicCosecant(System.Double):System.Double" Analyze="True" />
          <Member Name="InverseHyperbolicCosine(System.Double):System.Double" Analyze="True" />
          <Member Name="InverseHyperbolicCotangent(System.Double):System.Double" Analyze="True" />
          <Member Name="InverseHyperbolicSecant(System.Double):System.Double" Analyze="True" />
          <Member Name="InverseHyperbolicSine(System.Double):System.Double" Analyze="True" />
          <Member Name="InverseHyperbolicTangent(System.Double):System.Double" Analyze="True" />
          <Member Name="InverseSecant(System.Double):System.Double" Analyze="True" />
          <Member Name="InverseSine(System.Double):System.Double" Analyze="True" />
          <Member Name="InverseTangent(System.Double):System.Double" Analyze="True" />
          <Member Name="InverseTangentFromRational(System.Double,System.Double):System.Double" Analyze="True" />
          <Member Name="NewgradToDegree(System.Double):System.Double" Analyze="True" />
          <Member Name="NewgradToRadian(System.Double):System.Double" Analyze="True" />
          <Member Name="RadianToDegree(System.Double):System.Double" Analyze="True" />
          <Member Name="RadianToNewgrad(System.Double):System.Double" Analyze="True" />
          <Member Name="Secant(System.Double):System.Double" Analyze="True" />
          <Member Name="Sine(System.Double):System.Double" Analyze="True" />
          <Member Name="Tangent(System.Double):System.Double" Analyze="True" />
         </Members>
        </Type>
        <Type Name="Tuple`2" Analyze="True">
         <Members>
          <Member Name=".ctor(TFirst,TSecond)" Analyze="True" />
          <Member Name="_first" Analyze="True" />
          <Member Name="_second" Analyze="True" />
          <Member Name="Equals(MathNet.Numerics.Tuple`2&lt;TFirst,TSecond&gt;):System.Boolean" Analyze="True" />
          <Member Name="First" Analyze="True">
           <Accessors>
            <Accessor Name="get_First():TFirst" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Second" Analyze="True">
           <Accessors>
            <Accessor Name="get_Second():TSecond" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="MathNet.Numerics.Distributions" Analyze="True">
       <Types>
        <Type Name="CumulativeNormalDistribution" Analyze="True">
         <Members>
          <Member Name=".cctor()" Analyze="True" />
          <Member Name=".ctor()" Analyze="True" />
          <Member Name=".ctor(System.Double,System.Double)" Analyze="True" />
          <Member Name="Factorial(System.Double):System.Double" Analyze="True" />
          <Member Name="FPMIN" Analyze="True" />
          <Member Name="Gamma(System.Double):System.Double" Analyze="True" />
          <Member Name="igfeps" Analyze="True" />
          <Member Name="igfiter" Analyze="True" />
          <Member Name="IncompleteGamma(System.Double,System.Double):System.Double" Analyze="True" />
          <Member Name="IncompleteGammaFract(System.Double,System.Double):System.Double" Analyze="True" />
          <Member Name="IncompleteGammaSer(System.Double,System.Double):System.Double" Analyze="True" />
          <Member Name="lgfCoeff" Analyze="True" />
          <Member Name="lgfGamma" Analyze="True" />
          <Member Name="lgfN" Analyze="True" />
          <Member Name="LogFactorial(System.Double):System.Double" Analyze="True" />
          <Member Name="LogGamma(System.Double):System.Double" Analyze="True" />
          <Member Name="mean" Analyze="True" />
          <Member Name="sigma" Analyze="True" />
          <Member Name="ValueOf(System.Double):System.Double" Analyze="True" />
         </Members>
        </Type>
        <Type Name="InvCumulativeNormalDistribution" Analyze="True">
         <Members>
          <Member Name=".cctor()" Analyze="True" />
          <Member Name=".ctor()" Analyze="True" />
          <Member Name=".ctor(System.Double,System.Double)" Analyze="True" />
          <Member Name="a" Analyze="True" />
          <Member Name="b" Analyze="True" />
          <Member Name="c" Analyze="True" />
          <Member Name="d" Analyze="True" />
          <Member Name="mean" Analyze="True" />
          <Member Name="Mean" Analyze="True">
           <Accessors>
            <Accessor Name="get_Mean():System.Double" Analyze="True" />
            <Accessor Name="set_Mean(System.Double):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="sigma" Analyze="True" />
          <Member Name="Sigma" Analyze="True">
           <Accessors>
            <Accessor Name="get_Sigma():System.Double" Analyze="True" />
            <Accessor Name="set_Sigma(System.Double):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="StandardValueOf(System.Double):System.Double" Analyze="True" />
          <Member Name="ValueOf(System.Double):System.Double" Analyze="True" />
         </Members>
        </Type>
        <Type Name="NamespaceDoc" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="MathNet.Numerics.Equations" Analyze="True">
       <Types>
        <Type Name="NamespaceDoc" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
         </Members>
        </Type>
        <Type Name="ScalarIterator" Analyze="True">
         <Members>
          <Member Name=".ctor(MathNet.Numerics.IRealFunction)" Analyze="True" />
          <Member Name=".ctor(MathNet.Numerics.IRealFunction,MathNet.Numerics.IRealFunction)" Analyze="True" />
          <Member Name="f" Analyze="True" />
          <Member Name="fderiv" Analyze="True" />
          <Member Name="FindFixpoint(System.Double,System.Double,System.Double):System.Double" Analyze="True" />
          <Member Name="FindRoot(System.Double,System.Double,System.Double,System.Double):System.Double" Analyze="True" />
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="MathNet.Numerics.Generators" Analyze="True">
       <Types>
        <Type Name="BinomialGenerator" Analyze="True">
         <Members>
          <Member Name=".cctor()" Analyze="True" />
          <Member Name=".ctor(System.Double,System.Int32)" Analyze="True" />
          <Member Name=".ctor(System.Double,System.Int32,System.Random)" Analyze="True" />
          <Member Name="_numberTrials" Analyze="True" />
          <Member Name="_probability" Analyze="True" />
          <Member Name="en" Analyze="True" />
          <Member Name="Next():System.Double" Analyze="True" />
          <Member Name="Next(System.Double,System.Int32):System.Double" Analyze="True" />
          <Member Name="oldGamma" Analyze="True" />
          <Member Name="oldNumber" Analyze="True" />
          <Member Name="oldProbability" Analyze="True" />
          <Member Name="pc" Analyze="True" />
          <Member Name="pclog" Analyze="True" />
          <Member Name="probabilityLog" Analyze="True" />
          <Member Name="random" Analyze="True" />
         </Members>
        </Type>
        <Type Name="CombinationGenerator" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="Next(System.Double[],System.Int32):System.Int32[]" Analyze="True" />
          <Member Name="Next(System.Int32,System.Int32):System.Int32[]" Analyze="True" />
         </Members>
        </Type>
        <Type Name="DiscreteGenerator" Analyze="True">
         <Members>
          <Member Name=".ctor(System.Double[])" Analyze="True" />
          <Member Name=".ctor(System.Double[],System.Random)" Analyze="True" />
          <Member Name=".ctor(System.Int32,System.Double)" Analyze="True" />
          <Member Name=".ctor(System.Int32,System.Double,System.Int32)" Analyze="True" />
          <Member Name="Count" Analyze="True">
           <Accessors>
            <Accessor Name="get_Count():System.Int32" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Item[System.Int32]" Analyze="True">
           <Accessors>
            <Accessor Name="get_Item(System.Int32):System.Double" Analyze="True" />
            <Accessor Name="set_Item(System.Int32,System.Double):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Next():System.Int32" Analyze="True" />
          <Member Name="random" Analyze="True" />
          <Member Name="weights" Analyze="True" />
         </Members>
        </Type>
        <Type Name="ExponentialGenerator" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name=".ctor(System.Double)" Analyze="True" />
          <Member Name=".ctor(System.Double,System.Random)" Analyze="True" />
          <Member Name=".ctor(System.Int32)" Analyze="True" />
          <Member Name="halfPeriod" Analyze="True" />
          <Member Name="HalfPeriod" Analyze="True">
           <Accessors>
            <Accessor Name="get_HalfPeriod():System.Double" Analyze="True" />
            <Accessor Name="set_HalfPeriod(System.Double):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Next():System.Double" Analyze="True" />
          <Member Name="random" Analyze="True" />
         </Members>
        </Type>
        <Type Name="GammaGenerator" Analyze="True">
         <Members>
          <Member Name=".ctor(System.Int32)" Analyze="True" />
          <Member Name=".ctor(System.Int32,System.Random)" Analyze="True" />
          <Member Name="Next():System.Double" Analyze="True" />
          <Member Name="order" Analyze="True" />
          <Member Name="Order" Analyze="True">
           <Accessors>
            <Accessor Name="get_Order():System.Int32" Analyze="True" />
            <Accessor Name="set_Order(System.Int32):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="random" Analyze="True" />
         </Members>
        </Type>
        <Type Name="NamespaceDoc" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
         </Members>
        </Type>
        <Type Name="NormalGenerator" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name=".ctor(System.Double,System.Double)" Analyze="True" />
          <Member Name=".ctor(System.Double,System.Double,System.Int32)" Analyze="True" />
          <Member Name=".ctor(System.Random)" Analyze="True" />
          <Member Name="extraNormal" Analyze="True" />
          <Member Name="mean" Analyze="True" />
          <Member Name="Mean" Analyze="True">
           <Accessors>
            <Accessor Name="get_Mean():System.Double" Analyze="True" />
            <Accessor Name="set_Mean(System.Double):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Next():System.Double" Analyze="True" />
          <Member Name="NextStandard():System.Double" Analyze="True" />
          <Member Name="random" Analyze="True" />
          <Member Name="sigma" Analyze="True" />
          <Member Name="Sigma" Analyze="True">
           <Accessors>
            <Accessor Name="get_Sigma():System.Double" Analyze="True" />
            <Accessor Name="set_Sigma(System.Double):System.Void" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="PermutationGenerator" Analyze="True">
         <Members>
          <Member Name=".cctor()" Analyze="True" />
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="AbstractSubset(System.Int32,System.Int32):System.Boolean[]" Analyze="True" />
          <Member Name="Next(System.Int32):System.Int32[]" Analyze="True" />
          <Member Name="random" Analyze="True" />
          <Member Name="Shuffle(System.Array):System.Void" Analyze="True" />
          <Member Name="Subset(System.Collections.ICollection,System.Int32):System.Array" Analyze="True" />
         </Members>
        </Type>
        <Type Name="PermutationGenerator+IndexedValue" Analyze="True">
         <Members>
          <Member Name=".ctor(System.Int32,System.Double)" Analyze="True" />
          <Member Name="CompareTo(System.Object):System.Int32" Analyze="True" />
          <Member Name="Index" Analyze="True" />
          <Member Name="Value" Analyze="True" />
         </Members>
        </Type>
        <Type Name="PoissonGenerator" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name=".ctor(System.Double)" Analyze="True" />
          <Member Name="lambda" Analyze="True" />
          <Member Name="Lambda" Analyze="True">
           <Accessors>
            <Accessor Name="get_Lambda():System.Double" Analyze="True" />
            <Accessor Name="set_Lambda(System.Double):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Next():System.Double" Analyze="True" />
         </Members>
        </Type>
        <Type Name="ZipfGenerator" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name=".ctor(System.Double)" Analyze="True" />
          <Member Name=".ctor(System.Double,System.Int32)" Analyze="True" />
          <Member Name=".ctor(System.Random)" Analyze="True" />
          <Member Name="Next():System.Double" Analyze="True" />
          <Member Name="random" Analyze="True" />
          <Member Name="skew" Analyze="True" />
          <Member Name="Skew" Analyze="True">
           <Accessors>
            <Accessor Name="get_Skew():System.Double" Analyze="True" />
            <Accessor Name="set_Skew(System.Double):System.Void" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="MathNet.Numerics.Interpolation" Analyze="True">
       <Types>
        <Type Name="IInterpolationAlgorithm" Analyze="True">
         <Members>
          <Member Name="Extrapolate(System.Double):System.Double" Analyze="True" />
          <Member Name="Interpolate(System.Double):System.Double" Analyze="True" />
          <Member Name="Interpolate(System.Double,System.Double&amp;):System.Double" Analyze="True" />
          <Member Name="Prepare(MathNet.Numerics.SampleList):System.Void" Analyze="True" />
          <Member Name="SupportErrorEstimation" Analyze="True">
           <Accessors>
            <Accessor Name="get_SupportErrorEstimation():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="InterpolationMode" Analyze="True">
         <Members>
          <Member Name="ExpectNoPoles" Analyze="True" />
          <Member Name="ExpectPoles" Analyze="True" />
          <Member Name="Smooth" Analyze="True" />
          <Member Name="value__" Analyze="True" />
         </Members>
        </Type>
        <Type Name="InterpolationSingleDimension" Analyze="True">
         <Members>
          <Member Name=".ctor(MathNet.Numerics.SampleList)" Analyze="True" />
          <Member Name=".ctor(MathNet.Numerics.SampleList,MathNet.Numerics.Interpolation.IInterpolationAlgorithm)" Analyze="True" />
          <Member Name=".ctor(MathNet.Numerics.SampleList,MathNet.Numerics.Interpolation.InterpolationMode)" Analyze="True" />
          <Member Name=".ctor(MathNet.Numerics.SampleList,MathNet.Numerics.Interpolation.InterpolationMode,System.Int32)" Analyze="True" />
          <Member Name=".ctor(System.Collections.IDictionary)" Analyze="True" />
          <Member Name="algorithm" Analyze="True" />
          <Member Name="dirty" Analyze="True" />
          <Member Name="Evaluate(System.Double):System.Double" Analyze="True" />
          <Member Name="Evaluate(System.Double,System.Double&amp;):System.Double" Analyze="True" />
          <Member Name="samples" Analyze="True" />
          <Member Name="samples_SampleAltered(System.Object,MathNet.Numerics.SampleList+SampleAlteredEventArgs):System.Void" Analyze="True" />
          <Member Name="SelectAlgorithm(MathNet.Numerics.Interpolation.InterpolationMode,System.Int32):MathNet.Numerics.Interpolation.IInterpolationAlgorithm" Analyze="True" />
          <Member Name="SupportErrorEstimation" Analyze="True">
           <Accessors>
            <Accessor Name="get_SupportErrorEstimation():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="PolynomialInterpolationAlgorithm" Analyze="True">
         <Members>
          <Member Name=".ctor(System.Int32)" Analyze="True" />
          <Member Name="effectiveOrder" Analyze="True" />
          <Member Name="Extrapolate(System.Double):System.Double" Analyze="True" />
          <Member Name="Interpolate(System.Double):System.Double" Analyze="True" />
          <Member Name="Interpolate(System.Double,System.Double&amp;):System.Double" Analyze="True" />
          <Member Name="order" Analyze="True" />
          <Member Name="Prepare(MathNet.Numerics.SampleList):System.Void" Analyze="True" />
          <Member Name="samples" Analyze="True" />
          <Member Name="SuggestOffset(System.Double,System.Int32&amp;):System.Int32" Analyze="True" />
          <Member Name="SupportErrorEstimation" Analyze="True">
           <Accessors>
            <Accessor Name="get_SupportErrorEstimation():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="RationalInterpolationAlgorithm" Analyze="True">
         <Members>
          <Member Name=".ctor(System.Int32)" Analyze="True" />
          <Member Name="effectiveOrder" Analyze="True" />
          <Member Name="Extrapolate(System.Double):System.Double" Analyze="True" />
          <Member Name="Interpolate(System.Double):System.Double" Analyze="True" />
          <Member Name="Interpolate(System.Double,System.Double&amp;):System.Double" Analyze="True" />
          <Member Name="order" Analyze="True" />
          <Member Name="Prepare(MathNet.Numerics.SampleList):System.Void" Analyze="True" />
          <Member Name="samples" Analyze="True" />
          <Member Name="SuggestOffset(System.Double,System.Int32&amp;):System.Int32" Analyze="True" />
          <Member Name="SupportErrorEstimation" Analyze="True">
           <Accessors>
            <Accessor Name="get_SupportErrorEstimation():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="MathNet.Numerics.LinearAlgebra" Analyze="True">
       <Types>
        <Type Name="CholeskyDecomposition" Analyze="True">
         <Members>
          <Member Name=".ctor(MathNet.Numerics.LinearAlgebra.Matrix)" Analyze="True" />
          <Member Name="GetL():MathNet.Numerics.LinearAlgebra.Matrix" Analyze="True" />
          <Member Name="isspd" Analyze="True" />
          <Member Name="IsSPD" Analyze="True">
           <Accessors>
            <Accessor Name="get_IsSPD():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="L" Analyze="True" />
          <Member Name="n" Analyze="True">
           <Accessors>
            <Accessor Name="get_n():System.Int32" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Solve(MathNet.Numerics.LinearAlgebra.Matrix):MathNet.Numerics.LinearAlgebra.Matrix" Analyze="True" />
         </Members>
        </Type>
        <Type Name="EigenvalueDecomposition" Analyze="True">
         <Members>
          <Member Name=".ctor(MathNet.Numerics.LinearAlgebra.Matrix)" Analyze="True" />
          <Member Name=".ctor(System.Double[],System.Double[])" Analyze="True" />
          <Member Name="BlockDiagonal" Analyze="True">
           <Accessors>
            <Accessor Name="get_BlockDiagonal():MathNet.Numerics.LinearAlgebra.Matrix" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="cdiv(System.Double,System.Double,System.Double,System.Double):System.Void" Analyze="True" />
          <Member Name="cdivi" Analyze="True" />
          <Member Name="cdivr" Analyze="True" />
          <Member Name="d" Analyze="True" />
          <Member Name="e" Analyze="True" />
          <Member Name="EigenValues" Analyze="True">
           <Accessors>
            <Accessor Name="get_EigenValues():MathNet.Numerics.Complex[]" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="EigenVectors" Analyze="True">
           <Accessors>
            <Accessor Name="get_EigenVectors():MathNet.Numerics.LinearAlgebra.Matrix" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="H" Analyze="True" />
          <Member Name="hqr2():System.Void" Analyze="True" />
          <Member Name="ImagEigenvalues" Analyze="True">
           <Accessors>
            <Accessor Name="get_ImagEigenvalues():System.Double[]" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="issymmetric" Analyze="True" />
          <Member Name="n" Analyze="True" />
          <Member Name="ort" Analyze="True" />
          <Member Name="orthes():System.Void" Analyze="True" />
          <Member Name="RealEigenvalues" Analyze="True">
           <Accessors>
            <Accessor Name="get_RealEigenvalues():System.Double[]" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="tql2():System.Void" Analyze="True" />
          <Member Name="tred2():System.Void" Analyze="True" />
          <Member Name="V" Analyze="True" />
         </Members>
        </Type>
        <Type Name="LUDecomposition" Analyze="True">
         <Members>
          <Member Name=".ctor(MathNet.Numerics.LinearAlgebra.Matrix)" Analyze="True" />
          <Member Name="Determinant():System.Double" Analyze="True" />
          <Member Name="DoublePivot" Analyze="True">
           <Accessors>
            <Accessor Name="get_DoublePivot():System.Double[]" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="IsNonSingular" Analyze="True">
           <Accessors>
            <Accessor Name="get_IsNonSingular():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="L" Analyze="True">
           <Accessors>
            <Accessor Name="get_L():MathNet.Numerics.LinearAlgebra.Matrix" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="LU" Analyze="True" />
          <Member Name="m" Analyze="True">
           <Accessors>
            <Accessor Name="get_m():System.Int32" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="n" Analyze="True">
           <Accessors>
            <Accessor Name="get_n():System.Int32" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="piv" Analyze="True" />
          <Member Name="Pivot" Analyze="True">
           <Accessors>
            <Accessor Name="get_Pivot():System.Int32[]" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="pivsign" Analyze="True" />
          <Member Name="Solve(MathNet.Numerics.LinearAlgebra.Matrix):MathNet.Numerics.LinearAlgebra.Matrix" Analyze="True" />
          <Member Name="U" Analyze="True">
           <Accessors>
            <Accessor Name="get_U():MathNet.Numerics.LinearAlgebra.Matrix" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="Maths" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="Hypot(System.Double,System.Double):System.Double" Analyze="True" />
         </Members>
        </Type>
        <Type Name="Matrix" Analyze="True">
         <Members>
          <Member Name=".ctor(System.Double[,])" Analyze="True" />
          <Member Name=".ctor(System.Double[],System.Int32)" Analyze="True" />
          <Member Name=".ctor(System.Int32,System.Int32)" Analyze="True" />
          <Member Name=".ctor(System.Int32,System.Int32,System.Double)" Analyze="True" />
          <Member Name="Add(MathNet.Numerics.LinearAlgebra.Matrix):System.Void" Analyze="True" />
          <Member Name="array" Analyze="True" />
          <Member Name="ArrayDivide(MathNet.Numerics.LinearAlgebra.Matrix):System.Void" Analyze="True" />
          <Member Name="ArrayDivide(MathNet.Numerics.LinearAlgebra.Matrix,MathNet.Numerics.LinearAlgebra.Matrix):MathNet.Numerics.LinearAlgebra.Matrix" Analyze="True" />
          <Member Name="ArrayMultiply(MathNet.Numerics.LinearAlgebra.Matrix):System.Void" Analyze="True" />
          <Member Name="ArrayMultiply(MathNet.Numerics.LinearAlgebra.Matrix,MathNet.Numerics.LinearAlgebra.Matrix):MathNet.Numerics.LinearAlgebra.Matrix" Analyze="True" />
          <Member Name="CheckMatrixDimensions(MathNet.Numerics.LinearAlgebra.Matrix):System.Void" Analyze="True" />
          <Member Name="chol():MathNet.Numerics.LinearAlgebra.CholeskyDecomposition" Analyze="True" />
          <Member Name="Clone():MathNet.Numerics.LinearAlgebra.Matrix" Analyze="True" />
          <Member Name="columnCount" Analyze="True">
           <Accessors>
            <Accessor Name="get_columnCount():System.Int32" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ColumnCount" Analyze="True">
           <Accessors>
            <Accessor Name="get_ColumnCount():System.Int32" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Condition():System.Double" Analyze="True" />
          <Member Name="Create(System.Double[,]):MathNet.Numerics.LinearAlgebra.Matrix" Analyze="True" />
          <Member Name="Determinant():System.Double" Analyze="True" />
          <Member Name="Eigen():MathNet.Numerics.LinearAlgebra.EigenvalueDecomposition" Analyze="True" />
          <Member Name="GetMatrix(System.Int32,System.Int32,System.Int32,System.Int32):MathNet.Numerics.LinearAlgebra.Matrix" Analyze="True" />
          <Member Name="GetMatrix(System.Int32,System.Int32,System.Int32[]):MathNet.Numerics.LinearAlgebra.Matrix" Analyze="True" />
          <Member Name="GetMatrix(System.Int32[],System.Int32,System.Int32):MathNet.Numerics.LinearAlgebra.Matrix" Analyze="True" />
          <Member Name="GetMatrix(System.Int32[],System.Int32[]):MathNet.Numerics.LinearAlgebra.Matrix" Analyze="True" />
          <Member Name="Identity(System.Int32,System.Int32):MathNet.Numerics.LinearAlgebra.Matrix" Analyze="True" />
          <Member Name="Inverse():MathNet.Numerics.LinearAlgebra.Matrix" Analyze="True" />
          <Member Name="Item[System.Int32,System.Int32]" Analyze="True">
           <Accessors>
            <Accessor Name="get_Item(System.Int32,System.Int32):System.Double" Analyze="True" />
            <Accessor Name="set_Item(System.Int32,System.Int32,System.Double):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="LUD():MathNet.Numerics.LinearAlgebra.LUDecomposition" Analyze="True" />
          <Member Name="Multiply(System.Double):System.Void" Analyze="True" />
          <Member Name="Norm1():System.Double" Analyze="True" />
          <Member Name="Norm2():System.Double" Analyze="True" />
          <Member Name="NormF():System.Double" Analyze="True" />
          <Member Name="NormInf():System.Double" Analyze="True" />
          <Member Name="op_Addition(MathNet.Numerics.LinearAlgebra.Matrix,MathNet.Numerics.LinearAlgebra.Matrix):MathNet.Numerics.LinearAlgebra.Matrix" Analyze="True" />
          <Member Name="op_Explicit(MathNet.Numerics.LinearAlgebra.Matrix):System.Double[]" Analyze="True" />
          <Member Name="op_Implicit(MathNet.Numerics.LinearAlgebra.Matrix):System.Double[,]" Analyze="True" />
          <Member Name="op_Multiply(MathNet.Numerics.LinearAlgebra.Matrix,MathNet.Numerics.LinearAlgebra.Matrix):MathNet.Numerics.LinearAlgebra.Matrix" Analyze="True" />
          <Member Name="op_Multiply(System.Double,MathNet.Numerics.LinearAlgebra.Matrix):MathNet.Numerics.LinearAlgebra.Matrix" Analyze="True" />
          <Member Name="op_Subtraction(MathNet.Numerics.LinearAlgebra.Matrix,MathNet.Numerics.LinearAlgebra.Matrix):MathNet.Numerics.LinearAlgebra.Matrix" Analyze="True" />
          <Member Name="QRD():MathNet.Numerics.LinearAlgebra.QRDecomposition" Analyze="True" />
          <Member Name="Random(System.Int32,System.Int32):MathNet.Numerics.LinearAlgebra.Matrix" Analyze="True" />
          <Member Name="Rank():System.Int32" Analyze="True" />
          <Member Name="rowCount" Analyze="True">
           <Accessors>
            <Accessor Name="get_rowCount():System.Int32" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="RowCount" Analyze="True">
           <Accessors>
            <Accessor Name="get_RowCount():System.Int32" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="SetMatrix(System.Int32,System.Int32,System.Int32,System.Int32,MathNet.Numerics.LinearAlgebra.Matrix):System.Void" Analyze="True" />
          <Member Name="SetMatrix(System.Int32,System.Int32,System.Int32[],MathNet.Numerics.LinearAlgebra.Matrix):System.Void" Analyze="True" />
          <Member Name="SetMatrix(System.Int32[],System.Int32,System.Int32,MathNet.Numerics.LinearAlgebra.Matrix):System.Void" Analyze="True" />
          <Member Name="SetMatrix(System.Int32[],System.Int32[],MathNet.Numerics.LinearAlgebra.Matrix):System.Void" Analyze="True" />
          <Member Name="Solve(MathNet.Numerics.LinearAlgebra.Matrix):MathNet.Numerics.LinearAlgebra.Matrix" Analyze="True" />
          <Member Name="SolveTranspose(MathNet.Numerics.LinearAlgebra.Matrix):MathNet.Numerics.LinearAlgebra.Matrix" Analyze="True" />
          <Member Name="Subtract(MathNet.Numerics.LinearAlgebra.Matrix):System.Void" Analyze="True" />
          <Member Name="SVD():MathNet.Numerics.LinearAlgebra.SingularValueDecomposition" Analyze="True" />
          <Member Name="System.ICloneable.Clone():System.Object" Analyze="True" />
          <Member Name="ToString():System.String" Analyze="True" />
          <Member Name="Trace():System.Double" Analyze="True" />
          <Member Name="Transpose():System.Void" Analyze="True" />
          <Member Name="Transpose(MathNet.Numerics.LinearAlgebra.Matrix):MathNet.Numerics.LinearAlgebra.Matrix" Analyze="True" />
          <Member Name="UnaryMinus():System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="NamespaceDoc" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
         </Members>
        </Type>
        <Type Name="QRDecomposition" Analyze="True">
         <Members>
          <Member Name=".ctor(MathNet.Numerics.LinearAlgebra.Matrix)" Analyze="True" />
          <Member Name="FullRank" Analyze="True">
           <Accessors>
            <Accessor Name="get_FullRank():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="H" Analyze="True">
           <Accessors>
            <Accessor Name="get_H():MathNet.Numerics.LinearAlgebra.Matrix" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="m" Analyze="True">
           <Accessors>
            <Accessor Name="get_m():System.Int32" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="n" Analyze="True">
           <Accessors>
            <Accessor Name="get_n():System.Int32" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Q" Analyze="True">
           <Accessors>
            <Accessor Name="get_Q():MathNet.Numerics.LinearAlgebra.Matrix" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="QR" Analyze="True" />
          <Member Name="R" Analyze="True">
           <Accessors>
            <Accessor Name="get_R():MathNet.Numerics.LinearAlgebra.Matrix" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Rdiag" Analyze="True" />
          <Member Name="Solve(MathNet.Numerics.LinearAlgebra.Matrix):MathNet.Numerics.LinearAlgebra.Matrix" Analyze="True" />
         </Members>
        </Type>
        <Type Name="SingularValueDecomposition" Analyze="True">
         <Members>
          <Member Name=".ctor(MathNet.Numerics.LinearAlgebra.Matrix)" Analyze="True" />
          <Member Name="Condition():System.Double" Analyze="True" />
          <Member Name="LeftSingularVectors" Analyze="True">
           <Accessors>
            <Accessor Name="get_LeftSingularVectors():MathNet.Numerics.LinearAlgebra.Matrix" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="m" Analyze="True" />
          <Member Name="n" Analyze="True" />
          <Member Name="Norm2():System.Double" Analyze="True" />
          <Member Name="Rank():System.Int32" Analyze="True" />
          <Member Name="RightSingularVectors" Analyze="True">
           <Accessors>
            <Accessor Name="get_RightSingularVectors():MathNet.Numerics.LinearAlgebra.Matrix" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="s" Analyze="True" />
          <Member Name="S" Analyze="True">
           <Accessors>
            <Accessor Name="get_S():MathNet.Numerics.LinearAlgebra.Matrix" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="SingularValues" Analyze="True">
           <Accessors>
            <Accessor Name="get_SingularValues():System.Double[]" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="transpose" Analyze="True" />
          <Member Name="U" Analyze="True" />
          <Member Name="V" Analyze="True" />
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="MathNet.Numerics.Statistics" Analyze="True">
       <Types>
        <Type Name="Accumulator" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name=".ctor(System.Collections.Generic.IEnumerable`1&lt;System.Double&gt;)" Analyze="True" />
          <Member Name=".ctor(System.Collections.ICollection)" Analyze="True" />
          <Member Name=".ctor(System.Double[])" Analyze="True" />
          <Member Name="Add(System.Double):System.Void" Analyze="True" />
          <Member Name="AddRange(System.Collections.Generic.IEnumerable`1&lt;System.Double&gt;):System.Void" Analyze="True" />
          <Member Name="AddRange(System.Collections.ICollection):System.Void" Analyze="True" />
          <Member Name="AddRange(System.Double[]):System.Void" Analyze="True" />
          <Member Name="Clear():System.Void" Analyze="True" />
          <Member Name="count" Analyze="True" />
          <Member Name="Count" Analyze="True">
           <Accessors>
            <Accessor Name="get_Count():System.Int32" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ErrorEstimate" Analyze="True">
           <Accessors>
            <Accessor Name="get_ErrorEstimate():System.Double" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Mean" Analyze="True">
           <Accessors>
            <Accessor Name="get_Mean():System.Double" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="MeanSquared" Analyze="True">
           <Accessors>
            <Accessor Name="get_MeanSquared():System.Double" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Remove(System.Double):System.Void" Analyze="True" />
          <Member Name="RemoveRange(System.Collections.Generic.IEnumerable`1&lt;System.Double&gt;):System.Void" Analyze="True" />
          <Member Name="RemoveRange(System.Collections.ICollection):System.Void" Analyze="True" />
          <Member Name="RemoveRange(System.Double[]):System.Void" Analyze="True" />
          <Member Name="Sigma" Analyze="True">
           <Accessors>
            <Accessor Name="get_Sigma():System.Double" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="squaredSum" Analyze="True" />
          <Member Name="SquaredSum" Analyze="True">
           <Accessors>
            <Accessor Name="get_SquaredSum():System.Double" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="sum" Analyze="True" />
          <Member Name="Sum" Analyze="True">
           <Accessors>
            <Accessor Name="get_Sum():System.Double" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Variance" Analyze="True">
           <Accessors>
            <Accessor Name="get_Variance():System.Double" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="Bucket" Analyze="True">
         <Members>
          <Member Name=".cctor()" Analyze="True" />
          <Member Name=".ctor(MathNet.Numerics.Statistics.Bucket)" Analyze="True" />
          <Member Name=".ctor(System.Double,System.Double)" Analyze="True" />
          <Member Name=".ctor(System.Double,System.Double,System.Double)" Analyze="True" />
          <Member Name="Clone():System.Object" Analyze="True" />
          <Member Name="CompareTo(System.Object):System.Int32" Analyze="True" />
          <Member Name="DefaultPointComparer" Analyze="True">
           <Accessors>
            <Accessor Name="get_DefaultPointComparer():System.Collections.IComparer" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="depth" Analyze="True" />
          <Member Name="Depth" Analyze="True">
           <Accessors>
            <Accessor Name="get_Depth():System.Double" Analyze="True" />
            <Accessor Name="set_Depth(System.Double):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Equals(System.Object):System.Boolean" Analyze="True" />
          <Member Name="lowerBound" Analyze="True" />
          <Member Name="LowerBound" Analyze="True">
           <Accessors>
            <Accessor Name="get_LowerBound():System.Double" Analyze="True" />
            <Accessor Name="set_LowerBound(System.Double):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="pointComparer" Analyze="True" />
          <Member Name="ToString():System.String" Analyze="True" />
          <Member Name="upperBound" Analyze="True" />
          <Member Name="UpperBound" Analyze="True">
           <Accessors>
            <Accessor Name="get_UpperBound():System.Double" Analyze="True" />
            <Accessor Name="set_UpperBound(System.Double):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Width" Analyze="True">
           <Accessors>
            <Accessor Name="get_Width():System.Double" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="Bucket+PointComparer" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="Compare(System.Object,System.Object):System.Int32" Analyze="True" />
         </Members>
        </Type>
        <Type Name="Histogram" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="Add(MathNet.Numerics.Statistics.Bucket):System.Void" Analyze="True" />
          <Member Name="areBucketsSorted" Analyze="True" />
          <Member Name="buckets" Analyze="True" />
          <Member Name="Count" Analyze="True">
           <Accessors>
            <Accessor Name="get_Count():System.Int32" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="GetContainerIndexOf(System.Double):System.Int32" Analyze="True" />
          <Member Name="GetContainerOf(System.Double):MathNet.Numerics.Statistics.Bucket" Analyze="True" />
          <Member Name="Item[System.Int32]" Analyze="True">
           <Accessors>
            <Accessor Name="get_Item(System.Int32):MathNet.Numerics.Statistics.Bucket" Analyze="True" />
            <Accessor Name="set_Item(System.Int32,MathNet.Numerics.Statistics.Bucket):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="JoinBuckets():System.Void" Analyze="True" />
          <Member Name="LazySort():System.Void" Analyze="True" />
          <Member Name="OptimalDispersion(System.Int32,System.Collections.ICollection):MathNet.Numerics.Statistics.Histogram" Analyze="True" />
          <Member Name="OptimalFreedom(System.Int32,System.Collections.ICollection):MathNet.Numerics.Statistics.Histogram" Analyze="True" />
          <Member Name="OptimalSquaredFreedom(System.Int32,System.Collections.ICollection):MathNet.Numerics.Statistics.Histogram" Analyze="True" />
          <Member Name="OptimalVariance(System.Int32,System.Collections.ICollection):MathNet.Numerics.Statistics.Histogram" Analyze="True" />
          <Member Name="Sort():System.Void" Analyze="True" />
          <Member Name="ToString():System.String" Analyze="True" />
          <Member Name="TotalDepth" Analyze="True">
           <Accessors>
            <Accessor Name="get_TotalDepth():System.Double" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="NamespaceDoc" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="MathNet.Numerics.Transformations" Analyze="True">
       <Types>
        <Type Name="ComplexFourierTransformation" Analyze="True">
         <Members>
          <Member Name=".ctor(MathNet.Numerics.Complex[])" Analyze="True" />
          <Member Name="ReorderData():System.Void" Analyze="True" />
          <Member Name="TransformCore(System.Boolean):System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="ComplexTransformation" Analyze="True">
         <Members>
          <Member Name=".ctor(MathNet.Numerics.Complex[])" Analyze="True" />
          <Member Name="Data" Analyze="True">
           <Accessors>
            <Accessor Name="get_Data():MathNet.Numerics.Complex[]" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="LockViewData(System.Int32,System.Int32,System.Int32):System.Void" Analyze="True" />
          <Member Name="rawData" Analyze="True" />
          <Member Name="ScaleRawData():System.Void" Analyze="True" />
          <Member Name="SwapViewData(System.Int32,System.Int32):System.Void" Analyze="True" />
          <Member Name="Transform1D(System.Boolean):System.Void" Analyze="True" />
          <Member Name="Transform2D(System.Boolean,System.Int32):System.Void" Analyze="True" />
          <Member Name="Transform3D(System.Boolean,System.Int32,System.Int32):System.Void" Analyze="True" />
          <Member Name="TransformBackward1D():System.Void" Analyze="True" />
          <Member Name="TransformBackward2D(System.Int32):System.Void" Analyze="True" />
          <Member Name="TransformBackward3D(System.Int32,System.Int32):System.Void" Analyze="True" />
          <Member Name="TransformCore(System.Boolean):System.Void" Analyze="True" />
          <Member Name="TransformForward1D():System.Void" Analyze="True" />
          <Member Name="TransformForward2D(System.Int32):System.Void" Analyze="True" />
          <Member Name="TransformForward3D(System.Int32,System.Int32):System.Void" Analyze="True" />
          <Member Name="UnlockViewData():System.Void" Analyze="True" />
          <Member Name="viewData" Analyze="True" />
          <Member Name="viewOffset" Analyze="True" />
          <Member Name="viewStep" Analyze="True" />
         </Members>
        </Type>
        <Type Name="FourierHelper" Analyze="True">
         <Members>
          <Member Name=".cctor()" Analyze="True" />
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="BuildCoefficientsForLevels(System.Int32):System.Void" Analyze="True" />
          <Member Name="imagCoefficients" Analyze="True" />
          <Member Name="ImaginarySineCoefficients(System.Int32,System.Boolean):System.Double[]" Analyze="True" />
          <Member Name="Log2(System.Int32):System.Int32" Analyze="True" />
          <Member Name="maxBits" Analyze="True" />
          <Member Name="maxLength" Analyze="True" />
          <Member Name="minBits" Analyze="True" />
          <Member Name="minLength" Analyze="True" />
          <Member Name="Pow2(System.Int32):System.Int32" Analyze="True" />
          <Member Name="realCoefficients" Analyze="True" />
          <Member Name="RealCosineCoefficients(System.Int32,System.Boolean):System.Double[]" Analyze="True" />
          <Member Name="ReverseBits(System.Int32):System.Int32[]" Analyze="True" />
          <Member Name="reversedBitsLookup" Analyze="True" />
         </Members>
        </Type>
        <Type Name="NamespaceDoc" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
         </Members>
        </Type>
        <Type Name="RealFourierTransformation" Analyze="True">
         <Members>
          <Member Name=".ctor(System.Double[])" Analyze="True" />
          <Member Name="ReorderData():System.Void" Analyze="True" />
          <Member Name="TransformCore(System.Boolean):System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="RealTransformation" Analyze="True">
         <Members>
          <Member Name=".ctor(System.Double[])" Analyze="True" />
          <Member Name="Data" Analyze="True">
           <Accessors>
            <Accessor Name="get_Data():System.Double[]" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="LockViewData(System.Int32,System.Int32,System.Int32):System.Void" Analyze="True" />
          <Member Name="rawData" Analyze="True" />
          <Member Name="ScaleRawData():System.Void" Analyze="True" />
          <Member Name="SwapViewData(System.Int32,System.Int32):System.Void" Analyze="True" />
          <Member Name="Transform1D(System.Boolean):System.Void" Analyze="True" />
          <Member Name="Transform2D(System.Boolean,System.Int32):System.Void" Analyze="True" />
          <Member Name="Transform3D(System.Boolean,System.Int32,System.Int32):System.Void" Analyze="True" />
          <Member Name="TransformBackward1D():System.Void" Analyze="True" />
          <Member Name="TransformBackward2D(System.Int32):System.Void" Analyze="True" />
          <Member Name="TransformBackward3D(System.Int32,System.Int32):System.Void" Analyze="True" />
          <Member Name="TransformCore(System.Boolean):System.Void" Analyze="True" />
          <Member Name="TransformForward1D():System.Void" Analyze="True" />
          <Member Name="TransformForward2D(System.Int32):System.Void" Analyze="True" />
          <Member Name="TransformForward3D(System.Int32,System.Int32):System.Void" Analyze="True" />
          <Member Name="UnlockViewData():System.Void" Analyze="True" />
          <Member Name="viewData" Analyze="True" />
          <Member Name="viewOffset" Analyze="True" />
          <Member Name="viewStep" Analyze="True" />
         </Members>
        </Type>
       </Types>
      </Namespace>
     </Namespaces>
    </Module>
   </Modules>
  </Target>
 </Targets>
 <Rules>
  <RuleFiles>
   <RuleFile Name="$(FxCopDir)\Rules\DesignRules.dll" Enabled="True">
    <Rule Name="AbstractTypesShouldNotHaveConstructors" Enabled="True" />
    <Rule Name="AssembliesShouldHaveValidStrongNames" Enabled="True" />
    <Rule Name="AvoidEmptyInterfaces" Enabled="True" />
    <Rule Name="AvoidExcessiveParametersOnGenericTypes" Enabled="True" />
    <Rule Name="AvoidNamespacesWithFewTypes" Enabled="True" />
    <Rule Name="AvoidOutParameters" Enabled="True" />
    <Rule Name="CollectionsShouldImplementGenericInterface" Enabled="True" />
    <Rule Name="ConsiderPassingBaseTypesAsParameters" Enabled="True" />
    <Rule Name="DeclareEventHandlersCorrectly" Enabled="True" />
    <Rule Name="DeclareTypesInNamespaces" Enabled="True" />
    <Rule Name="DefaultParametersShouldNotBeUsed" Enabled="True" />
    <Rule Name="DefineAccessorsForAttributeArguments" Enabled="True" />
    <Rule Name="DoNotCatchGeneralExceptionTypes" Enabled="True" />
    <Rule Name="DoNotDeclareProtectedMembersInSealedTypes" Enabled="True" />
    <Rule Name="DoNotDeclareStaticMembersOnGenericTypes" Enabled="True" />
    <Rule Name="DoNotDeclareVirtualMembersInSealedTypes" Enabled="True" />
    <Rule Name="DoNotDeclareVisibleInstanceFields" Enabled="True" />
    <Rule Name="DoNotExposeGenericLists" Enabled="True" />
    <Rule Name="DoNotHideBaseClassMethods" Enabled="True" />
    <Rule Name="DoNotNestGenericTypesInMemberSignatures" Enabled="True" />
    <Rule Name="DoNotOverloadOperatorEqualsOnReferenceTypes" Enabled="True" />
    <Rule Name="DoNotPassTypesByReference" Enabled="True" />
    <Rule Name="EnumeratorsShouldBeStronglyTyped" Enabled="True" />
    <Rule Name="EnumsShouldHaveZeroValue" Enabled="True" />
    <Rule Name="EnumStorageShouldBeInt32" Enabled="True" />
    <Rule Name="ExceptionsShouldBePublic" Enabled="True" />
    <Rule Name="GenericMethodsShouldProvideTypeParameter" Enabled="True" />
    <Rule Name="ICollectionImplementationsHaveStronglyTypedMembers" Enabled="True" />
    <Rule Name="ImplementIDisposableCorrectly" Enabled="True" />
    <Rule Name="ImplementStandardExceptionConstructors" Enabled="True" />
    <Rule Name="IndexersShouldNotBeMultidimensional" Enabled="True" />
    <Rule Name="InterfaceMethodsShouldBeCallableByChildTypes" Enabled="True" />
    <Rule Name="ListsAreStronglyTyped" Enabled="True" />
    <Rule Name="MarkAssembliesWithAssemblyVersion" Enabled="True" />
    <Rule Name="MarkAssembliesWithClsCompliant" Enabled="True" />
    <Rule Name="MarkAssembliesWithComVisible" Enabled="True" />
    <Rule Name="MarkAttributesWithAttributeUsage" Enabled="True" />
    <Rule Name="MarkEnumsWithFlags" Enabled="True" />
    <Rule Name="MembersShouldNotExposeCertainConcreteTypes" Enabled="True" />
    <Rule Name="MovePInvokesToNativeMethodsClass" Enabled="True" />
    <Rule Name="NestedTypesShouldNotBeVisible" Enabled="True" />
    <Rule Name="OverloadOperatorEqualsOnOverloadingAddAndSubtract" Enabled="True" />
    <Rule Name="OverrideMethodsOnComparableTypes" Enabled="True" />
    <Rule Name="PropertiesShouldNotBeWriteOnly" Enabled="True" />
    <Rule Name="ProvideObsoleteAttributeMessage" Enabled="True" />
    <Rule Name="ReplaceRepetitiveArgumentsWithParamsArray" Enabled="True" />
    <Rule Name="StaticHolderTypesShouldBeSealed" Enabled="True" />
    <Rule Name="StaticHolderTypesShouldNotHaveConstructors" Enabled="True" />
    <Rule Name="StringUriOverloadsCallSystemUriOverloads" Enabled="True" />
    <Rule Name="TypesShouldNotExtendCertainBaseTypes" Enabled="True" />
    <Rule Name="TypesThatOwnDisposableFieldsShouldBeDisposable" Enabled="True" />
    <Rule Name="TypesThatOwnNativeResourcesShouldBeDisposable" Enabled="True" />
    <Rule Name="UriParametersShouldNotBeStrings" Enabled="True" />
    <Rule Name="UriPropertiesShouldNotBeStrings" Enabled="True" />
    <Rule Name="UriReturnValuesShouldNotBeStrings" Enabled="True" />
    <Rule Name="UseEventsWhereAppropriate" Enabled="True" />
    <Rule Name="UseGenericEventHandlerInstances" Enabled="True" />
    <Rule Name="UseGenericsWhereAppropriate" Enabled="True" />
    <Rule Name="UseIntegralOrStringArgumentForIndexers" Enabled="True" />
    <Rule Name="UsePropertiesWhereAppropriate" Enabled="True" />
    <Rule Name="ValidateArgumentsOfPublicMethods" Enabled="True" />
   </RuleFile>
   <RuleFile Name="$(FxCopDir)\Rules\GlobalizationRules.dll" Enabled="True">
    <Rule Name="AvoidDuplicateAccelerators" Enabled="True" />
    <Rule Name="DoNotHardcodeLocaleSpecificStrings" Enabled="True" />
    <Rule Name="DoNotPassLiteralsAsLocalizedParameters" Enabled="True" />
    <Rule Name="SetLocaleForDataTypes" Enabled="True" />
    <Rule Name="SpecifyCultureInfo" Enabled="True" />
    <Rule Name="SpecifyIFormatProvider" Enabled="True" />
    <Rule Name="SpecifyMessageBoxOptions" Enabled="True" />
   </RuleFile>
   <RuleFile Name="$(FxCopDir)\Rules\InteroperabilityRules.dll" Enabled="True">
    <Rule Name="AutoLayoutTypesShouldNotBeComVisible" Enabled="True" />
    <Rule Name="AvoidInt64ArgumentsForVB6Clients" Enabled="True" />
    <Rule Name="AvoidNonpublicFieldsInComVisibleValueTypes" Enabled="True" />
    <Rule Name="AvoidOverloadsInComVisibleInterfaces" Enabled="True" />
    <Rule Name="AvoidStaticMembersInComVisibleTypes" Enabled="True" />
    <Rule Name="CallGetLastErrorImmediatelyAfterPInvoke" Enabled="True" />
    <Rule Name="ComRegistrationMethodsShouldBeMatched" Enabled="True" />
    <Rule Name="ComRegistrationMethodsShouldNotBeVisible" Enabled="True" />
    <Rule Name="ComVisibleTypeBaseTypesShouldBeComVisible" Enabled="True" />
    <Rule Name="ComVisibleTypesShouldBeCreatable" Enabled="True" />
    <Rule Name="DeclarePInvokesCorrectly" Enabled="True" />
    <Rule Name="DoNotUseAutoDualClassInterfaceType" Enabled="True" />
    <Rule Name="MarkBooleanPInvokeArgumentsWithMarshalAs" Enabled="True" />
    <Rule Name="MarkComSourceInterfacesAsIDispatch" Enabled="True" />
    <Rule Name="PInvokeEntryPointsShouldExist" Enabled="True" />
    <Rule Name="PInvokesShouldNotBeVisible" Enabled="True" />
   </RuleFile>
   <RuleFile Name="$(FxCopDir)\Rules\MobilityRules.dll" Enabled="True">
    <Rule Name="DoNotUseIdleProcessPriority" Enabled="True" />
    <Rule Name="DoNotUseTimersThatPreventPowerStateChanges" Enabled="True" />
   </RuleFile>
   <RuleFile Name="$(FxCopDir)\Rules\NamingRules.dll" Enabled="True">
    <Rule Name="AvoidLanguageSpecificTypeNamesInParameters" Enabled="True" />
    <Rule Name="AvoidTypeNamesInParameters" Enabled="True" />
    <Rule Name="CompoundWordsShouldBeCasedCorrectly" Enabled="True" />
    <Rule Name="DoNotNameEnumValuesReserved" Enabled="True" />
    <Rule Name="DoNotPrefixEnumValuesWithTypeName" Enabled="True" />
    <Rule Name="EventsShouldNotHaveBeforeOrAfterPrefix" Enabled="True" />
    <Rule Name="FlagsEnumsShouldHavePluralNames" Enabled="True" />
    <Rule Name="IdentifiersShouldBeCasedCorrectly" Enabled="True" />
    <Rule Name="IdentifiersShouldBeSpelledCorrectly" Enabled="True" />
    <Rule Name="IdentifiersShouldDifferByMoreThanCase" Enabled="True" />
    <Rule Name="IdentifiersShouldHaveCorrectPrefix" Enabled="True" />
    <Rule Name="IdentifiersShouldHaveCorrectSuffix" Enabled="True" />
    <Rule Name="IdentifiersShouldNotContainUnderscores" Enabled="True" />
    <Rule Name="IdentifiersShouldNotHaveIncorrectPrefix" Enabled="True" />
    <Rule Name="IdentifiersShouldNotHaveIncorrectSuffix" Enabled="True" />
    <Rule Name="IdentifiersShouldNotMatchKeywords" Enabled="True" />
    <Rule Name="LongAcronymsShouldBePascalCased" Enabled="True" />
    <Rule Name="OnlyFlagsEnumsShouldHavePluralNames" Enabled="True" />
    <Rule Name="ParameterNamesShouldMatchBaseDeclaration" Enabled="True" />
    <Rule Name="ParameterNamesShouldNotMatchMemberNames" Enabled="True" />
    <Rule Name="PropertyNamesShouldNotMatchGetMethods" Enabled="True" />
    <Rule Name="ResourceStringCompoundWordsShouldBeCasedCorrectly" Enabled="True" />
    <Rule Name="ResourceStringsShouldBeSpelledCorrectly" Enabled="True" />
    <Rule Name="ShortAcronymsShouldBeUppercase" Enabled="True" />
    <Rule Name="TypeNamesShouldNotMatchNamespaces" Enabled="True" />
    <Rule Name="UsePreferredTerms" Enabled="True" />
   </RuleFile>
   <RuleFile Name="$(FxCopDir)\Rules\PerformanceRules.dll" Enabled="True">
    <Rule Name="AvoidExcessiveLocals" Enabled="True" />
    <Rule Name="AvoidUncalledPrivateCode" Enabled="True" />
    <Rule Name="AvoidUninstantiatedInternalClasses" Enabled="True" />
    <Rule Name="AvoidUnnecessaryStringCreation" Enabled="True" />
    <Rule Name="AvoidUnsealedAttributes" Enabled="True" />
    <Rule Name="AvoidUnusedPrivateFields" Enabled="True" />
    <Rule Name="DisposeMethodsShouldCallSuppressFinalize" Enabled="True" />
    <Rule Name="DoNotCallPropertiesThatCloneValuesInLoops" Enabled="True" />
    <Rule Name="DoNotCastUnnecessarily" Enabled="True" />
    <Rule Name="DoNotConcatenateStringsInsideLoops" Enabled="True" />
    <Rule Name="DoNotInitializeUnnecessarily" Enabled="True" />
    <Rule Name="InitializeReferenceTypeStaticFieldsInline" Enabled="True" />
    <Rule Name="MarkMembersAsStatic" Enabled="True" />
    <Rule Name="OverrideEqualsAndOperatorEqualsOnValueTypes" Enabled="True" />
    <Rule Name="PreferJaggedArraysOverMultidimensional" Enabled="True" />
    <Rule Name="PropertiesShouldNotReturnArrays" Enabled="True" />
    <Rule Name="RemoveEmptyFinalizers" Enabled="True" />
    <Rule Name="RemoveUnusedLocals" Enabled="True" />
    <Rule Name="TestForEmptyStringsUsingStringLength" Enabled="True" />
    <Rule Name="UseLiteralsWhereAppropriate" Enabled="True" />
   </RuleFile>
   <RuleFile Name="$(FxCopDir)\Rules\PortabilityRules.dll" Enabled="True">
    <Rule Name="PInvokeDeclarationsShouldBePortable" Enabled="True" />
    <Rule Name="ValueTypeFieldsShouldBePortable" Enabled="True" />
   </RuleFile>
   <RuleFile Name="$(FxCopDir)\Rules\SecurityRules.dll" Enabled="True">
    <Rule Name="AptcaMethodsShouldOnlyCallAptcaMethods" Enabled="True" />
    <Rule Name="AptcaTypesShouldOnlyExtendAptcaBaseTypes" Enabled="True" />
    <Rule Name="ArrayFieldsShouldNotBeReadOnly" Enabled="True" />
    <Rule Name="CallGCKeepAliveWhenUsingNativeResources" Enabled="True" />
    <Rule Name="CatchNonClsCompliantExceptionsInGeneralHandlers" Enabled="True" />
    <Rule Name="DoNotDeclareReadOnlyMutableReferenceTypes" Enabled="True" />
    <Rule Name="DoNotIndirectlyExposeMethodsWithLinkDemands" Enabled="True" />
    <Rule Name="MethodSecurityShouldBeASupersetOfType" Enabled="True" />
    <Rule Name="OverrideLinkDemandsShouldBeIdenticalToBase" Enabled="True" />
    <Rule Name="PointersShouldNotBeVisible" Enabled="True" />
    <Rule Name="ReviewDeclarativeSecurityOnValueTypes" Enabled="True" />
    <Rule Name="ReviewDenyAndPermitOnlyUsage" Enabled="True" />
    <Rule Name="ReviewImperativeSecurity" Enabled="True" />
    <Rule Name="ReviewSqlQueriesForSecurityVulnerabilities" Enabled="True" />
    <Rule Name="ReviewSuppressUnmanagedCodeSecurityUsage" Enabled="True" />
    <Rule Name="ReviewVisibleEventHandlers" Enabled="True" />
    <Rule Name="SealMethodsThatSatisfyPrivateInterfaces" Enabled="True" />
    <Rule Name="SecureAsserts" Enabled="True" />
    <Rule Name="SecuredTypesShouldNotExposeFields" Enabled="True" />
    <Rule Name="SecureGetObjectDataOverrides" Enabled="True" />
    <Rule Name="SecureSerializationConstructors" Enabled="True" />
    <Rule Name="SecurityTransparentAssembliesShouldNotContainSecurityCriticalCode" Enabled="True" />
    <Rule Name="SecurityTransparentCodeShouldNotAssert" Enabled="True" />
    <Rule Name="SecurityTransparentCodeShouldNotReferenceNonpublicSecurityCriticalCode" Enabled="True" />
    <Rule Name="SpecifyMarshalingForPInvokeStringArguments" Enabled="True" />
    <Rule Name="StaticConstructorsShouldBePrivate" Enabled="True" />
    <Rule Name="TypeLinkDemandsRequireInheritanceDemands" Enabled="True" />
    <Rule Name="WrapVulnerableFinallyClausesInOuterTry" Enabled="True" />
   </RuleFile>
   <RuleFile Name="$(FxCopDir)\Rules\UsageRules.dll" Enabled="True">
    <Rule Name="AssembliesShouldDeclareMinimumSecurity" Enabled="True" />
    <Rule Name="AttributeStringLiteralsShouldParseCorrectly" Enabled="True" />
    <Rule Name="CallBaseClassMethodsOnISerializableTypes" Enabled="True" />
    <Rule Name="CollectionPropertiesShouldBeReadOnly" Enabled="True" />
    <Rule Name="DisposableFieldsShouldBeDisposed" Enabled="True" />
    <Rule Name="DisposableTypesShouldDeclareFinalizer" Enabled="True" />
    <Rule Name="DisposeMethodsShouldCallBaseClassDispose" Enabled="True" />
    <Rule Name="DoNotCallOverridableMethodsInConstructors" Enabled="True" />
    <Rule Name="DoNotDecreaseInheritedMemberVisibility" Enabled="True" />
    <Rule Name="DoNotDisposeObjectsMultipleTimes" Enabled="True" />
    <Rule Name="DoNotIgnoreMethodResults" Enabled="True" />
    <Rule Name="DoNotMarkEnumsWithFlags" Enabled="True" />
    <Rule Name="DoNotMarkServicedComponentsWithWebMethod" Enabled="True" />
    <Rule Name="DoNotRaiseExceptionsInFilterBlocks" Enabled="True" />
    <Rule Name="DoNotRaiseReservedExceptionTypes" Enabled="True" />
    <Rule Name="DoNotShipUnreleasedResourceFormats" Enabled="True" />
    <Rule Name="FinalizersShouldBeProtected" Enabled="True" />
    <Rule Name="FinalizersShouldCallBaseClassFinalizer" Enabled="True" />
    <Rule Name="ImplementISerializableCorrectly" Enabled="True" />
    <Rule Name="ImplementSerializationConstructors" Enabled="True" />
    <Rule Name="ImplementSerializationMethodsCorrectly" Enabled="True" />
    <Rule Name="InitializeValueTypeStaticFieldsInline" Enabled="True" />
    <Rule Name="InstantiateArgumentExceptionsCorrectly" Enabled="True" />
    <Rule Name="LiteralsShouldBeSpelledCorrectly" Enabled="True" />
    <Rule Name="MarkAllNonSerializableFields" Enabled="True" />
    <Rule Name="MarkISerializableTypesWithSerializable" Enabled="True" />
    <Rule Name="MarkWindowsFormsEntryPointsWithStaThread" Enabled="True" />
    <Rule Name="MembersShouldDifferByMoreThanReturnType" Enabled="True" />
    <Rule Name="NonConstantFieldsShouldNotBeVisible" Enabled="True" />
    <Rule Name="OperationsShouldNotOverflow" Enabled="True" />
    <Rule Name="OperatorOverloadsHaveNamedAlternates" Enabled="True" />
    <Rule Name="OperatorsShouldHaveSymmetricalOverloads" Enabled="True" />
    <Rule Name="OverloadOperatorEqualsOnOverridingValueTypeEquals" Enabled="True" />
    <Rule Name="OverrideEqualsOnOverloadingOperatorEquals" Enabled="True" />
    <Rule Name="OverrideGetHashCodeOnOverridingEquals" Enabled="True" />
    <Rule Name="PassSystemUriObjectsInsteadOfStrings" Enabled="True" />
    <Rule Name="ProvideCorrectArgumentsToFormattingMethods" Enabled="True" />
    <Rule Name="ProvideDeserializationMethodsForOptionalFields" Enabled="True" />
    <Rule Name="RethrowToPreserveStackDetails" Enabled="True" />
    <Rule Name="ReviewUnusedParameters" Enabled="True" />
    <Rule Name="TestForNaNCorrectly" Enabled="True" />
    <Rule Name="UseManagedEquivalentsOfWin32Api" Enabled="True" />
    <Rule Name="UseParamsForVariableArguments" Enabled="True" />
   </RuleFile>
  </RuleFiles>
  <Groups />
  <Settings />
 </Rules>
 <FxCopReport Version="1.35">
  <Namespaces>
   <Namespace Name="MathNet.Numerics.Distributions">
    <Messages>
     <Message TypeName="AvoidNamespacesWithFewTypes" Category="Microsoft.Design" CheckId="CA1020" Created="2006-08-05 09:38:38Z">
      <Issue>
       <Item>MathNet.Numerics.Distributions</Item>
      </Issue>
     </Message>
    </Messages>
   </Namespace>
   <Namespace Name="MathNet.Numerics.Equations">
    <Messages>
     <Message TypeName="AvoidNamespacesWithFewTypes" Category="Microsoft.Design" CheckId="CA1020" Created="2006-08-05 09:38:38Z">
      <Issue>
       <Item>MathNet.Numerics.Equations</Item>
      </Issue>
     </Message>
    </Messages>
   </Namespace>
   <Namespace Name="MathNet.Numerics.Statistics">
    <Messages>
     <Message TypeName="AvoidNamespacesWithFewTypes" Category="Microsoft.Design" CheckId="CA1020" Created="2006-08-05 09:38:38Z">
      <Issue>
       <Item>MathNet.Numerics.Statistics</Item>
      </Issue>
     </Message>
    </Messages>
   </Namespace>
  </Namespaces>
  <Targets>
   <Target Name="$(ProjectDir)/src/app/MathNet.Iridium/Library/bin/Debug/MathNet.Iridium.dll">
    <Modules>
     <Module Name="mathnet.iridium.dll">
      <Messages>
       <Message TypeName="AssembliesShouldHaveValidStrongNames" Category="Microsoft.Design" CheckId="CA2210" Created="2006-08-05 09:38:38Z">
        <Issue Name="NoStrongName">
         <Item>MathNet.Iridium</Item>
        </Issue>
       </Message>
      </Messages>
      <Namespaces>
       <Namespace Name="MathNet.Numerics">
        <Types>
         <Type Name="Collection">
          <Messages>
           <Message TypeName="IdentifiersShouldNotHaveIncorrectSuffix" Category="Microsoft.Naming" CheckId="CA1711" Created="2006-08-05 09:38:38Z">
            <Issue>
             <Item>MathNet.Numerics.Collection</Item>
             <Item>Collection</Item>
            </Issue>
           </Message>
          </Messages>
          <Members>
           <Member Name="Concat(System.Collections.ICollection,System.Collections.ICollection):System.Collections.ICollection">
            <Messages>
             <Message Id="System.ArgumentNullException.#ctor(System.String,System.String)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>Collection.Concat(ICollection, ICollection):ICollection</Item>
               <Item>2</Item>
               <Item>ArgumentNullException.ArgumentNullException(String, String)</Item>
               <Item>#E00 Concatenated collections should not be null.</Item>
              </Issue>
              <Issue>
               <Item>Collection.Concat(ICollection, ICollection):ICollection</Item>
               <Item>2</Item>
               <Item>ArgumentNullException.ArgumentNullException(String, String)</Item>
               <Item>#E01 Concatenated collections should not be null.</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Inter(System.Collections.ICollection,System.Collections.ICollection):System.Collections.ICollection">
            <Messages>
             <Message Id="System.ArgumentNullException.#ctor(System.String,System.String)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>Collection.Inter(ICollection, ICollection):ICollection</Item>
               <Item>2</Item>
               <Item>ArgumentNullException.ArgumentNullException(String, String)</Item>
               <Item>#E00 Intersected collections should not be null.</Item>
              </Issue>
              <Issue>
               <Item>Collection.Inter(ICollection, ICollection):ICollection</Item>
               <Item>2</Item>
               <Item>ArgumentNullException.ArgumentNullException(String, String)</Item>
               <Item>#E01 Intersected collections should not be null.</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Minus(System.Collections.ICollection,System.Collections.ICollection):System.Collections.ICollection">
            <Messages>
             <Message Id="System.ArgumentNullException.#ctor(System.String,System.String)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>Collection.Minus(ICollection, ICollection):ICollection</Item>
               <Item>2</Item>
               <Item>ArgumentNullException.ArgumentNullException(String, String)</Item>
               <Item>#E00 Base collection should not be null.</Item>
              </Issue>
              <Issue>
               <Item>Collection.Minus(ICollection, ICollection):ICollection</Item>
               <Item>2</Item>
               <Item>ArgumentNullException.ArgumentNullException(String, String)</Item>
               <Item>#E01 Substracted collection should not be null.</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Product(System.Collections.ICollection,System.Collections.ICollection):System.Collections.ICollection">
            <Messages>
             <Message Id="System.ArgumentNullException.#ctor(System.String,System.String)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>Collection.Product(ICollection, ICollection):ICollection</Item>
               <Item>2</Item>
               <Item>ArgumentNullException.ArgumentNullException(String, String)</Item>
               <Item>#E00 Product collection should not be null.</Item>
              </Issue>
              <Issue>
               <Item>Collection.Product(ICollection, ICollection):ICollection</Item>
               <Item>2</Item>
               <Item>ArgumentNullException.ArgumentNullException(String, String)</Item>
               <Item>#E01 Product collection should not be null.</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Union(System.Collections.ICollection,System.Collections.ICollection):System.Collections.ICollection">
            <Messages>
             <Message Id="System.ArgumentNullException.#ctor(System.String,System.String)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>Collection.Union(ICollection, ICollection):ICollection</Item>
               <Item>2</Item>
               <Item>ArgumentNullException.ArgumentNullException(String, String)</Item>
               <Item>#E00 Union collections should not be null.</Item>
              </Issue>
              <Issue>
               <Item>Collection.Union(ICollection, ICollection):ICollection</Item>
               <Item>2</Item>
               <Item>ArgumentNullException.ArgumentNullException(String, String)</Item>
               <Item>#E01 Union collections should not be null.</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="Combinatorics">
          <Members>
           <Member Name="Combinations(System.Int32,System.Int32):System.Double">
            <Messages>
             <Message Id="0#n" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:38:38Z">
              <Issue Name="ParameterOneLetter">
               <Item>Combinatorics.Combinations(Int32, Int32):Double</Item>
               <Item>n</Item>
              </Issue>
             </Message>
             <Message Id="1#k" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:38:38Z">
              <Issue Name="ParameterOneLetter">
               <Item>Combinatorics.Combinations(Int32, Int32):Double</Item>
               <Item>k</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="CombinationsWithRepetition(System.Int32,System.Int32):System.Double">
            <Messages>
             <Message Id="0#n" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:38:38Z">
              <Issue Name="ParameterOneLetter">
               <Item>Combinatorics.CombinationsWithRepetition(Int32, Int32):Double</Item>
               <Item>n</Item>
              </Issue>
             </Message>
             <Message Id="1#k" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:38:38Z">
              <Issue Name="ParameterOneLetter">
               <Item>Combinatorics.CombinationsWithRepetition(Int32, Int32):Double</Item>
               <Item>k</Item>
              </Issue>
             </Message>
             <Message Id="n-1" TypeName="OperationsShouldNotOverflow" Category="Microsoft.Usage" CheckId="CA2233" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>n-1</Item>
               <Item>Combinatorics.CombinationsWithRepetition(Int32, Int32):Double</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Permutations(System.Int32):System.Double">
            <Messages>
             <Message Id="0#n" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:38:38Z">
              <Issue Name="ParameterOneLetter">
               <Item>Combinatorics.Permutations(Int32):Double</Item>
               <Item>n</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Variations(System.Int32,System.Int32):System.Double">
            <Messages>
             <Message Id="0#n" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:38:38Z">
              <Issue Name="ParameterOneLetter">
               <Item>Combinatorics.Variations(Int32, Int32):Double</Item>
               <Item>n</Item>
              </Issue>
             </Message>
             <Message Id="1#k" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:38:38Z">
              <Issue Name="ParameterOneLetter">
               <Item>Combinatorics.Variations(Int32, Int32):Double</Item>
               <Item>k</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="VariationsWithRepetition(System.Int32,System.Int32):System.Double">
            <Messages>
             <Message Id="0#n" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:38:38Z">
              <Issue Name="ParameterOneLetter">
               <Item>Combinatorics.VariationsWithRepetition(Int32, Int32):Double</Item>
               <Item>n</Item>
              </Issue>
             </Message>
             <Message Id="1#k" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:38:38Z">
              <Issue Name="ParameterOneLetter">
               <Item>Combinatorics.VariationsWithRepetition(Int32, Int32):Double</Item>
               <Item>k</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="Complex">
          <Members>
           <Member Name="FromModulusArgument(System.Double,System.Double):MathNet.Numerics.Complex">
            <Messages>
             <Message Id="System.ArgumentOutOfRangeException.#ctor(System.String,System.Object,System.String)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>Complex.FromModulusArgument(Double, Double):Complex</Item>
               <Item>3</Item>
               <Item>ArgumentOutOfRangeException.ArgumentOutOfRangeException(String, Object, String)</Item>
               <Item>A complex modulus must be non-negative.</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="halfOfRoot2">
            <Messages>
             <Message TypeName="UseLiteralsWhereAppropriate" Category="Microsoft.Performance" CheckId="CA1802" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>halfOfRoot2</Item>
               <Item>&lt;Unknown&gt;</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="I">
            <Messages>
             <Message Id="I" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:38:38Z">
              <Issue Name="MemberOneLetter">
               <Item>I</Item>
               <Item>Complex.I:Complex</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="IsNaN">
            <Messages>
             <Message Id="Member" TypeName="ShortAcronymsShouldBeUppercase" Category="Microsoft.Naming" CheckId="CA1706" Created="2006-08-05 09:38:38Z">
              <Issue Name="Member">
               <Item>Na</Item>
               <Item>Complex.IsNaN:Boolean</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Modulus">
            <Accessors>
             <Accessor Name="set_Modulus(System.Double):System.Void">
              <Messages>
               <Message Id="System.ArgumentOutOfRangeException.#ctor(System.String,System.Object,System.String)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Created="2006-08-05 09:38:38Z">
                <Issue>
                 <Item>Complex.set_Modulus(Double):Void</Item>
                 <Item>3</Item>
                 <Item>ArgumentOutOfRangeException.ArgumentOutOfRangeException(String, Object, String)</Item>
                 <Item>A complex modulus must be non-negative.</Item>
                </Issue>
               </Message>
              </Messages>
             </Accessor>
            </Accessors>
           </Member>
           <Member Name="ModulusSquared">
            <Accessors>
             <Accessor Name="set_ModulusSquared(System.Double):System.Void">
              <Messages>
               <Message Id="System.ArgumentOutOfRangeException.#ctor(System.String,System.Object,System.String)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Created="2006-08-05 09:38:38Z">
                <Issue>
                 <Item>Complex.set_ModulusSquared(Double):Void</Item>
                 <Item>3</Item>
                 <Item>ArgumentOutOfRangeException.ArgumentOutOfRangeException(String, Object, String)</Item>
                 <Item>A complex squared modulus must be non-negative.</Item>
                </Issue>
               </Message>
              </Messages>
             </Accessor>
            </Accessors>
           </Member>
           <Member Name="NaN">
            <Messages>
             <Message Id="Member" TypeName="ShortAcronymsShouldBeUppercase" Category="Microsoft.Naming" CheckId="CA1706" Created="2006-08-05 09:38:38Z">
              <Issue Name="Member">
               <Item>Na</Item>
               <Item>Complex.NaN:Complex</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="NormalizeToUnityOrNull():System.Void">
            <Messages>
             <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>Complex.NormalizeToUnityOrNull():Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="op_Addition(MathNet.Numerics.Complex,MathNet.Numerics.Complex):MathNet.Numerics.Complex">
            <Messages>
             <Message TypeName="OperatorOverloadsHaveNamedAlternates" Category="Microsoft.Usage" CheckId="CA2225" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>Add</Item>
               <Item>Complex.op_Addition(Complex, Complex):Complex</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="op_Addition(MathNet.Numerics.Complex,System.Double):MathNet.Numerics.Complex">
            <Messages>
             <Message TypeName="OperatorOverloadsHaveNamedAlternates" Category="Microsoft.Usage" CheckId="CA2225" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>Add</Item>
               <Item>Complex.op_Addition(Complex, Double):Complex</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="op_Addition(System.Double,MathNet.Numerics.Complex):MathNet.Numerics.Complex">
            <Messages>
             <Message TypeName="OperatorOverloadsHaveNamedAlternates" Category="Microsoft.Usage" CheckId="CA2225" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>Add</Item>
               <Item>Complex.op_Addition(Double, Complex):Complex</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="op_Division(MathNet.Numerics.Complex,MathNet.Numerics.Complex):MathNet.Numerics.Complex">
            <Messages>
             <Message TypeName="OperatorOverloadsHaveNamedAlternates" Category="Microsoft.Usage" CheckId="CA2225" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>Divide</Item>
               <Item>Complex.op_Division(Complex, Complex):Complex</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="op_Division(MathNet.Numerics.Complex,System.Double):MathNet.Numerics.Complex">
            <Messages>
             <Message TypeName="OperatorOverloadsHaveNamedAlternates" Category="Microsoft.Usage" CheckId="CA2225" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>Divide</Item>
               <Item>Complex.op_Division(Complex, Double):Complex</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="op_Division(System.Double,MathNet.Numerics.Complex):MathNet.Numerics.Complex">
            <Messages>
             <Message TypeName="OperatorOverloadsHaveNamedAlternates" Category="Microsoft.Usage" CheckId="CA2225" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>Divide</Item>
               <Item>Complex.op_Division(Double, Complex):Complex</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="op_Multiply(MathNet.Numerics.Complex,MathNet.Numerics.Complex):MathNet.Numerics.Complex">
            <Messages>
             <Message TypeName="OperatorOverloadsHaveNamedAlternates" Category="Microsoft.Usage" CheckId="CA2225" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>Multiply</Item>
               <Item>Complex.op_Multiply(Complex, Complex):Complex</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="op_Multiply(MathNet.Numerics.Complex,System.Double):MathNet.Numerics.Complex">
            <Messages>
             <Message TypeName="OperatorOverloadsHaveNamedAlternates" Category="Microsoft.Usage" CheckId="CA2225" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>Multiply</Item>
               <Item>Complex.op_Multiply(Complex, Double):Complex</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="op_Multiply(System.Double,MathNet.Numerics.Complex):MathNet.Numerics.Complex">
            <Messages>
             <Message TypeName="OperatorOverloadsHaveNamedAlternates" Category="Microsoft.Usage" CheckId="CA2225" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>Multiply</Item>
               <Item>Complex.op_Multiply(Double, Complex):Complex</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="op_Subtraction(MathNet.Numerics.Complex,MathNet.Numerics.Complex):MathNet.Numerics.Complex">
            <Messages>
             <Message TypeName="OperatorOverloadsHaveNamedAlternates" Category="Microsoft.Usage" CheckId="CA2225" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>Subtract</Item>
               <Item>Complex.op_Subtraction(Complex, Complex):Complex</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="op_Subtraction(MathNet.Numerics.Complex,System.Double):MathNet.Numerics.Complex">
            <Messages>
             <Message TypeName="OperatorOverloadsHaveNamedAlternates" Category="Microsoft.Usage" CheckId="CA2225" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>Subtract</Item>
               <Item>Complex.op_Subtraction(Complex, Double):Complex</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="op_Subtraction(System.Double,MathNet.Numerics.Complex):MathNet.Numerics.Complex">
            <Messages>
             <Message TypeName="OperatorOverloadsHaveNamedAlternates" Category="Microsoft.Usage" CheckId="CA2225" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>Subtract</Item>
               <Item>Complex.op_Subtraction(Double, Complex):Complex</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="op_UnaryNegation(MathNet.Numerics.Complex):MathNet.Numerics.Complex">
            <Messages>
             <Message TypeName="OperatorOverloadsHaveNamedAlternates" Category="Microsoft.Usage" CheckId="CA2225" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>Negate</Item>
               <Item>Complex.op_UnaryNegation(Complex):Complex</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="op_UnaryPlus(MathNet.Numerics.Complex):MathNet.Numerics.Complex">
            <Messages>
             <Message TypeName="OperatorOverloadsHaveNamedAlternates" Category="Microsoft.Usage" CheckId="CA2225" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>Plus</Item>
               <Item>Complex.op_UnaryPlus(Complex):Complex</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="Complex+ComplexParser">
          <Members>
           <Member Name=".ctor(System.String)">
            <Messages>
             <Message TypeName="DoNotInitializeUnnecessarily" Category="Microsoft.Performance" CheckId="CA1805" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>ComplexParser.ComplexParser(String)</Item>
               <Item>cursor</Item>
               <Item>System.Int32</Item>
               <Item>0</Item>
              </Issue>
             </Message>
             <Message Id="System.String.ToLower" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>ComplexParser.ComplexParser(String)</Item>
               <Item>System.String.ToLower</Item>
               <Item>System.String.ToLower(System.Globalization.CultureInfo)</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Imaginary">
            <Accessors>
             <Accessor Name="get_Imaginary():System.Double">
              <Messages>
               <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Created="2006-08-05 09:38:38Z">
                <Issue>
                 <Item>ComplexParser.get_Imaginary():Double</Item>
                </Issue>
               </Message>
              </Messages>
             </Accessor>
            </Accessors>
           </Member>
           <Member Name="IsDecimal(System.Char):System.Boolean">
            <Messages>
             <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Created="2006-08-05 09:38:38Z" FixCategory="NonBreaking">
              <Issue>
               <Item>ComplexParser.IsDecimal(Char):Boolean</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="IsE(System.Char):System.Boolean">
            <Messages>
             <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Created="2006-08-05 09:38:38Z" FixCategory="NonBreaking">
              <Issue>
               <Item>ComplexParser.IsE(Char):Boolean</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="IsI(System.Char):System.Boolean">
            <Messages>
             <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Created="2006-08-05 09:38:38Z" FixCategory="NonBreaking">
              <Issue>
               <Item>ComplexParser.IsI(Char):Boolean</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="IsMult(System.Char):System.Boolean">
            <Messages>
             <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Created="2006-08-05 09:38:38Z" FixCategory="NonBreaking">
              <Issue>
               <Item>ComplexParser.IsMult(Char):Boolean</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="IsNegativeSign(System.Char):System.Boolean">
            <Messages>
             <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Created="2006-08-05 09:38:38Z" FixCategory="NonBreaking">
              <Issue>
               <Item>ComplexParser.IsNegativeSign(Char):Boolean</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="IsNumber(System.Char):System.Boolean">
            <Messages>
             <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Created="2006-08-05 09:38:38Z" FixCategory="NonBreaking">
              <Issue>
               <Item>ComplexParser.IsNumber(Char):Boolean</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="IsSign(System.Char):System.Boolean">
            <Messages>
             <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Created="2006-08-05 09:38:38Z" FixCategory="NonBreaking">
              <Issue>
               <Item>ComplexParser.IsSign(Char):Boolean</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="LookAheadCharacter">
            <Accessors>
             <Accessor Name="get_LookAheadCharacter():System.Char">
              <Messages>
               <Message Id="System.ArgumentException.#ctor(System.String,System.String)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Created="2006-08-05 09:38:38Z">
                <Issue>
                 <Item>ComplexParser.get_LookAheadCharacter():Char</Item>
                 <Item>1</Item>
                 <Item>ArgumentException.ArgumentException(String, String)</Item>
                 <Item>The given expression does not represent a complex number.</Item>
                </Issue>
               </Message>
               <Message TypeName="InstantiateArgumentExceptionsCorrectly" Category="Microsoft.Usage" CheckId="CA2208" Created="2006-08-05 09:38:38Z">
                <Issue Name="TwoArgumentsSecondShouldBeParameterName">
                 <Item>System.ArgumentException</Item>
                 <Item>ArgumentException.ArgumentException(String, String)</Item>
                 <Item>The given expression does not represent a complex number.</Item>
                 <Item>complex</Item>
                </Issue>
               </Message>
              </Messages>
             </Accessor>
            </Accessors>
           </Member>
           <Member Name="Real">
            <Accessors>
             <Accessor Name="get_Real():System.Double">
              <Messages>
               <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Created="2006-08-05 09:38:38Z">
                <Issue>
                 <Item>ComplexParser.get_Real():Double</Item>
                </Issue>
               </Message>
              </Messages>
             </Accessor>
            </Accessors>
           </Member>
          </Members>
         </Type>
         <Type Name="Double">
          <Messages>
           <Message TypeName="IdentifiersShouldNotMatchKeywords" Category="Microsoft.Naming" CheckId="CA1716" Created="2006-08-05 09:38:38Z">
            <Issue Name="Type">
             <Item>Double</Item>
             <Item>Double</Item>
            </Issue>
           </Message>
          </Messages>
          <Members>
           <Member Name="ToExactString(System.Double):System.String">
            <Messages>
             <Message Id="0#d" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:38:38Z">
              <Issue Name="ParameterOneLetter">
               <Item>Double.ToExactString(Double):String</Item>
               <Item>d</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="Double+ArbitraryDecimal">
          <Members>
           <Member Name=".ctor(System.Int64)">
            <Messages>
             <Message TypeName="DoNotInitializeUnnecessarily" Category="Microsoft.Performance" CheckId="CA1805" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>ArbitraryDecimal.ArbitraryDecimal(Int64)</Item>
               <Item>decimalPoint</Item>
               <Item>System.Int32</Item>
               <Item>0</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="Fn">
          <Messages>
           <Message TypeName="ShortAcronymsShouldBeUppercase" Category="Microsoft.Naming" CheckId="CA1706" Created="2006-08-05 09:38:38Z">
            <Issue Name="Type">
             <Item>Fn</Item>
             <Item>MathNet.Numerics.Fn</Item>
            </Issue>
           </Message>
          </Messages>
          <Members>
           <Member Name="Beta(System.Double,System.Double):System.Double">
            <Messages>
             <Message Id="0#z" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:38:38Z">
              <Issue Name="ParameterOneLetter">
               <Item>Fn.Beta(Double, Double):Double</Item>
               <Item>z</Item>
              </Issue>
             </Message>
             <Message Id="1#w" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:38:38Z">
              <Issue Name="ParameterOneLetter">
               <Item>Fn.Beta(Double, Double):Double</Item>
               <Item>w</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="BinomialCoefficient(System.Int32,System.Int32):System.Double">
            <Messages>
             <Message Id="0#n" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:38:38Z">
              <Issue Name="ParameterOneLetter">
               <Item>Fn.BinomialCoefficient(Int32, Int32):Double</Item>
               <Item>n</Item>
              </Issue>
             </Message>
             <Message Id="1#k" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:38:38Z">
              <Issue Name="ParameterOneLetter">
               <Item>Fn.BinomialCoefficient(Int32, Int32):Double</Item>
               <Item>k</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Factorial(System.Int32):System.Double">
            <Messages>
             <Message Id="System.ArgumentException.#ctor(System.String,System.String)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>Fn.Factorial(Int32):Double</Item>
               <Item>1</Item>
               <Item>ArgumentException.ArgumentException(String, String)</Item>
               <Item>Factorial expects a positive argument</Item>
              </Issue>
             </Message>
             <Message Id="0#n" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:38:38Z">
              <Issue Name="ParameterOneLetter">
               <Item>Fn.Factorial(Int32):Double</Item>
               <Item>n</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="FactorialLn(System.Int32):System.Double">
            <Messages>
             <Message Id="System.ArgumentException.#ctor(System.String,System.String)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>Fn.FactorialLn(Int32):Double</Item>
               <Item>1</Item>
               <Item>ArgumentException.ArgumentException(String, String)</Item>
               <Item>Factorial expects a positive argument</Item>
              </Issue>
             </Message>
             <Message Id="0#n" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:38:38Z">
              <Issue Name="ParameterOneLetter">
               <Item>Fn.FactorialLn(Int32):Double</Item>
               <Item>n</Item>
              </Issue>
             </Message>
             <Message Id="Member" TypeName="ShortAcronymsShouldBeUppercase" Category="Microsoft.Naming" CheckId="CA1706" Created="2006-08-05 09:38:38Z">
              <Issue Name="Member">
               <Item>Ln</Item>
               <Item>Fn.FactorialLn(Int32):Double</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="GammaLn(System.Double):System.Double">
            <Messages>
             <Message Id="Member" TypeName="ShortAcronymsShouldBeUppercase" Category="Microsoft.Naming" CheckId="CA1706" Created="2006-08-05 09:38:38Z">
              <Issue Name="Member">
               <Item>Ln</Item>
               <Item>Fn.GammaLn(Double):Double</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Gcd(System.Int64,System.Int64):System.Int64">
            <Messages>
             <Message Id="0#a" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:38:38Z">
              <Issue Name="ParameterOneLetter">
               <Item>Fn.Gcd(Int64, Int64):Int64</Item>
               <Item>a</Item>
              </Issue>
             </Message>
             <Message Id="1#b" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:38:38Z">
              <Issue Name="ParameterOneLetter">
               <Item>Fn.Gcd(Int64, Int64):Int64</Item>
               <Item>b</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Gcd(System.Int64,System.Int64,System.Int64&amp;,System.Int64&amp;):System.Int64">
            <Messages>
             <Message Id="2#" TypeName="AvoidOutParameters" Category="Microsoft.Design" CheckId="CA1021" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>x</Item>
              </Issue>
             </Message>
             <Message Id="3#" TypeName="AvoidOutParameters" Category="Microsoft.Design" CheckId="CA1021" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>y</Item>
              </Issue>
             </Message>
             <Message Id="0#a" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:38:38Z">
              <Issue Name="ParameterOneLetter">
               <Item>Fn.Gcd(Int64, Int64, Int64&amp;, Int64&amp;):Int64</Item>
               <Item>a</Item>
              </Issue>
             </Message>
             <Message Id="1#b" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:38:38Z">
              <Issue Name="ParameterOneLetter">
               <Item>Fn.Gcd(Int64, Int64, Int64&amp;, Int64&amp;):Int64</Item>
               <Item>b</Item>
              </Issue>
             </Message>
             <Message Id="2#x" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:38:38Z">
              <Issue Name="ParameterOneLetter">
               <Item>Fn.Gcd(Int64, Int64, Int64&amp;, Int64&amp;):Int64</Item>
               <Item>x</Item>
              </Issue>
             </Message>
             <Message Id="3#y" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:38:38Z">
              <Issue Name="ParameterOneLetter">
               <Item>Fn.Gcd(Int64, Int64, Int64&amp;, Int64&amp;):Int64</Item>
               <Item>y</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Hypot(System.Double,System.Double):System.Double">
            <Messages>
             <Message Id="0#a" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:38:38Z">
              <Issue Name="ParameterOneLetter">
               <Item>Fn.Hypot(Double, Double):Double</Item>
               <Item>a</Item>
              </Issue>
             </Message>
             <Message Id="1#b" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:38:38Z">
              <Issue Name="ParameterOneLetter">
               <Item>Fn.Hypot(Double, Double):Double</Item>
               <Item>b</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Lcm(System.Int64,System.Int64):System.Int64">
            <Messages>
             <Message Id="0#a" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:38:38Z">
              <Issue Name="ParameterOneLetter">
               <Item>Fn.Lcm(Int64, Int64):Int64</Item>
               <Item>a</Item>
              </Issue>
             </Message>
             <Message Id="1#b" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:38:38Z">
              <Issue Name="ParameterOneLetter">
               <Item>Fn.Lcm(Int64, Int64):Int64</Item>
               <Item>b</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="ISet`1">
          <Messages>
           <Message TypeName="IdentifiersShouldHaveCorrectSuffix" Category="Microsoft.Naming" CheckId="CA1710" Created="2006-08-05 09:38:38Z">
            <Issue>
             <Item>MathNet.Numerics.ISet`1</Item>
             <Item>Collection</Item>
            </Issue>
           </Message>
          </Messages>
          <Members>
           <Member Name="HasEqualElements(System.Collections.Generic.IEnumerable`1&lt;T&gt;):System.Boolean">
            <Messages>
             <Message Id="0#c" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:38:38Z">
              <Issue Name="ParameterOneLetter">
               <Item>ISet`1.HasEqualElements(IEnumerable`1&lt;T&gt;):Boolean</Item>
               <Item>c</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="IsSubset(System.Collections.Generic.IEnumerable`1&lt;T&gt;):System.Boolean">
            <Messages>
             <Message Id="0#c" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:38:38Z">
              <Issue Name="ParameterOneLetter">
               <Item>ISet`1.IsSubset(IEnumerable`1&lt;T&gt;):Boolean</Item>
               <Item>c</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="IsSuperset(System.Collections.Generic.IEnumerable`1&lt;T&gt;):System.Boolean">
            <Messages>
             <Message Id="0#c" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:38:38Z">
              <Issue Name="ParameterOneLetter">
               <Item>ISet`1.IsSuperset(IEnumerable`1&lt;T&gt;):Boolean</Item>
               <Item>c</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="Natural">
          <Members>
           <Member Name=".ctor(System.UInt32)">
            <Messages>
             <Message TypeName="DoNotInitializeUnnecessarily" Category="Microsoft.Performance" CheckId="CA1805" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>Natural.Natural(UInt32)</Item>
               <Item>_bound</Item>
               <Item>System.UInt32</Item>
               <Item>0</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name=".ctor(System.UInt32[])">
            <Messages>
             <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>Natural.Natural(UInt32[])</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Add(MathNet.Numerics.Natural,System.UInt32):MathNet.Numerics.Natural">
            <Messages>
             <Message Id="carry+1" TypeName="OperationsShouldNotOverflow" Category="Microsoft.Usage" CheckId="CA2233" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>carry+1</Item>
               <Item>Natural.Add(Natural, UInt32):Natural</Item>
              </Issue>
             </Message>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>'number'</Item>
               <Item>Natural.Add(Natural, UInt32):Natural</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="CompareTo(MathNet.Numerics.Natural):System.Int32">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>'other'</Item>
               <Item>Natural.CompareTo(Natural):Int32</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Equals(MathNet.Numerics.Natural):System.Boolean">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>'other'</Item>
               <Item>Natural.Equals(Natural):Boolean</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Max(MathNet.Numerics.Natural,MathNet.Numerics.Natural):MathNet.Numerics.Natural">
            <Messages>
             <Message Id="0#a" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:38:38Z">
              <Issue Name="ParameterOneLetter">
               <Item>Natural.Max(Natural, Natural):Natural</Item>
               <Item>a</Item>
              </Issue>
             </Message>
             <Message Id="1#b" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:38:38Z">
              <Issue Name="ParameterOneLetter">
               <Item>Natural.Max(Natural, Natural):Natural</Item>
               <Item>b</Item>
              </Issue>
             </Message>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>'a'</Item>
               <Item>Natural.Max(Natural, Natural):Natural</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Min(MathNet.Numerics.Natural,MathNet.Numerics.Natural):MathNet.Numerics.Natural">
            <Messages>
             <Message Id="0#a" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:38:38Z">
              <Issue Name="ParameterOneLetter">
               <Item>Natural.Min(Natural, Natural):Natural</Item>
               <Item>a</Item>
              </Issue>
             </Message>
             <Message Id="1#b" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:38:38Z">
              <Issue Name="ParameterOneLetter">
               <Item>Natural.Min(Natural, Natural):Natural</Item>
               <Item>b</Item>
              </Issue>
             </Message>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>'a'</Item>
               <Item>Natural.Min(Natural, Natural):Natural</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Multiply(MathNet.Numerics.Natural):MathNet.Numerics.Natural">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>'number'</Item>
               <Item>Natural.Multiply(Natural):Natural</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="op_Addition(MathNet.Numerics.Natural,MathNet.Numerics.Natural):MathNet.Numerics.Natural">
            <Messages>
             <Message Id="0#a" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:38:38Z">
              <Issue Name="ParameterOneLetter">
               <Item>Natural.op_Addition(Natural, Natural):Natural</Item>
               <Item>a</Item>
              </Issue>
             </Message>
             <Message Id="1#b" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:38:38Z">
              <Issue Name="ParameterOneLetter">
               <Item>Natural.op_Addition(Natural, Natural):Natural</Item>
               <Item>b</Item>
              </Issue>
             </Message>
             <Message TypeName="OverloadOperatorEqualsOnOverloadingAddAndSubtract" Category="Microsoft.Design" CheckId="CA1013" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>Natural</Item>
               <Item>Natural.op_Addition(Natural, Natural):Natural</Item>
              </Issue>
             </Message>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>'a'</Item>
               <Item>Natural.op_Addition(Natural, Natural):Natural</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="op_GreaterThan(MathNet.Numerics.Natural,MathNet.Numerics.Natural):System.Boolean">
            <Messages>
             <Message Id="0#a" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:38:38Z">
              <Issue Name="ParameterOneLetter">
               <Item>Natural.op_GreaterThan(Natural, Natural):Boolean</Item>
               <Item>a</Item>
              </Issue>
             </Message>
             <Message Id="1#b" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:38:38Z">
              <Issue Name="ParameterOneLetter">
               <Item>Natural.op_GreaterThan(Natural, Natural):Boolean</Item>
               <Item>b</Item>
              </Issue>
             </Message>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>'a'</Item>
               <Item>Natural.op_GreaterThan(Natural, Natural):Boolean</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="op_GreaterThanOrEqual(MathNet.Numerics.Natural,MathNet.Numerics.Natural):System.Boolean">
            <Messages>
             <Message Id="0#a" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:38:38Z">
              <Issue Name="ParameterOneLetter">
               <Item>Natural.op_GreaterThanOrEqual(Natural, Natural):Boolean</Item>
               <Item>a</Item>
              </Issue>
             </Message>
             <Message Id="1#b" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:38:38Z">
              <Issue Name="ParameterOneLetter">
               <Item>Natural.op_GreaterThanOrEqual(Natural, Natural):Boolean</Item>
               <Item>b</Item>
              </Issue>
             </Message>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>'a'</Item>
               <Item>Natural.op_GreaterThanOrEqual(Natural, Natural):Boolean</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="op_LessThan(MathNet.Numerics.Natural,MathNet.Numerics.Natural):System.Boolean">
            <Messages>
             <Message Id="0#a" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:38:38Z">
              <Issue Name="ParameterOneLetter">
               <Item>Natural.op_LessThan(Natural, Natural):Boolean</Item>
               <Item>a</Item>
              </Issue>
             </Message>
             <Message Id="1#b" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:38:38Z">
              <Issue Name="ParameterOneLetter">
               <Item>Natural.op_LessThan(Natural, Natural):Boolean</Item>
               <Item>b</Item>
              </Issue>
             </Message>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>'a'</Item>
               <Item>Natural.op_LessThan(Natural, Natural):Boolean</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="op_LessThanOrEqual(MathNet.Numerics.Natural,MathNet.Numerics.Natural):System.Boolean">
            <Messages>
             <Message Id="0#a" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:38:38Z">
              <Issue Name="ParameterOneLetter">
               <Item>Natural.op_LessThanOrEqual(Natural, Natural):Boolean</Item>
               <Item>a</Item>
              </Issue>
             </Message>
             <Message Id="1#b" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:38:38Z">
              <Issue Name="ParameterOneLetter">
               <Item>Natural.op_LessThanOrEqual(Natural, Natural):Boolean</Item>
               <Item>b</Item>
              </Issue>
             </Message>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>'a'</Item>
               <Item>Natural.op_LessThanOrEqual(Natural, Natural):Boolean</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="op_Multiply(MathNet.Numerics.Natural,MathNet.Numerics.Natural):MathNet.Numerics.Natural">
            <Messages>
             <Message Id="0#a" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:38:38Z">
              <Issue Name="ParameterOneLetter">
               <Item>Natural.op_Multiply(Natural, Natural):Natural</Item>
               <Item>a</Item>
              </Issue>
             </Message>
             <Message Id="1#b" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:38:38Z">
              <Issue Name="ParameterOneLetter">
               <Item>Natural.op_Multiply(Natural, Natural):Natural</Item>
               <Item>b</Item>
              </Issue>
             </Message>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>'a'</Item>
               <Item>Natural.op_Multiply(Natural, Natural):Natural</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="op_Subtraction(MathNet.Numerics.Natural,MathNet.Numerics.Natural):MathNet.Numerics.Natural">
            <Messages>
             <Message Id="0#a" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:38:38Z">
              <Issue Name="ParameterOneLetter">
               <Item>Natural.op_Subtraction(Natural, Natural):Natural</Item>
               <Item>a</Item>
              </Issue>
             </Message>
             <Message Id="1#b" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:38:38Z">
              <Issue Name="ParameterOneLetter">
               <Item>Natural.op_Subtraction(Natural, Natural):Natural</Item>
               <Item>b</Item>
              </Issue>
             </Message>
             <Message TypeName="OverloadOperatorEqualsOnOverloadingAddAndSubtract" Category="Microsoft.Design" CheckId="CA1013" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>Natural</Item>
               <Item>Natural.op_Subtraction(Natural, Natural):Natural</Item>
              </Issue>
             </Message>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>'a'</Item>
               <Item>Natural.op_Subtraction(Natural, Natural):Natural</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Radix">
            <Messages>
             <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Created="2006-08-05 09:38:38Z" FixCategory="Breaking">
              <Issue>
               <Item>Natural.Radix:UInt64</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Subtract(MathNet.Numerics.Natural,System.Boolean&amp;):MathNet.Numerics.Natural">
            <Messages>
             <Message Id="1#" TypeName="AvoidOutParameters" Category="Microsoft.Design" CheckId="CA1021" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>underflow</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Subtract(MathNet.Numerics.Natural,System.UInt32,System.Boolean&amp;):MathNet.Numerics.Natural">
            <Messages>
             <Message Id="2#" TypeName="AvoidOutParameters" Category="Microsoft.Design" CheckId="CA1021" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>underflow</Item>
              </Issue>
             </Message>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>'number'</Item>
               <Item>Natural.Subtract(Natural, UInt32, Boolean&amp;):Natural</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="SubtractCoefficientInplace(System.UInt64,System.UInt32):System.Void">
            <Messages>
             <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>Natural.SubtractCoefficientInplace(UInt64, UInt32):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="SubtractCoefficientInplace(System.UInt64,System.UInt32,System.Boolean&amp;):System.Void">
            <Messages>
             <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>Natural.SubtractCoefficientInplace(UInt64, UInt32, Boolean&amp;):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="Polynomial">
          <Members>
           <Member Name=".ctor(MathNet.Numerics.Polynomial)">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>'copy'</Item>
               <Item>Polynomial.Polynomial(Polynomial)</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="AddInplace(MathNet.Numerics.Polynomial):System.Void">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>'polynomial'</Item>
               <Item>Polynomial.AddInplace(Polynomial):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="AddInplace(System.Double):System.Void">
            <Messages>
             <Message Id="0#n" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:38:38Z">
              <Issue Name="ParameterOneLetter">
               <Item>Polynomial.AddInplace(Double):Void</Item>
               <Item>n</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="CompareTo(MathNet.Numerics.Polynomial):System.Int32">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>'polynomial'</Item>
               <Item>Polynomial.CompareTo(Polynomial):Int32</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="CompareTo(System.Object):System.Int32">
            <Messages>
             <Message TypeName="DoNotCastUnnecessarily" Category="Microsoft.Performance" CheckId="CA1800" Created="2006-08-05 09:38:38Z">
              <Issue Name="Parameter">
               <Item>obj</Item>
               <Item>MathNet.Numerics.Polynomial</Item>
               <Item>Polynomial.CompareTo(Object):Int32</Item>
               <Item>castclass</Item>
              </Issue>
             </Message>
             <Message Id="System.ArgumentException.#ctor(System.String,System.String)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>Polynomial.CompareTo(Object):Int32</Item>
               <Item>1</Item>
               <Item>ArgumentException.ArgumentException(String, String)</Item>
               <Item>Type mismatch: polynomial expected.</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Divide(MathNet.Numerics.Polynomial):MathNet.Numerics.Rational">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>'polynomial'</Item>
               <Item>Polynomial.Divide(Polynomial):Rational</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="DivideLinearInplace(System.Double,System.Double,System.Double&amp;):System.Void">
            <Messages>
             <Message Id="2#" TypeName="AvoidOutParameters" Category="Microsoft.Design" CheckId="CA1021" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>reminder</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="DivideShiftInplace(System.Int32,System.Double[]&amp;):System.Void">
            <Messages>
             <Message Id="1#" TypeName="AvoidOutParameters" Category="Microsoft.Design" CheckId="CA1021" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>reminder</Item>
              </Issue>
             </Message>
             <Message Id="System.ArgumentOutOfRangeException.#ctor(System.String,System.Object,System.String)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>Polynomial.DivideShiftInplace(Int32, Double[]&amp;):Void</Item>
               <Item>3</Item>
               <Item>ArgumentOutOfRangeException.ArgumentOutOfRangeException(String, Object, String)</Item>
               <Item>n must be positive.</Item>
              </Issue>
             </Message>
             <Message Id="0#n" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:38:38Z">
              <Issue Name="ParameterOneLetter">
               <Item>Polynomial.DivideShiftInplace(Int32, Double[]&amp;):Void</Item>
               <Item>n</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="DivideSyntheticInplace(System.Double,System.Double&amp;):System.Void">
            <Messages>
             <Message Id="1#" TypeName="AvoidOutParameters" Category="Microsoft.Design" CheckId="CA1021" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>reminder</Item>
              </Issue>
             </Message>
             <Message Id="0#a" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:38:38Z">
              <Issue Name="ParameterOneLetter">
               <Item>Polynomial.DivideSyntheticInplace(Double, Double&amp;):Void</Item>
               <Item>a</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Equals(MathNet.Numerics.Polynomial,MathNet.Numerics.Polynomial):System.Boolean">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>'polynomial1'</Item>
               <Item>Polynomial.Equals(Polynomial, Polynomial):Boolean</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Equals(System.Object):System.Boolean">
            <Messages>
             <Message TypeName="DoNotCastUnnecessarily" Category="Microsoft.Performance" CheckId="CA1800" Created="2006-08-05 09:38:38Z">
              <Issue Name="Parameter">
               <Item>obj</Item>
               <Item>MathNet.Numerics.Polynomial</Item>
               <Item>Polynomial.Equals(Object):Boolean</Item>
               <Item>castclass</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Evaluate(System.Double,System.Double&amp;):System.Double">
            <Messages>
             <Message Id="1#" TypeName="AvoidOutParameters" Category="Microsoft.Design" CheckId="CA1021" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>derivative</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Evaluate(System.Double,System.Int32):System.Double[]">
            <Messages>
             <Message Id="derivativeOrderMax+1" TypeName="OperationsShouldNotOverflow" Category="Microsoft.Usage" CheckId="CA2233" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>derivativeOrderMax+1</Item>
               <Item>Polynomial.Evaluate(Double, Int32):Double[]</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Item[System.Int32]">
            <Accessors>
             <Accessor Name="get_Item(System.Int32):System.Double">
              <Messages>
               <Message Id="System.ArgumentOutOfRangeException.#ctor(System.String,System.Object,System.String)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Created="2006-08-05 09:38:38Z">
                <Issue>
                 <Item>Polynomial.get_Item(Int32):Double</Item>
                 <Item>3</Item>
                 <Item>ArgumentOutOfRangeException.ArgumentOutOfRangeException(String, Object, String)</Item>
                 <Item>Power must not be negative.</Item>
                </Issue>
               </Message>
              </Messages>
             </Accessor>
             <Accessor Name="set_Item(System.Int32,System.Double):System.Void">
              <Messages>
               <Message Id="System.ArgumentOutOfRangeException.#ctor(System.String,System.Object,System.String)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Created="2006-08-05 09:38:38Z">
                <Issue>
                 <Item>Polynomial.set_Item(Int32, Double):Void</Item>
                 <Item>3</Item>
                 <Item>ArgumentOutOfRangeException.ArgumentOutOfRangeException(String, Object, String)</Item>
                 <Item>Power must not be negative.</Item>
                </Issue>
               </Message>
              </Messages>
             </Accessor>
            </Accessors>
           </Member>
           <Member Name="Multiply(MathNet.Numerics.Polynomial):MathNet.Numerics.Polynomial">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>'polynomial'</Item>
               <Item>Polynomial.Multiply(Polynomial):Polynomial</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="MultiplyShiftInplace(System.Int32):System.Void">
            <Messages>
             <Message Id="System.ArgumentOutOfRangeException.#ctor(System.String,System.Object,System.String)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>Polynomial.MultiplyShiftInplace(Int32):Void</Item>
               <Item>3</Item>
               <Item>ArgumentOutOfRangeException.ArgumentOutOfRangeException(String, Object, String)</Item>
               <Item>n must be positive.</Item>
              </Issue>
             </Message>
             <Message Id="0#n" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:38:38Z">
              <Issue Name="ParameterOneLetter">
               <Item>Polynomial.MultiplyShiftInplace(Int32):Void</Item>
               <Item>n</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="MultiplySlow(MathNet.Numerics.Polynomial):MathNet.Numerics.Polynomial">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>'polynomial'</Item>
               <Item>Polynomial.MultiplySlow(Polynomial):Polynomial</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="MultiplySyntheticInplace(System.Double):System.Void">
            <Messages>
             <Message Id="0#a" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:38:38Z">
              <Issue Name="ParameterOneLetter">
               <Item>Polynomial.MultiplySyntheticInplace(Double):Void</Item>
               <Item>a</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="op_Addition(MathNet.Numerics.Polynomial,MathNet.Numerics.Polynomial):MathNet.Numerics.Polynomial">
            <Messages>
             <Message TypeName="OperatorOverloadsHaveNamedAlternates" Category="Microsoft.Usage" CheckId="CA2225" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>Add</Item>
               <Item>Polynomial.op_Addition(Polynomial, Polynomial):Polynomial</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="op_Addition(MathNet.Numerics.Polynomial,System.Double):MathNet.Numerics.Polynomial">
            <Messages>
             <Message Id="1#n" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:38:38Z">
              <Issue Name="ParameterOneLetter">
               <Item>Polynomial.op_Addition(Polynomial, Double):Polynomial</Item>
               <Item>n</Item>
              </Issue>
             </Message>
             <Message TypeName="OperatorOverloadsHaveNamedAlternates" Category="Microsoft.Usage" CheckId="CA2225" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>Add</Item>
               <Item>Polynomial.op_Addition(Polynomial, Double):Polynomial</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="op_Addition(System.Double,MathNet.Numerics.Polynomial):MathNet.Numerics.Polynomial">
            <Messages>
             <Message Id="0#n" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:38:38Z">
              <Issue Name="ParameterOneLetter">
               <Item>Polynomial.op_Addition(Double, Polynomial):Polynomial</Item>
               <Item>n</Item>
              </Issue>
             </Message>
             <Message TypeName="OperatorOverloadsHaveNamedAlternates" Category="Microsoft.Usage" CheckId="CA2225" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>Add</Item>
               <Item>Polynomial.op_Addition(Double, Polynomial):Polynomial</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="op_Division(MathNet.Numerics.Polynomial,System.Double):MathNet.Numerics.Polynomial">
            <Messages>
             <Message Id="1#n" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:38:38Z">
              <Issue Name="ParameterOneLetter">
               <Item>Polynomial.op_Division(Polynomial, Double):Polynomial</Item>
               <Item>n</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="op_Equality(MathNet.Numerics.Polynomial,MathNet.Numerics.Polynomial):System.Boolean">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>'polynomial1'</Item>
               <Item>Polynomial.op_Equality(Polynomial, Polynomial):Boolean</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="op_GreaterThan(MathNet.Numerics.Polynomial,MathNet.Numerics.Polynomial):System.Boolean">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>'polynomial1'</Item>
               <Item>Polynomial.op_GreaterThan(Polynomial, Polynomial):Boolean</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="op_GreaterThanOrEqual(MathNet.Numerics.Polynomial,MathNet.Numerics.Polynomial):System.Boolean">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>'polynomial1'</Item>
               <Item>Polynomial.op_GreaterThanOrEqual(Polynomial, Polynomial):Boolean</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="op_Inequality(MathNet.Numerics.Polynomial,MathNet.Numerics.Polynomial):System.Boolean">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>'polynomial1'</Item>
               <Item>Polynomial.op_Inequality(Polynomial, Polynomial):Boolean</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="op_LessThan(MathNet.Numerics.Polynomial,MathNet.Numerics.Polynomial):System.Boolean">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>'polynomial1'</Item>
               <Item>Polynomial.op_LessThan(Polynomial, Polynomial):Boolean</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="op_LessThanOrEqual(MathNet.Numerics.Polynomial,MathNet.Numerics.Polynomial):System.Boolean">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>'polynomial1'</Item>
               <Item>Polynomial.op_LessThanOrEqual(Polynomial, Polynomial):Boolean</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="op_Multiply(MathNet.Numerics.Polynomial,MathNet.Numerics.Polynomial):MathNet.Numerics.Polynomial">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>'polynomial1'</Item>
               <Item>Polynomial.op_Multiply(Polynomial, Polynomial):Polynomial</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="op_Multiply(MathNet.Numerics.Polynomial,System.Double):MathNet.Numerics.Polynomial">
            <Messages>
             <Message Id="1#n" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:38:38Z">
              <Issue Name="ParameterOneLetter">
               <Item>Polynomial.op_Multiply(Polynomial, Double):Polynomial</Item>
               <Item>n</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="op_Multiply(System.Double,MathNet.Numerics.Polynomial):MathNet.Numerics.Polynomial">
            <Messages>
             <Message Id="0#n" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:38:38Z">
              <Issue Name="ParameterOneLetter">
               <Item>Polynomial.op_Multiply(Double, Polynomial):Polynomial</Item>
               <Item>n</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="op_Subtraction(MathNet.Numerics.Polynomial,MathNet.Numerics.Polynomial):MathNet.Numerics.Polynomial">
            <Messages>
             <Message TypeName="OperatorOverloadsHaveNamedAlternates" Category="Microsoft.Usage" CheckId="CA2225" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>Subtract</Item>
               <Item>Polynomial.op_Subtraction(Polynomial, Polynomial):Polynomial</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="op_Subtraction(MathNet.Numerics.Polynomial,System.Double):MathNet.Numerics.Polynomial">
            <Messages>
             <Message Id="1#n" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:38:38Z">
              <Issue Name="ParameterOneLetter">
               <Item>Polynomial.op_Subtraction(Polynomial, Double):Polynomial</Item>
               <Item>n</Item>
              </Issue>
             </Message>
             <Message TypeName="OperatorOverloadsHaveNamedAlternates" Category="Microsoft.Usage" CheckId="CA2225" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>Subtract</Item>
               <Item>Polynomial.op_Subtraction(Polynomial, Double):Polynomial</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="op_Subtraction(System.Double,MathNet.Numerics.Polynomial):MathNet.Numerics.Polynomial">
            <Messages>
             <Message Id="0#n" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:38:38Z">
              <Issue Name="ParameterOneLetter">
               <Item>Polynomial.op_Subtraction(Double, Polynomial):Polynomial</Item>
               <Item>n</Item>
              </Issue>
             </Message>
             <Message TypeName="OperatorOverloadsHaveNamedAlternates" Category="Microsoft.Usage" CheckId="CA2225" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>Subtract</Item>
               <Item>Polynomial.op_Subtraction(Double, Polynomial):Polynomial</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="op_UnaryNegation(MathNet.Numerics.Polynomial):MathNet.Numerics.Polynomial">
            <Messages>
             <Message TypeName="OperatorOverloadsHaveNamedAlternates" Category="Microsoft.Usage" CheckId="CA2225" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>Negate</Item>
               <Item>Polynomial.op_UnaryNegation(Polynomial):Polynomial</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="op_UnaryPlus(MathNet.Numerics.Polynomial):MathNet.Numerics.Polynomial">
            <Messages>
             <Message TypeName="OperatorOverloadsHaveNamedAlternates" Category="Microsoft.Usage" CheckId="CA2225" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>Plus</Item>
               <Item>Polynomial.op_UnaryPlus(Polynomial):Polynomial</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="ResizeDouble():System.Void">
            <Messages>
             <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>Polynomial.ResizeDouble():Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="SizeOfOrder(System.Int32):System.Int32">
            <Messages>
             <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Created="2006-08-05 09:38:38Z" FixCategory="NonBreaking">
              <Issue>
               <Item>Polynomial.SizeOfOrder(Int32):Int32</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="SubtractInplace(MathNet.Numerics.Polynomial):System.Void">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>'polynomial'</Item>
               <Item>Polynomial.SubtractInplace(Polynomial):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="SubtractInplace(System.Double):System.Void">
            <Messages>
             <Message Id="0#n" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:38:38Z">
              <Issue Name="ParameterOneLetter">
               <Item>Polynomial.SubtractInplace(Double):Void</Item>
               <Item>n</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="Quaternion">
          <Messages>
           <Message TypeName="OverrideEqualsAndOperatorEqualsOnValueTypes" Category="Microsoft.Performance" CheckId="CA1815" Created="2006-08-05 09:38:38Z">
            <Issue Name="Equals">
             <Item>MathNet.Numerics.Quaternion</Item>
            </Issue>
            <Issue Name="op_Equality">
             <Item>MathNet.Numerics.Quaternion</Item>
            </Issue>
           </Message>
           <Message TypeName="OverrideMethodsOnComparableTypes" Category="Microsoft.Design" CheckId="CA1036" Created="2006-08-05 09:38:38Z">
            <Issue Name="Equals">
             <Item>Quaternion</Item>
            </Issue>
            <Issue Name="Operator">
             <Item>Quaternion</Item>
             <Item>!=</Item>
            </Issue>
            <Issue Name="Operator">
             <Item>Quaternion</Item>
             <Item>&lt;</Item>
            </Issue>
            <Issue Name="Operator">
             <Item>Quaternion</Item>
             <Item>==</Item>
            </Issue>
            <Issue Name="Operator">
             <Item>Quaternion</Item>
             <Item>&gt;</Item>
            </Issue>
           </Message>
          </Messages>
          <Members>
           <Member Name="Add(MathNet.Numerics.Quaternion):MathNet.Numerics.Quaternion">
            <Messages>
             <Message Id="0#q" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:38:38Z">
              <Issue Name="ParameterOneLetter">
               <Item>Quaternion.Add(Quaternion):Quaternion</Item>
               <Item>q</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Add(System.Double):MathNet.Numerics.Quaternion">
            <Messages>
             <Message Id="0#r" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:38:38Z">
              <Issue Name="ParameterOneLetter">
               <Item>Quaternion.Add(Double):Quaternion</Item>
               <Item>r</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Distance(MathNet.Numerics.Quaternion,MathNet.Numerics.Quaternion):System.Double">
            <Messages>
             <Message Id="0#a" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:38:38Z">
              <Issue Name="ParameterOneLetter">
               <Item>Quaternion.Distance(Quaternion, Quaternion):Double</Item>
               <Item>a</Item>
              </Issue>
             </Message>
             <Message Id="1#b" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:38:38Z">
              <Issue Name="ParameterOneLetter">
               <Item>Quaternion.Distance(Quaternion, Quaternion):Double</Item>
               <Item>b</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Divide(MathNet.Numerics.Quaternion):MathNet.Numerics.Quaternion">
            <Messages>
             <Message Id="0#q" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:38:38Z">
              <Issue Name="ParameterOneLetter">
               <Item>Quaternion.Divide(Quaternion):Quaternion</Item>
               <Item>q</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Divide(System.Double):MathNet.Numerics.Quaternion">
            <Messages>
             <Message Id="0#d" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:38:38Z">
              <Issue Name="ParameterOneLetter">
               <Item>Quaternion.Divide(Double):Quaternion</Item>
               <Item>d</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Lg():MathNet.Numerics.Quaternion">
            <Messages>
             <Message Id="Member" TypeName="ShortAcronymsShouldBeUppercase" Category="Microsoft.Naming" CheckId="CA1706" Created="2006-08-05 09:38:38Z">
              <Issue Name="Member">
               <Item>Lg</Item>
               <Item>Quaternion.Lg():Quaternion</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Ln():MathNet.Numerics.Quaternion">
            <Messages>
             <Message Id="Member" TypeName="ShortAcronymsShouldBeUppercase" Category="Microsoft.Naming" CheckId="CA1706" Created="2006-08-05 09:38:38Z">
              <Issue Name="Member">
               <Item>Ln</Item>
               <Item>Quaternion.Ln():Quaternion</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Multiply(MathNet.Numerics.Quaternion):MathNet.Numerics.Quaternion">
            <Messages>
             <Message Id="0#q" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:38:38Z">
              <Issue Name="ParameterOneLetter">
               <Item>Quaternion.Multiply(Quaternion):Quaternion</Item>
               <Item>q</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Multiply(System.Double):MathNet.Numerics.Quaternion">
            <Messages>
             <Message Id="0#d" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:38:38Z">
              <Issue Name="ParameterOneLetter">
               <Item>Quaternion.Multiply(Double):Quaternion</Item>
               <Item>d</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="op_Addition(MathNet.Numerics.Quaternion,MathNet.Numerics.Quaternion):MathNet.Numerics.Quaternion">
            <Messages>
             <Message TypeName="OverloadOperatorEqualsOnOverloadingAddAndSubtract" Category="Microsoft.Design" CheckId="CA1013" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>Quaternion</Item>
               <Item>Quaternion.op_Addition(Quaternion, Quaternion):Quaternion</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="op_Addition(MathNet.Numerics.Quaternion,System.Double):MathNet.Numerics.Quaternion">
            <Messages>
             <Message Id="1#d" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:38:38Z">
              <Issue Name="ParameterOneLetter">
               <Item>Quaternion.op_Addition(Quaternion, Double):Quaternion</Item>
               <Item>d</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="op_Division(MathNet.Numerics.Quaternion,System.Double):MathNet.Numerics.Quaternion">
            <Messages>
             <Message Id="1#d" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:38:38Z">
              <Issue Name="ParameterOneLetter">
               <Item>Quaternion.op_Division(Quaternion, Double):Quaternion</Item>
               <Item>d</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="op_ExclusiveOr(MathNet.Numerics.Quaternion,MathNet.Numerics.Quaternion):MathNet.Numerics.Quaternion">
            <Messages>
             <Message TypeName="OperatorOverloadsHaveNamedAlternates" Category="Microsoft.Usage" CheckId="CA2225" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>Xor</Item>
               <Item>Quaternion.op_ExclusiveOr(Quaternion, Quaternion):Quaternion</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="op_ExclusiveOr(MathNet.Numerics.Quaternion,System.Double):MathNet.Numerics.Quaternion">
            <Messages>
             <Message Id="1#d" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:38:38Z">
              <Issue Name="ParameterOneLetter">
               <Item>Quaternion.op_ExclusiveOr(Quaternion, Double):Quaternion</Item>
               <Item>d</Item>
              </Issue>
             </Message>
             <Message TypeName="OperatorOverloadsHaveNamedAlternates" Category="Microsoft.Usage" CheckId="CA2225" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>Xor</Item>
               <Item>Quaternion.op_ExclusiveOr(Quaternion, Double):Quaternion</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="op_Implicit(System.Double):MathNet.Numerics.Quaternion">
            <Messages>
             <Message Id="0#d" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:38:38Z">
              <Issue Name="ParameterOneLetter">
               <Item>Quaternion.op_Implicit(Double):Quaternion</Item>
               <Item>d</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="op_Multiply(MathNet.Numerics.Quaternion,System.Double):MathNet.Numerics.Quaternion">
            <Messages>
             <Message Id="1#d" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:38:38Z">
              <Issue Name="ParameterOneLetter">
               <Item>Quaternion.op_Multiply(Quaternion, Double):Quaternion</Item>
               <Item>d</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="op_Subtraction(MathNet.Numerics.Quaternion,MathNet.Numerics.Quaternion):MathNet.Numerics.Quaternion">
            <Messages>
             <Message TypeName="OverloadOperatorEqualsOnOverloadingAddAndSubtract" Category="Microsoft.Design" CheckId="CA1013" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>Quaternion</Item>
               <Item>Quaternion.op_Subtraction(Quaternion, Quaternion):Quaternion</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="op_Subtraction(MathNet.Numerics.Quaternion,System.Double):MathNet.Numerics.Quaternion">
            <Messages>
             <Message Id="1#d" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:38:38Z">
              <Issue Name="ParameterOneLetter">
               <Item>Quaternion.op_Subtraction(Quaternion, Double):Quaternion</Item>
               <Item>d</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="op_UnaryNegation(MathNet.Numerics.Quaternion):MathNet.Numerics.Quaternion">
            <Messages>
             <Message Id="0#q" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:38:38Z">
              <Issue Name="ParameterOneLetter">
               <Item>Quaternion.op_UnaryNegation(Quaternion):Quaternion</Item>
               <Item>q</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="op_UnaryPlus(MathNet.Numerics.Quaternion):MathNet.Numerics.Quaternion">
            <Messages>
             <Message Id="0#q" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:38:38Z">
              <Issue Name="ParameterOneLetter">
               <Item>Quaternion.op_UnaryPlus(Quaternion):Quaternion</Item>
               <Item>q</Item>
              </Issue>
             </Message>
             <Message TypeName="OperatorOverloadsHaveNamedAlternates" Category="Microsoft.Usage" CheckId="CA2225" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>Plus</Item>
               <Item>Quaternion.op_UnaryPlus(Quaternion):Quaternion</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Subtract(MathNet.Numerics.Quaternion):MathNet.Numerics.Quaternion">
            <Messages>
             <Message Id="0#q" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:38:38Z">
              <Issue Name="ParameterOneLetter">
               <Item>Quaternion.Subtract(Quaternion):Quaternion</Item>
               <Item>q</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Subtract(System.Double):MathNet.Numerics.Quaternion">
            <Messages>
             <Message Id="0#r" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:38:38Z">
              <Issue Name="ParameterOneLetter">
               <Item>Quaternion.Subtract(Double):Quaternion</Item>
               <Item>r</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="Rational">
          <Members>
           <Member Name=".ctor(MathNet.Numerics.Polynomial,MathNet.Numerics.Polynomial)">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>'denominator'</Item>
               <Item>Rational.Rational(Polynomial, Polynomial)</Item>
              </Issue>
              <Issue>
               <Item>'numerator'</Item>
               <Item>Rational.Rational(Polynomial, Polynomial)</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name=".ctor(MathNet.Numerics.Rational)">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>'copy'</Item>
               <Item>Rational.Rational(Rational)</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Add(MathNet.Numerics.Rational):MathNet.Numerics.Rational">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>'rational'</Item>
               <Item>Rational.Add(Rational):Rational</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="AddInplace(System.Double):System.Void">
            <Messages>
             <Message Id="0#n" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:38:38Z">
              <Issue Name="ParameterOneLetter">
               <Item>Rational.AddInplace(Double):Void</Item>
               <Item>n</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="CompareTo(MathNet.Numerics.Rational):System.Int32">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>'rational'</Item>
               <Item>Rational.CompareTo(Rational):Int32</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="CompareTo(System.Object):System.Int32">
            <Messages>
             <Message TypeName="DoNotCastUnnecessarily" Category="Microsoft.Performance" CheckId="CA1800" Created="2006-08-05 09:38:38Z">
              <Issue Name="Parameter">
               <Item>obj</Item>
               <Item>MathNet.Numerics.Rational</Item>
               <Item>Rational.CompareTo(Object):Int32</Item>
               <Item>castclass</Item>
              </Issue>
             </Message>
             <Message Id="System.ArgumentException.#ctor(System.String,System.String)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>Rational.CompareTo(Object):Int32</Item>
               <Item>1</Item>
               <Item>ArgumentException.ArgumentException(String, String)</Item>
               <Item>Type mismatch: rational expected.</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Divide(MathNet.Numerics.Rational):MathNet.Numerics.Rational">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>'rational'</Item>
               <Item>Rational.Divide(Rational):Rational</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="DivideInplace(System.Double):System.Void">
            <Messages>
             <Message Id="0#n" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:38:38Z">
              <Issue Name="ParameterOneLetter">
               <Item>Rational.DivideInplace(Double):Void</Item>
               <Item>n</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Equals(MathNet.Numerics.Rational):System.Boolean">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>'rational'</Item>
               <Item>Rational.Equals(Rational):Boolean</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Equals(MathNet.Numerics.Rational,MathNet.Numerics.Rational):System.Boolean">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>'rational1'</Item>
               <Item>Rational.Equals(Rational, Rational):Boolean</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Equals(System.Object):System.Boolean">
            <Messages>
             <Message TypeName="DoNotCastUnnecessarily" Category="Microsoft.Performance" CheckId="CA1800" Created="2006-08-05 09:38:38Z">
              <Issue Name="Parameter">
               <Item>obj</Item>
               <Item>MathNet.Numerics.Rational</Item>
               <Item>Rational.Equals(Object):Boolean</Item>
               <Item>castclass</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Multiply(MathNet.Numerics.Rational):MathNet.Numerics.Rational">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>'rational'</Item>
               <Item>Rational.Multiply(Rational):Rational</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="MultiplyInplace(System.Double):System.Void">
            <Messages>
             <Message Id="0#n" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:38:38Z">
              <Issue Name="ParameterOneLetter">
               <Item>Rational.MultiplyInplace(Double):Void</Item>
               <Item>n</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="op_Addition(MathNet.Numerics.Rational,MathNet.Numerics.Rational):MathNet.Numerics.Rational">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>'rational1'</Item>
               <Item>Rational.op_Addition(Rational, Rational):Rational</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="op_Addition(MathNet.Numerics.Rational,System.Double):MathNet.Numerics.Rational">
            <Messages>
             <Message Id="1#n" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:38:38Z">
              <Issue Name="ParameterOneLetter">
               <Item>Rational.op_Addition(Rational, Double):Rational</Item>
               <Item>n</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="op_Addition(System.Double,MathNet.Numerics.Rational):MathNet.Numerics.Rational">
            <Messages>
             <Message Id="0#n" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:38:38Z">
              <Issue Name="ParameterOneLetter">
               <Item>Rational.op_Addition(Double, Rational):Rational</Item>
               <Item>n</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="op_Division(MathNet.Numerics.Polynomial,MathNet.Numerics.Rational):MathNet.Numerics.Rational">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>'rational'</Item>
               <Item>Rational.op_Division(Polynomial, Rational):Rational</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="op_Division(MathNet.Numerics.Rational,MathNet.Numerics.Polynomial):MathNet.Numerics.Rational">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>'rational'</Item>
               <Item>Rational.op_Division(Rational, Polynomial):Rational</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="op_Division(MathNet.Numerics.Rational,MathNet.Numerics.Rational):MathNet.Numerics.Rational">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>'rational1'</Item>
               <Item>Rational.op_Division(Rational, Rational):Rational</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="op_Division(MathNet.Numerics.Rational,System.Double):MathNet.Numerics.Rational">
            <Messages>
             <Message Id="1#n" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:38:38Z">
              <Issue Name="ParameterOneLetter">
               <Item>Rational.op_Division(Rational, Double):Rational</Item>
               <Item>n</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="op_Division(System.Double,MathNet.Numerics.Rational):MathNet.Numerics.Rational">
            <Messages>
             <Message Id="0#n" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:38:38Z">
              <Issue Name="ParameterOneLetter">
               <Item>Rational.op_Division(Double, Rational):Rational</Item>
               <Item>n</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="op_Equality(MathNet.Numerics.Rational,MathNet.Numerics.Rational):System.Boolean">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>'rational1'</Item>
               <Item>Rational.op_Equality(Rational, Rational):Boolean</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="op_GreaterThan(MathNet.Numerics.Rational,MathNet.Numerics.Rational):System.Boolean">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>'rational1'</Item>
               <Item>Rational.op_GreaterThan(Rational, Rational):Boolean</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="op_GreaterThanOrEqual(MathNet.Numerics.Rational,MathNet.Numerics.Rational):System.Boolean">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>'rational1'</Item>
               <Item>Rational.op_GreaterThanOrEqual(Rational, Rational):Boolean</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="op_Inequality(MathNet.Numerics.Rational,MathNet.Numerics.Rational):System.Boolean">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>'rational1'</Item>
               <Item>Rational.op_Inequality(Rational, Rational):Boolean</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="op_LessThan(MathNet.Numerics.Rational,MathNet.Numerics.Rational):System.Boolean">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>'rational1'</Item>
               <Item>Rational.op_LessThan(Rational, Rational):Boolean</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="op_LessThanOrEqual(MathNet.Numerics.Rational,MathNet.Numerics.Rational):System.Boolean">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>'rational1'</Item>
               <Item>Rational.op_LessThanOrEqual(Rational, Rational):Boolean</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="op_Multiply(MathNet.Numerics.Polynomial,MathNet.Numerics.Rational):MathNet.Numerics.Rational">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>'rational'</Item>
               <Item>Rational.op_Multiply(Polynomial, Rational):Rational</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="op_Multiply(MathNet.Numerics.Rational,MathNet.Numerics.Polynomial):MathNet.Numerics.Rational">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>'rational'</Item>
               <Item>Rational.op_Multiply(Rational, Polynomial):Rational</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="op_Multiply(MathNet.Numerics.Rational,MathNet.Numerics.Rational):MathNet.Numerics.Rational">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>'rational1'</Item>
               <Item>Rational.op_Multiply(Rational, Rational):Rational</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="op_Multiply(MathNet.Numerics.Rational,System.Double):MathNet.Numerics.Rational">
            <Messages>
             <Message Id="1#n" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:38:38Z">
              <Issue Name="ParameterOneLetter">
               <Item>Rational.op_Multiply(Rational, Double):Rational</Item>
               <Item>n</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="op_Multiply(System.Double,MathNet.Numerics.Rational):MathNet.Numerics.Rational">
            <Messages>
             <Message Id="0#n" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:38:38Z">
              <Issue Name="ParameterOneLetter">
               <Item>Rational.op_Multiply(Double, Rational):Rational</Item>
               <Item>n</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="op_Subtraction(MathNet.Numerics.Rational,MathNet.Numerics.Rational):MathNet.Numerics.Rational">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>'rational1'</Item>
               <Item>Rational.op_Subtraction(Rational, Rational):Rational</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="op_Subtraction(MathNet.Numerics.Rational,System.Double):MathNet.Numerics.Rational">
            <Messages>
             <Message Id="1#n" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:38:38Z">
              <Issue Name="ParameterOneLetter">
               <Item>Rational.op_Subtraction(Rational, Double):Rational</Item>
               <Item>n</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="op_Subtraction(System.Double,MathNet.Numerics.Rational):MathNet.Numerics.Rational">
            <Messages>
             <Message Id="0#n" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:38:38Z">
              <Issue Name="ParameterOneLetter">
               <Item>Rational.op_Subtraction(Double, Rational):Rational</Item>
               <Item>n</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="op_UnaryNegation(MathNet.Numerics.Rational):MathNet.Numerics.Rational">
            <Messages>
             <Message TypeName="OperatorOverloadsHaveNamedAlternates" Category="Microsoft.Usage" CheckId="CA2225" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>Negate</Item>
               <Item>Rational.op_UnaryNegation(Rational):Rational</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="op_UnaryPlus(MathNet.Numerics.Rational):MathNet.Numerics.Rational">
            <Messages>
             <Message TypeName="OperatorOverloadsHaveNamedAlternates" Category="Microsoft.Usage" CheckId="CA2225" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>Plus</Item>
               <Item>Rational.op_UnaryPlus(Rational):Rational</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Subtract(MathNet.Numerics.Rational):MathNet.Numerics.Rational">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>'rational'</Item>
               <Item>Rational.Subtract(Rational):Rational</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="SubtractInplace(System.Double):System.Void">
            <Messages>
             <Message Id="0#n" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:38:38Z">
              <Issue Name="ParameterOneLetter">
               <Item>Rational.SubtractInplace(Double):Void</Item>
               <Item>n</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="ReadOnlySet`1">
          <Messages>
           <Message TypeName="IdentifiersShouldHaveCorrectSuffix" Category="Microsoft.Naming" CheckId="CA1710" Created="2006-08-05 09:38:38Z">
            <Issue>
             <Item>MathNet.Numerics.ReadOnlySet`1</Item>
             <Item>Collection</Item>
            </Issue>
           </Message>
          </Messages>
          <Members>
           <Member Name="Exists(System.Predicate`1&lt;T&gt;,T&amp;):System.Boolean">
            <Messages>
             <Message Id="1#" TypeName="AvoidOutParameters" Category="Microsoft.Design" CheckId="CA1021" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>foundItem</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="FindLastIndex(System.Int32,System.Predicate`1&lt;T&gt;):System.Int32">
            <Messages>
             <Message Id="startIndex+1" TypeName="OperationsShouldNotOverflow" Category="Microsoft.Usage" CheckId="CA2233" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>startIndex+1</Item>
               <Item>ReadOnlySet`1.FindLastIndex(Int32, Predicate`1&lt;T&gt;):Int32</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="SampleList">
          <Messages>
           <Message TypeName="ICollectionImplementationsHaveStronglyTypedMembers" Category="Microsoft.Design" CheckId="CA1035" Created="2006-08-05 09:38:38Z">
            <Issue>
             <Item>SampleList</Item>
            </Issue>
           </Message>
           <Message TypeName="IdentifiersShouldHaveCorrectSuffix" Category="Microsoft.Naming" CheckId="CA1710" Created="2006-08-05 09:38:38Z">
            <Issue>
             <Item>MathNet.Numerics.SampleList</Item>
             <Item>Dictionary</Item>
            </Issue>
           </Message>
          </Messages>
          <Members>
           <Member Name=".ctor()">
            <Messages>
             <Message TypeName="DoNotInitializeUnnecessarily" Category="Microsoft.Performance" CheckId="CA1805" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>SampleList.SampleList()</Item>
               <Item>size</Item>
               <Item>System.Int32</Item>
               <Item>0</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name=".ctor(System.Collections.IDictionary)">
            <Messages>
             <Message Id="0#d" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:38:38Z">
              <Issue Name="ParameterOneLetter">
               <Item>SampleList.SampleList(IDictionary)</Item>
               <Item>d</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name=".ctor(System.Collections.IDictionary,System.Int32)">
            <Messages>
             <Message Id="0#d" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:38:38Z">
              <Issue Name="ParameterOneLetter">
               <Item>SampleList.SampleList(IDictionary, Int32)</Item>
               <Item>d</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name=".ctor(System.Int32)">
            <Messages>
             <Message TypeName="DoNotInitializeUnnecessarily" Category="Microsoft.Performance" CheckId="CA1805" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>SampleList.SampleList(Int32)</Item>
               <Item>size</Item>
               <Item>System.Int32</Item>
               <Item>0</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Add(System.Double,System.Double):System.Void">
            <Messages>
             <Message Id="0#t" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:38:38Z">
              <Issue Name="ParameterOneLetter">
               <Item>SampleList.Add(Double, Double):Void</Item>
               <Item>t</Item>
              </Issue>
             </Message>
             <Message Id="1#x" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:38:38Z">
              <Issue Name="ParameterOneLetter">
               <Item>SampleList.Add(Double, Double):Void</Item>
               <Item>x</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="ContainsT(System.Double):System.Boolean">
            <Messages>
             <Message Id="0#t" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:38:38Z">
              <Issue Name="ParameterOneLetter">
               <Item>SampleList.ContainsT(Double):Boolean</Item>
               <Item>t</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="ContainsX(System.Double):System.Boolean">
            <Messages>
             <Message Id="0#x" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:38:38Z">
              <Issue Name="ParameterOneLetter">
               <Item>SampleList.ContainsX(Double):Boolean</Item>
               <Item>x</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Locate(System.Double):System.Int32">
            <Messages>
             <Message Id="0#t" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:38:38Z">
              <Issue Name="ParameterOneLetter">
               <Item>SampleList.Locate(Double):Int32</Item>
               <Item>t</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Locate(System.Double,System.Int32):System.Int32">
            <Messages>
             <Message Id="0#t" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:38:38Z">
              <Issue Name="ParameterOneLetter">
               <Item>SampleList.Locate(Double, Int32):Int32</Item>
               <Item>t</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Remove(System.Double):System.Void">
            <Messages>
             <Message Id="0#t" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:38:38Z">
              <Issue Name="ParameterOneLetter">
               <Item>SampleList.Remove(Double):Void</Item>
               <Item>t</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="System.Collections.ICollection.CopyTo(System.Array,System.Int32):System.Void">
            <Messages>
             <Message Id="System.ArgumentException.#ctor(System.String,System.String)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>SampleList.System.Collections.ICollection.CopyTo(Array, Int32):Void</Item>
               <Item>1</Item>
               <Item>ArgumentException.ArgumentException(String, String)</Item>
               <Item>array</Item>
              </Issue>
             </Message>
             <Message TypeName="InstantiateArgumentExceptionsCorrectly" Category="Microsoft.Usage" CheckId="CA2208" Created="2006-08-05 09:38:38Z">
              <Issue Name="TwoArgumentsSecondShouldBeParameterName">
               <Item>System.ArgumentException</Item>
               <Item>ArgumentException.ArgumentException(String, String)</Item>
               <Item>array</Item>
               <Item>Only single dimension arrays supported</Item>
              </Issue>
             </Message>
             <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>SampleList</Item>
               <Item>ICollection.CopyTo(Array, Int32):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="System.Collections.ICollection.IsSynchronized">
            <Accessors>
             <Accessor Name="System.Collections.ICollection.get_IsSynchronized():System.Boolean">
              <Messages>
               <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Created="2006-08-05 09:38:38Z">
                <Issue>
                 <Item>SampleList</Item>
                 <Item>ICollection.get_IsSynchronized():Boolean</Item>
                </Issue>
               </Message>
              </Messages>
             </Accessor>
            </Accessors>
           </Member>
           <Member Name="System.Collections.ICollection.SyncRoot">
            <Accessors>
             <Accessor Name="System.Collections.ICollection.get_SyncRoot():System.Object">
              <Messages>
               <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Created="2006-08-05 09:38:38Z">
                <Issue>
                 <Item>SampleList</Item>
                 <Item>ICollection.get_SyncRoot():Object</Item>
                </Issue>
               </Message>
              </Messages>
             </Accessor>
            </Accessors>
           </Member>
           <Member Name="System.Collections.IDictionary.Add(System.Object,System.Object):System.Void">
            <Messages>
             <Message Id="System.Convert.ToDouble(System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>SampleList.System.Collections.IDictionary.Add(Object, Object):Void</Item>
               <Item>System.Convert.ToDouble(System.Object)</Item>
               <Item>System.Convert.ToDouble(System.Object,System.IFormatProvider)</Item>
              </Issue>
              <Issue>
               <Item>SampleList.System.Collections.IDictionary.Add(Object, Object):Void</Item>
               <Item>System.Convert.ToDouble(System.Object)</Item>
               <Item>System.Convert.ToDouble(System.Object,System.IFormatProvider)</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="System.Collections.IDictionary.Contains(System.Object):System.Boolean">
            <Messages>
             <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>SampleList</Item>
               <Item>IDictionary.Contains(Object):Boolean</Item>
              </Issue>
             </Message>
             <Message Id="System.Convert.ToDouble(System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>SampleList.System.Collections.IDictionary.Contains(Object):Boolean</Item>
               <Item>System.Convert.ToDouble(System.Object)</Item>
               <Item>System.Convert.ToDouble(System.Object,System.IFormatProvider)</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="System.Collections.IDictionary.GetEnumerator():System.Collections.IDictionaryEnumerator">
            <Messages>
             <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>SampleList</Item>
               <Item>IDictionary.GetEnumerator():IDictionaryEnumerator</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="System.Collections.IDictionary.IsFixedSize">
            <Accessors>
             <Accessor Name="System.Collections.IDictionary.get_IsFixedSize():System.Boolean">
              <Messages>
               <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Created="2006-08-05 09:38:38Z">
                <Issue>
                 <Item>SampleList</Item>
                 <Item>IDictionary.get_IsFixedSize():Boolean</Item>
                </Issue>
               </Message>
              </Messages>
             </Accessor>
            </Accessors>
           </Member>
           <Member Name="System.Collections.IDictionary.IsReadOnly">
            <Accessors>
             <Accessor Name="System.Collections.IDictionary.get_IsReadOnly():System.Boolean">
              <Messages>
               <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Created="2006-08-05 09:38:38Z">
                <Issue>
                 <Item>SampleList</Item>
                 <Item>IDictionary.get_IsReadOnly():Boolean</Item>
                </Issue>
               </Message>
              </Messages>
             </Accessor>
            </Accessors>
           </Member>
           <Member Name="System.Collections.IDictionary.Item[System.Object]">
            <Accessors>
             <Accessor Name="System.Collections.IDictionary.get_Item(System.Object):System.Object">
              <Messages>
               <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Created="2006-08-05 09:38:38Z">
                <Issue>
                 <Item>SampleList</Item>
                 <Item>IDictionary.get_Item(Object):Object</Item>
                </Issue>
               </Message>
               <Message Id="System.Convert.ToDouble(System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Created="2006-08-05 09:38:38Z">
                <Issue>
                 <Item>SampleList.System.Collections.IDictionary.get_Item(Object):Object</Item>
                 <Item>System.Convert.ToDouble(System.Object)</Item>
                 <Item>System.Convert.ToDouble(System.Object,System.IFormatProvider)</Item>
                </Issue>
               </Message>
              </Messages>
             </Accessor>
             <Accessor Name="System.Collections.IDictionary.set_Item(System.Object,System.Object):System.Void">
              <Messages>
               <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Created="2006-08-05 09:38:38Z">
                <Issue>
                 <Item>SampleList</Item>
                 <Item>IDictionary.set_Item(Object, Object):Void</Item>
                </Issue>
               </Message>
               <Message Id="System.Convert.ToDouble(System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Created="2006-08-05 09:38:38Z">
                <Issue>
                 <Item>SampleList.System.Collections.IDictionary.set_Item(Object, Object):Void</Item>
                 <Item>System.Convert.ToDouble(System.Object)</Item>
                 <Item>System.Convert.ToDouble(System.Object,System.IFormatProvider)</Item>
                </Issue>
                <Issue>
                 <Item>SampleList.System.Collections.IDictionary.set_Item(Object, Object):Void</Item>
                 <Item>System.Convert.ToDouble(System.Object)</Item>
                 <Item>System.Convert.ToDouble(System.Object,System.IFormatProvider)</Item>
                </Issue>
               </Message>
              </Messages>
             </Accessor>
            </Accessors>
           </Member>
           <Member Name="System.Collections.IDictionary.Keys">
            <Accessors>
             <Accessor Name="System.Collections.IDictionary.get_Keys():System.Collections.ICollection">
              <Messages>
               <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Created="2006-08-05 09:38:38Z">
                <Issue>
                 <Item>SampleList</Item>
                 <Item>IDictionary.get_Keys():ICollection</Item>
                </Issue>
               </Message>
              </Messages>
             </Accessor>
            </Accessors>
           </Member>
           <Member Name="System.Collections.IDictionary.Remove(System.Object):System.Void">
            <Messages>
             <Message Id="System.Convert.ToDouble(System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>SampleList.System.Collections.IDictionary.Remove(Object):Void</Item>
               <Item>System.Convert.ToDouble(System.Object)</Item>
               <Item>System.Convert.ToDouble(System.Object,System.IFormatProvider)</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="System.Collections.IDictionary.Values">
            <Accessors>
             <Accessor Name="System.Collections.IDictionary.get_Values():System.Collections.ICollection">
              <Messages>
               <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Created="2006-08-05 09:38:38Z">
                <Issue>
                 <Item>SampleList</Item>
                 <Item>IDictionary.get_Values():ICollection</Item>
                </Issue>
               </Message>
              </Messages>
             </Accessor>
            </Accessors>
           </Member>
           <Member Name="System.Collections.IEnumerable.GetEnumerator():System.Collections.IEnumerator">
            <Messages>
             <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>SampleList</Item>
               <Item>IEnumerable.GetEnumerator():IEnumerator</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="SampleList+KeyList">
          <Members>
           <Member Name="Contains(System.Object):System.Boolean">
            <Messages>
             <Message Id="System.Convert.ToDouble(System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>KeyList.Contains(Object):Boolean</Item>
               <Item>System.Convert.ToDouble(System.Object)</Item>
               <Item>System.Convert.ToDouble(System.Object,System.IFormatProvider)</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="CopyTo(System.Array,System.Int32):System.Void">
            <Messages>
             <Message TypeName="InstantiateArgumentExceptionsCorrectly" Category="Microsoft.Usage" CheckId="CA2208" Created="2006-08-05 09:38:38Z">
              <Issue Name="NoArguments">
               <Item>System.ArgumentException</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="IndexOf(System.Object):System.Int32">
            <Messages>
             <Message Id="System.Convert.ToDouble(System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>KeyList.IndexOf(Object):Int32</Item>
               <Item>System.Convert.ToDouble(System.Object)</Item>
               <Item>System.Convert.ToDouble(System.Object,System.IFormatProvider)</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="SampleList+SampleAlteredEventArgs">
          <Messages>
           <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Created="2006-08-05 09:38:38Z">
            <Issue>
             <Item>MathNet.Numerics.SampleList+SampleAlteredEventArgs</Item>
            </Issue>
           </Message>
          </Messages>
          <Members>
           <Member Name=".ctor(System.Double)">
            <Messages>
             <Message Id="0#t" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:38:38Z">
              <Issue Name="ParameterOneLetter">
               <Item>SampleAlteredEventArgs.SampleAlteredEventArgs(Double)</Item>
               <Item>t</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="T">
            <Messages>
             <Message Id="T" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:38:38Z">
              <Issue Name="MemberOneLetter">
               <Item>T</Item>
               <Item>SampleAlteredEventArgs.T:Double</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="SampleList+SampleAlteredEventHandler">
          <Messages>
           <Message TypeName="UseGenericEventHandlerInstances" Category="Microsoft.Design" CheckId="CA1003" Created="2006-08-05 09:38:38Z">
            <Issue>
             <Item>MathNet.Numerics.SampleList+SampleAlteredEventHandler</Item>
            </Issue>
           </Message>
          </Messages>
         </Type>
         <Type Name="SampleList+SampleListEnumerator">
          <Members>
           <Member Name=".ctor(MathNet.Numerics.SampleList,System.Int32,System.Int32,MathNet.Numerics.SampleList+SampleListEnumerator+EnumerationMode)">
            <Messages>
             <Message TypeName="DoNotInitializeUnnecessarily" Category="Microsoft.Performance" CheckId="CA1805" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>SampleListEnumerator.SampleListEnumerator(SampleList, Int32, Int32, EnumerationMode)</Item>
               <Item>current</Item>
               <Item>System.Boolean</Item>
               <Item>false</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="SampleList+ValueList">
          <Members>
           <Member Name="Contains(System.Object):System.Boolean">
            <Messages>
             <Message Id="System.Convert.ToDouble(System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>ValueList.Contains(Object):Boolean</Item>
               <Item>System.Convert.ToDouble(System.Object)</Item>
               <Item>System.Convert.ToDouble(System.Object,System.IFormatProvider)</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="CopyTo(System.Array,System.Int32):System.Void">
            <Messages>
             <Message TypeName="InstantiateArgumentExceptionsCorrectly" Category="Microsoft.Usage" CheckId="CA2208" Created="2006-08-05 09:38:38Z">
              <Issue Name="NoArguments">
               <Item>System.ArgumentException</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="IndexOf(System.Object):System.Int32">
            <Messages>
             <Message Id="System.Convert.ToDouble(System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>ValueList.IndexOf(Object):Int32</Item>
               <Item>System.Convert.ToDouble(System.Object)</Item>
               <Item>System.Convert.ToDouble(System.Object,System.IFormatProvider)</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="Set`1">
          <Messages>
           <Message TypeName="IdentifiersShouldHaveCorrectSuffix" Category="Microsoft.Naming" CheckId="CA1710" Created="2006-08-05 09:38:38Z">
            <Issue>
             <Item>MathNet.Numerics.Set`1</Item>
             <Item>Collection</Item>
            </Issue>
           </Message>
          </Messages>
          <Members>
           <Member Name=".ctor(System.Int32)">
            <Messages>
             <Message TypeName="DoNotCallOverridableMethodsInConstructors" Category="Microsoft.Usage" CheckId="CA2214" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>Set`1.Set`1(Int32)</Item>
               <Item>&#xD;&#xA;&#xD;&#xA;Set`1.Set`1(Int32)&#xD;&#xA;Collection`1&lt;T&gt;.Add(T):Void&#xD;&#xA;Collection`1&lt;T&gt;.InsertItem(Int32, T):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Concatenate(System.Collections.Generic.IEnumerable`1&lt;T&gt;):MathNet.Numerics.Set`1&lt;T&gt;">
            <Messages>
             <Message Id="0#c" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:38:38Z">
              <Issue Name="ParameterOneLetter">
               <Item>Set`1.Concatenate(IEnumerable`1&lt;T&gt;):Set`1&lt;T&gt;</Item>
               <Item>c</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Concatenate(System.Collections.Generic.IEnumerable`1&lt;T&gt;,System.Collections.Generic.IEnumerable`1&lt;T&gt;):MathNet.Numerics.Set`1&lt;T&gt;">
            <Messages>
             <Message TypeName="DoNotDeclareStaticMembersOnGenericTypes" Category="Microsoft.Design" CheckId="CA1000" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>Set`1.Concatenate(IEnumerable`1&lt;T&gt;, IEnumerable`1&lt;T&gt;):Set`1&lt;T&gt;</Item>
               <Item>MathNet.Numerics.Set`1</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="ConcatenateInplace(System.Collections.Generic.IEnumerable`1&lt;T&gt;):System.Void">
            <Messages>
             <Message Id="0#c" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:38:38Z">
              <Issue Name="ParameterOneLetter">
               <Item>Set`1.ConcatenateInplace(IEnumerable`1&lt;T&gt;):Void</Item>
               <Item>c</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Exists(System.Predicate`1&lt;T&gt;,T&amp;):System.Boolean">
            <Messages>
             <Message Id="1#" TypeName="AvoidOutParameters" Category="Microsoft.Design" CheckId="CA1021" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>foundItem</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="FindLastIndex(System.Int32,System.Predicate`1&lt;T&gt;):System.Int32">
            <Messages>
             <Message Id="startIndex+1" TypeName="OperationsShouldNotOverflow" Category="Microsoft.Usage" CheckId="CA2233" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>startIndex+1</Item>
               <Item>Set`1.FindLastIndex(Int32, Predicate`1&lt;T&gt;):Int32</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="InsertItem(System.Int32,T):System.Void">
            <Messages>
             <Message Id="index+1" TypeName="OperationsShouldNotOverflow" Category="Microsoft.Usage" CheckId="CA2233" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>index+1</Item>
               <Item>Set`1.InsertItem(Int32, T):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Intersect(System.Collections.Generic.IEnumerable`1&lt;T&gt;):MathNet.Numerics.Set`1&lt;T&gt;">
            <Messages>
             <Message Id="0#c" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:38:38Z">
              <Issue Name="ParameterOneLetter">
               <Item>Set`1.Intersect(IEnumerable`1&lt;T&gt;):Set`1&lt;T&gt;</Item>
               <Item>c</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Intersect(System.Collections.Generic.IEnumerable`1&lt;T&gt;,System.Collections.Generic.IEnumerable`1&lt;T&gt;):MathNet.Numerics.Set`1&lt;T&gt;">
            <Messages>
             <Message TypeName="DoNotDeclareStaticMembersOnGenericTypes" Category="Microsoft.Design" CheckId="CA1000" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>Set`1.Intersect(IEnumerable`1&lt;T&gt;, IEnumerable`1&lt;T&gt;):Set`1&lt;T&gt;</Item>
               <Item>MathNet.Numerics.Set`1</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="IntersectInplace(System.Collections.Generic.IEnumerable`1&lt;T&gt;):System.Void">
            <Messages>
             <Message Id="0#c" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:38:38Z">
              <Issue Name="ParameterOneLetter">
               <Item>Set`1.IntersectInplace(IEnumerable`1&lt;T&gt;):Void</Item>
               <Item>c</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="readonlyWrapper">
            <Messages>
             <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>readonlyWrapper</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Subtract(System.Collections.Generic.IEnumerable`1&lt;T&gt;):MathNet.Numerics.Set`1&lt;T&gt;">
            <Messages>
             <Message Id="0#c" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:38:38Z">
              <Issue Name="ParameterOneLetter">
               <Item>Set`1.Subtract(IEnumerable`1&lt;T&gt;):Set`1&lt;T&gt;</Item>
               <Item>c</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Subtract(System.Collections.Generic.IEnumerable`1&lt;T&gt;,System.Collections.Generic.IEnumerable`1&lt;T&gt;):MathNet.Numerics.Set`1&lt;T&gt;">
            <Messages>
             <Message TypeName="DoNotDeclareStaticMembersOnGenericTypes" Category="Microsoft.Design" CheckId="CA1000" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>Set`1.Subtract(IEnumerable`1&lt;T&gt;, IEnumerable`1&lt;T&gt;):Set`1&lt;T&gt;</Item>
               <Item>MathNet.Numerics.Set`1</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="SubtractInplace(System.Collections.Generic.IEnumerable`1&lt;T&gt;):System.Void">
            <Messages>
             <Message Id="0#c" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:38:38Z">
              <Issue Name="ParameterOneLetter">
               <Item>Set`1.SubtractInplace(IEnumerable`1&lt;T&gt;):Void</Item>
               <Item>c</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Union(System.Collections.Generic.IEnumerable`1&lt;T&gt;):MathNet.Numerics.Set`1&lt;T&gt;">
            <Messages>
             <Message Id="0#c" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:38:38Z">
              <Issue Name="ParameterOneLetter">
               <Item>Set`1.Union(IEnumerable`1&lt;T&gt;):Set`1&lt;T&gt;</Item>
               <Item>c</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Union(System.Collections.Generic.IEnumerable`1&lt;T&gt;,System.Collections.Generic.IEnumerable`1&lt;T&gt;):MathNet.Numerics.Set`1&lt;T&gt;">
            <Messages>
             <Message TypeName="DoNotDeclareStaticMembersOnGenericTypes" Category="Microsoft.Design" CheckId="CA1000" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>Set`1.Union(IEnumerable`1&lt;T&gt;, IEnumerable`1&lt;T&gt;):Set`1&lt;T&gt;</Item>
               <Item>MathNet.Numerics.Set`1</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="UnionInplace(System.Collections.Generic.IEnumerable`1&lt;T&gt;):System.Void">
            <Messages>
             <Message Id="0#c" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:38:38Z">
              <Issue Name="ParameterOneLetter">
               <Item>Set`1.UnionInplace(IEnumerable`1&lt;T&gt;):Void</Item>
               <Item>c</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="SetChangedEventArgs`1">
          <Members>
           <Member Name="Added(T,System.Int32):MathNet.Numerics.SetChangedEventArgs`1&lt;T&gt;">
            <Messages>
             <Message TypeName="DoNotDeclareStaticMembersOnGenericTypes" Category="Microsoft.Design" CheckId="CA1000" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>SetChangedEventArgs`1.Added(T, Int32):SetChangedEventArgs`1&lt;T&gt;</Item>
               <Item>MathNet.Numerics.SetChangedEventArgs`1</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Moved(T,System.Int32,System.Int32):MathNet.Numerics.SetChangedEventArgs`1&lt;T&gt;">
            <Messages>
             <Message TypeName="DoNotDeclareStaticMembersOnGenericTypes" Category="Microsoft.Design" CheckId="CA1000" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>SetChangedEventArgs`1.Moved(T, Int32, Int32):SetChangedEventArgs`1&lt;T&gt;</Item>
               <Item>MathNet.Numerics.SetChangedEventArgs`1</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Removed(T,System.Int32):MathNet.Numerics.SetChangedEventArgs`1&lt;T&gt;">
            <Messages>
             <Message TypeName="DoNotDeclareStaticMembersOnGenericTypes" Category="Microsoft.Design" CheckId="CA1000" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>SetChangedEventArgs`1.Removed(T, Int32):SetChangedEventArgs`1&lt;T&gt;</Item>
               <Item>MathNet.Numerics.SetChangedEventArgs`1</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="Tuple`2">
          <Messages>
           <Message TypeName="OverrideEqualsAndOperatorEqualsOnValueTypes" Category="Microsoft.Performance" CheckId="CA1815" Created="2006-08-05 09:38:38Z">
            <Issue Name="Equals">
             <Item>MathNet.Numerics.Tuple`2</Item>
            </Issue>
            <Issue Name="op_Equality">
             <Item>MathNet.Numerics.Tuple`2</Item>
            </Issue>
           </Message>
          </Messages>
          <Members>
           <Member Name="Equals(MathNet.Numerics.Tuple`2&lt;TFirst,TSecond&gt;):System.Boolean">
            <Messages>
             <Message TypeName="OverloadOperatorEqualsOnOverridingValueTypeEquals" Category="Microsoft.Usage" CheckId="CA2231" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>Tuple`2</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
        </Types>
       </Namespace>
       <Namespace Name="MathNet.Numerics.Distributions">
        <Types>
         <Type Name="CumulativeNormalDistribution">
          <Members>
           <Member Name=".ctor()">
            <Messages>
             <Message TypeName="DoNotInitializeUnnecessarily" Category="Microsoft.Performance" CheckId="CA1805" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>CumulativeNormalDistribution.CumulativeNormalDistribution()</Item>
               <Item>mean</Item>
               <Item>System.Double</Item>
               <Item>0.0</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Factorial(System.Double):System.Double">
            <Messages>
             <Message TypeName="InstantiateArgumentExceptionsCorrectly" Category="Microsoft.Usage" CheckId="CA2208" Created="2006-08-05 09:38:38Z">
              <Issue Name="OneArgumentShouldBeParameterName">
               <Item>System.ArgumentOutOfRangeException</Item>
               <Item>ArgumentOutOfRangeException.ArgumentOutOfRangeException(String)</Item>
               <Item>n must be a positive integer.</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="LogFactorial(System.Double):System.Double">
            <Messages>
             <Message TypeName="InstantiateArgumentExceptionsCorrectly" Category="Microsoft.Usage" CheckId="CA2208" Created="2006-08-05 09:38:38Z">
              <Issue Name="OneArgumentShouldBeParameterName">
               <Item>System.ArgumentOutOfRangeException</Item>
               <Item>ArgumentOutOfRangeException.ArgumentOutOfRangeException(String)</Item>
               <Item>n must be a positive integer.</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="LogGamma(System.Double):System.Double">
            <Messages>
             <Message Id="System.ArgumentException.#ctor(System.String)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>CumulativeNormalDistribution.LogGamma(Double):Double</Item>
               <Item>1</Item>
               <Item>ArgumentException.ArgumentException(String)</Item>
               <Item>The gamma function is negative.</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="ValueOf(System.Double):System.Double">
            <Messages>
             <Message Id="0#" TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>x</Item>
               <Item>CumulativeNormalDistribution.ValueOf(Double):Double</Item>
               <Item>input</Item>
               <Item>IRealFunction.ValueOf(Double):Double</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="InvCumulativeNormalDistribution">
          <Members>
           <Member Name=".ctor()">
            <Messages>
             <Message TypeName="DoNotInitializeUnnecessarily" Category="Microsoft.Performance" CheckId="CA1805" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>InvCumulativeNormalDistribution.InvCumulativeNormalDistribution()</Item>
               <Item>mean</Item>
               <Item>System.Double</Item>
               <Item>0.0</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="StandardValueOf(System.Double):System.Double">
            <Messages>
             <Message Id="System.ArgumentOutOfRangeException.#ctor(System.String,System.Object,System.String)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>InvCumulativeNormalDistribution.StandardValueOf(Double):Double</Item>
               <Item>3</Item>
               <Item>ArgumentOutOfRangeException.ArgumentOutOfRangeException(String, Object, String)</Item>
               <Item>The probability must be comprised in [0, 1].</Item>
              </Issue>
             </Message>
             <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Created="2006-08-05 09:38:38Z" FixCategory="NonBreaking">
              <Issue>
               <Item>InvCumulativeNormalDistribution.StandardValueOf(Double):Double</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="ValueOf(System.Double):System.Double">
            <Messages>
             <Message Id="0#" TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>p</Item>
               <Item>InvCumulativeNormalDistribution.ValueOf(Double):Double</Item>
               <Item>input</Item>
               <Item>IRealFunction.ValueOf(Double):Double</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
        </Types>
       </Namespace>
       <Namespace Name="MathNet.Numerics.Equations">
        <Types>
         <Type Name="ScalarIterator">
          <Members>
           <Member Name=".ctor(MathNet.Numerics.IRealFunction)">
            <Messages>
             <Message Id="0#f" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:38:38Z">
              <Issue Name="ParameterOneLetter">
               <Item>ScalarIterator.ScalarIterator(IRealFunction)</Item>
               <Item>f</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name=".ctor(MathNet.Numerics.IRealFunction,MathNet.Numerics.IRealFunction)">
            <Messages>
             <Message Id="0#f" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:38:38Z">
              <Issue Name="ParameterOneLetter">
               <Item>ScalarIterator.ScalarIterator(IRealFunction, IRealFunction)</Item>
               <Item>f</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="f">
            <Messages>
             <Message TypeName="AvoidUnusedPrivateFields" Category="Microsoft.Performance" CheckId="CA1823" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>ScalarIterator.f</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="FindFixpoint(System.Double,System.Double,System.Double):System.Double">
            <Messages>
             <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Created="2006-08-05 09:38:38Z" FixCategory="Breaking">
              <Issue>
               <Item>ScalarIterator.FindFixpoint(Double, Double, Double):Double</Item>
              </Issue>
             </Message>
             <Message Id="absoluteTolerance" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2006-08-05 09:38:38Z" FixCategory="Breaking">
              <Issue>
               <Item>absoluteTolerance</Item>
               <Item>ScalarIterator.FindFixpoint(Double, Double, Double):Double</Item>
              </Issue>
             </Message>
             <Message Id="estimation" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2006-08-05 09:38:38Z" FixCategory="Breaking">
              <Issue>
               <Item>estimation</Item>
               <Item>ScalarIterator.FindFixpoint(Double, Double, Double):Double</Item>
              </Issue>
             </Message>
             <Message Id="relativeTolerance" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2006-08-05 09:38:38Z" FixCategory="Breaking">
              <Issue>
               <Item>relativeTolerance</Item>
               <Item>ScalarIterator.FindFixpoint(Double, Double, Double):Double</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="FindRoot(System.Double,System.Double,System.Double,System.Double):System.Double">
            <Messages>
             <Message Id="absoluteTolerance" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2006-08-05 09:38:38Z" FixCategory="Breaking">
              <Issue>
               <Item>absoluteTolerance</Item>
               <Item>ScalarIterator.FindRoot(Double, Double, Double, Double):Double</Item>
              </Issue>
             </Message>
             <Message Id="firstEstimation" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2006-08-05 09:38:38Z" FixCategory="Breaking">
              <Issue>
               <Item>firstEstimation</Item>
               <Item>ScalarIterator.FindRoot(Double, Double, Double, Double):Double</Item>
              </Issue>
             </Message>
             <Message Id="relativeTolerance" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2006-08-05 09:38:38Z" FixCategory="Breaking">
              <Issue>
               <Item>relativeTolerance</Item>
               <Item>ScalarIterator.FindRoot(Double, Double, Double, Double):Double</Item>
              </Issue>
             </Message>
             <Message Id="secondEstimation" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2006-08-05 09:38:38Z" FixCategory="Breaking">
              <Issue>
               <Item>secondEstimation</Item>
               <Item>ScalarIterator.FindRoot(Double, Double, Double, Double):Double</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
        </Types>
       </Namespace>
       <Namespace Name="MathNet.Numerics.Generators">
        <Types>
         <Type Name="BinomialGenerator">
          <Members>
           <Member Name="Next(System.Double,System.Int32):System.Double">
            <Messages>
             <Message Id="inProbability" TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>BinomialGenerator.Next(Double, Int32):Double</Item>
               <Item>inProbability</Item>
               <Item>System.Double</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="CombinationGenerator">
          <Messages>
           <Message TypeName="StaticHolderTypesShouldBeSealed" Category="Microsoft.Design" CheckId="CA1052" Created="2006-08-05 09:38:38Z">
            <Issue>
             <Item>CombinationGenerator</Item>
            </Issue>
           </Message>
          </Messages>
          <Members>
           <Member Name="Next(System.Double[],System.Int32):System.Int32[]">
            <Messages>
             <Message Id="System.ArgumentException.#ctor(System.String)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>CombinationGenerator.Next(Double[], Int32):Int32[]</Item>
               <Item>1</Item>
               <Item>ArgumentException.ArgumentException(String)</Item>
               <Item>#E00 k must be non negative.</Item>
              </Issue>
              <Issue>
               <Item>CombinationGenerator.Next(Double[], Int32):Int32[]</Item>
               <Item>1</Item>
               <Item>ArgumentException.ArgumentException(String)</Item>
               <Item>#E01 k must smaller or equal to the collection size.</Item>
              </Issue>
             </Message>
             <Message Id="1#k" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:38:38Z">
              <Issue Name="ParameterOneLetter">
               <Item>CombinationGenerator.Next(Double[], Int32):Int32[]</Item>
               <Item>k</Item>
              </Issue>
             </Message>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>'weights'</Item>
               <Item>CombinationGenerator.Next(Double[], Int32):Int32[]</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Next(System.Int32,System.Int32):System.Int32[]">
            <Messages>
             <Message Id="System.ArgumentException.#ctor(System.String)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>CombinationGenerator.Next(Int32, Int32):Int32[]</Item>
               <Item>1</Item>
               <Item>ArgumentException.ArgumentException(String)</Item>
               <Item>#E00 n and k must be non negative integer.</Item>
              </Issue>
              <Issue>
               <Item>CombinationGenerator.Next(Int32, Int32):Int32[]</Item>
               <Item>1</Item>
               <Item>ArgumentException.ArgumentException(String)</Item>
               <Item>#E01 n must be greater or equal to k.</Item>
              </Issue>
             </Message>
             <Message Id="0#n" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:38:38Z">
              <Issue Name="ParameterOneLetter">
               <Item>CombinationGenerator.Next(Int32, Int32):Int32[]</Item>
               <Item>n</Item>
              </Issue>
             </Message>
             <Message Id="1#k" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:38:38Z">
              <Issue Name="ParameterOneLetter">
               <Item>CombinationGenerator.Next(Int32, Int32):Int32[]</Item>
               <Item>k</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="ExponentialGenerator">
          <Members>
           <Member Name=".ctor(System.Double)">
            <Messages>
             <Message Id="System.ArgumentOutOfRangeException.#ctor(System.String,System.Object,System.String)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>ExponentialGenerator.ExponentialGenerator(Double)</Item>
               <Item>3</Item>
               <Item>ArgumentOutOfRangeException.ArgumentOutOfRangeException(String, Object, String)</Item>
               <Item>The half period of the exponential distribution should be positive.</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name=".ctor(System.Double,System.Random)">
            <Messages>
             <Message Id="System.ArgumentOutOfRangeException.#ctor(System.String,System.Object,System.String)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>ExponentialGenerator.ExponentialGenerator(Double, Random)</Item>
               <Item>3</Item>
               <Item>ArgumentOutOfRangeException.ArgumentOutOfRangeException(String, Object, String)</Item>
               <Item>The half period of the exponential distribution should be positive.</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="GammaGenerator">
          <Members>
           <Member Name=".ctor(System.Int32)">
            <Messages>
             <Message Id="System.ArgumentOutOfRangeException.#ctor(System.String,System.Object,System.String)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>GammaGenerator.GammaGenerator(Int32)</Item>
               <Item>3</Item>
               <Item>ArgumentOutOfRangeException.ArgumentOutOfRangeException(String, Object, String)</Item>
               <Item>The integer order of the Gamma distribution should be positive.</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name=".ctor(System.Int32,System.Random)">
            <Messages>
             <Message Id="System.ArgumentOutOfRangeException.#ctor(System.String,System.Object,System.String)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>GammaGenerator.GammaGenerator(Int32, Random)</Item>
               <Item>3</Item>
               <Item>ArgumentOutOfRangeException.ArgumentOutOfRangeException(String, Object, String)</Item>
               <Item>The integer order of the Gamma distribution should be positive.</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="NormalGenerator">
          <Members>
           <Member Name=".ctor()">
            <Messages>
             <Message TypeName="DoNotInitializeUnnecessarily" Category="Microsoft.Performance" CheckId="CA1805" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>NormalGenerator.NormalGenerator()</Item>
               <Item>mean</Item>
               <Item>System.Double</Item>
               <Item>0.0</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name=".ctor(System.Random)">
            <Messages>
             <Message TypeName="DoNotInitializeUnnecessarily" Category="Microsoft.Performance" CheckId="CA1805" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>NormalGenerator.NormalGenerator(Random)</Item>
               <Item>mean</Item>
               <Item>System.Double</Item>
               <Item>0.0</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="PermutationGenerator">
          <Messages>
           <Message TypeName="StaticHolderTypesShouldNotHaveConstructors" Category="Microsoft.Design" CheckId="CA1053" Created="2006-08-05 09:38:38Z">
            <Issue>
             <Item>PermutationGenerator</Item>
            </Issue>
           </Message>
          </Messages>
          <Members>
           <Member Name="Shuffle(System.Array):System.Void">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>'array'</Item>
               <Item>PermutationGenerator.Shuffle(Array):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Subset(System.Collections.ICollection,System.Int32):System.Array">
            <Messages>
             <Message Id="System.ArgumentNullException.#ctor(System.String,System.String)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>PermutationGenerator.Subset(ICollection, Int32):Array</Item>
               <Item>2</Item>
               <Item>ArgumentNullException.ArgumentNullException(String, String)</Item>
               <Item>Collection should not be null.</Item>
              </Issue>
             </Message>
             <Message Id="System.ArgumentOutOfRangeException.#ctor(System.String,System.Object,System.String)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>PermutationGenerator.Subset(ICollection, Int32):Array</Item>
               <Item>3</Item>
               <Item>ArgumentOutOfRangeException.ArgumentOutOfRangeException(String, Object, String)</Item>
               <Item>Must a positive integer lower or equal to the collection size.</Item>
              </Issue>
             </Message>
             <Message Id="0#c" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:38:38Z">
              <Issue Name="ParameterOneLetter">
               <Item>PermutationGenerator.Subset(ICollection, Int32):Array</Item>
               <Item>c</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="PoissonGenerator">
          <Members>
           <Member Name=".ctor(System.Double)">
            <Messages>
             <Message Id="System.ArgumentOutOfRangeException.#ctor(System.String,System.Object,System.String)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>PoissonGenerator.PoissonGenerator(Double)</Item>
               <Item>3</Item>
               <Item>ArgumentOutOfRangeException.ArgumentOutOfRangeException(String, Object, String)</Item>
               <Item>The lambda parameter must be positive.</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Lambda">
            <Accessors>
             <Accessor Name="set_Lambda(System.Double):System.Void">
              <Messages>
               <Message Id="System.ArgumentOutOfRangeException.#ctor(System.String,System.Object,System.String)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Created="2006-08-05 09:38:38Z">
                <Issue>
                 <Item>PoissonGenerator.set_Lambda(Double):Void</Item>
                 <Item>3</Item>
                 <Item>ArgumentOutOfRangeException.ArgumentOutOfRangeException(String, Object, String)</Item>
                 <Item>The lambda parameter must be positive.</Item>
                </Issue>
               </Message>
              </Messages>
             </Accessor>
            </Accessors>
           </Member>
          </Members>
         </Type>
         <Type Name="ZipfGenerator">
          <Members>
           <Member Name=".ctor(System.Double)">
            <Messages>
             <Message Id="System.ArgumentOutOfRangeException.#ctor(System.String,System.Object,System.String)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>ZipfGenerator.ZipfGenerator(Double)</Item>
               <Item>3</Item>
               <Item>ArgumentOutOfRangeException.ArgumentOutOfRangeException(String, Object, String)</Item>
               <Item>The skew should be greater than 1.0.</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name=".ctor(System.Double,System.Int32)">
            <Messages>
             <Message Id="System.ArgumentOutOfRangeException.#ctor(System.String,System.Object,System.String)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>ZipfGenerator.ZipfGenerator(Double, Int32)</Item>
               <Item>3</Item>
               <Item>ArgumentOutOfRangeException.ArgumentOutOfRangeException(String, Object, String)</Item>
               <Item>The skew should be greater than 1.0.</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Skew">
            <Accessors>
             <Accessor Name="set_Skew(System.Double):System.Void">
              <Messages>
               <Message Id="System.ArgumentOutOfRangeException.#ctor(System.String,System.Object,System.String)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Created="2006-08-05 09:38:38Z">
                <Issue>
                 <Item>ZipfGenerator.set_Skew(Double):Void</Item>
                 <Item>3</Item>
                 <Item>ArgumentOutOfRangeException.ArgumentOutOfRangeException(String, Object, String)</Item>
                 <Item>The skew should be greater than 1.0.</Item>
                </Issue>
               </Message>
              </Messages>
             </Accessor>
            </Accessors>
           </Member>
          </Members>
         </Type>
        </Types>
       </Namespace>
       <Namespace Name="MathNet.Numerics.Interpolation">
        <Types>
         <Type Name="IInterpolationAlgorithm">
          <Members>
           <Member Name="Extrapolate(System.Double):System.Double">
            <Messages>
             <Message Id="0#t" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:38:38Z">
              <Issue Name="ParameterOneLetter">
               <Item>IInterpolationAlgorithm.Extrapolate(Double):Double</Item>
               <Item>t</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Interpolate(System.Double):System.Double">
            <Messages>
             <Message Id="0#t" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:38:38Z">
              <Issue Name="ParameterOneLetter">
               <Item>IInterpolationAlgorithm.Interpolate(Double):Double</Item>
               <Item>t</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Interpolate(System.Double,System.Double&amp;):System.Double">
            <Messages>
             <Message Id="1#" TypeName="AvoidOutParameters" Category="Microsoft.Design" CheckId="CA1021" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>error</Item>
              </Issue>
             </Message>
             <Message Id="0#t" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:38:38Z">
              <Issue Name="ParameterOneLetter">
               <Item>IInterpolationAlgorithm.Interpolate(Double, Double&amp;):Double</Item>
               <Item>t</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="InterpolationMode">
          <Messages>
           <Message TypeName="EnumsShouldHaveZeroValue" Category="Microsoft.Design" CheckId="CA1008" Created="2006-08-05 09:38:38Z" FixCategory="NonBreaking">
            <Issue Name="NotFlagsNoZeroValue">
             <Item>InterpolationMode</Item>
            </Issue>
           </Message>
           <Message TypeName="MarkEnumsWithFlags" Category="Microsoft.Design" CheckId="CA1027" Created="2006-08-05 09:38:38Z">
            <Issue>
             <Item>InterpolationMode</Item>
            </Issue>
           </Message>
          </Messages>
         </Type>
         <Type Name="InterpolationSingleDimension">
          <Members>
           <Member Name=".ctor(MathNet.Numerics.SampleList)">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>'samples'</Item>
               <Item>InterpolationSingleDimension.InterpolationSingleDimension(SampleList)</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name=".ctor(MathNet.Numerics.SampleList,MathNet.Numerics.Interpolation.IInterpolationAlgorithm)">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>'samples'</Item>
               <Item>InterpolationSingleDimension.InterpolationSingleDimension(SampleList, IInterpolationAlgorithm)</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name=".ctor(MathNet.Numerics.SampleList,MathNet.Numerics.Interpolation.InterpolationMode)">
            <Messages>
             <Message TypeName="DoNotCallOverridableMethodsInConstructors" Category="Microsoft.Usage" CheckId="CA2214" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>InterpolationSingleDimension.InterpolationSingleDimension(SampleList, InterpolationMode)</Item>
               <Item>&#xD;&#xA;&#xD;&#xA;InterpolationSingleDimension.InterpolationSingleDimension(SampleList, InterpolationMode)&#xD;&#xA;InterpolationSingleDimension.SelectAlgorithm(InterpolationMode, Int32):IInterpolationAlgorithm</Item>
              </Issue>
             </Message>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>'samples'</Item>
               <Item>InterpolationSingleDimension.InterpolationSingleDimension(SampleList, InterpolationMode)</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name=".ctor(MathNet.Numerics.SampleList,MathNet.Numerics.Interpolation.InterpolationMode,System.Int32)">
            <Messages>
             <Message TypeName="DoNotCallOverridableMethodsInConstructors" Category="Microsoft.Usage" CheckId="CA2214" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>InterpolationSingleDimension.InterpolationSingleDimension(SampleList, InterpolationMode, Int32)</Item>
               <Item>&#xD;&#xA;&#xD;&#xA;InterpolationSingleDimension.InterpolationSingleDimension(SampleList, InterpolationMode, Int32)&#xD;&#xA;InterpolationSingleDimension.SelectAlgorithm(InterpolationMode, Int32):IInterpolationAlgorithm</Item>
              </Issue>
             </Message>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>'samples'</Item>
               <Item>InterpolationSingleDimension.InterpolationSingleDimension(SampleList, InterpolationMode, Int32)</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Evaluate(System.Double):System.Double">
            <Messages>
             <Message Id="0#t" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:38:38Z">
              <Issue Name="ParameterOneLetter">
               <Item>InterpolationSingleDimension.Evaluate(Double):Double</Item>
               <Item>t</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Evaluate(System.Double,System.Double&amp;):System.Double">
            <Messages>
             <Message Id="1#" TypeName="AvoidOutParameters" Category="Microsoft.Design" CheckId="CA1021" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>errorEstimation</Item>
              </Issue>
             </Message>
             <Message Id="0#t" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:38:38Z">
              <Issue Name="ParameterOneLetter">
               <Item>InterpolationSingleDimension.Evaluate(Double, Double&amp;):Double</Item>
               <Item>t</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="PolynomialInterpolationAlgorithm">
          <Members>
           <Member Name="Prepare(MathNet.Numerics.SampleList):System.Void">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>'samples'</Item>
               <Item>PolynomialInterpolationAlgorithm.Prepare(SampleList):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="RationalInterpolationAlgorithm">
          <Members>
           <Member Name="Prepare(MathNet.Numerics.SampleList):System.Void">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>'samples'</Item>
               <Item>RationalInterpolationAlgorithm.Prepare(SampleList):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
        </Types>
       </Namespace>
       <Namespace Name="MathNet.Numerics.LinearAlgebra">
        <Types>
         <Type Name="CholeskyDecomposition">
          <Members>
           <Member Name=".ctor(MathNet.Numerics.LinearAlgebra.Matrix)">
            <Messages>
             <Message Id="0#" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Created="2006-08-05 09:38:38Z">
              <Issue Name="Parameter">
               <Item>Arg</Item>
              </Issue>
             </Message>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>'Arg'</Item>
               <Item>CholeskyDecomposition.CholeskyDecomposition(Matrix)</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="GetL():MathNet.Numerics.LinearAlgebra.Matrix">
            <Messages>
             <Message TypeName="UsePropertiesWhereAppropriate" Category="Microsoft.Design" CheckId="CA1024" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>GetL</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="IsSPD">
            <Messages>
             <Message Id="Member" TypeName="LongAcronymsShouldBePascalCased" Category="Microsoft.Naming" CheckId="CA1705" Created="2006-08-05 09:38:38Z">
              <Issue Name="Member">
               <Item>CholeskyDecomposition.IsSPD:Boolean</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="L">
            <Messages>
             <Message Id="Member" TypeName="PreferJaggedArraysOverMultidimensional" Category="Microsoft.Performance" CheckId="CA1814" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>L</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Solve(MathNet.Numerics.LinearAlgebra.Matrix):MathNet.Numerics.LinearAlgebra.Matrix">
            <Messages>
             <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Created="2006-08-05 09:38:38Z">
              <Issue Name="TooGeneric">
               <Item>CholeskyDecomposition.Solve(Matrix):Matrix</Item>
               <Item>System.SystemException</Item>
              </Issue>
             </Message>
             <Message Id="0#" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Created="2006-08-05 09:38:38Z">
              <Issue Name="Parameter">
               <Item>B</Item>
              </Issue>
             </Message>
             <Message Id="0#B" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:38:38Z">
              <Issue Name="ParameterOneLetter">
               <Item>CholeskyDecomposition.Solve(Matrix):Matrix</Item>
               <Item>B</Item>
              </Issue>
             </Message>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>'B'</Item>
               <Item>CholeskyDecomposition.Solve(Matrix):Matrix</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="EigenvalueDecomposition">
          <Members>
           <Member Name=".ctor(MathNet.Numerics.LinearAlgebra.Matrix)">
            <Messages>
             <Message Id="0#" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Created="2006-08-05 09:38:38Z">
              <Issue Name="Parameter">
               <Item>Arg</Item>
              </Issue>
             </Message>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>'Arg'</Item>
               <Item>EigenvalueDecomposition.EigenvalueDecomposition(Matrix)</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name=".ctor(System.Double[],System.Double[])">
            <Messages>
             <Message Id="0#d" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:38:38Z">
              <Issue Name="ParameterOneLetter">
               <Item>EigenvalueDecomposition.EigenvalueDecomposition(Double[], Double[])</Item>
               <Item>d</Item>
              </Issue>
             </Message>
             <Message Id="1#e" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:38:38Z">
              <Issue Name="ParameterOneLetter">
               <Item>EigenvalueDecomposition.EigenvalueDecomposition(Double[], Double[])</Item>
               <Item>e</Item>
              </Issue>
             </Message>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>'d'</Item>
               <Item>EigenvalueDecomposition.EigenvalueDecomposition(Double[], Double[])</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="EigenValues">
            <Messages>
             <Message TypeName="PropertiesShouldNotReturnArrays" Category="Microsoft.Performance" CheckId="CA1819" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>EigenvalueDecomposition.EigenValues:Complex[]</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="H">
            <Messages>
             <Message Id="Member" TypeName="PreferJaggedArraysOverMultidimensional" Category="Microsoft.Performance" CheckId="CA1814" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>H</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="ImagEigenvalues">
            <Messages>
             <Message TypeName="PropertiesShouldNotReturnArrays" Category="Microsoft.Performance" CheckId="CA1819" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>EigenvalueDecomposition.ImagEigenvalues:Double[]</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="RealEigenvalues">
            <Messages>
             <Message TypeName="PropertiesShouldNotReturnArrays" Category="Microsoft.Performance" CheckId="CA1819" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>EigenvalueDecomposition.RealEigenvalues:Double[]</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="LUDecomposition">
          <Members>
           <Member Name=".ctor(MathNet.Numerics.LinearAlgebra.Matrix)">
            <Messages>
             <Message Id="0#" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Created="2006-08-05 09:38:38Z">
              <Issue Name="Parameter">
               <Item>A</Item>
              </Issue>
             </Message>
             <Message Id="0#A" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:38:38Z">
              <Issue Name="ParameterOneLetter">
               <Item>LUDecomposition.LUDecomposition(Matrix)</Item>
               <Item>A</Item>
              </Issue>
             </Message>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>'A'</Item>
               <Item>LUDecomposition.LUDecomposition(Matrix)</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Determinant():System.Double">
            <Messages>
             <Message Id="System.ArgumentException.#ctor(System.String)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>LUDecomposition.Determinant():Double</Item>
               <Item>1</Item>
               <Item>ArgumentException.ArgumentException(String)</Item>
               <Item>Matrix must be square.</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="DoublePivot">
            <Messages>
             <Message TypeName="PropertiesShouldNotReturnArrays" Category="Microsoft.Performance" CheckId="CA1819" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>LUDecomposition.DoublePivot:Double[]</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="L">
            <Messages>
             <Message Id="L" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:38:38Z">
              <Issue Name="MemberOneLetter">
               <Item>L</Item>
               <Item>LUDecomposition.L:Matrix</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="LU">
            <Messages>
             <Message Id="Member" TypeName="PreferJaggedArraysOverMultidimensional" Category="Microsoft.Performance" CheckId="CA1814" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>LU</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Pivot">
            <Messages>
             <Message TypeName="PropertiesShouldNotReturnArrays" Category="Microsoft.Performance" CheckId="CA1819" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>LUDecomposition.Pivot:Int32[]</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Solve(MathNet.Numerics.LinearAlgebra.Matrix):MathNet.Numerics.LinearAlgebra.Matrix">
            <Messages>
             <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Created="2006-08-05 09:38:38Z">
              <Issue Name="TooGeneric">
               <Item>LUDecomposition.Solve(Matrix):Matrix</Item>
               <Item>System.SystemException</Item>
              </Issue>
             </Message>
             <Message Id="0#" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Created="2006-08-05 09:38:38Z">
              <Issue Name="Parameter">
               <Item>B</Item>
              </Issue>
             </Message>
             <Message Id="0#B" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:38:38Z">
              <Issue Name="ParameterOneLetter">
               <Item>LUDecomposition.Solve(Matrix):Matrix</Item>
               <Item>B</Item>
              </Issue>
             </Message>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>'B'</Item>
               <Item>LUDecomposition.Solve(Matrix):Matrix</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="U">
            <Messages>
             <Message Id="U" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:38:38Z">
              <Issue Name="MemberOneLetter">
               <Item>U</Item>
               <Item>LUDecomposition.U:Matrix</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="Maths">
          <Messages>
           <Message TypeName="AvoidUninstantiatedInternalClasses" Category="Microsoft.Performance" CheckId="CA1812" Created="2006-08-05 09:38:38Z">
            <Issue>
             <Item>MathNet.Numerics.LinearAlgebra.Maths</Item>
            </Issue>
           </Message>
          </Messages>
         </Type>
         <Type Name="Matrix">
          <Members>
           <Member Name=".ctor(System.Double[,])">
            <Messages>
             <Message Id="0#" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Created="2006-08-05 09:38:38Z">
              <Issue Name="Parameter">
               <Item>A</Item>
              </Issue>
             </Message>
             <Message Id="0#A" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:38:38Z">
              <Issue Name="ParameterOneLetter">
               <Item>Matrix.Matrix(Double[,])</Item>
               <Item>A</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name=".ctor(System.Double[],System.Int32)">
            <Messages>
             <Message Id="System.ArgumentException.#ctor(System.String)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>Matrix.Matrix(Double[], Int32)</Item>
               <Item>1</Item>
               <Item>ArgumentException.ArgumentException(String)</Item>
               <Item>Array length must be a multiple of m.</Item>
              </Issue>
             </Message>
             <Message Id="1#m" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:38:38Z">
              <Issue Name="ParameterOneLetter">
               <Item>Matrix.Matrix(Double[], Int32)</Item>
               <Item>m</Item>
              </Issue>
             </Message>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>'vals'</Item>
               <Item>Matrix.Matrix(Double[], Int32)</Item>
              </Issue>
              <Issue>
               <Item>'vals'</Item>
               <Item>Matrix.Matrix(Double[], Int32)</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name=".ctor(System.Int32,System.Int32)">
            <Messages>
             <Message Id="0#m" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:38:38Z">
              <Issue Name="ParameterOneLetter">
               <Item>Matrix.Matrix(Int32, Int32)</Item>
               <Item>m</Item>
              </Issue>
             </Message>
             <Message Id="1#n" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:38:38Z">
              <Issue Name="ParameterOneLetter">
               <Item>Matrix.Matrix(Int32, Int32)</Item>
               <Item>n</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name=".ctor(System.Int32,System.Int32,System.Double)">
            <Messages>
             <Message Id="0#m" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:38:38Z">
              <Issue Name="ParameterOneLetter">
               <Item>Matrix.Matrix(Int32, Int32, Double)</Item>
               <Item>m</Item>
              </Issue>
             </Message>
             <Message Id="1#n" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:38:38Z">
              <Issue Name="ParameterOneLetter">
               <Item>Matrix.Matrix(Int32, Int32, Double)</Item>
               <Item>n</Item>
              </Issue>
             </Message>
             <Message Id="2#s" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:38:38Z">
              <Issue Name="ParameterOneLetter">
               <Item>Matrix.Matrix(Int32, Int32, Double)</Item>
               <Item>s</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Add(MathNet.Numerics.LinearAlgebra.Matrix):System.Void">
            <Messages>
             <Message Id="0#m" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:38:38Z">
              <Issue Name="ParameterOneLetter">
               <Item>Matrix.Add(Matrix):Void</Item>
               <Item>m</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="array">
            <Messages>
             <Message Id="Member" TypeName="PreferJaggedArraysOverMultidimensional" Category="Microsoft.Performance" CheckId="CA1814" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>array</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="ArrayDivide(MathNet.Numerics.LinearAlgebra.Matrix):System.Void">
            <Messages>
             <Message Id="0#m" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:38:38Z">
              <Issue Name="ParameterOneLetter">
               <Item>Matrix.ArrayDivide(Matrix):Void</Item>
               <Item>m</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="ArrayDivide(MathNet.Numerics.LinearAlgebra.Matrix,MathNet.Numerics.LinearAlgebra.Matrix):MathNet.Numerics.LinearAlgebra.Matrix">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>'m1'</Item>
               <Item>Matrix.ArrayDivide(Matrix, Matrix):Matrix</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="ArrayMultiply(MathNet.Numerics.LinearAlgebra.Matrix):System.Void">
            <Messages>
             <Message Id="0#m" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:38:38Z">
              <Issue Name="ParameterOneLetter">
               <Item>Matrix.ArrayMultiply(Matrix):Void</Item>
               <Item>m</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="ArrayMultiply(MathNet.Numerics.LinearAlgebra.Matrix,MathNet.Numerics.LinearAlgebra.Matrix):MathNet.Numerics.LinearAlgebra.Matrix">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>'m1'</Item>
               <Item>Matrix.ArrayMultiply(Matrix, Matrix):Matrix</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="CheckMatrixDimensions(MathNet.Numerics.LinearAlgebra.Matrix):System.Void">
            <Messages>
             <Message Id="System.ArgumentException.#ctor(System.String)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>Matrix.CheckMatrixDimensions(Matrix):Void</Item>
               <Item>1</Item>
               <Item>ArgumentException.ArgumentException(String)</Item>
               <Item>Matrix dimensions must agree.</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="chol():MathNet.Numerics.LinearAlgebra.CholeskyDecomposition">
            <Messages>
             <Message Id="Member" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Created="2006-08-05 09:38:38Z">
              <Issue Name="Member">
               <Item>chol</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Create(System.Double[,]):MathNet.Numerics.LinearAlgebra.Matrix">
            <Messages>
             <Message Id="0#" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Created="2006-08-05 09:38:38Z">
              <Issue Name="Parameter">
               <Item>A</Item>
              </Issue>
             </Message>
             <Message Id="0#A" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:38:38Z">
              <Issue Name="ParameterOneLetter">
               <Item>Matrix.Create(Double[,]):Matrix</Item>
               <Item>A</Item>
              </Issue>
             </Message>
             <Message Id="0#" TypeName="PreferJaggedArraysOverMultidimensional" Category="Microsoft.Performance" CheckId="CA1814" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>A</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="GetMatrix(System.Int32,System.Int32,System.Int32,System.Int32):MathNet.Numerics.LinearAlgebra.Matrix">
            <Messages>
             <Message Id="System.IndexOutOfRangeException.#ctor(System.String,System.Exception)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>Matrix.GetMatrix(Int32, Int32, Int32, Int32):Matrix</Item>
               <Item>1</Item>
               <Item>IndexOutOfRangeException.IndexOutOfRangeException(String, Exception)</Item>
               <Item>Submatrix indices</Item>
              </Issue>
             </Message>
             <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Created="2006-08-05 09:38:38Z">
              <Issue Name="Reserved">
               <Item>Matrix.GetMatrix(Int32, Int32, Int32, Int32):Matrix</Item>
               <Item>System.IndexOutOfRangeException</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="GetMatrix(System.Int32,System.Int32,System.Int32[]):MathNet.Numerics.LinearAlgebra.Matrix">
            <Messages>
             <Message Id="System.IndexOutOfRangeException.#ctor(System.String,System.Exception)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>Matrix.GetMatrix(Int32, Int32, Int32[]):Matrix</Item>
               <Item>1</Item>
               <Item>IndexOutOfRangeException.IndexOutOfRangeException(String, Exception)</Item>
               <Item>Submatrix indices</Item>
              </Issue>
             </Message>
             <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Created="2006-08-05 09:38:38Z">
              <Issue Name="Reserved">
               <Item>Matrix.GetMatrix(Int32, Int32, Int32[]):Matrix</Item>
               <Item>System.IndexOutOfRangeException</Item>
              </Issue>
             </Message>
             <Message Id="2#c" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:38:38Z">
              <Issue Name="ParameterOneLetter">
               <Item>Matrix.GetMatrix(Int32, Int32, Int32[]):Matrix</Item>
               <Item>c</Item>
              </Issue>
             </Message>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>'c'</Item>
               <Item>Matrix.GetMatrix(Int32, Int32, Int32[]):Matrix</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="GetMatrix(System.Int32[],System.Int32,System.Int32):MathNet.Numerics.LinearAlgebra.Matrix">
            <Messages>
             <Message Id="System.IndexOutOfRangeException.#ctor(System.String,System.Exception)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>Matrix.GetMatrix(Int32[], Int32, Int32):Matrix</Item>
               <Item>1</Item>
               <Item>IndexOutOfRangeException.IndexOutOfRangeException(String, Exception)</Item>
               <Item>Submatrix indices</Item>
              </Issue>
             </Message>
             <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Created="2006-08-05 09:38:38Z">
              <Issue Name="Reserved">
               <Item>Matrix.GetMatrix(Int32[], Int32, Int32):Matrix</Item>
               <Item>System.IndexOutOfRangeException</Item>
              </Issue>
             </Message>
             <Message Id="0#r" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:38:38Z">
              <Issue Name="ParameterOneLetter">
               <Item>Matrix.GetMatrix(Int32[], Int32, Int32):Matrix</Item>
               <Item>r</Item>
              </Issue>
             </Message>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>'r'</Item>
               <Item>Matrix.GetMatrix(Int32[], Int32, Int32):Matrix</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="GetMatrix(System.Int32[],System.Int32[]):MathNet.Numerics.LinearAlgebra.Matrix">
            <Messages>
             <Message Id="System.IndexOutOfRangeException.#ctor(System.String,System.Exception)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>Matrix.GetMatrix(Int32[], Int32[]):Matrix</Item>
               <Item>1</Item>
               <Item>IndexOutOfRangeException.IndexOutOfRangeException(String, Exception)</Item>
               <Item>Submatrix indices</Item>
              </Issue>
             </Message>
             <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Created="2006-08-05 09:38:38Z">
              <Issue Name="Reserved">
               <Item>Matrix.GetMatrix(Int32[], Int32[]):Matrix</Item>
               <Item>System.IndexOutOfRangeException</Item>
              </Issue>
             </Message>
             <Message Id="0#r" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:38:38Z">
              <Issue Name="ParameterOneLetter">
               <Item>Matrix.GetMatrix(Int32[], Int32[]):Matrix</Item>
               <Item>r</Item>
              </Issue>
             </Message>
             <Message Id="1#c" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:38:38Z">
              <Issue Name="ParameterOneLetter">
               <Item>Matrix.GetMatrix(Int32[], Int32[]):Matrix</Item>
               <Item>c</Item>
              </Issue>
             </Message>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>'c'</Item>
               <Item>Matrix.GetMatrix(Int32[], Int32[]):Matrix</Item>
              </Issue>
              <Issue>
               <Item>'r'</Item>
               <Item>Matrix.GetMatrix(Int32[], Int32[]):Matrix</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Identity(System.Int32,System.Int32):MathNet.Numerics.LinearAlgebra.Matrix">
            <Messages>
             <Message Id="0#m" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:38:38Z">
              <Issue Name="ParameterOneLetter">
               <Item>Matrix.Identity(Int32, Int32):Matrix</Item>
               <Item>m</Item>
              </Issue>
             </Message>
             <Message Id="1#n" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:38:38Z">
              <Issue Name="ParameterOneLetter">
               <Item>Matrix.Identity(Int32, Int32):Matrix</Item>
               <Item>n</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Item[System.Int32,System.Int32]">
            <Messages>
             <Message TypeName="IndexersShouldNotBeMultidimensional" Category="Microsoft.Design" CheckId="CA1023" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>Matrix.Item[Int32, Int32]:Double</Item>
              </Issue>
             </Message>
            </Messages>
            <Accessors>
             <Accessor Name="get_Item(System.Int32,System.Int32):System.Double">
              <Messages>
               <Message Id="0#i" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:38:38Z">
                <Issue Name="ParameterOneLetter">
                 <Item>Matrix.get_Item(Int32, Int32):Double</Item>
                 <Item>i</Item>
                </Issue>
               </Message>
               <Message Id="1#j" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:38:38Z">
                <Issue Name="ParameterOneLetter">
                 <Item>Matrix.get_Item(Int32, Int32):Double</Item>
                 <Item>j</Item>
                </Issue>
               </Message>
              </Messages>
             </Accessor>
             <Accessor Name="set_Item(System.Int32,System.Int32,System.Double):System.Void">
              <Messages>
               <Message Id="0#i" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:38:38Z">
                <Issue Name="ParameterOneLetter">
                 <Item>Matrix.set_Item(Int32, Int32, Double):Void</Item>
                 <Item>i</Item>
                </Issue>
               </Message>
               <Message Id="1#j" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:38:38Z">
                <Issue Name="ParameterOneLetter">
                 <Item>Matrix.set_Item(Int32, Int32, Double):Void</Item>
                 <Item>j</Item>
                </Issue>
               </Message>
              </Messages>
             </Accessor>
            </Accessors>
           </Member>
           <Member Name="LUD():MathNet.Numerics.LinearAlgebra.LUDecomposition">
            <Messages>
             <Message Id="Member" TypeName="LongAcronymsShouldBePascalCased" Category="Microsoft.Naming" CheckId="CA1705" Created="2006-08-05 09:38:38Z">
              <Issue Name="Member">
               <Item>Matrix.LUD():LUDecomposition</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Multiply(System.Double):System.Void">
            <Messages>
             <Message Id="0#s" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:38:38Z">
              <Issue Name="ParameterOneLetter">
               <Item>Matrix.Multiply(Double):Void</Item>
               <Item>s</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="op_Addition(MathNet.Numerics.LinearAlgebra.Matrix,MathNet.Numerics.LinearAlgebra.Matrix):MathNet.Numerics.LinearAlgebra.Matrix">
            <Messages>
             <Message TypeName="OverloadOperatorEqualsOnOverloadingAddAndSubtract" Category="Microsoft.Design" CheckId="CA1013" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>Matrix</Item>
               <Item>Matrix.op_Addition(Matrix, Matrix):Matrix</Item>
              </Issue>
             </Message>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>'m1'</Item>
               <Item>Matrix.op_Addition(Matrix, Matrix):Matrix</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="op_Explicit(MathNet.Numerics.LinearAlgebra.Matrix):System.Double[]">
            <Messages>
             <Message Id="System.InvalidOperationException.#ctor(System.String)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>Matrix.op_Explicit(Matrix):Double[]</Item>
               <Item>1</Item>
               <Item>InvalidOperationException.InvalidOperationException(String)</Item>
               <Item>Bad dimensions for conversion to double array</Item>
              </Issue>
             </Message>
             <Message Id="0#m" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:38:38Z">
              <Issue Name="ParameterOneLetter">
               <Item>Matrix.op_Explicit(Matrix):Double[]</Item>
               <Item>m</Item>
              </Issue>
             </Message>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>'m'</Item>
               <Item>Matrix.op_Explicit(Matrix):Double[]</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="op_Implicit(MathNet.Numerics.LinearAlgebra.Matrix):System.Double[,]">
            <Messages>
             <Message Id="0#m" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:38:38Z">
              <Issue Name="ParameterOneLetter">
               <Item>Matrix.op_Implicit(Matrix):Double[,]</Item>
               <Item>m</Item>
              </Issue>
             </Message>
             <Message Id="Return" TypeName="PreferJaggedArraysOverMultidimensional" Category="Microsoft.Performance" CheckId="CA1814" Created="2006-08-05 09:38:38Z">
              <Issue Name="Return">
               <Item>Matrix.op_Implicit(Matrix):Double[,]</Item>
               <Item>System.Double[,]</Item>
              </Issue>
             </Message>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>'m'</Item>
               <Item>Matrix.op_Implicit(Matrix):Double[,]</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="op_Multiply(MathNet.Numerics.LinearAlgebra.Matrix,MathNet.Numerics.LinearAlgebra.Matrix):MathNet.Numerics.LinearAlgebra.Matrix">
            <Messages>
             <Message Id="System.ArgumentException.#ctor(System.String)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>Matrix.op_Multiply(Matrix, Matrix):Matrix</Item>
               <Item>1</Item>
               <Item>ArgumentException.ArgumentException(String)</Item>
               <Item>Matrix inner dimensions must agree.</Item>
              </Issue>
             </Message>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>'m1'</Item>
               <Item>Matrix.op_Multiply(Matrix, Matrix):Matrix</Item>
              </Issue>
              <Issue>
               <Item>'m2'</Item>
               <Item>Matrix.op_Multiply(Matrix, Matrix):Matrix</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="op_Multiply(System.Double,MathNet.Numerics.LinearAlgebra.Matrix):MathNet.Numerics.LinearAlgebra.Matrix">
            <Messages>
             <Message Id="0#s" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:38:38Z">
              <Issue Name="ParameterOneLetter">
               <Item>Matrix.op_Multiply(Double, Matrix):Matrix</Item>
               <Item>s</Item>
              </Issue>
             </Message>
             <Message Id="1#m" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:38:38Z">
              <Issue Name="ParameterOneLetter">
               <Item>Matrix.op_Multiply(Double, Matrix):Matrix</Item>
               <Item>m</Item>
              </Issue>
             </Message>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>'m'</Item>
               <Item>Matrix.op_Multiply(Double, Matrix):Matrix</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="op_Subtraction(MathNet.Numerics.LinearAlgebra.Matrix,MathNet.Numerics.LinearAlgebra.Matrix):MathNet.Numerics.LinearAlgebra.Matrix">
            <Messages>
             <Message TypeName="OverloadOperatorEqualsOnOverloadingAddAndSubtract" Category="Microsoft.Design" CheckId="CA1013" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>Matrix</Item>
               <Item>Matrix.op_Subtraction(Matrix, Matrix):Matrix</Item>
              </Issue>
             </Message>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>'m1'</Item>
               <Item>Matrix.op_Subtraction(Matrix, Matrix):Matrix</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="QRD():MathNet.Numerics.LinearAlgebra.QRDecomposition">
            <Messages>
             <Message Id="Member" TypeName="LongAcronymsShouldBePascalCased" Category="Microsoft.Naming" CheckId="CA1705" Created="2006-08-05 09:38:38Z">
              <Issue Name="Member">
               <Item>Matrix.QRD():QRDecomposition</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Random(System.Int32,System.Int32):MathNet.Numerics.LinearAlgebra.Matrix">
            <Messages>
             <Message Id="0#m" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:38:38Z">
              <Issue Name="ParameterOneLetter">
               <Item>Matrix.Random(Int32, Int32):Matrix</Item>
               <Item>m</Item>
              </Issue>
             </Message>
             <Message Id="1#n" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:38:38Z">
              <Issue Name="ParameterOneLetter">
               <Item>Matrix.Random(Int32, Int32):Matrix</Item>
               <Item>n</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="SetMatrix(System.Int32,System.Int32,System.Int32,System.Int32,MathNet.Numerics.LinearAlgebra.Matrix):System.Void">
            <Messages>
             <Message Id="System.IndexOutOfRangeException.#ctor(System.String,System.Exception)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>Matrix.SetMatrix(Int32, Int32, Int32, Int32, Matrix):Void</Item>
               <Item>1</Item>
               <Item>IndexOutOfRangeException.IndexOutOfRangeException(String, Exception)</Item>
               <Item>Submatrix indices</Item>
              </Issue>
             </Message>
             <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Created="2006-08-05 09:38:38Z">
              <Issue Name="Reserved">
               <Item>Matrix.SetMatrix(Int32, Int32, Int32, Int32, Matrix):Void</Item>
               <Item>System.IndexOutOfRangeException</Item>
              </Issue>
             </Message>
             <Message Id="4#" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Created="2006-08-05 09:38:38Z">
              <Issue Name="Parameter">
               <Item>X</Item>
              </Issue>
             </Message>
             <Message Id="4#X" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:38:38Z">
              <Issue Name="ParameterOneLetter">
               <Item>Matrix.SetMatrix(Int32, Int32, Int32, Int32, Matrix):Void</Item>
               <Item>X</Item>
              </Issue>
             </Message>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>'X'</Item>
               <Item>Matrix.SetMatrix(Int32, Int32, Int32, Int32, Matrix):Void</Item>
              </Issue>
              <Issue>
               <Item>'X'</Item>
               <Item>Matrix.SetMatrix(Int32, Int32, Int32, Int32, Matrix):Void</Item>
              </Issue>
              <Issue>
               <Item>'X'</Item>
               <Item>Matrix.SetMatrix(Int32, Int32, Int32, Int32, Matrix):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="SetMatrix(System.Int32,System.Int32,System.Int32[],MathNet.Numerics.LinearAlgebra.Matrix):System.Void">
            <Messages>
             <Message Id="System.IndexOutOfRangeException.#ctor(System.String,System.Exception)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>Matrix.SetMatrix(Int32, Int32, Int32[], Matrix):Void</Item>
               <Item>1</Item>
               <Item>IndexOutOfRangeException.IndexOutOfRangeException(String, Exception)</Item>
               <Item>Submatrix indices</Item>
              </Issue>
             </Message>
             <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Created="2006-08-05 09:38:38Z">
              <Issue Name="Reserved">
               <Item>Matrix.SetMatrix(Int32, Int32, Int32[], Matrix):Void</Item>
               <Item>System.IndexOutOfRangeException</Item>
              </Issue>
             </Message>
             <Message Id="3#" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Created="2006-08-05 09:38:38Z">
              <Issue Name="Parameter">
               <Item>X</Item>
              </Issue>
             </Message>
             <Message Id="2#c" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:38:38Z">
              <Issue Name="ParameterOneLetter">
               <Item>Matrix.SetMatrix(Int32, Int32, Int32[], Matrix):Void</Item>
               <Item>c</Item>
              </Issue>
             </Message>
             <Message Id="3#X" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:38:38Z">
              <Issue Name="ParameterOneLetter">
               <Item>Matrix.SetMatrix(Int32, Int32, Int32[], Matrix):Void</Item>
               <Item>X</Item>
              </Issue>
             </Message>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>'X'</Item>
               <Item>Matrix.SetMatrix(Int32, Int32, Int32[], Matrix):Void</Item>
              </Issue>
              <Issue>
               <Item>'X'</Item>
               <Item>Matrix.SetMatrix(Int32, Int32, Int32[], Matrix):Void</Item>
              </Issue>
              <Issue>
               <Item>'X'</Item>
               <Item>Matrix.SetMatrix(Int32, Int32, Int32[], Matrix):Void</Item>
              </Issue>
              <Issue>
               <Item>'c'</Item>
               <Item>Matrix.SetMatrix(Int32, Int32, Int32[], Matrix):Void</Item>
              </Issue>
              <Issue>
               <Item>'c'</Item>
               <Item>Matrix.SetMatrix(Int32, Int32, Int32[], Matrix):Void</Item>
              </Issue>
              <Issue>
               <Item>'c'</Item>
               <Item>Matrix.SetMatrix(Int32, Int32, Int32[], Matrix):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="SetMatrix(System.Int32[],System.Int32,System.Int32,MathNet.Numerics.LinearAlgebra.Matrix):System.Void">
            <Messages>
             <Message Id="System.IndexOutOfRangeException.#ctor(System.String,System.Exception)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>Matrix.SetMatrix(Int32[], Int32, Int32, Matrix):Void</Item>
               <Item>1</Item>
               <Item>IndexOutOfRangeException.IndexOutOfRangeException(String, Exception)</Item>
               <Item>Submatrix indices</Item>
              </Issue>
             </Message>
             <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Created="2006-08-05 09:38:38Z">
              <Issue Name="Reserved">
               <Item>Matrix.SetMatrix(Int32[], Int32, Int32, Matrix):Void</Item>
               <Item>System.IndexOutOfRangeException</Item>
              </Issue>
             </Message>
             <Message Id="3#" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Created="2006-08-05 09:38:38Z">
              <Issue Name="Parameter">
               <Item>X</Item>
              </Issue>
             </Message>
             <Message Id="0#r" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:38:38Z">
              <Issue Name="ParameterOneLetter">
               <Item>Matrix.SetMatrix(Int32[], Int32, Int32, Matrix):Void</Item>
               <Item>r</Item>
              </Issue>
             </Message>
             <Message Id="3#X" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:38:38Z">
              <Issue Name="ParameterOneLetter">
               <Item>Matrix.SetMatrix(Int32[], Int32, Int32, Matrix):Void</Item>
               <Item>X</Item>
              </Issue>
             </Message>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>'X'</Item>
               <Item>Matrix.SetMatrix(Int32[], Int32, Int32, Matrix):Void</Item>
              </Issue>
              <Issue>
               <Item>'X'</Item>
               <Item>Matrix.SetMatrix(Int32[], Int32, Int32, Matrix):Void</Item>
              </Issue>
              <Issue>
               <Item>'X'</Item>
               <Item>Matrix.SetMatrix(Int32[], Int32, Int32, Matrix):Void</Item>
              </Issue>
              <Issue>
               <Item>'r'</Item>
               <Item>Matrix.SetMatrix(Int32[], Int32, Int32, Matrix):Void</Item>
              </Issue>
              <Issue>
               <Item>'r'</Item>
               <Item>Matrix.SetMatrix(Int32[], Int32, Int32, Matrix):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="SetMatrix(System.Int32[],System.Int32[],MathNet.Numerics.LinearAlgebra.Matrix):System.Void">
            <Messages>
             <Message Id="System.IndexOutOfRangeException.#ctor(System.String,System.Exception)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>Matrix.SetMatrix(Int32[], Int32[], Matrix):Void</Item>
               <Item>1</Item>
               <Item>IndexOutOfRangeException.IndexOutOfRangeException(String, Exception)</Item>
               <Item>Submatrix indices</Item>
              </Issue>
             </Message>
             <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Created="2006-08-05 09:38:38Z">
              <Issue Name="Reserved">
               <Item>Matrix.SetMatrix(Int32[], Int32[], Matrix):Void</Item>
               <Item>System.IndexOutOfRangeException</Item>
              </Issue>
             </Message>
             <Message Id="2#" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Created="2006-08-05 09:38:38Z">
              <Issue Name="Parameter">
               <Item>X</Item>
              </Issue>
             </Message>
             <Message Id="0#r" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:38:38Z">
              <Issue Name="ParameterOneLetter">
               <Item>Matrix.SetMatrix(Int32[], Int32[], Matrix):Void</Item>
               <Item>r</Item>
              </Issue>
             </Message>
             <Message Id="1#c" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:38:38Z">
              <Issue Name="ParameterOneLetter">
               <Item>Matrix.SetMatrix(Int32[], Int32[], Matrix):Void</Item>
               <Item>c</Item>
              </Issue>
             </Message>
             <Message Id="2#X" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:38:38Z">
              <Issue Name="ParameterOneLetter">
               <Item>Matrix.SetMatrix(Int32[], Int32[], Matrix):Void</Item>
               <Item>X</Item>
              </Issue>
             </Message>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>'X'</Item>
               <Item>Matrix.SetMatrix(Int32[], Int32[], Matrix):Void</Item>
              </Issue>
              <Issue>
               <Item>'X'</Item>
               <Item>Matrix.SetMatrix(Int32[], Int32[], Matrix):Void</Item>
              </Issue>
              <Issue>
               <Item>'X'</Item>
               <Item>Matrix.SetMatrix(Int32[], Int32[], Matrix):Void</Item>
              </Issue>
              <Issue>
               <Item>'c'</Item>
               <Item>Matrix.SetMatrix(Int32[], Int32[], Matrix):Void</Item>
              </Issue>
              <Issue>
               <Item>'c'</Item>
               <Item>Matrix.SetMatrix(Int32[], Int32[], Matrix):Void</Item>
              </Issue>
              <Issue>
               <Item>'c'</Item>
               <Item>Matrix.SetMatrix(Int32[], Int32[], Matrix):Void</Item>
              </Issue>
              <Issue>
               <Item>'r'</Item>
               <Item>Matrix.SetMatrix(Int32[], Int32[], Matrix):Void</Item>
              </Issue>
              <Issue>
               <Item>'r'</Item>
               <Item>Matrix.SetMatrix(Int32[], Int32[], Matrix):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Solve(MathNet.Numerics.LinearAlgebra.Matrix):MathNet.Numerics.LinearAlgebra.Matrix">
            <Messages>
             <Message Id="0#" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Created="2006-08-05 09:38:38Z">
              <Issue Name="Parameter">
               <Item>B</Item>
              </Issue>
             </Message>
             <Message Id="0#B" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:38:38Z">
              <Issue Name="ParameterOneLetter">
               <Item>Matrix.Solve(Matrix):Matrix</Item>
               <Item>B</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="SolveTranspose(MathNet.Numerics.LinearAlgebra.Matrix):MathNet.Numerics.LinearAlgebra.Matrix">
            <Messages>
             <Message Id="0#" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Created="2006-08-05 09:38:38Z">
              <Issue Name="Parameter">
               <Item>B</Item>
              </Issue>
             </Message>
             <Message Id="0#B" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:38:38Z">
              <Issue Name="ParameterOneLetter">
               <Item>Matrix.SolveTranspose(Matrix):Matrix</Item>
               <Item>B</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Subtract(MathNet.Numerics.LinearAlgebra.Matrix):System.Void">
            <Messages>
             <Message Id="0#m" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:38:38Z">
              <Issue Name="ParameterOneLetter">
               <Item>Matrix.Subtract(Matrix):Void</Item>
               <Item>m</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="SVD():MathNet.Numerics.LinearAlgebra.SingularValueDecomposition">
            <Messages>
             <Message Id="Member" TypeName="LongAcronymsShouldBePascalCased" Category="Microsoft.Naming" CheckId="CA1705" Created="2006-08-05 09:38:38Z">
              <Issue Name="Member">
               <Item>Matrix.SVD():SingularValueDecomposition</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Transpose(MathNet.Numerics.LinearAlgebra.Matrix):MathNet.Numerics.LinearAlgebra.Matrix">
            <Messages>
             <Message Id="0#m" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:38:38Z">
              <Issue Name="ParameterOneLetter">
               <Item>Matrix.Transpose(Matrix):Matrix</Item>
               <Item>m</Item>
              </Issue>
             </Message>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>'m'</Item>
               <Item>Matrix.Transpose(Matrix):Matrix</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="QRDecomposition">
          <Members>
           <Member Name=".ctor(MathNet.Numerics.LinearAlgebra.Matrix)">
            <Messages>
             <Message Id="0#" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Created="2006-08-05 09:38:38Z">
              <Issue Name="Parameter">
               <Item>A</Item>
              </Issue>
             </Message>
             <Message Id="0#A" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:38:38Z">
              <Issue Name="ParameterOneLetter">
               <Item>QRDecomposition.QRDecomposition(Matrix)</Item>
               <Item>A</Item>
              </Issue>
             </Message>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>'A'</Item>
               <Item>QRDecomposition.QRDecomposition(Matrix)</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="H">
            <Messages>
             <Message Id="H" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:38:38Z">
              <Issue Name="MemberOneLetter">
               <Item>H</Item>
               <Item>QRDecomposition.H:Matrix</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Q">
            <Messages>
             <Message Id="Q" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:38:38Z">
              <Issue Name="MemberOneLetter">
               <Item>Q</Item>
               <Item>QRDecomposition.Q:Matrix</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="QR">
            <Messages>
             <Message Id="Member" TypeName="PreferJaggedArraysOverMultidimensional" Category="Microsoft.Performance" CheckId="CA1814" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>QR</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="R">
            <Messages>
             <Message Id="R" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:38:38Z">
              <Issue Name="MemberOneLetter">
               <Item>R</Item>
               <Item>QRDecomposition.R:Matrix</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Solve(MathNet.Numerics.LinearAlgebra.Matrix):MathNet.Numerics.LinearAlgebra.Matrix">
            <Messages>
             <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Created="2006-08-05 09:38:38Z">
              <Issue Name="TooGeneric">
               <Item>QRDecomposition.Solve(Matrix):Matrix</Item>
               <Item>System.SystemException</Item>
              </Issue>
             </Message>
             <Message Id="0#" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Created="2006-08-05 09:38:38Z">
              <Issue Name="Parameter">
               <Item>B</Item>
              </Issue>
             </Message>
             <Message Id="0#B" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:38:38Z">
              <Issue Name="ParameterOneLetter">
               <Item>QRDecomposition.Solve(Matrix):Matrix</Item>
               <Item>B</Item>
              </Issue>
             </Message>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>'B'</Item>
               <Item>QRDecomposition.Solve(Matrix):Matrix</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="SingularValueDecomposition">
          <Members>
           <Member Name=".ctor(MathNet.Numerics.LinearAlgebra.Matrix)">
            <Messages>
             <Message Id="0#" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Created="2006-08-05 09:38:38Z">
              <Issue Name="Parameter">
               <Item>Arg</Item>
              </Issue>
             </Message>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>'Arg'</Item>
               <Item>SingularValueDecomposition.SingularValueDecomposition(Matrix)</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="S">
            <Messages>
             <Message Id="S" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:38:38Z">
              <Issue Name="MemberOneLetter">
               <Item>S</Item>
               <Item>SingularValueDecomposition.S:Matrix</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="SingularValues">
            <Messages>
             <Message TypeName="PropertiesShouldNotReturnArrays" Category="Microsoft.Performance" CheckId="CA1819" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>SingularValueDecomposition.SingularValues:Double[]</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
        </Types>
       </Namespace>
       <Namespace Name="MathNet.Numerics.Statistics">
        <Types>
         <Type Name="Accumulator">
          <Members>
           <Member Name="AddRange(System.Collections.ICollection):System.Void">
            <Messages>
             <Message Id="System.ArgumentException.#ctor(System.String)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>Accumulator.AddRange(ICollection):Void</Item>
               <Item>1</Item>
               <Item>ArgumentException.ArgumentException(String)</Item>
               <Item>#E00 Only 'double's could be added to the accumulator.</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="AddRange(System.Double[]):System.Void">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>'values'</Item>
               <Item>Accumulator.AddRange(Double[]):Void</Item>
              </Issue>
              <Issue>
               <Item>'values'</Item>
               <Item>Accumulator.AddRange(Double[]):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="ErrorEstimate">
            <Accessors>
             <Accessor Name="get_ErrorEstimate():System.Double">
              <Messages>
               <Message Id="System.InvalidOperationException.#ctor(System.String)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Created="2006-08-05 09:38:38Z">
                <Issue>
                 <Item>Accumulator.get_ErrorEstimate():Double</Item>
                 <Item>1</Item>
                 <Item>InvalidOperationException.InvalidOperationException(String)</Item>
                 <Item>#E00 No error estimate available. The accumulator is empty.</Item>
                </Issue>
               </Message>
              </Messages>
             </Accessor>
            </Accessors>
           </Member>
           <Member Name="Mean">
            <Accessors>
             <Accessor Name="get_Mean():System.Double">
              <Messages>
               <Message Id="System.InvalidOperationException.#ctor(System.String)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Created="2006-08-05 09:38:38Z">
                <Issue>
                 <Item>Accumulator.get_Mean():Double</Item>
                 <Item>1</Item>
                 <Item>InvalidOperationException.InvalidOperationException(String)</Item>
                 <Item>#E00 No mean available. The accumulator is empty.</Item>
                </Issue>
               </Message>
              </Messages>
             </Accessor>
            </Accessors>
           </Member>
           <Member Name="MeanSquared">
            <Accessors>
             <Accessor Name="get_MeanSquared():System.Double">
              <Messages>
               <Message Id="System.InvalidOperationException.#ctor(System.String)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Created="2006-08-05 09:38:38Z">
                <Issue>
                 <Item>Accumulator.get_MeanSquared():Double</Item>
                 <Item>1</Item>
                 <Item>InvalidOperationException.InvalidOperationException(String)</Item>
                 <Item>#E00 No mean available. The accumulator is empty.</Item>
                </Issue>
               </Message>
              </Messages>
             </Accessor>
            </Accessors>
           </Member>
           <Member Name="Remove(System.Double):System.Void">
            <Messages>
             <Message Id="System.InvalidOperationException.#ctor(System.String)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>Accumulator.Remove(Double):Void</Item>
               <Item>1</Item>
               <Item>InvalidOperationException.InvalidOperationException(String)</Item>
               <Item>#E00 No value could be removed because the accumulator is empty.</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="RemoveRange(System.Collections.ICollection):System.Void">
            <Messages>
             <Message Id="System.ArgumentException.#ctor(System.String)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>Accumulator.RemoveRange(ICollection):Void</Item>
               <Item>1</Item>
               <Item>ArgumentException.ArgumentException(String)</Item>
               <Item>#E00 Only 'double's could be removed from the accumulator.</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="RemoveRange(System.Double[]):System.Void">
            <Messages>
             <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>'values'</Item>
               <Item>Accumulator.RemoveRange(Double[]):Void</Item>
              </Issue>
              <Issue>
               <Item>'values'</Item>
               <Item>Accumulator.RemoveRange(Double[]):Void</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Variance">
            <Accessors>
             <Accessor Name="get_Variance():System.Double">
              <Messages>
               <Message Id="System.InvalidOperationException.#ctor(System.String)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Created="2006-08-05 09:38:38Z">
                <Issue>
                 <Item>Accumulator.get_Variance():Double</Item>
                 <Item>1</Item>
                 <Item>InvalidOperationException.InvalidOperationException(String)</Item>
                 <Item>#E00 No variance available. The accumulator is empty.</Item>
                </Issue>
               </Message>
              </Messages>
             </Accessor>
            </Accessors>
           </Member>
          </Members>
         </Type>
         <Type Name="Bucket">
          <Messages>
           <Message TypeName="OverrideGetHashCodeOnOverridingEquals" Category="Microsoft.Usage" CheckId="CA2218" Created="2006-08-05 09:38:38Z">
            <Issue>
             <Item>MathNet.Numerics.Statistics.Bucket</Item>
            </Issue>
           </Message>
           <Message TypeName="OverrideMethodsOnComparableTypes" Category="Microsoft.Design" CheckId="CA1036" Created="2006-08-05 09:38:38Z">
            <Issue Name="Operator">
             <Item>Bucket</Item>
             <Item>!=</Item>
            </Issue>
            <Issue Name="Operator">
             <Item>Bucket</Item>
             <Item>&lt;</Item>
            </Issue>
            <Issue Name="Operator">
             <Item>Bucket</Item>
             <Item>==</Item>
            </Issue>
            <Issue Name="Operator">
             <Item>Bucket</Item>
             <Item>&gt;</Item>
            </Issue>
           </Message>
          </Messages>
          <Members>
           <Member Name=".ctor(System.Double,System.Double)">
            <Messages>
             <Message TypeName="DoNotInitializeUnnecessarily" Category="Microsoft.Performance" CheckId="CA1805" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>Bucket.Bucket(Double, Double)</Item>
               <Item>depth</Item>
               <Item>System.Double</Item>
               <Item>0.0</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="CompareTo(System.Object):System.Int32">
            <Messages>
             <Message Id="0#" TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>bkt</Item>
               <Item>Bucket.CompareTo(Object):Int32</Item>
               <Item>obj</Item>
               <Item>IComparable.CompareTo(Object):Int32</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Equals(System.Object):System.Boolean">
            <Messages>
             <Message TypeName="DoNotCastUnnecessarily" Category="Microsoft.Performance" CheckId="CA1800" Created="2006-08-05 09:38:38Z">
              <Issue Name="Parameter">
               <Item>obj</Item>
               <Item>MathNet.Numerics.Statistics.Bucket</Item>
               <Item>Bucket.Equals(Object):Boolean</Item>
               <Item>castclass</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="Bucket+PointComparer">
          <Members>
           <Member Name="Compare(System.Object,System.Object):System.Int32">
            <Messages>
             <Message TypeName="DoNotCastUnnecessarily" Category="Microsoft.Performance" CheckId="CA1800" Created="2006-08-05 09:38:38Z">
              <Issue Name="Parameter">
               <Item>obj1</Item>
               <Item>MathNet.Numerics.Statistics.Bucket</Item>
               <Item>PointComparer.Compare(Object, Object):Int32</Item>
               <Item>castclass</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="Histogram">
          <Members>
           <Member Name="GetContainerIndexOf(System.Double):System.Int32">
            <Messages>
             <Message Id="System.ArgumentException.#ctor(System.String)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>Histogram.GetContainerIndexOf(Double):Int32</Item>
               <Item>1</Item>
               <Item>ArgumentException.ArgumentException(String)</Item>
               <Item>The histogram does not contains the value __</Item>
              </Issue>
             </Message>
             <Message Id="0#v" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:38:38Z">
              <Issue Name="ParameterOneLetter">
               <Item>Histogram.GetContainerIndexOf(Double):Int32</Item>
               <Item>v</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="GetContainerOf(System.Double):MathNet.Numerics.Statistics.Bucket">
            <Messages>
             <Message Id="0#v" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:38:38Z">
              <Issue Name="ParameterOneLetter">
               <Item>Histogram.GetContainerOf(Double):Bucket</Item>
               <Item>v</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="JoinBuckets():System.Void">
            <Messages>
             <Message Id="System.ArgumentException.#ctor(System.String)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>Histogram.JoinBuckets():Void</Item>
               <Item>1</Item>
               <Item>ArgumentException.ArgumentException(String)</Item>
               <Item>Empty histogram.</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="OptimalDispersion(System.Int32,System.Collections.ICollection):MathNet.Numerics.Statistics.Histogram">
            <Messages>
             <Message Id="Body" TypeName="PreferJaggedArraysOverMultidimensional" Category="Microsoft.Performance" CheckId="CA1814" Created="2006-08-05 09:38:38Z">
              <Issue Name="Body">
               <Item>Histogram.OptimalDispersion(Int32, ICollection):Histogram</Item>
               <Item>System.Double[,]</Item>
              </Issue>
              <Issue Name="Body">
               <Item>Histogram.OptimalDispersion(Int32, ICollection):Histogram</Item>
               <Item>System.Int32[,]</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="OptimalFreedom(System.Int32,System.Collections.ICollection):MathNet.Numerics.Statistics.Histogram">
            <Messages>
             <Message Id="Body" TypeName="PreferJaggedArraysOverMultidimensional" Category="Microsoft.Performance" CheckId="CA1814" Created="2006-08-05 09:38:38Z">
              <Issue Name="Body">
               <Item>Histogram.OptimalFreedom(Int32, ICollection):Histogram</Item>
               <Item>System.Double[,]</Item>
              </Issue>
              <Issue Name="Body">
               <Item>Histogram.OptimalFreedom(Int32, ICollection):Histogram</Item>
               <Item>System.Int32[,]</Item>
              </Issue>
             </Message>
             <Message Id="avg" TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>Histogram.OptimalFreedom(Int32, ICollection):Histogram</Item>
               <Item>avg</Item>
               <Item>System.Int32</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="OptimalSquaredFreedom(System.Int32,System.Collections.ICollection):MathNet.Numerics.Statistics.Histogram">
            <Messages>
             <Message Id="Body" TypeName="PreferJaggedArraysOverMultidimensional" Category="Microsoft.Performance" CheckId="CA1814" Created="2006-08-05 09:38:38Z">
              <Issue Name="Body">
               <Item>Histogram.OptimalSquaredFreedom(Int32, ICollection):Histogram</Item>
               <Item>System.Double[,]</Item>
              </Issue>
              <Issue Name="Body">
               <Item>Histogram.OptimalSquaredFreedom(Int32, ICollection):Histogram</Item>
               <Item>System.Int32[,]</Item>
              </Issue>
             </Message>
             <Message Id="avg" TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>Histogram.OptimalSquaredFreedom(Int32, ICollection):Histogram</Item>
               <Item>avg</Item>
               <Item>System.Int32</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="OptimalVariance(System.Int32,System.Collections.ICollection):MathNet.Numerics.Statistics.Histogram">
            <Messages>
             <Message Id="Body" TypeName="PreferJaggedArraysOverMultidimensional" Category="Microsoft.Performance" CheckId="CA1814" Created="2006-08-05 09:38:38Z">
              <Issue Name="Body">
               <Item>Histogram.OptimalVariance(Int32, ICollection):Histogram</Item>
               <Item>System.Double[,]</Item>
              </Issue>
              <Issue Name="Body">
               <Item>Histogram.OptimalVariance(Int32, ICollection):Histogram</Item>
               <Item>System.Int32[,]</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="ToString():System.String">
            <Messages>
             <Message TypeName="DoNotConcatenateStringsInsideLoops" Category="Microsoft.Performance" CheckId="CA1818" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>Histogram.ToString():String</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
        </Types>
       </Namespace>
       <Namespace Name="MathNet.Numerics.Transformations">
        <Types>
         <Type Name="ComplexTransformation">
          <Members>
           <Member Name=".ctor(MathNet.Numerics.Complex[])">
            <Messages>
             <Message TypeName="DoNotInitializeUnnecessarily" Category="Microsoft.Performance" CheckId="CA1805" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>ComplexTransformation.ComplexTransformation(Complex[])</Item>
               <Item>viewData</Item>
               <Item>MathNet.Numerics.Complex[]</Item>
               <Item>null</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Data">
            <Messages>
             <Message TypeName="PropertiesShouldNotReturnArrays" Category="Microsoft.Performance" CheckId="CA1819" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>ComplexTransformation.Data:Complex[]</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="viewData">
            <Messages>
             <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>viewData</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="FourierHelper">
          <Members>
           <Member Name="imagCoefficients">
            <Messages>
             <Message Id="Member" TypeName="PreferJaggedArraysOverMultidimensional" Category="Microsoft.Performance" CheckId="CA1814" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>imagCoefficients</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Log2(System.Int32):System.Int32">
            <Messages>
             <Message Id="0#x" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2006-08-05 09:38:38Z">
              <Issue Name="ParameterOneLetter">
               <Item>FourierHelper.Log2(Int32):Int32</Item>
               <Item>x</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="realCoefficients">
            <Messages>
             <Message Id="Member" TypeName="PreferJaggedArraysOverMultidimensional" Category="Microsoft.Performance" CheckId="CA1814" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>realCoefficients</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="RealTransformation">
          <Members>
           <Member Name=".ctor(System.Double[])">
            <Messages>
             <Message TypeName="DoNotInitializeUnnecessarily" Category="Microsoft.Performance" CheckId="CA1805" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>RealTransformation.RealTransformation(Double[])</Item>
               <Item>viewData</Item>
               <Item>System.Double[]</Item>
               <Item>null</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="Data">
            <Messages>
             <Message TypeName="PropertiesShouldNotReturnArrays" Category="Microsoft.Performance" CheckId="CA1819" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>RealTransformation.Data:Double[]</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="viewData">
            <Messages>
             <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Created="2006-08-05 09:38:38Z">
              <Issue>
               <Item>viewData</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
        </Types>
       </Namespace>
      </Namespaces>
     </Module>
    </Modules>
   </Target>
  </Targets>
  <Rules>
   <Rule TypeName="AssembliesShouldHaveValidStrongNames" Category="Microsoft.Design" CheckId="CA2210">
    <Resolution Name="NoStrongName">Sign '{0}' with a strong name key.</Resolution>
   </Rule>
   <Rule TypeName="AvoidNamespacesWithFewTypes" Category="Microsoft.Design" CheckId="CA1020">
    <Resolution Name="Default">Consider merging the types defined in '{0}' with another namespace.</Resolution>
   </Rule>
   <Rule TypeName="AvoidOutParameters" Category="Microsoft.Design" CheckId="CA1021">
    <Resolution Name="Default">Consider a design that does not require that '{0}' be an out parameter.</Resolution>
   </Rule>
   <Rule TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811">
    <Resolution Name="Default">'{0}' appears to have no upstream public or protected callers.</Resolution>
   </Rule>
   <Rule TypeName="AvoidUninstantiatedInternalClasses" Category="Microsoft.Performance" CheckId="CA1812">
    <Resolution Name="Default">'{0}' is an internal class that is apparently never instantiated. If so, remove the code from the assembly. If this class is intended to contain only static methods, consider adding a private constructor to prevent the compiler from generating a default constructor.</Resolution>
   </Rule>
   <Rule TypeName="AvoidUnusedPrivateFields" Category="Microsoft.Performance" CheckId="CA1823">
    <Resolution Name="Default">It appears that field '{0}' is never used or is only ever assigned to. Use this field or remove it.</Resolution>
   </Rule>
   <Rule TypeName="DoNotCallOverridableMethodsInConstructors" Category="Microsoft.Usage" CheckId="CA2214">
    <Resolution Name="Default">'{0}' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: {1}</Resolution>
   </Rule>
   <Rule TypeName="DoNotCastUnnecessarily" Category="Microsoft.Performance" CheckId="CA1800">
    <Resolution Name="Parameter">'{0}', a parameter, is cast to type '{1}' multiple times in method {2}. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant {3} instruction.</Resolution>
   </Rule>
   <Rule TypeName="DoNotConcatenateStringsInsideLoops" Category="Microsoft.Performance" CheckId="CA1818">
    <Resolution Name="Default">Change {0} to use StringBuilder instead of String.Concat or +=</Resolution>
   </Rule>
   <Rule TypeName="DoNotDeclareStaticMembersOnGenericTypes" Category="Microsoft.Design" CheckId="CA1000">
    <Resolution Name="Default">Remove {0} from '{1}' or make it an instance member.</Resolution>
   </Rule>
   <Rule TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051">
    <Resolution Name="Default">Make '{0}' private or internal (Friend in VB, public private in C++) and provide a public or protected property to access it.</Resolution>
   </Rule>
   <Rule TypeName="DoNotInitializeUnnecessarily" Category="Microsoft.Performance" CheckId="CA1805">
    <Resolution Name="Default">{0} initializes field {1} of type {2} to {3}. Remove this initialization as it will be done automatically by the runtime.</Resolution>
   </Rule>
   <Rule TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303">
    <Resolution Name="Default">{0} passes a literal as parameter {1} of a call to {2}. Retrieve the following string argument from a resource table instead: '{3}'</Resolution>
   </Rule>
   <Rule TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201">
    <Resolution Name="Reserved">{0} creates an exception of type '{1}', an exception type that is reserved by the runtime and should never be raised by managed code. If this exception instance might be thrown, use a different exception type.</Resolution>
    <Resolution Name="TooGeneric">{0} creates an exception of type '{1}', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Resolution>
   </Rule>
   <Rule TypeName="EnumsShouldHaveZeroValue" Category="Microsoft.Design" CheckId="CA1008">
    <Resolution Name="NotFlagsNoZeroValue">Add a member to '{0}' that has a value of zero with a suggested name of 'None'.</Resolution>
   </Rule>
   <Rule TypeName="ICollectionImplementationsHaveStronglyTypedMembers" Category="Microsoft.Design" CheckId="CA1035">
    <Resolution Name="Default">'{0}' should provide a strongly typed implementation of ICollection.CopyTo.</Resolution>
   </Rule>
   <Rule TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709">
    <Resolution Name="Member">Correct the casing of member name '{0}'.</Resolution>
    <Resolution Name="Parameter">Correct the casing of parameter name '{0}'.</Resolution>
   </Rule>
   <Rule TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704">
    <Resolution Name="MemberOneLetter">Consider providing a more meaningful name than the one-letter token '{0}' in member name '{1}'.</Resolution>
    <Resolution Name="ParameterOneLetter">In method {0}, consider providing a more meaningful name than the one-letter parameter name '{1}'.</Resolution>
   </Rule>
   <Rule TypeName="IdentifiersShouldHaveCorrectSuffix" Category="Microsoft.Naming" CheckId="CA1710">
    <Resolution Name="Default">Rename '{0}' to end in '{1}'.</Resolution>
   </Rule>
   <Rule TypeName="IdentifiersShouldNotHaveIncorrectSuffix" Category="Microsoft.Naming" CheckId="CA1711">
    <Resolution Name="Default">Rename '{0}' so that it does not end in '{1}'.</Resolution>
   </Rule>
   <Rule TypeName="IdentifiersShouldNotMatchKeywords" Category="Microsoft.Naming" CheckId="CA1716">
    <Resolution Name="Type">Change type name '{0}' so that it does not conflict with reserved keyword:'{1}'.</Resolution>
   </Rule>
   <Rule TypeName="IndexersShouldNotBeMultidimensional" Category="Microsoft.Design" CheckId="CA1023">
    <Resolution Name="Default">Redesign indexer {0} to use a single string or integer value as its index.</Resolution>
   </Rule>
   <Rule TypeName="InstantiateArgumentExceptionsCorrectly" Category="Microsoft.Usage" CheckId="CA2208">
    <Resolution Name="NoArguments">Call the {0} constructor that contains a message and/or paramName parameter.</Resolution>
    <Resolution Name="OneArgumentShouldBeParameterName">Calls to {0}'s constructor '{1}' should contain one of the method's parameter names instead of '{2}'. Note that the provided parameter name should have the exact casing as declared on the method.</Resolution>
    <Resolution Name="TwoArgumentsSecondShouldBeParameterName">Calls to {0}'s constructor '{1}' should be in the order message, paramName instead of '{2}', '{3}'. Note that the provided parameter name should have the exact casing as declared on the method.</Resolution>
   </Rule>
   <Rule TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033">
    <Resolution Name="Default">Make '{0}' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of '{1}' and is visible to derived classes.</Resolution>
   </Rule>
   <Rule TypeName="LongAcronymsShouldBePascalCased" Category="Microsoft.Naming" CheckId="CA1705">
    <Resolution Name="Member">Correct the capitalization of member name '{0}'.</Resolution>
   </Rule>
   <Rule TypeName="MarkEnumsWithFlags" Category="Microsoft.Design" CheckId="CA1027">
    <Resolution Name="Default">The constituent members of '{0}' appear to represent flags that can be combined rather than discrete values. If this is correct, mark the enumeration with FlagsAttribute.</Resolution>
   </Rule>
   <Rule TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822">
    <Resolution Name="Default">The 'this' parameter (or 'Me' in VB) of {0} is never used. Mark the member as static (or Shared in VB) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Resolution>
   </Rule>
   <Rule TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034">
    <Resolution Name="Default">Do not nest type '{0}'. Alternatively, change its accessibility so that it is not externally visible.</Resolution>
   </Rule>
   <Rule TypeName="OperationsShouldNotOverflow" Category="Microsoft.Usage" CheckId="CA2233">
    <Resolution Name="Default">Correct the potential overflow in the operation '{0}' in '{1}'.</Resolution>
   </Rule>
   <Rule TypeName="OperatorOverloadsHaveNamedAlternates" Category="Microsoft.Usage" CheckId="CA2225">
    <Resolution Name="Default">Provide a method named '{0}' as a friendly alternate for operator {1}.</Resolution>
   </Rule>
   <Rule TypeName="OverloadOperatorEqualsOnOverloadingAddAndSubtract" Category="Microsoft.Design" CheckId="CA1013">
    <Resolution Name="Default">Consider adding an overload of the equality operator for '{0}' that takes the same parameters as {1}.</Resolution>
   </Rule>
   <Rule TypeName="OverloadOperatorEqualsOnOverridingValueTypeEquals" Category="Microsoft.Usage" CheckId="CA2231">
    <Resolution Name="Default">Because '{0}' is a value type that overrides Object.Equals, it should also overload the equality and inequality operators (== and !=).</Resolution>
   </Rule>
   <Rule TypeName="OverrideEqualsAndOperatorEqualsOnValueTypes" Category="Microsoft.Performance" CheckId="CA1815">
    <Resolution Name="Equals">'{0}' should override Equals.</Resolution>
    <Resolution Name="op_Equality">'{0}' should override the equality (==) and inequality (!=) operators.</Resolution>
   </Rule>
   <Rule TypeName="OverrideGetHashCodeOnOverridingEquals" Category="Microsoft.Usage" CheckId="CA2218">
    <Resolution Name="Default">Since '{0}' redefines Equals, it should also redefine GetHashCode.</Resolution>
   </Rule>
   <Rule TypeName="OverrideMethodsOnComparableTypes" Category="Microsoft.Design" CheckId="CA1036">
    <Resolution Name="Equals">{0} should override Equals since it implements IComparable.</Resolution>
    <Resolution Name="Operator">{0} should define operator '{1}' since it implements IComparable.</Resolution>
   </Rule>
   <Rule TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725">
    <Resolution Name="Default">Change parameter name '{0}' of method {1} to '{2}' in order to match the identifier as it has been declared in {3}.</Resolution>
   </Rule>
   <Rule TypeName="PreferJaggedArraysOverMultidimensional" Category="Microsoft.Performance" CheckId="CA1814">
    <Resolution Name="Body">'{0}' uses a multidimensional array of '{1}'. Replace it with a jagged array if possible. (Jagged arrays are not CLS Compliant.)</Resolution>
    <Resolution Name="Default">'{0}' is a multidimensional array. Replace it with a jagged array if possible. (Jagged arrays are not CLS Compliant.)</Resolution>
    <Resolution Name="Return">'{0}' returns a multidimensional array of '{1}'. Replace it with a jagged array if possible. (Jagged arrays are not CLS Compliant.)</Resolution>
   </Rule>
   <Rule TypeName="PropertiesShouldNotReturnArrays" Category="Microsoft.Performance" CheckId="CA1819">
    <Resolution Name="Default">Change {0} to return a collection or make it a method.</Resolution>
   </Rule>
   <Rule TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804">
    <Resolution Name="Default">{0} declares a local, '{1}', of type {2}, which is never used or is only assigned to. Use this local or remove it.</Resolution>
   </Rule>
   <Rule TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801">
    <Resolution Name="Default">Parameter '{0}' of {1} is never used. Remove the parameter or use it in the method body.</Resolution>
   </Rule>
   <Rule TypeName="ShortAcronymsShouldBeUppercase" Category="Microsoft.Naming" CheckId="CA1706">
    <Resolution Name="Member">Correct the capitalization of '{0}' in member name '{1}'.</Resolution>
    <Resolution Name="Type">Correct the capitalization of '{0}' in type name '{1}'.</Resolution>
   </Rule>
   <Rule TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304">
    <Resolution Name="Default">{0} makes a call to {1} that does not explicitly provide a CultureInfo. This should be replaced with a call to {2}.</Resolution>
   </Rule>
   <Rule TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305">
    <Resolution Name="Default">{0} makes a call to {1} that does not explicitly provide an IFormatProvider. This should be replaced with a call to {2}.</Resolution>
   </Rule>
   <Rule TypeName="StaticHolderTypesShouldBeSealed" Category="Microsoft.Design" CheckId="CA1052">
    <Resolution Name="Default">Mark '{0}' as sealed.</Resolution>
   </Rule>
   <Rule TypeName="StaticHolderTypesShouldNotHaveConstructors" Category="Microsoft.Design" CheckId="CA1053">
    <Resolution Name="Default">Remove the public constructors from '{0}'.</Resolution>
   </Rule>
   <Rule TypeName="UseGenericEventHandlerInstances" Category="Microsoft.Design" CheckId="CA1003">
    <Resolution Name="Default">Remove '{0}' and replace its usage with EventHandler&lt;T&gt;</Resolution>
   </Rule>
   <Rule TypeName="UseLiteralsWhereAppropriate" Category="Microsoft.Performance" CheckId="CA1802">
    <Resolution Name="Default">Field '{0}' is declared as 'static readonly' but is initialized with a constant value '{1}'. Mark this field as 'const' instead.</Resolution>
   </Rule>
   <Rule TypeName="UsePropertiesWhereAppropriate" Category="Microsoft.Design" CheckId="CA1024">
    <Resolution Name="Default">Change '{0}' to a property if appropriate.</Resolution>
   </Rule>
   <Rule TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062">
    <Resolution Name="Default">Validate parameter {0} passed to externally visible method {1}.</Resolution>
   </Rule>
  </Rules>
 </FxCopReport>
</FxCopProject>
