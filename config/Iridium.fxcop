<?xml version="1.0" encoding="utf-8"?>
<FxCopProject Version="1.35" Name="IridiumAnalysis">
 <ProjectOptions>
  <SharedProject>True</SharedProject>
  <Stylesheet Apply="False">http://www.gotdotnet.com/team/fxcop//xsl/1.35/FxCopReport.xsl</Stylesheet>
  <SaveMessages>
   <Project Status="Active, Excluded" NewOnly="False" />
   <Report Status="Active" NewOnly="False" />
  </SaveMessages>
  <ProjectFile Compress="False" DefaultTargetCheck="True" DefaultRuleCheck="True" SaveByRuleGroup="" Deterministic="True" />
  <EnableMultithreadedLoad>True</EnableMultithreadedLoad>
  <EnableMultithreadedAnalysis>True</EnableMultithreadedAnalysis>
  <SourceLookup>True</SourceLookup>
  <AnalysisExceptionsThreshold>10</AnalysisExceptionsThreshold>
  <RuleExceptionsThreshold>1</RuleExceptionsThreshold>
  <Spelling Locale="en-us" />
  <VersionAware>False</VersionAware>
  <OverrideRuleVisibilities>False</OverrideRuleVisibilities>
  <CustomDictionaries SearchFxCopDir="True" SearchUserProfile="True" SearchProjectDir="True" />
  <SearchGlobalAssemblyCache>False</SearchGlobalAssemblyCache>
  <DeadlockDetectionTimeout>120</DeadlockDetectionTimeout>
 </ProjectOptions>
 <Targets>
  <AssemblyReferenceDirectories>
   <Directory>$(ProjectDir)/../build/checkout/src/app/MathNet.Iridium/Library/bin/Debug/</Directory>
   <Directory>$(ProjectDir)/src/app/MathNet.Iridium/Library/bin/Debug/</Directory>
  </AssemblyReferenceDirectories>
  <Target Name="$(ProjectDir)/build/Release/MathNet.Iridium.dll" Analyze="True">
   <Modules>
    <Module Name="mathnet.iridium.dll" Analyze="True">
     <Namespaces>
      <Namespace Name="" Analyze="True">
       <Types>
        <Type Name="&lt;Module&gt;" Analyze="True" />
        <Type Name="&lt;PrivateImplementationDetails&gt;{DF4B387A-210A-410D-801B-0DE2A540CA67}" Analyze="True">
         <Members>
          <Member Name="$$method0x600052f-1" Analyze="True" />
          <Member Name="$$method0x6000532-1" Analyze="True" />
          <Member Name="$$method0x60005bd-1" Analyze="True" />
          <Member Name="$$method0x60005bd-2" Analyze="True" />
          <Member Name="$$method0x60005bd-3" Analyze="True" />
          <Member Name="$$method0x60005bd-4" Analyze="True" />
         </Members>
        </Type>
        <Type Name="&lt;PrivateImplementationDetails&gt;{DF4B387A-210A-410D-801B-0DE2A540CA67}+__StaticArrayInitTypeSize=256" Analyze="True" />
        <Type Name="&lt;PrivateImplementationDetails&gt;{DF4B387A-210A-410D-801B-0DE2A540CA67}+__StaticArrayInitTypeSize=32" Analyze="True" />
        <Type Name="&lt;PrivateImplementationDetails&gt;{DF4B387A-210A-410D-801B-0DE2A540CA67}+__StaticArrayInitTypeSize=40" Analyze="True" />
        <Type Name="&lt;PrivateImplementationDetails&gt;{DF4B387A-210A-410D-801B-0DE2A540CA67}+__StaticArrayInitTypeSize=48" Analyze="True" />
       </Types>
      </Namespace>
      <Namespace Name="MathNet.Numerics" Analyze="True">
       <Types>
        <Type Name="Collection" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="Concat(System.Collections.ICollection,System.Collections.ICollection):System.Collections.ICollection" Analyze="True" />
          <Member Name="Inter(System.Collections.ICollection,System.Collections.ICollection):System.Collections.ICollection" Analyze="True" />
          <Member Name="Minus(System.Collections.ICollection,System.Collections.ICollection):System.Collections.ICollection" Analyze="True" />
          <Member Name="Product(System.Collections.ICollection,System.Collections.ICollection):System.Collections.ICollection" Analyze="True" />
          <Member Name="Union(System.Collections.ICollection,System.Collections.ICollection):System.Collections.ICollection" Analyze="True" />
         </Members>
        </Type>
        <Type Name="Collection+ConcatCollection" Analyze="True">
         <Members>
          <Member Name=".ctor(System.Collections.ICollection,System.Collections.ICollection)" Analyze="True" />
          <Member Name="c1" Analyze="True" />
          <Member Name="c2" Analyze="True" />
          <Member Name="CopyTo(System.Array,System.Int32):System.Void" Analyze="True" />
          <Member Name="Count" Analyze="True">
           <Accessors>
            <Accessor Name="get_Count():System.Int32" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="GetEnumerator():System.Collections.IEnumerator" Analyze="True" />
          <Member Name="IsSynchronized" Analyze="True">
           <Accessors>
            <Accessor Name="get_IsSynchronized():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="SyncRoot" Analyze="True">
           <Accessors>
            <Accessor Name="get_SyncRoot():System.Object" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="Collection+ConcatCollection+ConcatEnumerator" Analyze="True">
         <Members>
          <Member Name=".ctor(MathNet.Numerics.Collection+ConcatCollection)" Analyze="True" />
          <Member Name="Current" Analyze="True">
           <Accessors>
            <Accessor Name="get_Current():System.Object" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="enumerator1" Analyze="True" />
          <Member Name="enumerator2" Analyze="True" />
          <Member Name="isEnumator1Current" Analyze="True" />
          <Member Name="MoveNext():System.Boolean" Analyze="True" />
          <Member Name="Reset():System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="Collection+InterCollection" Analyze="True">
         <Members>
          <Member Name=".ctor(System.Collections.ICollection,System.Collections.ICollection)" Analyze="True" />
          <Member Name="CopyTo(System.Array,System.Int32):System.Void" Analyze="True" />
          <Member Name="Count" Analyze="True">
           <Accessors>
            <Accessor Name="get_Count():System.Int32" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="GetEnumerator():System.Collections.IEnumerator" Analyze="True" />
          <Member Name="intersection" Analyze="True" />
          <Member Name="IsSynchronized" Analyze="True">
           <Accessors>
            <Accessor Name="get_IsSynchronized():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="SyncRoot" Analyze="True">
           <Accessors>
            <Accessor Name="get_SyncRoot():System.Object" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="Collection+MinusCollection" Analyze="True">
         <Members>
          <Member Name=".ctor(System.Collections.ICollection,System.Collections.ICollection)" Analyze="True" />
          <Member Name="CopyTo(System.Array,System.Int32):System.Void" Analyze="True" />
          <Member Name="Count" Analyze="True">
           <Accessors>
            <Accessor Name="get_Count():System.Int32" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="GetEnumerator():System.Collections.IEnumerator" Analyze="True" />
          <Member Name="IsSynchronized" Analyze="True">
           <Accessors>
            <Accessor Name="get_IsSynchronized():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="minus" Analyze="True" />
          <Member Name="SyncRoot" Analyze="True">
           <Accessors>
            <Accessor Name="get_SyncRoot():System.Object" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="Collection+UnionCollection" Analyze="True">
         <Members>
          <Member Name=".ctor(System.Collections.ICollection,System.Collections.ICollection)" Analyze="True" />
          <Member Name="CopyTo(System.Array,System.Int32):System.Void" Analyze="True" />
          <Member Name="Count" Analyze="True">
           <Accessors>
            <Accessor Name="get_Count():System.Int32" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="GetEnumerator():System.Collections.IEnumerator" Analyze="True" />
          <Member Name="IsSynchronized" Analyze="True">
           <Accessors>
            <Accessor Name="get_IsSynchronized():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="SyncRoot" Analyze="True">
           <Accessors>
            <Accessor Name="get_SyncRoot():System.Object" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="union" Analyze="True" />
         </Members>
        </Type>
        <Type Name="Combinatorics" Analyze="True">
         <Members>
          <Member Name=".cctor()" Analyze="True" />
          <Member Name="_random" Analyze="True" />
          <Member Name="Combinations(System.Int32,System.Int32):System.Double" Analyze="True" />
          <Member Name="CombinationsWithRepetition(System.Int32,System.Int32):System.Double" Analyze="True" />
          <Member Name="Permutations(System.Int32):System.Double" Analyze="True" />
          <Member Name="RandomCombination(System.Int32):System.Boolean[]" Analyze="True" />
          <Member Name="RandomCombination(System.Int32,System.Int32):System.Boolean[]" Analyze="True" />
          <Member Name="RandomCombinationWithRepetition(System.Int32,System.Int32):System.Int32[]" Analyze="True" />
          <Member Name="RandomPermutation(System.Int32):System.Int32[]" Analyze="True" />
          <Member Name="RandomShuffle(System.Collections.Generic.IList`1&lt;T&gt;):System.Void" Analyze="True" />
          <Member Name="RandomShuffle(System.Collections.Generic.IList`1&lt;T&gt;,System.Collections.Generic.IList`1&lt;T&gt;):System.Void" Analyze="True" />
          <Member Name="RandomSource" Analyze="True">
           <Accessors>
            <Accessor Name="get_RandomSource():MathNet.Numerics.RandomSources.RandomSource" Analyze="True" />
            <Accessor Name="set_RandomSource(MathNet.Numerics.RandomSources.RandomSource):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="RandomSubsetCombination(System.Collections.Generic.IList`1&lt;T&gt;,System.Int32):T[]" Analyze="True" />
          <Member Name="RandomSubsetCombinationWithRepetition(System.Collections.Generic.IList`1&lt;T&gt;,System.Int32):T[]" Analyze="True" />
          <Member Name="RandomSubsetVariation(System.Collections.Generic.IList`1&lt;T&gt;,System.Int32):T[]" Analyze="True" />
          <Member Name="RandomSubsetVariationWithRepetition(System.Collections.Generic.IList`1&lt;T&gt;,System.Int32):T[]" Analyze="True" />
          <Member Name="RandomVariation(System.Int32,System.Int32):System.Int32[]" Analyze="True" />
          <Member Name="RandomVariationWithRepetition(System.Int32,System.Int32):System.Int32[]" Analyze="True" />
          <Member Name="Variations(System.Int32,System.Int32):System.Double" Analyze="True" />
          <Member Name="VariationsWithRepetition(System.Int32,System.Int32):System.Double" Analyze="True" />
         </Members>
        </Type>
        <Type Name="Combinatorics+IndexedValue" Analyze="True">
         <Members>
          <Member Name=".ctor(System.Int32,System.Double)" Analyze="True" />
          <Member Name="CompareTo(MathNet.Numerics.Combinatorics+IndexedValue):System.Int32" Analyze="True" />
          <Member Name="Index" Analyze="True" />
          <Member Name="Value" Analyze="True" />
         </Members>
        </Type>
        <Type Name="Complex" Analyze="True">
         <Members>
          <Member Name=".ctor(System.Double,System.Double)" Analyze="True" />
          <Member Name="Argument" Analyze="True">
           <Accessors>
            <Accessor Name="get_Argument():System.Double" Analyze="True" />
            <Accessor Name="set_Argument(System.Double):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="argumentModulusComparer" Analyze="True" />
          <Member Name="ArgumentModulusComparer" Analyze="True">
           <Accessors>
            <Accessor Name="get_ArgumentModulusComparer():System.Collections.IComparer" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="CompareTo(MathNet.Numerics.Complex):System.Int32" Analyze="True" />
          <Member Name="Conjugate" Analyze="True">
           <Accessors>
            <Accessor Name="get_Conjugate():MathNet.Numerics.Complex" Analyze="True" />
            <Accessor Name="set_Conjugate(MathNet.Numerics.Complex):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Cosecant():MathNet.Numerics.Complex" Analyze="True" />
          <Member Name="Cosine():MathNet.Numerics.Complex" Analyze="True" />
          <Member Name="Cotangent():MathNet.Numerics.Complex" Analyze="True" />
          <Member Name="Equals(MathNet.Numerics.Complex):System.Boolean" Analyze="True" />
          <Member Name="Equals(System.Object):System.Boolean" Analyze="True" />
          <Member Name="Exponential():MathNet.Numerics.Complex" Analyze="True" />
          <Member Name="FromModulusArgument(System.Double,System.Double):MathNet.Numerics.Complex" Analyze="True" />
          <Member Name="FromRealImaginary(System.Double,System.Double):MathNet.Numerics.Complex" Analyze="True" />
          <Member Name="GetHashCode():System.Int32" Analyze="True" />
          <Member Name="HyperbolicCosecant():MathNet.Numerics.Complex" Analyze="True" />
          <Member Name="HyperbolicCosine():MathNet.Numerics.Complex" Analyze="True" />
          <Member Name="HyperbolicCotangent():MathNet.Numerics.Complex" Analyze="True" />
          <Member Name="HyperbolicSecant():MathNet.Numerics.Complex" Analyze="True" />
          <Member Name="HyperbolicSine():MathNet.Numerics.Complex" Analyze="True" />
          <Member Name="HyperbolicTangent():MathNet.Numerics.Complex" Analyze="True" />
          <Member Name="I" Analyze="True">
           <Accessors>
            <Accessor Name="get_I():MathNet.Numerics.Complex" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="imag" Analyze="True" />
          <Member Name="Imag" Analyze="True">
           <Accessors>
            <Accessor Name="get_Imag():System.Double" Analyze="True" />
            <Accessor Name="set_Imag(System.Double):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Infinity" Analyze="True">
           <Accessors>
            <Accessor Name="get_Infinity():MathNet.Numerics.Complex" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="InverseCosecant():MathNet.Numerics.Complex" Analyze="True" />
          <Member Name="InverseCosine():MathNet.Numerics.Complex" Analyze="True" />
          <Member Name="InverseCotangent():MathNet.Numerics.Complex" Analyze="True" />
          <Member Name="InverseHyperbolicCosecant():MathNet.Numerics.Complex" Analyze="True" />
          <Member Name="InverseHyperbolicCosine():MathNet.Numerics.Complex" Analyze="True" />
          <Member Name="InverseHyperbolicCotangent():MathNet.Numerics.Complex" Analyze="True" />
          <Member Name="InverseHyperbolicSecant():MathNet.Numerics.Complex" Analyze="True" />
          <Member Name="InverseHyperbolicSine():MathNet.Numerics.Complex" Analyze="True" />
          <Member Name="InverseHyperbolicTangent():MathNet.Numerics.Complex" Analyze="True" />
          <Member Name="InverseSecant():MathNet.Numerics.Complex" Analyze="True" />
          <Member Name="InverseSine():MathNet.Numerics.Complex" Analyze="True" />
          <Member Name="InverseTangent():MathNet.Numerics.Complex" Analyze="True" />
          <Member Name="IsI" Analyze="True">
           <Accessors>
            <Accessor Name="get_IsI():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="IsImaginary" Analyze="True">
           <Accessors>
            <Accessor Name="get_IsImaginary():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="IsInfinity" Analyze="True">
           <Accessors>
            <Accessor Name="get_IsInfinity():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="IsNaN" Analyze="True">
           <Accessors>
            <Accessor Name="get_IsNaN():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="IsOne" Analyze="True">
           <Accessors>
            <Accessor Name="get_IsOne():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="IsReal" Analyze="True">
           <Accessors>
            <Accessor Name="get_IsReal():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="IsRealNonNegative" Analyze="True">
           <Accessors>
            <Accessor Name="get_IsRealNonNegative():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="IsZero" Analyze="True">
           <Accessors>
            <Accessor Name="get_IsZero():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Modulus" Analyze="True">
           <Accessors>
            <Accessor Name="get_Modulus():System.Double" Analyze="True" />
            <Accessor Name="set_Modulus(System.Double):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="modulusArgumentComparer" Analyze="True" />
          <Member Name="ModulusArgumentComparer" Analyze="True">
           <Accessors>
            <Accessor Name="get_ModulusArgumentComparer():System.Collections.IComparer" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ModulusSquared" Analyze="True">
           <Accessors>
            <Accessor Name="get_ModulusSquared():System.Double" Analyze="True" />
            <Accessor Name="set_ModulusSquared(System.Double):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="NaN" Analyze="True">
           <Accessors>
            <Accessor Name="get_NaN():MathNet.Numerics.Complex" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="NaturalLogarithm():MathNet.Numerics.Complex" Analyze="True" />
          <Member Name="NormalizeToUnityOrNull():System.Void" Analyze="True" />
          <Member Name="One" Analyze="True">
           <Accessors>
            <Accessor Name="get_One():MathNet.Numerics.Complex" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="op_Addition(MathNet.Numerics.Complex,MathNet.Numerics.Complex):MathNet.Numerics.Complex" Analyze="True" />
          <Member Name="op_Addition(MathNet.Numerics.Complex,System.Double):MathNet.Numerics.Complex" Analyze="True" />
          <Member Name="op_Addition(System.Double,MathNet.Numerics.Complex):MathNet.Numerics.Complex" Analyze="True" />
          <Member Name="op_Division(MathNet.Numerics.Complex,MathNet.Numerics.Complex):MathNet.Numerics.Complex" Analyze="True" />
          <Member Name="op_Division(MathNet.Numerics.Complex,System.Double):MathNet.Numerics.Complex" Analyze="True" />
          <Member Name="op_Division(System.Double,MathNet.Numerics.Complex):MathNet.Numerics.Complex" Analyze="True" />
          <Member Name="op_Equality(MathNet.Numerics.Complex,MathNet.Numerics.Complex):System.Boolean" Analyze="True" />
          <Member Name="op_Implicit(System.Double):MathNet.Numerics.Complex" Analyze="True" />
          <Member Name="op_Inequality(MathNet.Numerics.Complex,MathNet.Numerics.Complex):System.Boolean" Analyze="True" />
          <Member Name="op_Multiply(MathNet.Numerics.Complex,MathNet.Numerics.Complex):MathNet.Numerics.Complex" Analyze="True" />
          <Member Name="op_Multiply(MathNet.Numerics.Complex,System.Double):MathNet.Numerics.Complex" Analyze="True" />
          <Member Name="op_Multiply(System.Double,MathNet.Numerics.Complex):MathNet.Numerics.Complex" Analyze="True" />
          <Member Name="op_Subtraction(MathNet.Numerics.Complex,MathNet.Numerics.Complex):MathNet.Numerics.Complex" Analyze="True" />
          <Member Name="op_Subtraction(MathNet.Numerics.Complex,System.Double):MathNet.Numerics.Complex" Analyze="True" />
          <Member Name="op_Subtraction(System.Double,MathNet.Numerics.Complex):MathNet.Numerics.Complex" Analyze="True" />
          <Member Name="op_UnaryNegation(MathNet.Numerics.Complex):MathNet.Numerics.Complex" Analyze="True" />
          <Member Name="op_UnaryPlus(MathNet.Numerics.Complex):MathNet.Numerics.Complex" Analyze="True" />
          <Member Name="Parse(System.String):MathNet.Numerics.Complex" Analyze="True" />
          <Member Name="Parse(System.String,System.Globalization.NumberFormatInfo):MathNet.Numerics.Complex" Analyze="True" />
          <Member Name="Power(MathNet.Numerics.Complex):MathNet.Numerics.Complex" Analyze="True" />
          <Member Name="real" Analyze="True" />
          <Member Name="Real" Analyze="True">
           <Accessors>
            <Accessor Name="get_Real():System.Double" Analyze="True" />
            <Accessor Name="set_Real(System.Double):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="realImaginaryComparer" Analyze="True" />
          <Member Name="RealImaginaryComparer" Analyze="True">
           <Accessors>
            <Accessor Name="get_RealImaginaryComparer():System.Collections.IComparer" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Root(MathNet.Numerics.Complex):MathNet.Numerics.Complex" Analyze="True" />
          <Member Name="Secant():MathNet.Numerics.Complex" Analyze="True" />
          <Member Name="Sine():MathNet.Numerics.Complex" Analyze="True" />
          <Member Name="Square():MathNet.Numerics.Complex" Analyze="True" />
          <Member Name="SquareRoot():MathNet.Numerics.Complex" Analyze="True" />
          <Member Name="Tangent():MathNet.Numerics.Complex" Analyze="True" />
          <Member Name="ToString():System.String" Analyze="True" />
          <Member Name="ToString(System.Globalization.NumberFormatInfo):System.String" Analyze="True" />
          <Member Name="Zero" Analyze="True">
           <Accessors>
            <Accessor Name="get_Zero():MathNet.Numerics.Complex" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="Complex+ArgumentModulusLexComparer" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="Compare(System.Object,System.Object):System.Int32" Analyze="True" />
         </Members>
        </Type>
        <Type Name="Complex+ComplexParser" Analyze="True">
         <Members>
          <Member Name=".ctor(System.String,System.Globalization.NumberFormatInfo)" Analyze="True" />
          <Member Name="complex" Analyze="True" />
          <Member Name="Complex" Analyze="True">
           <Accessors>
            <Accessor Name="get_Complex():MathNet.Numerics.Complex" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Consume():System.Char" Analyze="True" />
          <Member Name="cursor" Analyze="True" />
          <Member Name="Imaginary" Analyze="True">
           <Accessors>
            <Accessor Name="get_Imaginary():System.Double" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="IsDecimal(System.Char):System.Boolean" Analyze="True" />
          <Member Name="IsE(System.Char):System.Boolean" Analyze="True" />
          <Member Name="IsGroup(System.Char):System.Boolean" Analyze="True" />
          <Member Name="IsI(System.Char):System.Boolean" Analyze="True" />
          <Member Name="IsMult(System.Char):System.Boolean" Analyze="True" />
          <Member Name="IsNegativeSign(System.Char):System.Boolean" Analyze="True" />
          <Member Name="IsNotWhiteSpace(System.Char):System.Boolean" Analyze="True" />
          <Member Name="IsNumber(System.Char):System.Boolean" Analyze="True" />
          <Member Name="IsSign(System.Char):System.Boolean" Analyze="True" />
          <Member Name="LookAheadCharacter" Analyze="True">
           <Accessors>
            <Accessor Name="get_LookAheadCharacter():System.Char" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="LookAheadCharacterOrNull" Analyze="True">
           <Accessors>
            <Accessor Name="get_LookAheadCharacterOrNull():System.Char" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="numberFormat" Analyze="True" />
          <Member Name="Real" Analyze="True">
           <Accessors>
            <Accessor Name="get_Real():System.Double" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ScanComplex():MathNet.Numerics.Complex" Analyze="True" />
          <Member Name="ScanComplexNumberPart():MathNet.Numerics.Complex" Analyze="True" />
          <Member Name="ScanInteger(System.Text.StringBuilder):System.Void" Analyze="True" />
          <Member Name="ScanNumber():System.Double" Analyze="True" />
          <Member Name="ScanSignedComplexNumberPart():MathNet.Numerics.Complex" Analyze="True" />
          <Member Name="ScanSkipWhitespace():System.Void" Analyze="True" />
          <Member Name="source" Analyze="True" />
         </Members>
        </Type>
        <Type Name="Complex+ModulusArgumentLexComparer" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="Compare(System.Object,System.Object):System.Int32" Analyze="True" />
         </Members>
        </Type>
        <Type Name="Complex+RealImaginaryLexComparer" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="Compare(System.Object,System.Object):System.Int32" Analyze="True" />
         </Members>
        </Type>
        <Type Name="Constants" Analyze="True">
         <Members>
          <Member Name="Catalan" Analyze="True" />
          <Member Name="Degree" Analyze="True" />
          <Member Name="E" Analyze="True" />
          <Member Name="EulerGamma" Analyze="True" />
          <Member Name="Glaisher" Analyze="True" />
          <Member Name="GoldenRatio" Analyze="True" />
          <Member Name="Grad" Analyze="True" />
          <Member Name="HalfSqrt3" Analyze="True" />
          <Member Name="InvE" Analyze="True" />
          <Member Name="InvPi" Analyze="True" />
          <Member Name="InvSqrt2Pi" Analyze="True" />
          <Member Name="InvSqrtPi" Analyze="True" />
          <Member Name="Khinchin" Analyze="True" />
          <Member Name="Ln10" Analyze="True" />
          <Member Name="Ln2" Analyze="True" />
          <Member Name="LnPi" Analyze="True" />
          <Member Name="Log10E" Analyze="True" />
          <Member Name="Log2E" Analyze="True" />
          <Member Name="Pi" Analyze="True" />
          <Member Name="Pi_2" Analyze="True" />
          <Member Name="Pi_4" Analyze="True" />
          <Member Name="Sqrt1_2" Analyze="True" />
          <Member Name="Sqrt2" Analyze="True" />
          <Member Name="Sqrt2Pi" Analyze="True" />
          <Member Name="SqrtE" Analyze="True" />
          <Member Name="SqrtPi" Analyze="True" />
          <Member Name="TwoInvPi" Analyze="True" />
          <Member Name="TwoInvSqrtPi" Analyze="True" />
         </Members>
        </Type>
        <Type Name="FloatingPoint64" Analyze="True">
         <Members>
          <Member Name="float64" Analyze="True" />
          <Member Name="signed64" Analyze="True" />
          <Member Name="unsigned64" Analyze="True" />
         </Members>
        </Type>
        <Type Name="Fn" Analyze="True">
         <Members>
          <Member Name=".cctor()" Analyze="True" />
          <Member Name="Beta(System.Double,System.Double):System.Double" Analyze="True" />
          <Member Name="BetaLn(System.Double,System.Double):System.Double" Analyze="True" />
          <Member Name="BetaRegularized(System.Double,System.Double,System.Double):System.Double" Analyze="True" />
          <Member Name="BinomialCoefficient(System.Int32,System.Int32):System.Double" Analyze="True" />
          <Member Name="BinomialCoefficientLn(System.Int32,System.Int32):System.Double" Analyze="True" />
          <Member Name="CeilingToPowerOf2(System.Int32):System.Int32" Analyze="True" />
          <Member Name="Erf(System.Double):System.Double" Analyze="True" />
          <Member Name="erfinv_a" Analyze="True" />
          <Member Name="erfinv_b" Analyze="True" />
          <Member Name="erfinv_c" Analyze="True" />
          <Member Name="erfinv_d" Analyze="True" />
          <Member Name="ErfInverse(System.Double):System.Double" Analyze="True" />
          <Member Name="Factorial(System.Int32):System.Double" Analyze="True" />
          <Member Name="FactorialLn(System.Int32):System.Double" Analyze="True" />
          <Member Name="factorialLnCache" Analyze="True" />
          <Member Name="FactorialLnCacheSize" Analyze="True" />
          <Member Name="factorialPrecomp" Analyze="True" />
          <Member Name="FactorialPrecompSize" Analyze="True" />
          <Member Name="FloorToPowerOf2(System.Int32):System.Int32" Analyze="True" />
          <Member Name="GammaLn(System.Double):System.Double" Analyze="True" />
          <Member Name="GammaRegularized(System.Double,System.Double):System.Double" Analyze="True" />
          <Member Name="Gcd(System.Int64,System.Int64):System.Int64" Analyze="True" />
          <Member Name="Gcd(System.Int64,System.Int64,System.Int64&amp;,System.Int64&amp;):System.Int64" Analyze="True" />
          <Member Name="Hypot(System.Double,System.Double):System.Double" Analyze="True" />
          <Member Name="IncompleteBetaRegularized(System.Double,System.Double,System.Double):System.Double" Analyze="True" />
          <Member Name="IncompleteGammaRegularized(System.Double,System.Double):System.Double" Analyze="True" />
          <Member Name="IntLog2(System.Int32):System.Int32" Analyze="True" />
          <Member Name="IntPow(System.Int64,System.UInt32):System.Int64" Analyze="True" />
          <Member Name="IntPow2(System.Int32):System.Int32" Analyze="True" />
          <Member Name="Lcm(System.Int64,System.Int64):System.Int64" Analyze="True" />
         </Members>
        </Type>
        <Type Name="IRealFunction" Analyze="True">
         <Members>
          <Member Name="ValueOf(System.Double):System.Double" Analyze="True" />
         </Members>
        </Type>
        <Type Name="ISet`1" Analyze="True">
         <Members>
          <Member Name="AddDistinct(T):System.Void" Analyze="True" />
          <Member Name="AddRange(System.Collections.Generic.IEnumerable`1&lt;T&gt;):System.Void" Analyze="True" />
          <Member Name="AddRangeDistinct(System.Collections.Generic.IEnumerable`1&lt;T&gt;):System.Void" Analyze="True" />
          <Member Name="ConvertAll(System.Converter`2&lt;T,TOutput&gt;):MathNet.Numerics.Set`1&lt;TOutput&gt;" Analyze="True" />
          <Member Name="Exists(System.Predicate`1&lt;T&gt;):System.Boolean" Analyze="True" />
          <Member Name="Exists(System.Predicate`1&lt;T&gt;,T&amp;):System.Boolean" Analyze="True" />
          <Member Name="Find(System.Predicate`1&lt;T&gt;):T" Analyze="True" />
          <Member Name="FindAll(System.Predicate`1&lt;T&gt;):MathNet.Numerics.Set`1&lt;T&gt;" Analyze="True" />
          <Member Name="FindIndex(System.Int32,System.Int32,System.Predicate`1&lt;T&gt;):System.Int32" Analyze="True" />
          <Member Name="FindIndex(System.Int32,System.Predicate`1&lt;T&gt;):System.Int32" Analyze="True" />
          <Member Name="FindIndex(System.Predicate`1&lt;T&gt;):System.Int32" Analyze="True" />
          <Member Name="FindLast(System.Predicate`1&lt;T&gt;):T" Analyze="True" />
          <Member Name="FindLastIndex(System.Int32,System.Int32,System.Predicate`1&lt;T&gt;):System.Int32" Analyze="True" />
          <Member Name="FindLastIndex(System.Int32,System.Predicate`1&lt;T&gt;):System.Int32" Analyze="True" />
          <Member Name="FindLastIndex(System.Predicate`1&lt;T&gt;):System.Int32" Analyze="True" />
          <Member Name="ForEach(System.Action`1&lt;T&gt;):System.Void" Analyze="True" />
          <Member Name="HasEqualElements(System.Collections.Generic.IEnumerable`1&lt;T&gt;):System.Boolean" Analyze="True" />
          <Member Name="IsReadonly" Analyze="True">
           <Accessors>
            <Accessor Name="get_IsReadonly():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="IsSubset(System.Collections.Generic.IEnumerable`1&lt;T&gt;):System.Boolean" Analyze="True" />
          <Member Name="IsSuperset(System.Collections.Generic.IEnumerable`1&lt;T&gt;):System.Boolean" Analyze="True" />
          <Member Name="LastIndexOf(T):System.Int32" Analyze="True" />
          <Member Name="RemoveAll(System.Predicate`1&lt;T&gt;):System.Int32" Analyze="True" />
          <Member Name="RemoveDuplicates():System.Void" Analyze="True" />
          <Member Name="Sort(System.Collections.Generic.IComparer`1&lt;T&gt;):System.Void" Analyze="True" />
          <Member Name="Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer`1&lt;T&gt;):System.Void" Analyze="True" />
          <Member Name="ToArray():T[]" Analyze="True" />
          <Member Name="TrueForAll(System.Predicate`1&lt;T&gt;):System.Boolean" Analyze="True" />
         </Members>
        </Type>
        <Type Name="Natural" Analyze="True">
         <Members>
          <Member Name=".ctor(System.UInt32)" Analyze="True" />
          <Member Name=".ctor(System.UInt32,System.UInt32[])" Analyze="True" />
          <Member Name=".ctor(System.UInt32[])" Analyze="True" />
          <Member Name="_bound" Analyze="True" />
          <Member Name="_bound32" Analyze="True" />
          <Member Name="_bound64" Analyze="True" />
          <Member Name="_coeff" Analyze="True" />
          <Member Name="_radix" Analyze="True" />
          <Member Name="_radixBits" Analyze="True" />
          <Member Name="Add(MathNet.Numerics.Natural):MathNet.Numerics.Natural" Analyze="True" />
          <Member Name="Add(MathNet.Numerics.Natural,System.UInt32):MathNet.Numerics.Natural" Analyze="True" />
          <Member Name="AddCoefficientInplace(System.UInt64,System.UInt32):System.Void" Analyze="True" />
          <Member Name="CompareTo(MathNet.Numerics.Natural):System.Int32" Analyze="True" />
          <Member Name="Degree" Analyze="True">
           <Accessors>
            <Accessor Name="get_Degree():System.UInt32" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Equals(MathNet.Numerics.Natural):System.Boolean" Analyze="True" />
          <Member Name="ExtendCapacity(System.UInt32):System.Void" Analyze="True" />
          <Member Name="From(System.UInt32):MathNet.Numerics.Natural" Analyze="True" />
          <Member Name="From(System.UInt64):MathNet.Numerics.Natural" Analyze="True" />
          <Member Name="IsZero" Analyze="True">
           <Accessors>
            <Accessor Name="get_IsZero():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Item[System.UInt32]" Analyze="True">
           <Accessors>
            <Accessor Name="get_Item(System.UInt32):System.UInt32" Analyze="True" />
            <Accessor Name="set_Item(System.UInt32,System.UInt32):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Max(MathNet.Numerics.Natural,MathNet.Numerics.Natural):MathNet.Numerics.Natural" Analyze="True" />
          <Member Name="Min(MathNet.Numerics.Natural,MathNet.Numerics.Natural):MathNet.Numerics.Natural" Analyze="True" />
          <Member Name="Multiply(MathNet.Numerics.Natural):MathNet.Numerics.Natural" Analyze="True" />
          <Member Name="Multiply(System.UInt32):MathNet.Numerics.Natural" Analyze="True" />
          <Member Name="MultiplyLarge(MathNet.Numerics.Natural):MathNet.Numerics.Natural" Analyze="True" />
          <Member Name="MultiplySmall(MathNet.Numerics.Natural):MathNet.Numerics.Natural" Analyze="True" />
          <Member Name="Normalize():System.Void" Analyze="True" />
          <Member Name="One" Analyze="True">
           <Accessors>
            <Accessor Name="get_One():MathNet.Numerics.Natural" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="op_Addition(MathNet.Numerics.Natural,MathNet.Numerics.Natural):MathNet.Numerics.Natural" Analyze="True" />
          <Member Name="op_GreaterThan(MathNet.Numerics.Natural,MathNet.Numerics.Natural):System.Boolean" Analyze="True" />
          <Member Name="op_GreaterThanOrEqual(MathNet.Numerics.Natural,MathNet.Numerics.Natural):System.Boolean" Analyze="True" />
          <Member Name="op_LessThan(MathNet.Numerics.Natural,MathNet.Numerics.Natural):System.Boolean" Analyze="True" />
          <Member Name="op_LessThanOrEqual(MathNet.Numerics.Natural,MathNet.Numerics.Natural):System.Boolean" Analyze="True" />
          <Member Name="op_Multiply(MathNet.Numerics.Natural,MathNet.Numerics.Natural):MathNet.Numerics.Natural" Analyze="True" />
          <Member Name="op_Subtraction(MathNet.Numerics.Natural,MathNet.Numerics.Natural):MathNet.Numerics.Natural" Analyze="True" />
          <Member Name="Radix" Analyze="True">
           <Accessors>
            <Accessor Name="get_Radix():System.UInt64" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Restrict(System.UInt32):MathNet.Numerics.Natural" Analyze="True" />
          <Member Name="ShiftDown(System.UInt32):MathNet.Numerics.Natural" Analyze="True" />
          <Member Name="ShiftUp(System.UInt32):MathNet.Numerics.Natural" Analyze="True" />
          <Member Name="Subtract(MathNet.Numerics.Natural):MathNet.Numerics.Natural" Analyze="True" />
          <Member Name="Subtract(MathNet.Numerics.Natural,System.Boolean&amp;):MathNet.Numerics.Natural" Analyze="True" />
          <Member Name="Subtract(MathNet.Numerics.Natural,System.UInt32,System.Boolean&amp;):MathNet.Numerics.Natural" Analyze="True" />
          <Member Name="SubtractCoefficientInplace(System.UInt64,System.UInt32):System.Void" Analyze="True" />
          <Member Name="SubtractCoefficientInplace(System.UInt64,System.UInt32,System.Boolean&amp;):System.Void" Analyze="True" />
          <Member Name="Two" Analyze="True">
           <Accessors>
            <Accessor Name="get_Two():MathNet.Numerics.Natural" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Zero" Analyze="True">
           <Accessors>
            <Accessor Name="get_Zero():MathNet.Numerics.Natural" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="Number" Analyze="True">
         <Members>
          <Member Name=".cctor()" Analyze="True" />
          <Member Name="AlmostEqual(System.Double,System.Double):System.Boolean" Analyze="True" />
          <Member Name="AlmostEqual(System.Double,System.Double,System.Double):System.Boolean" Analyze="True" />
          <Member Name="AlmostEqual(System.Double,System.Double,System.Int32):System.Boolean" Analyze="True" />
          <Member Name="AlmostEqual(System.Double,System.Double,System.UInt64):System.Boolean" Analyze="True" />
          <Member Name="AlmostEqual(System.Double[],System.Double[]):System.Boolean" Analyze="True" />
          <Member Name="AlmostEqualNorm(System.Double,System.Double,System.Double):System.Boolean" Analyze="True" />
          <Member Name="AlmostEqualNorm(System.Double,System.Double,System.Double,System.Double):System.Boolean" Analyze="True" />
          <Member Name="Decrement(System.Double):System.Double" Analyze="True" />
          <Member Name="DefaultRelativeAccuracy" Analyze="True" />
          <Member Name="EpsilonOf(System.Double):System.Double" Analyze="True" />
          <Member Name="Increment(System.Double):System.Double" Analyze="True" />
          <Member Name="NumbersBetween(System.Double,System.Double):System.UInt64" Analyze="True" />
          <Member Name="PositiveEpsilonOf(System.Double):System.Double" Analyze="True" />
          <Member Name="PositiveRelativeAccuracy" Analyze="True" />
          <Member Name="RelativeAccuracy" Analyze="True" />
          <Member Name="SignedMagnitudeToTwosComplementInt64(System.Int64):System.Int64" Analyze="True" />
          <Member Name="SignedMagnitudeToTwosComplementUInt64(System.Int64):System.UInt64" Analyze="True" />
          <Member Name="SmallestNumberGreaterThanZero" Analyze="True" />
          <Member Name="ToLexicographicalOrderedInt64(System.Double):System.Int64" Analyze="True" />
          <Member Name="ToLexicographicalOrderedUInt64(System.Double):System.UInt64" Analyze="True" />
         </Members>
        </Type>
        <Type Name="Polynomial" Analyze="True">
         <Members>
          <Member Name=".ctor(MathNet.Numerics.Polynomial)" Analyze="True" />
          <Member Name=".ctor(System.Double[])" Analyze="True" />
          <Member Name=".ctor(System.Int32)" Analyze="True" />
          <Member Name="AddInplace(MathNet.Numerics.Polynomial):System.Void" Analyze="True" />
          <Member Name="AddInplace(System.Double):System.Void" Analyze="True" />
          <Member Name="Clone():MathNet.Numerics.Polynomial" Analyze="True" />
          <Member Name="coefficients" Analyze="True" />
          <Member Name="CompareTo(MathNet.Numerics.Polynomial):System.Int32" Analyze="True" />
          <Member Name="CompareTo(System.Object):System.Int32" Analyze="True" />
          <Member Name="Divide(MathNet.Numerics.Polynomial):MathNet.Numerics.Rational" Analyze="True" />
          <Member Name="DivideInplace(System.Double):System.Void" Analyze="True" />
          <Member Name="DivideLinearInplace(System.Double,System.Double,System.Double&amp;):System.Void" Analyze="True" />
          <Member Name="DivideShiftInplace(System.Int32,System.Double[]&amp;):System.Void" Analyze="True" />
          <Member Name="DivideSyntheticInplace(System.Double,System.Double&amp;):System.Void" Analyze="True" />
          <Member Name="EnsureSupportForOrder(System.Int32):System.Void" Analyze="True" />
          <Member Name="Equals(MathNet.Numerics.Polynomial):System.Boolean" Analyze="True" />
          <Member Name="Equals(MathNet.Numerics.Polynomial,MathNet.Numerics.Polynomial):System.Boolean" Analyze="True" />
          <Member Name="Equals(System.Object):System.Boolean" Analyze="True" />
          <Member Name="Evaluate(System.Double):System.Double" Analyze="True" />
          <Member Name="Evaluate(System.Double,System.Double&amp;):System.Double" Analyze="True" />
          <Member Name="Evaluate(System.Double,System.Int32):System.Double[]" Analyze="True" />
          <Member Name="FindOrder(System.Double[]):System.Int32" Analyze="True" />
          <Member Name="GetHashCode():System.Int32" Analyze="True" />
          <Member Name="Item[System.Int32]" Analyze="True">
           <Accessors>
            <Accessor Name="get_Item(System.Int32):System.Double" Analyze="True" />
            <Accessor Name="set_Item(System.Int32,System.Double):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Multiply(MathNet.Numerics.Polynomial):MathNet.Numerics.Polynomial" Analyze="True" />
          <Member Name="MultiplyInplace(System.Double):System.Void" Analyze="True" />
          <Member Name="MultiplyKaratsuba(System.Double[],System.Double[],System.Int32,System.Int32,System.Int32,System.Int32):MathNet.Numerics.Polynomial" Analyze="True" />
          <Member Name="MultiplyLinearInplace(System.Double,System.Double):System.Void" Analyze="True" />
          <Member Name="MultiplyShiftInplace(System.Int32):System.Void" Analyze="True" />
          <Member Name="MultiplySlow(MathNet.Numerics.Polynomial):MathNet.Numerics.Polynomial" Analyze="True" />
          <Member Name="MultiplySyntheticInplace(System.Double):System.Void" Analyze="True" />
          <Member Name="NegateInplace():System.Void" Analyze="True" />
          <Member Name="Normalize():System.Void" Analyze="True" />
          <Member Name="NormalizeOrder():System.Void" Analyze="True" />
          <Member Name="op_Addition(MathNet.Numerics.Polynomial,MathNet.Numerics.Polynomial):MathNet.Numerics.Polynomial" Analyze="True" />
          <Member Name="op_Addition(MathNet.Numerics.Polynomial,System.Double):MathNet.Numerics.Polynomial" Analyze="True" />
          <Member Name="op_Addition(System.Double,MathNet.Numerics.Polynomial):MathNet.Numerics.Polynomial" Analyze="True" />
          <Member Name="op_Division(MathNet.Numerics.Polynomial,System.Double):MathNet.Numerics.Polynomial" Analyze="True" />
          <Member Name="op_Equality(MathNet.Numerics.Polynomial,MathNet.Numerics.Polynomial):System.Boolean" Analyze="True" />
          <Member Name="op_GreaterThan(MathNet.Numerics.Polynomial,MathNet.Numerics.Polynomial):System.Boolean" Analyze="True" />
          <Member Name="op_GreaterThanOrEqual(MathNet.Numerics.Polynomial,MathNet.Numerics.Polynomial):System.Boolean" Analyze="True" />
          <Member Name="op_Inequality(MathNet.Numerics.Polynomial,MathNet.Numerics.Polynomial):System.Boolean" Analyze="True" />
          <Member Name="op_LessThan(MathNet.Numerics.Polynomial,MathNet.Numerics.Polynomial):System.Boolean" Analyze="True" />
          <Member Name="op_LessThanOrEqual(MathNet.Numerics.Polynomial,MathNet.Numerics.Polynomial):System.Boolean" Analyze="True" />
          <Member Name="op_Multiply(MathNet.Numerics.Polynomial,MathNet.Numerics.Polynomial):MathNet.Numerics.Polynomial" Analyze="True" />
          <Member Name="op_Multiply(MathNet.Numerics.Polynomial,System.Double):MathNet.Numerics.Polynomial" Analyze="True" />
          <Member Name="op_Multiply(System.Double,MathNet.Numerics.Polynomial):MathNet.Numerics.Polynomial" Analyze="True" />
          <Member Name="op_Subtraction(MathNet.Numerics.Polynomial,MathNet.Numerics.Polynomial):MathNet.Numerics.Polynomial" Analyze="True" />
          <Member Name="op_Subtraction(MathNet.Numerics.Polynomial,System.Double):MathNet.Numerics.Polynomial" Analyze="True" />
          <Member Name="op_Subtraction(System.Double,MathNet.Numerics.Polynomial):MathNet.Numerics.Polynomial" Analyze="True" />
          <Member Name="op_UnaryNegation(MathNet.Numerics.Polynomial):MathNet.Numerics.Polynomial" Analyze="True" />
          <Member Name="op_UnaryPlus(MathNet.Numerics.Polynomial):MathNet.Numerics.Polynomial" Analyze="True" />
          <Member Name="order" Analyze="True" />
          <Member Name="Order" Analyze="True">
           <Accessors>
            <Accessor Name="get_Order():System.Int32" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ResizeDouble():System.Void" Analyze="True" />
          <Member Name="ResizeOptimalForOrder(System.Int32):System.Void" Analyze="True" />
          <Member Name="Size" Analyze="True">
           <Accessors>
            <Accessor Name="get_Size():System.Int32" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="SizeOfOrder(System.Int32):System.Int32" Analyze="True" />
          <Member Name="SubtractInplace(MathNet.Numerics.Polynomial):System.Void" Analyze="True" />
          <Member Name="SubtractInplace(System.Double):System.Void" Analyze="True" />
          <Member Name="System.ICloneable.Clone():System.Object" Analyze="True" />
          <Member Name="ToString():System.String" Analyze="True" />
          <Member Name="ToString(System.String):System.String" Analyze="True" />
         </Members>
        </Type>
        <Type Name="Quaternion" Analyze="True">
         <Members>
          <Member Name=".ctor(System.Double,System.Double,System.Double,System.Double)" Analyze="True" />
          <Member Name=".ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)" Analyze="True" />
          <Member Name="Abs" Analyze="True">
           <Accessors>
            <Accessor Name="get_Abs():System.Double" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Add(MathNet.Numerics.Quaternion):MathNet.Numerics.Quaternion" Analyze="True" />
          <Member Name="Add(System.Double):MathNet.Numerics.Quaternion" Analyze="True" />
          <Member Name="Arg" Analyze="True">
           <Accessors>
            <Accessor Name="get_Arg():System.Double" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Clone():System.Object" Analyze="True" />
          <Member Name="CompareTo(System.Object):System.Int32" Analyze="True" />
          <Member Name="Conjugate():MathNet.Numerics.Quaternion" Analyze="True" />
          <Member Name="Distance(MathNet.Numerics.Quaternion,MathNet.Numerics.Quaternion):System.Double" Analyze="True" />
          <Member Name="Divide(MathNet.Numerics.Quaternion):MathNet.Numerics.Quaternion" Analyze="True" />
          <Member Name="Divide(System.Double):MathNet.Numerics.Quaternion" Analyze="True" />
          <Member Name="Exp():MathNet.Numerics.Quaternion" Analyze="True" />
          <Member Name="ImagX" Analyze="True">
           <Accessors>
            <Accessor Name="get_ImagX():System.Double" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ImagY" Analyze="True">
           <Accessors>
            <Accessor Name="get_ImagY():System.Double" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ImagZ" Analyze="True">
           <Accessors>
            <Accessor Name="get_ImagZ():System.Double" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Inverse():MathNet.Numerics.Quaternion" Analyze="True" />
          <Member Name="IsUnitQuaternion" Analyze="True">
           <Accessors>
            <Accessor Name="get_IsUnitQuaternion():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Lg():MathNet.Numerics.Quaternion" Analyze="True" />
          <Member Name="Ln():MathNet.Numerics.Quaternion" Analyze="True" />
          <Member Name="Log(System.Double):MathNet.Numerics.Quaternion" Analyze="True" />
          <Member Name="Multiply(MathNet.Numerics.Quaternion):MathNet.Numerics.Quaternion" Analyze="True" />
          <Member Name="Multiply(System.Double):MathNet.Numerics.Quaternion" Analyze="True" />
          <Member Name="Negate():MathNet.Numerics.Quaternion" Analyze="True" />
          <Member Name="Norm" Analyze="True">
           <Accessors>
            <Accessor Name="get_Norm():System.Double" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="op_Addition(MathNet.Numerics.Quaternion,MathNet.Numerics.Quaternion):MathNet.Numerics.Quaternion" Analyze="True" />
          <Member Name="op_Addition(MathNet.Numerics.Quaternion,System.Double):MathNet.Numerics.Quaternion" Analyze="True" />
          <Member Name="op_Division(MathNet.Numerics.Quaternion,MathNet.Numerics.Quaternion):MathNet.Numerics.Quaternion" Analyze="True" />
          <Member Name="op_Division(MathNet.Numerics.Quaternion,System.Double):MathNet.Numerics.Quaternion" Analyze="True" />
          <Member Name="op_ExclusiveOr(MathNet.Numerics.Quaternion,MathNet.Numerics.Quaternion):MathNet.Numerics.Quaternion" Analyze="True" />
          <Member Name="op_ExclusiveOr(MathNet.Numerics.Quaternion,System.Double):MathNet.Numerics.Quaternion" Analyze="True" />
          <Member Name="op_Implicit(System.Double):MathNet.Numerics.Quaternion" Analyze="True" />
          <Member Name="op_Multiply(MathNet.Numerics.Quaternion,MathNet.Numerics.Quaternion):MathNet.Numerics.Quaternion" Analyze="True" />
          <Member Name="op_Multiply(MathNet.Numerics.Quaternion,System.Double):MathNet.Numerics.Quaternion" Analyze="True" />
          <Member Name="op_Subtraction(MathNet.Numerics.Quaternion,MathNet.Numerics.Quaternion):MathNet.Numerics.Quaternion" Analyze="True" />
          <Member Name="op_Subtraction(MathNet.Numerics.Quaternion,System.Double):MathNet.Numerics.Quaternion" Analyze="True" />
          <Member Name="op_UnaryNegation(MathNet.Numerics.Quaternion):MathNet.Numerics.Quaternion" Analyze="True" />
          <Member Name="op_UnaryPlus(MathNet.Numerics.Quaternion):MathNet.Numerics.Quaternion" Analyze="True" />
          <Member Name="Pow(MathNet.Numerics.Quaternion):MathNet.Numerics.Quaternion" Analyze="True" />
          <Member Name="Pow(System.Double):MathNet.Numerics.Quaternion" Analyze="True" />
          <Member Name="qabs" Analyze="True" />
          <Member Name="qarg" Analyze="True" />
          <Member Name="qnorm" Analyze="True" />
          <Member Name="qw" Analyze="True" />
          <Member Name="qx" Analyze="True" />
          <Member Name="qy" Analyze="True" />
          <Member Name="qz" Analyze="True" />
          <Member Name="Real" Analyze="True">
           <Accessors>
            <Accessor Name="get_Real():System.Double" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Scalar():MathNet.Numerics.Quaternion" Analyze="True" />
          <Member Name="Sign():MathNet.Numerics.Quaternion" Analyze="True" />
          <Member Name="Sqr():MathNet.Numerics.Quaternion" Analyze="True" />
          <Member Name="Sqrt():MathNet.Numerics.Quaternion" Analyze="True" />
          <Member Name="Subtract(MathNet.Numerics.Quaternion):MathNet.Numerics.Quaternion" Analyze="True" />
          <Member Name="Subtract(System.Double):MathNet.Numerics.Quaternion" Analyze="True" />
          <Member Name="ToNorm(System.Double,System.Double,System.Double,System.Double):System.Double" Analyze="True" />
          <Member Name="ToUnitQuaternion(System.Double,System.Double,System.Double,System.Double):MathNet.Numerics.Quaternion" Analyze="True" />
          <Member Name="UnitVector():MathNet.Numerics.Quaternion" Analyze="True" />
          <Member Name="Vector():MathNet.Numerics.Quaternion" Analyze="True" />
         </Members>
        </Type>
        <Type Name="Rational" Analyze="True">
         <Members>
          <Member Name=".ctor(MathNet.Numerics.Polynomial,MathNet.Numerics.Polynomial)" Analyze="True" />
          <Member Name=".ctor(MathNet.Numerics.Rational)" Analyze="True" />
          <Member Name=".ctor(System.Double[],System.Double[])" Analyze="True" />
          <Member Name=".ctor(System.Int32,System.Int32)" Analyze="True" />
          <Member Name="Add(MathNet.Numerics.Rational):MathNet.Numerics.Rational" Analyze="True" />
          <Member Name="AddInplace(MathNet.Numerics.Polynomial):System.Void" Analyze="True" />
          <Member Name="AddInplace(System.Double):System.Void" Analyze="True" />
          <Member Name="Clone():MathNet.Numerics.Rational" Analyze="True" />
          <Member Name="CompareTo(MathNet.Numerics.Rational):System.Int32" Analyze="True" />
          <Member Name="CompareTo(System.Object):System.Int32" Analyze="True" />
          <Member Name="denominator" Analyze="True" />
          <Member Name="Denominator" Analyze="True">
           <Accessors>
            <Accessor Name="get_Denominator():MathNet.Numerics.Polynomial" Analyze="True" />
            <Accessor Name="set_Denominator(MathNet.Numerics.Polynomial):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="DenominatorOrder" Analyze="True">
           <Accessors>
            <Accessor Name="get_DenominatorOrder():System.Int32" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Divide(MathNet.Numerics.Polynomial):MathNet.Numerics.Rational" Analyze="True" />
          <Member Name="Divide(MathNet.Numerics.Rational):MathNet.Numerics.Rational" Analyze="True" />
          <Member Name="DivideInplace(System.Double):System.Void" Analyze="True" />
          <Member Name="Equals(MathNet.Numerics.Rational):System.Boolean" Analyze="True" />
          <Member Name="Equals(MathNet.Numerics.Rational,MathNet.Numerics.Rational):System.Boolean" Analyze="True" />
          <Member Name="Equals(System.Object):System.Boolean" Analyze="True" />
          <Member Name="Evaluate(System.Double):System.Double" Analyze="True" />
          <Member Name="GetHashCode():System.Int32" Analyze="True" />
          <Member Name="InvertInplace():System.Void" Analyze="True" />
          <Member Name="Multiply(MathNet.Numerics.Polynomial):MathNet.Numerics.Rational" Analyze="True" />
          <Member Name="Multiply(MathNet.Numerics.Rational):MathNet.Numerics.Rational" Analyze="True" />
          <Member Name="MultiplyInplace(System.Double):System.Void" Analyze="True" />
          <Member Name="NegateInplace():System.Void" Analyze="True" />
          <Member Name="Normalize():System.Void" Analyze="True" />
          <Member Name="numerator" Analyze="True" />
          <Member Name="Numerator" Analyze="True">
           <Accessors>
            <Accessor Name="get_Numerator():MathNet.Numerics.Polynomial" Analyze="True" />
            <Accessor Name="set_Numerator(MathNet.Numerics.Polynomial):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="NumeratorOrder" Analyze="True">
           <Accessors>
            <Accessor Name="get_NumeratorOrder():System.Int32" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="op_Addition(MathNet.Numerics.Polynomial,MathNet.Numerics.Rational):MathNet.Numerics.Rational" Analyze="True" />
          <Member Name="op_Addition(MathNet.Numerics.Rational,MathNet.Numerics.Polynomial):MathNet.Numerics.Rational" Analyze="True" />
          <Member Name="op_Addition(MathNet.Numerics.Rational,MathNet.Numerics.Rational):MathNet.Numerics.Rational" Analyze="True" />
          <Member Name="op_Addition(MathNet.Numerics.Rational,System.Double):MathNet.Numerics.Rational" Analyze="True" />
          <Member Name="op_Addition(System.Double,MathNet.Numerics.Rational):MathNet.Numerics.Rational" Analyze="True" />
          <Member Name="op_Division(MathNet.Numerics.Polynomial,MathNet.Numerics.Rational):MathNet.Numerics.Rational" Analyze="True" />
          <Member Name="op_Division(MathNet.Numerics.Rational,MathNet.Numerics.Polynomial):MathNet.Numerics.Rational" Analyze="True" />
          <Member Name="op_Division(MathNet.Numerics.Rational,MathNet.Numerics.Rational):MathNet.Numerics.Rational" Analyze="True" />
          <Member Name="op_Division(MathNet.Numerics.Rational,System.Double):MathNet.Numerics.Rational" Analyze="True" />
          <Member Name="op_Division(System.Double,MathNet.Numerics.Rational):MathNet.Numerics.Rational" Analyze="True" />
          <Member Name="op_Equality(MathNet.Numerics.Rational,MathNet.Numerics.Rational):System.Boolean" Analyze="True" />
          <Member Name="op_GreaterThan(MathNet.Numerics.Rational,MathNet.Numerics.Rational):System.Boolean" Analyze="True" />
          <Member Name="op_GreaterThanOrEqual(MathNet.Numerics.Rational,MathNet.Numerics.Rational):System.Boolean" Analyze="True" />
          <Member Name="op_Inequality(MathNet.Numerics.Rational,MathNet.Numerics.Rational):System.Boolean" Analyze="True" />
          <Member Name="op_LessThan(MathNet.Numerics.Rational,MathNet.Numerics.Rational):System.Boolean" Analyze="True" />
          <Member Name="op_LessThanOrEqual(MathNet.Numerics.Rational,MathNet.Numerics.Rational):System.Boolean" Analyze="True" />
          <Member Name="op_Multiply(MathNet.Numerics.Polynomial,MathNet.Numerics.Rational):MathNet.Numerics.Rational" Analyze="True" />
          <Member Name="op_Multiply(MathNet.Numerics.Rational,MathNet.Numerics.Polynomial):MathNet.Numerics.Rational" Analyze="True" />
          <Member Name="op_Multiply(MathNet.Numerics.Rational,MathNet.Numerics.Rational):MathNet.Numerics.Rational" Analyze="True" />
          <Member Name="op_Multiply(MathNet.Numerics.Rational,System.Double):MathNet.Numerics.Rational" Analyze="True" />
          <Member Name="op_Multiply(System.Double,MathNet.Numerics.Rational):MathNet.Numerics.Rational" Analyze="True" />
          <Member Name="op_Subtraction(MathNet.Numerics.Polynomial,MathNet.Numerics.Rational):MathNet.Numerics.Rational" Analyze="True" />
          <Member Name="op_Subtraction(MathNet.Numerics.Rational,MathNet.Numerics.Polynomial):MathNet.Numerics.Rational" Analyze="True" />
          <Member Name="op_Subtraction(MathNet.Numerics.Rational,MathNet.Numerics.Rational):MathNet.Numerics.Rational" Analyze="True" />
          <Member Name="op_Subtraction(MathNet.Numerics.Rational,System.Double):MathNet.Numerics.Rational" Analyze="True" />
          <Member Name="op_Subtraction(System.Double,MathNet.Numerics.Rational):MathNet.Numerics.Rational" Analyze="True" />
          <Member Name="op_UnaryNegation(MathNet.Numerics.Rational):MathNet.Numerics.Rational" Analyze="True" />
          <Member Name="op_UnaryPlus(MathNet.Numerics.Rational):MathNet.Numerics.Rational" Analyze="True" />
          <Member Name="Subtract(MathNet.Numerics.Rational):MathNet.Numerics.Rational" Analyze="True" />
          <Member Name="SubtractInplace(MathNet.Numerics.Polynomial):System.Void" Analyze="True" />
          <Member Name="SubtractInplace(System.Double):System.Void" Analyze="True" />
          <Member Name="System.ICloneable.Clone():System.Object" Analyze="True" />
          <Member Name="ToString():System.String" Analyze="True" />
          <Member Name="ToString(System.String):System.String" Analyze="True" />
         </Members>
        </Type>
        <Type Name="ReadOnlySet`1" Analyze="True">
         <Members>
          <Member Name=".ctor(System.Collections.Generic.IList`1&lt;T&gt;)" Analyze="True" />
          <Member Name="ConvertAll(System.Converter`2&lt;T,TOutput&gt;):MathNet.Numerics.Set`1&lt;TOutput&gt;" Analyze="True" />
          <Member Name="CreateNewSet():MathNet.Numerics.Set`1&lt;T&gt;" Analyze="True" />
          <Member Name="Exists(System.Predicate`1&lt;T&gt;):System.Boolean" Analyze="True" />
          <Member Name="Exists(System.Predicate`1&lt;T&gt;,T&amp;):System.Boolean" Analyze="True" />
          <Member Name="Find(System.Predicate`1&lt;T&gt;):T" Analyze="True" />
          <Member Name="FindAll(System.Predicate`1&lt;T&gt;):MathNet.Numerics.Set`1&lt;T&gt;" Analyze="True" />
          <Member Name="FindIndex(System.Int32,System.Int32,System.Predicate`1&lt;T&gt;):System.Int32" Analyze="True" />
          <Member Name="FindIndex(System.Int32,System.Predicate`1&lt;T&gt;):System.Int32" Analyze="True" />
          <Member Name="FindIndex(System.Predicate`1&lt;T&gt;):System.Int32" Analyze="True" />
          <Member Name="FindLast(System.Predicate`1&lt;T&gt;):T" Analyze="True" />
          <Member Name="FindLastIndex(System.Int32,System.Int32,System.Predicate`1&lt;T&gt;):System.Int32" Analyze="True" />
          <Member Name="FindLastIndex(System.Int32,System.Predicate`1&lt;T&gt;):System.Int32" Analyze="True" />
          <Member Name="FindLastIndex(System.Predicate`1&lt;T&gt;):System.Int32" Analyze="True" />
          <Member Name="ForEach(System.Action`1&lt;T&gt;):System.Void" Analyze="True" />
          <Member Name="HasEqualElements(System.Collections.Generic.IEnumerable`1&lt;T&gt;):System.Boolean" Analyze="True" />
          <Member Name="IsReadonly" Analyze="True">
           <Accessors>
            <Accessor Name="get_IsReadonly():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="IsSubset(System.Collections.Generic.IEnumerable`1&lt;T&gt;):System.Boolean" Analyze="True" />
          <Member Name="IsSuperset(System.Collections.Generic.IEnumerable`1&lt;T&gt;):System.Boolean" Analyze="True" />
          <Member Name="LastIndexOf(T):System.Int32" Analyze="True" />
          <Member Name="MathNet.Numerics.ISet&lt;T&gt;.AddDistinct(T):System.Void" Analyze="True" />
          <Member Name="MathNet.Numerics.ISet&lt;T&gt;.AddRange(System.Collections.Generic.IEnumerable`1&lt;T&gt;):System.Void" Analyze="True" />
          <Member Name="MathNet.Numerics.ISet&lt;T&gt;.AddRangeDistinct(System.Collections.Generic.IEnumerable`1&lt;T&gt;):System.Void" Analyze="True" />
          <Member Name="MathNet.Numerics.ISet&lt;T&gt;.RemoveAll(System.Predicate`1&lt;T&gt;):System.Int32" Analyze="True" />
          <Member Name="MathNet.Numerics.ISet&lt;T&gt;.RemoveDuplicates():System.Void" Analyze="True" />
          <Member Name="MathNet.Numerics.ISet&lt;T&gt;.Sort(System.Collections.Generic.IComparer`1&lt;T&gt;):System.Void" Analyze="True" />
          <Member Name="MathNet.Numerics.ISet&lt;T&gt;.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer`1&lt;T&gt;):System.Void" Analyze="True" />
          <Member Name="ToArray():T[]" Analyze="True" />
          <Member Name="TrueForAll(System.Predicate`1&lt;T&gt;):System.Boolean" Analyze="True" />
         </Members>
        </Type>
        <Type Name="SampleList" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name=".ctor(System.Collections.IDictionary)" Analyze="True" />
          <Member Name=".ctor(System.Collections.IDictionary,System.Int32)" Analyze="True" />
          <Member Name=".ctor(System.Int32)" Analyze="True" />
          <Member Name="Add(System.Double,System.Double):System.Void" Analyze="True" />
          <Member Name="AppendMean(System.Int32,System.Double):System.Void" Analyze="True" />
          <Member Name="Capacity" Analyze="True">
           <Accessors>
            <Accessor Name="get_Capacity():System.Int32" Analyze="True" />
            <Accessor Name="set_Capacity(System.Int32):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Clear():System.Void" Analyze="True" />
          <Member Name="Clone():MathNet.Numerics.SampleList" Analyze="True" />
          <Member Name="ContainsT(System.Double):System.Boolean" Analyze="True" />
          <Member Name="ContainsX(System.Double):System.Boolean" Analyze="True" />
          <Member Name="Count" Analyze="True">
           <Accessors>
            <Accessor Name="get_Count():System.Int32" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="SampleAltered" Kind="Event" Analyze="True">
           <Accessors>
            <Accessor Name="add_SampleAltered(System.EventHandler`1&lt;MathNet.Numerics.SampleList+SampleAlteredEventArgs&gt;):System.Void" Analyze="True" />
            <Accessor Name="remove_SampleAltered(System.EventHandler`1&lt;MathNet.Numerics.SampleList+SampleAlteredEventArgs&gt;):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="EnsureCapacity(System.Int32):System.Void" Analyze="True" />
          <Member Name="GetT(System.Int32):System.Double" Analyze="True" />
          <Member Name="GetX(System.Int32):System.Double" Analyze="True" />
          <Member Name="IndexOfT(System.Double):System.Int32" Analyze="True" />
          <Member Name="IndexOfX(System.Double):System.Int32" Analyze="True" />
          <Member Name="Insert(System.Int32,System.Double,System.Double):System.Void" Analyze="True" />
          <Member Name="keyList" Analyze="True" />
          <Member Name="Locate(System.Double):System.Int32" Analyze="True" />
          <Member Name="Locate(System.Double,System.Int32):System.Int32" Analyze="True" />
          <Member Name="LocateBisection(System.Double,System.Int32,System.Int32):System.Int32" Analyze="True" />
          <Member Name="MaxT" Analyze="True">
           <Accessors>
            <Accessor Name="get_MaxT():System.Double" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="MinT" Analyze="True">
           <Accessors>
            <Accessor Name="get_MinT():System.Double" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Remove(System.Double):System.Void" Analyze="True" />
          <Member Name="RemoveAt(System.Int32):System.Void" Analyze="True" />
          <Member Name="SampleAltered" Analyze="True" />
          <Member Name="sampleCount" Analyze="True" />
          <Member Name="sampleT" Analyze="True" />
          <Member Name="sampleX" Analyze="True" />
          <Member Name="SetX(System.Double,System.Double):System.Void" Analyze="True" />
          <Member Name="size" Analyze="True" />
          <Member Name="System.Collections.ICollection.CopyTo(System.Array,System.Int32):System.Void" Analyze="True" />
          <Member Name="System.Collections.ICollection.IsSynchronized" Analyze="True">
           <Accessors>
            <Accessor Name="System.Collections.ICollection.get_IsSynchronized():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="System.Collections.ICollection.SyncRoot" Analyze="True">
           <Accessors>
            <Accessor Name="System.Collections.ICollection.get_SyncRoot():System.Object" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="System.Collections.IDictionary.Add(System.Object,System.Object):System.Void" Analyze="True" />
          <Member Name="System.Collections.IDictionary.Contains(System.Object):System.Boolean" Analyze="True" />
          <Member Name="System.Collections.IDictionary.GetEnumerator():System.Collections.IDictionaryEnumerator" Analyze="True" />
          <Member Name="System.Collections.IDictionary.IsFixedSize" Analyze="True">
           <Accessors>
            <Accessor Name="System.Collections.IDictionary.get_IsFixedSize():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="System.Collections.IDictionary.IsReadOnly" Analyze="True">
           <Accessors>
            <Accessor Name="System.Collections.IDictionary.get_IsReadOnly():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="System.Collections.IDictionary.Item[System.Object]" Analyze="True">
           <Accessors>
            <Accessor Name="System.Collections.IDictionary.get_Item(System.Object):System.Object" Analyze="True" />
            <Accessor Name="System.Collections.IDictionary.set_Item(System.Object,System.Object):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="System.Collections.IDictionary.Keys" Analyze="True">
           <Accessors>
            <Accessor Name="System.Collections.IDictionary.get_Keys():System.Collections.ICollection" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="System.Collections.IDictionary.Remove(System.Object):System.Void" Analyze="True" />
          <Member Name="System.Collections.IDictionary.Values" Analyze="True">
           <Accessors>
            <Accessor Name="System.Collections.IDictionary.get_Values():System.Collections.ICollection" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="System.Collections.IEnumerable.GetEnumerator():System.Collections.IEnumerator" Analyze="True" />
          <Member Name="System.ICloneable.Clone():System.Object" Analyze="True" />
          <Member Name="valueList" Analyze="True" />
         </Members>
        </Type>
        <Type Name="SampleList+KeyList" Analyze="True">
         <Members>
          <Member Name=".ctor(MathNet.Numerics.SampleList)" Analyze="True" />
          <Member Name="Add(System.Object):System.Int32" Analyze="True" />
          <Member Name="Clear():System.Void" Analyze="True" />
          <Member Name="Contains(System.Object):System.Boolean" Analyze="True" />
          <Member Name="CopyTo(System.Array,System.Int32):System.Void" Analyze="True" />
          <Member Name="Count" Analyze="True">
           <Accessors>
            <Accessor Name="get_Count():System.Int32" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="GetEnumerator():System.Collections.IEnumerator" Analyze="True" />
          <Member Name="IndexOf(System.Object):System.Int32" Analyze="True" />
          <Member Name="Insert(System.Int32,System.Object):System.Void" Analyze="True" />
          <Member Name="IsFixedSize" Analyze="True">
           <Accessors>
            <Accessor Name="get_IsFixedSize():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="IsReadOnly" Analyze="True">
           <Accessors>
            <Accessor Name="get_IsReadOnly():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="IsSynchronized" Analyze="True">
           <Accessors>
            <Accessor Name="get_IsSynchronized():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Item[System.Int32]" Analyze="True">
           <Accessors>
            <Accessor Name="get_Item(System.Int32):System.Object" Analyze="True" />
            <Accessor Name="set_Item(System.Int32,System.Object):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Remove(System.Object):System.Void" Analyze="True" />
          <Member Name="RemoveAt(System.Int32):System.Void" Analyze="True" />
          <Member Name="sampleList" Analyze="True" />
          <Member Name="SyncRoot" Analyze="True">
           <Accessors>
            <Accessor Name="get_SyncRoot():System.Object" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="SampleList+SampleAlteredEventArgs" Analyze="True">
         <Members>
          <Member Name=".ctor(System.Double)" Analyze="True" />
          <Member Name="t" Analyze="True" />
          <Member Name="T" Analyze="True">
           <Accessors>
            <Accessor Name="get_T():System.Double" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="SampleList+SampleListEnumerator" Analyze="True">
         <Members>
          <Member Name=".ctor(MathNet.Numerics.SampleList,System.Int32,System.Int32,MathNet.Numerics.SampleList+SampleListEnumerator+EnumerationMode)" Analyze="True" />
          <Member Name="Clone():System.Object" Analyze="True" />
          <Member Name="current" Analyze="True" />
          <Member Name="Current" Analyze="True">
           <Accessors>
            <Accessor Name="get_Current():System.Object" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="endIndex" Analyze="True" />
          <Member Name="Entry" Analyze="True">
           <Accessors>
            <Accessor Name="get_Entry():System.Collections.DictionaryEntry" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="index" Analyze="True" />
          <Member Name="key" Analyze="True" />
          <Member Name="Key" Analyze="True">
           <Accessors>
            <Accessor Name="get_Key():System.Object" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="mode" Analyze="True" />
          <Member Name="MoveNext():System.Boolean" Analyze="True" />
          <Member Name="Reset():System.Void" Analyze="True" />
          <Member Name="sampleList" Analyze="True" />
          <Member Name="startIndex" Analyze="True" />
          <Member Name="value" Analyze="True" />
          <Member Name="Value" Analyze="True">
           <Accessors>
            <Accessor Name="get_Value():System.Object" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="SampleList+SampleListEnumerator+EnumerationMode" Analyze="True">
         <Members>
          <Member Name="DictEntry" Analyze="True" />
          <Member Name="Keys" Analyze="True" />
          <Member Name="value__" Analyze="True" />
          <Member Name="Values" Analyze="True" />
         </Members>
        </Type>
        <Type Name="SampleList+ValueList" Analyze="True">
         <Members>
          <Member Name=".ctor(MathNet.Numerics.SampleList)" Analyze="True" />
          <Member Name="Add(System.Object):System.Int32" Analyze="True" />
          <Member Name="Clear():System.Void" Analyze="True" />
          <Member Name="Contains(System.Object):System.Boolean" Analyze="True" />
          <Member Name="CopyTo(System.Array,System.Int32):System.Void" Analyze="True" />
          <Member Name="Count" Analyze="True">
           <Accessors>
            <Accessor Name="get_Count():System.Int32" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="GetEnumerator():System.Collections.IEnumerator" Analyze="True" />
          <Member Name="IndexOf(System.Object):System.Int32" Analyze="True" />
          <Member Name="Insert(System.Int32,System.Object):System.Void" Analyze="True" />
          <Member Name="IsFixedSize" Analyze="True">
           <Accessors>
            <Accessor Name="get_IsFixedSize():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="IsReadOnly" Analyze="True">
           <Accessors>
            <Accessor Name="get_IsReadOnly():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="IsSynchronized" Analyze="True">
           <Accessors>
            <Accessor Name="get_IsSynchronized():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Item[System.Int32]" Analyze="True">
           <Accessors>
            <Accessor Name="get_Item(System.Int32):System.Object" Analyze="True" />
            <Accessor Name="set_Item(System.Int32,System.Object):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Remove(System.Object):System.Void" Analyze="True" />
          <Member Name="RemoveAt(System.Int32):System.Void" Analyze="True" />
          <Member Name="sampleList" Analyze="True" />
          <Member Name="SyncRoot" Analyze="True">
           <Accessors>
            <Accessor Name="get_SyncRoot():System.Object" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="Set`1" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name=".ctor(System.Collections.Generic.IEnumerable`1&lt;T&gt;)" Analyze="True" />
          <Member Name=".ctor(System.Collections.Generic.IList`1&lt;T&gt;)" Analyze="True" />
          <Member Name=".ctor(System.Int32)" Analyze="True" />
          <Member Name=".ctor(T[])" Analyze="True" />
          <Member Name="AddDistinct(T):System.Void" Analyze="True" />
          <Member Name="AddRange(System.Collections.Generic.IEnumerable`1&lt;T&gt;):System.Void" Analyze="True" />
          <Member Name="AddRangeDistinct(System.Collections.Generic.IEnumerable`1&lt;T&gt;):System.Void" Analyze="True" />
          <Member Name="AsReadOnly" Analyze="True">
           <Accessors>
            <Accessor Name="get_AsReadOnly():MathNet.Numerics.ReadOnlySet`1&lt;T&gt;" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Concatenate(System.Collections.Generic.IEnumerable`1&lt;T&gt;):MathNet.Numerics.Set`1&lt;T&gt;" Analyze="True" />
          <Member Name="Concatenate(System.Collections.Generic.IEnumerable`1&lt;T&gt;,System.Collections.Generic.IEnumerable`1&lt;T&gt;):MathNet.Numerics.Set`1&lt;T&gt;" Analyze="True" />
          <Member Name="ConcatenateInplace(System.Collections.Generic.IEnumerable`1&lt;T&gt;):System.Void" Analyze="True" />
          <Member Name="ConvertAll(System.Converter`2&lt;T,TOutput&gt;):MathNet.Numerics.Set`1&lt;TOutput&gt;" Analyze="True" />
          <Member Name="CreateNewReadOnlyWrapper(System.Collections.Generic.IList`1&lt;T&gt;):MathNet.Numerics.ReadOnlySet`1&lt;T&gt;" Analyze="True" />
          <Member Name="CreateNewSet():MathNet.Numerics.Set`1&lt;T&gt;" Analyze="True" />
          <Member Name="OnSetChanged" Kind="Event" Analyze="True">
           <Accessors>
            <Accessor Name="add_OnSetChanged(System.EventHandler`1&lt;MathNet.Numerics.SetChangedEventArgs`1&lt;T&gt;&gt;):System.Void" Analyze="True" />
            <Accessor Name="remove_OnSetChanged(System.EventHandler`1&lt;MathNet.Numerics.SetChangedEventArgs`1&lt;T&gt;&gt;):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Exists(System.Predicate`1&lt;T&gt;):System.Boolean" Analyze="True" />
          <Member Name="Exists(System.Predicate`1&lt;T&gt;,T&amp;):System.Boolean" Analyze="True" />
          <Member Name="Find(System.Predicate`1&lt;T&gt;):T" Analyze="True" />
          <Member Name="FindAll(System.Predicate`1&lt;T&gt;):MathNet.Numerics.Set`1&lt;T&gt;" Analyze="True" />
          <Member Name="FindIndex(System.Int32,System.Int32,System.Predicate`1&lt;T&gt;):System.Int32" Analyze="True" />
          <Member Name="FindIndex(System.Int32,System.Predicate`1&lt;T&gt;):System.Int32" Analyze="True" />
          <Member Name="FindIndex(System.Predicate`1&lt;T&gt;):System.Int32" Analyze="True" />
          <Member Name="FindLast(System.Predicate`1&lt;T&gt;):T" Analyze="True" />
          <Member Name="FindLastIndex(System.Int32,System.Int32,System.Predicate`1&lt;T&gt;):System.Int32" Analyze="True" />
          <Member Name="FindLastIndex(System.Int32,System.Predicate`1&lt;T&gt;):System.Int32" Analyze="True" />
          <Member Name="FindLastIndex(System.Predicate`1&lt;T&gt;):System.Int32" Analyze="True" />
          <Member Name="ForEach(System.Action`1&lt;T&gt;):System.Void" Analyze="True" />
          <Member Name="HasEqualElements(System.Collections.Generic.IEnumerable`1&lt;T&gt;):System.Boolean" Analyze="True" />
          <Member Name="InsertItem(System.Int32,T):System.Void" Analyze="True" />
          <Member Name="Intersect(System.Collections.Generic.IEnumerable`1&lt;T&gt;):MathNet.Numerics.Set`1&lt;T&gt;" Analyze="True" />
          <Member Name="Intersect(System.Collections.Generic.IEnumerable`1&lt;T&gt;,System.Collections.Generic.IEnumerable`1&lt;T&gt;):MathNet.Numerics.Set`1&lt;T&gt;" Analyze="True" />
          <Member Name="IntersectInplace(System.Collections.Generic.IEnumerable`1&lt;T&gt;):System.Void" Analyze="True" />
          <Member Name="IsReadonly" Analyze="True">
           <Accessors>
            <Accessor Name="get_IsReadonly():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="IsSubset(System.Collections.Generic.IEnumerable`1&lt;T&gt;):System.Boolean" Analyze="True" />
          <Member Name="IsSuperset(System.Collections.Generic.IEnumerable`1&lt;T&gt;):System.Boolean" Analyze="True" />
          <Member Name="LastIndexOf(T):System.Int32" Analyze="True" />
          <Member Name="OnSetChanged" Analyze="True" />
          <Member Name="readonlyWrapper" Analyze="True" />
          <Member Name="RemoveAll(System.Predicate`1&lt;T&gt;):System.Int32" Analyze="True" />
          <Member Name="RemoveDuplicates():System.Void" Analyze="True" />
          <Member Name="RemoveItem(System.Int32):System.Void" Analyze="True" />
          <Member Name="ReplaceRange(System.Collections.Generic.IEnumerable`1&lt;T&gt;):System.Void" Analyze="True" />
          <Member Name="SetItem(System.Int32,T):System.Void" Analyze="True" />
          <Member Name="Sort(System.Collections.Generic.IComparer`1&lt;T&gt;):System.Void" Analyze="True" />
          <Member Name="Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer`1&lt;T&gt;):System.Void" Analyze="True" />
          <Member Name="Subtract(System.Collections.Generic.IEnumerable`1&lt;T&gt;):MathNet.Numerics.Set`1&lt;T&gt;" Analyze="True" />
          <Member Name="Subtract(System.Collections.Generic.IEnumerable`1&lt;T&gt;,System.Collections.Generic.IEnumerable`1&lt;T&gt;):MathNet.Numerics.Set`1&lt;T&gt;" Analyze="True" />
          <Member Name="SubtractInplace(System.Collections.Generic.IEnumerable`1&lt;T&gt;):System.Void" Analyze="True" />
          <Member Name="ToArray():T[]" Analyze="True" />
          <Member Name="TrueForAll(System.Predicate`1&lt;T&gt;):System.Boolean" Analyze="True" />
          <Member Name="Union(System.Collections.Generic.IEnumerable`1&lt;T&gt;):MathNet.Numerics.Set`1&lt;T&gt;" Analyze="True" />
          <Member Name="Union(System.Collections.Generic.IEnumerable`1&lt;T&gt;,System.Collections.Generic.IEnumerable`1&lt;T&gt;):MathNet.Numerics.Set`1&lt;T&gt;" Analyze="True" />
          <Member Name="UnionInplace(System.Collections.Generic.IEnumerable`1&lt;T&gt;):System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="SetChangedEventArgs`1" Analyze="True">
         <Members>
          <Member Name=".ctor(MathNet.Numerics.SetElementOperation,T,System.Int32,System.Int32)" Analyze="True" />
          <Member Name="Added(T,System.Int32):MathNet.Numerics.SetChangedEventArgs`1&lt;T&gt;" Analyze="True" />
          <Member Name="element" Analyze="True" />
          <Member Name="Element" Analyze="True">
           <Accessors>
            <Accessor Name="get_Element():T" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ElementAdded" Analyze="True">
           <Accessors>
            <Accessor Name="get_ElementAdded():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ElementMoved" Analyze="True">
           <Accessors>
            <Accessor Name="get_ElementMoved():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ElementRemoved" Analyze="True">
           <Accessors>
            <Accessor Name="get_ElementRemoved():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="indexAfter" Analyze="True" />
          <Member Name="IndexAfter" Analyze="True">
           <Accessors>
            <Accessor Name="get_IndexAfter():System.Int32" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="indexBefore" Analyze="True" />
          <Member Name="IndexBefore" Analyze="True">
           <Accessors>
            <Accessor Name="get_IndexBefore():System.Int32" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Moved(T,System.Int32,System.Int32):MathNet.Numerics.SetChangedEventArgs`1&lt;T&gt;" Analyze="True" />
          <Member Name="op" Analyze="True" />
          <Member Name="Operation" Analyze="True">
           <Accessors>
            <Accessor Name="get_Operation():MathNet.Numerics.SetElementOperation" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Removed(T,System.Int32):MathNet.Numerics.SetChangedEventArgs`1&lt;T&gt;" Analyze="True" />
         </Members>
        </Type>
        <Type Name="SetElementOperation" Analyze="True">
         <Members>
          <Member Name="Added" Analyze="True" />
          <Member Name="Moved" Analyze="True" />
          <Member Name="Removed" Analyze="True" />
          <Member Name="value__" Analyze="True" />
         </Members>
        </Type>
        <Type Name="SiConstants" Analyze="True">
         <Members>
          <Member Name="BohrMagneton" Analyze="True" />
          <Member Name="BohrRadius" Analyze="True" />
          <Member Name="CharacteristicImpedanceVacuum" Analyze="True" />
          <Member Name="ClassicalElectronRadius" Analyze="True" />
          <Member Name="ComptonWavelength" Analyze="True" />
          <Member Name="ConductanceQuantum" Analyze="True" />
          <Member Name="DeuteronMagneticMoment" Analyze="True" />
          <Member Name="DeuteronMass" Analyze="True" />
          <Member Name="DeuteronMassEnegryEquivalent" Analyze="True" />
          <Member Name="DeuteronMolarMass" Analyze="True" />
          <Member Name="DiracsConstant" Analyze="True" />
          <Member Name="ElectricPermittivity" Analyze="True" />
          <Member Name="ElectronGFactor" Analyze="True" />
          <Member Name="ElectronMagneticMoment" Analyze="True" />
          <Member Name="ElectronMass" Analyze="True" />
          <Member Name="ElectronMassEnergyEquivalent" Analyze="True" />
          <Member Name="ElectronMolarMass" Analyze="True" />
          <Member Name="ElementaryCharge" Analyze="True" />
          <Member Name="FermiCouplingConstant" Analyze="True" />
          <Member Name="FineStructureConstant" Analyze="True" />
          <Member Name="GravitationalConstant" Analyze="True" />
          <Member Name="HartreeEnergy" Analyze="True" />
          <Member Name="HelionMass" Analyze="True" />
          <Member Name="HelionMassEnegryEquivalent" Analyze="True" />
          <Member Name="HelionMolarMass" Analyze="True" />
          <Member Name="JosephsonConstant" Analyze="True" />
          <Member Name="MagneticFluxQuantum" Analyze="True" />
          <Member Name="MagneticPermeability" Analyze="True" />
          <Member Name="MuonComptonWavelength" Analyze="True" />
          <Member Name="MuonGFactor" Analyze="True" />
          <Member Name="MuonMagneticMoment" Analyze="True" />
          <Member Name="MuonMass" Analyze="True" />
          <Member Name="MuonMassEnegryEquivalent" Analyze="True" />
          <Member Name="MuonMolarMass" Analyze="True" />
          <Member Name="NeutronComptonWavelength" Analyze="True" />
          <Member Name="NeutronGFactor" Analyze="True" />
          <Member Name="NeutronGyromagneticRatio" Analyze="True" />
          <Member Name="NeutronMagneticMoment" Analyze="True" />
          <Member Name="NeutronMass" Analyze="True" />
          <Member Name="NeutronMassEnegryEquivalent" Analyze="True" />
          <Member Name="NeutronMolarMass" Analyze="True" />
          <Member Name="NuclearMagneton" Analyze="True" />
          <Member Name="PlancksConstant" Analyze="True" />
          <Member Name="PlancksLength" Analyze="True" />
          <Member Name="PlancksMass" Analyze="True" />
          <Member Name="PlancksTemperature" Analyze="True" />
          <Member Name="PlancksTime" Analyze="True" />
          <Member Name="ProtonComptonWavelength" Analyze="True" />
          <Member Name="ProtonGFactor" Analyze="True" />
          <Member Name="ProtonGyromagneticRatio" Analyze="True" />
          <Member Name="ProtonMagneticMoment" Analyze="True" />
          <Member Name="ProtonMass" Analyze="True" />
          <Member Name="ProtonMassEnergyEquivalent" Analyze="True" />
          <Member Name="ProtonMolarMass" Analyze="True" />
          <Member Name="QuantumOfCirculation" Analyze="True" />
          <Member Name="RydbergConstant" Analyze="True" />
          <Member Name="ShieldedProtonGyromagneticMoment" Analyze="True" />
          <Member Name="ShieldedProtonMagneticMoment" Analyze="True" />
          <Member Name="SpeedOfLight" Analyze="True" />
          <Member Name="TauComptonWavelength" Analyze="True" />
          <Member Name="TauMass" Analyze="True" />
          <Member Name="TauMassEnergyEquivalent" Analyze="True" />
          <Member Name="TauMolarMass" Analyze="True" />
          <Member Name="ThomsonCrossSection" Analyze="True" />
          <Member Name="VonKlitzingConstant" Analyze="True" />
          <Member Name="WeakMixingAngle" Analyze="True" />
         </Members>
        </Type>
        <Type Name="SiPrefixes" Analyze="True">
         <Members>
          <Member Name="Atto" Analyze="True" />
          <Member Name="Centi" Analyze="True" />
          <Member Name="Deca" Analyze="True" />
          <Member Name="Deci" Analyze="True" />
          <Member Name="Exa" Analyze="True" />
          <Member Name="Femto" Analyze="True" />
          <Member Name="Giga" Analyze="True" />
          <Member Name="Hecto" Analyze="True" />
          <Member Name="Kilo" Analyze="True" />
          <Member Name="Mega" Analyze="True" />
          <Member Name="Micro" Analyze="True" />
          <Member Name="Milli" Analyze="True" />
          <Member Name="Nano" Analyze="True" />
          <Member Name="Peta" Analyze="True" />
          <Member Name="Pico" Analyze="True" />
          <Member Name="Tera" Analyze="True" />
          <Member Name="Yocto" Analyze="True" />
          <Member Name="Yotta" Analyze="True" />
          <Member Name="Zepto" Analyze="True" />
          <Member Name="Zetta" Analyze="True" />
         </Members>
        </Type>
        <Type Name="Trig" Analyze="True">
         <Members>
          <Member Name="Cosecant(System.Double):System.Double" Analyze="True" />
          <Member Name="Cosine(System.Double):System.Double" Analyze="True" />
          <Member Name="Cotangent(System.Double):System.Double" Analyze="True" />
          <Member Name="DegreeToGrad(System.Double):System.Double" Analyze="True" />
          <Member Name="DegreeToRadian(System.Double):System.Double" Analyze="True" />
          <Member Name="GradToDegree(System.Double):System.Double" Analyze="True" />
          <Member Name="GradToRadian(System.Double):System.Double" Analyze="True" />
          <Member Name="HyperbolicCosecant(System.Double):System.Double" Analyze="True" />
          <Member Name="HyperbolicCosine(System.Double):System.Double" Analyze="True" />
          <Member Name="HyperbolicCotangent(System.Double):System.Double" Analyze="True" />
          <Member Name="HyperbolicSecant(System.Double):System.Double" Analyze="True" />
          <Member Name="HyperbolicSine(System.Double):System.Double" Analyze="True" />
          <Member Name="HyperbolicTangent(System.Double):System.Double" Analyze="True" />
          <Member Name="InverseCosecant(System.Double):System.Double" Analyze="True" />
          <Member Name="InverseCosine(System.Double):System.Double" Analyze="True" />
          <Member Name="InverseCotangent(System.Double):System.Double" Analyze="True" />
          <Member Name="InverseHyperbolicCosecant(System.Double):System.Double" Analyze="True" />
          <Member Name="InverseHyperbolicCosine(System.Double):System.Double" Analyze="True" />
          <Member Name="InverseHyperbolicCotangent(System.Double):System.Double" Analyze="True" />
          <Member Name="InverseHyperbolicSecant(System.Double):System.Double" Analyze="True" />
          <Member Name="InverseHyperbolicSine(System.Double):System.Double" Analyze="True" />
          <Member Name="InverseHyperbolicTangent(System.Double):System.Double" Analyze="True" />
          <Member Name="InverseSecant(System.Double):System.Double" Analyze="True" />
          <Member Name="InverseSine(System.Double):System.Double" Analyze="True" />
          <Member Name="InverseTangent(System.Double):System.Double" Analyze="True" />
          <Member Name="InverseTangentFromRational(System.Double,System.Double):System.Double" Analyze="True" />
          <Member Name="RadianToDegree(System.Double):System.Double" Analyze="True" />
          <Member Name="RadianToGrad(System.Double):System.Double" Analyze="True" />
          <Member Name="Secant(System.Double):System.Double" Analyze="True" />
          <Member Name="Sine(System.Double):System.Double" Analyze="True" />
          <Member Name="Tangent(System.Double):System.Double" Analyze="True" />
         </Members>
        </Type>
        <Type Name="Tuple`2" Analyze="True">
         <Members>
          <Member Name=".ctor(TFirst,TSecond)" Analyze="True" />
          <Member Name="_first" Analyze="True" />
          <Member Name="_second" Analyze="True" />
          <Member Name="Equals(MathNet.Numerics.Tuple`2&lt;TFirst,TSecond&gt;):System.Boolean" Analyze="True" />
          <Member Name="First" Analyze="True">
           <Accessors>
            <Accessor Name="get_First():TFirst" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Second" Analyze="True">
           <Accessors>
            <Accessor Name="get_Second():TSecond" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="MathNet.Numerics.Distributions" Analyze="True">
       <Types>
        <Type Name="ArbitraryDistribution" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name=".ctor(MathNet.Numerics.RandomSources.RandomSource)" Analyze="True" />
          <Member Name=".ctor(System.Int32,System.Double[])" Analyze="True" />
          <Member Name="_cdf" Analyze="True" />
          <Member Name="_first" Analyze="True" />
          <Member Name="_last" Analyze="True" />
          <Member Name="_mean" Analyze="True" />
          <Member Name="_n" Analyze="True" />
          <Member Name="_pmf" Analyze="True" />
          <Member Name="_variance" Analyze="True" />
          <Member Name="Count" Analyze="True">
           <Accessors>
            <Accessor Name="get_Count():System.Int32" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="CumulativeDistribution(System.Double):System.Double" Analyze="True" />
          <Member Name="FirstIndex" Analyze="True">
           <Accessors>
            <Accessor Name="get_FirstIndex():System.Int32" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="IsValidParameterSet(System.Int32,System.Double[]):System.Boolean" Analyze="True" />
          <Member Name="LastIndex" Analyze="True">
           <Accessors>
            <Accessor Name="get_LastIndex():System.Int32" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Maximum" Analyze="True">
           <Accessors>
            <Accessor Name="get_Maximum():System.Int32" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Mean" Analyze="True">
           <Accessors>
            <Accessor Name="get_Mean():System.Double" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Median" Analyze="True">
           <Accessors>
            <Accessor Name="get_Median():System.Int32" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Minimum" Analyze="True">
           <Accessors>
            <Accessor Name="get_Minimum():System.Int32" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="NextInt32():System.Int32" Analyze="True" />
          <Member Name="ProbabilityMass(System.Int32):System.Double" Analyze="True" />
          <Member Name="SetDistributionParameters(System.Int32,System.Double[]):System.Void" Analyze="True" />
          <Member Name="Skewness" Analyze="True">
           <Accessors>
            <Accessor Name="get_Skewness():System.Double" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Variance" Analyze="True">
           <Accessors>
            <Accessor Name="get_Variance():System.Double" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="BernoulliDistribution" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name=".ctor(MathNet.Numerics.RandomSources.RandomSource)" Analyze="True" />
          <Member Name=".ctor(System.Double)" Analyze="True" />
          <Member Name="_p" Analyze="True" />
          <Member Name="CumulativeDistribution(System.Double):System.Double" Analyze="True" />
          <Member Name="IsValidParameterSet(System.Double):System.Boolean" Analyze="True" />
          <Member Name="Maximum" Analyze="True">
           <Accessors>
            <Accessor Name="get_Maximum():System.Int32" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Mean" Analyze="True">
           <Accessors>
            <Accessor Name="get_Mean():System.Double" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Median" Analyze="True">
           <Accessors>
            <Accessor Name="get_Median():System.Int32" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Minimum" Analyze="True">
           <Accessors>
            <Accessor Name="get_Minimum():System.Int32" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="NextInt32():System.Int32" Analyze="True" />
          <Member Name="ProbabilityMass(System.Int32):System.Double" Analyze="True" />
          <Member Name="ProbabilityOfSuccess" Analyze="True">
           <Accessors>
            <Accessor Name="get_ProbabilityOfSuccess():System.Double" Analyze="True" />
            <Accessor Name="set_ProbabilityOfSuccess(System.Double):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="SetDistributionParameters(System.Double):System.Void" Analyze="True" />
          <Member Name="Skewness" Analyze="True">
           <Accessors>
            <Accessor Name="get_Skewness():System.Double" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Variance" Analyze="True">
           <Accessors>
            <Accessor Name="get_Variance():System.Double" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="BetaDistribution" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name=".ctor(MathNet.Numerics.RandomSources.RandomSource)" Analyze="True" />
          <Member Name=".ctor(System.Double,System.Double)" Analyze="True" />
          <Member Name="_alpha" Analyze="True" />
          <Member Name="_beta" Analyze="True" />
          <Member Name="_gammaAlpha" Analyze="True" />
          <Member Name="_gammaBeta" Analyze="True" />
          <Member Name="_lnbetaAlphaBeta" Analyze="True" />
          <Member Name="Alpha" Analyze="True">
           <Accessors>
            <Accessor Name="get_Alpha():System.Double" Analyze="True" />
            <Accessor Name="set_Alpha(System.Double):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Beta" Analyze="True">
           <Accessors>
            <Accessor Name="get_Beta():System.Double" Analyze="True" />
            <Accessor Name="set_Beta(System.Double):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="CumulativeDistribution(System.Double):System.Double" Analyze="True" />
          <Member Name="IsValidParameterSet(System.Double,System.Double):System.Boolean" Analyze="True" />
          <Member Name="Maximum" Analyze="True">
           <Accessors>
            <Accessor Name="get_Maximum():System.Double" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Mean" Analyze="True">
           <Accessors>
            <Accessor Name="get_Mean():System.Double" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Median" Analyze="True">
           <Accessors>
            <Accessor Name="get_Median():System.Double" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Minimum" Analyze="True">
           <Accessors>
            <Accessor Name="get_Minimum():System.Double" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="NextDouble():System.Double" Analyze="True" />
          <Member Name="ProbabilityDensity(System.Double):System.Double" Analyze="True" />
          <Member Name="RandomSource" Analyze="True">
           <Accessors>
            <Accessor Name="set_RandomSource(MathNet.Numerics.RandomSources.RandomSource):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="SetDistributionParameters(System.Double,System.Double):System.Void" Analyze="True" />
          <Member Name="Skewness" Analyze="True">
           <Accessors>
            <Accessor Name="get_Skewness():System.Double" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Variance" Analyze="True">
           <Accessors>
            <Accessor Name="get_Variance():System.Double" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="BinomialDistribution" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name=".ctor(MathNet.Numerics.RandomSources.RandomSource)" Analyze="True" />
          <Member Name=".ctor(System.Double,System.Int32)" Analyze="True" />
          <Member Name="_n" Analyze="True" />
          <Member Name="_p" Analyze="True" />
          <Member Name="CumulativeDistribution(System.Double):System.Double" Analyze="True" />
          <Member Name="IsValidParameterSet(System.Double,System.Int32):System.Boolean" Analyze="True" />
          <Member Name="Maximum" Analyze="True">
           <Accessors>
            <Accessor Name="get_Maximum():System.Int32" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Mean" Analyze="True">
           <Accessors>
            <Accessor Name="get_Mean():System.Double" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Median" Analyze="True">
           <Accessors>
            <Accessor Name="get_Median():System.Int32" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Minimum" Analyze="True">
           <Accessors>
            <Accessor Name="get_Minimum():System.Int32" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="NextInt32():System.Int32" Analyze="True" />
          <Member Name="NumberOfTrials" Analyze="True">
           <Accessors>
            <Accessor Name="get_NumberOfTrials():System.Int32" Analyze="True" />
            <Accessor Name="set_NumberOfTrials(System.Int32):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ProbabilityMass(System.Int32):System.Double" Analyze="True" />
          <Member Name="ProbabilityOfSuccess" Analyze="True">
           <Accessors>
            <Accessor Name="get_ProbabilityOfSuccess():System.Double" Analyze="True" />
            <Accessor Name="set_ProbabilityOfSuccess(System.Double):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="SetDistributionParameters(System.Double,System.Int32):System.Void" Analyze="True" />
          <Member Name="Skewness" Analyze="True">
           <Accessors>
            <Accessor Name="get_Skewness():System.Double" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Variance" Analyze="True">
           <Accessors>
            <Accessor Name="get_Variance():System.Double" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="CauchyLorentzDistribution" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name=".ctor(MathNet.Numerics.RandomSources.RandomSource)" Analyze="True" />
          <Member Name=".ctor(System.Double,System.Double)" Analyze="True" />
          <Member Name="_location" Analyze="True" />
          <Member Name="_scale" Analyze="True" />
          <Member Name="CumulativeDistribution(System.Double):System.Double" Analyze="True" />
          <Member Name="IsValidParameterSet(System.Double,System.Double):System.Boolean" Analyze="True" />
          <Member Name="Location" Analyze="True">
           <Accessors>
            <Accessor Name="get_Location():System.Double" Analyze="True" />
            <Accessor Name="set_Location(System.Double):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Maximum" Analyze="True">
           <Accessors>
            <Accessor Name="get_Maximum():System.Double" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Mean" Analyze="True">
           <Accessors>
            <Accessor Name="get_Mean():System.Double" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Median" Analyze="True">
           <Accessors>
            <Accessor Name="get_Median():System.Double" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Minimum" Analyze="True">
           <Accessors>
            <Accessor Name="get_Minimum():System.Double" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="NextDouble():System.Double" Analyze="True" />
          <Member Name="ProbabilityDensity(System.Double):System.Double" Analyze="True" />
          <Member Name="Scale" Analyze="True">
           <Accessors>
            <Accessor Name="get_Scale():System.Double" Analyze="True" />
            <Accessor Name="set_Scale(System.Double):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="SetDistributionParameters(System.Double,System.Double):System.Void" Analyze="True" />
          <Member Name="Skewness" Analyze="True">
           <Accessors>
            <Accessor Name="get_Skewness():System.Double" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Variance" Analyze="True">
           <Accessors>
            <Accessor Name="get_Variance():System.Double" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="ChiDistribution" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name=".ctor(MathNet.Numerics.RandomSources.RandomSource)" Analyze="True" />
          <Member Name=".ctor(System.Int32)" Analyze="True" />
          <Member Name="_degreesOfFreedom" Analyze="True" />
          <Member Name="_lngammaDegreesOfFreedomHalf" Analyze="True" />
          <Member Name="_mean" Analyze="True" />
          <Member Name="_standard" Analyze="True" />
          <Member Name="CumulativeDistribution(System.Double):System.Double" Analyze="True" />
          <Member Name="DegreesOfFreedom" Analyze="True">
           <Accessors>
            <Accessor Name="get_DegreesOfFreedom():System.Int32" Analyze="True" />
            <Accessor Name="set_DegreesOfFreedom(System.Int32):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="IsValidParameterSet(System.Int32):System.Boolean" Analyze="True" />
          <Member Name="Maximum" Analyze="True">
           <Accessors>
            <Accessor Name="get_Maximum():System.Double" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Mean" Analyze="True">
           <Accessors>
            <Accessor Name="get_Mean():System.Double" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Median" Analyze="True">
           <Accessors>
            <Accessor Name="get_Median():System.Double" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Minimum" Analyze="True">
           <Accessors>
            <Accessor Name="get_Minimum():System.Double" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="NextDouble():System.Double" Analyze="True" />
          <Member Name="ProbabilityDensity(System.Double):System.Double" Analyze="True" />
          <Member Name="RandomSource" Analyze="True">
           <Accessors>
            <Accessor Name="set_RandomSource(MathNet.Numerics.RandomSources.RandomSource):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="SetDistributionParameters(System.Int32):System.Void" Analyze="True" />
          <Member Name="Skewness" Analyze="True">
           <Accessors>
            <Accessor Name="get_Skewness():System.Double" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Variance" Analyze="True">
           <Accessors>
            <Accessor Name="get_Variance():System.Double" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="ChiSquareDistribution" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name=".ctor(MathNet.Numerics.RandomSources.RandomSource)" Analyze="True" />
          <Member Name=".ctor(System.Int32)" Analyze="True" />
          <Member Name="_degreesOfFreedom" Analyze="True" />
          <Member Name="_lngammaDegreesOfFreedomHalf" Analyze="True" />
          <Member Name="_standard" Analyze="True" />
          <Member Name="CumulativeDistribution(System.Double):System.Double" Analyze="True" />
          <Member Name="DegreesOfFreedom" Analyze="True">
           <Accessors>
            <Accessor Name="get_DegreesOfFreedom():System.Int32" Analyze="True" />
            <Accessor Name="set_DegreesOfFreedom(System.Int32):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="IsValidParameterSet(System.Int32):System.Boolean" Analyze="True" />
          <Member Name="Maximum" Analyze="True">
           <Accessors>
            <Accessor Name="get_Maximum():System.Double" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Mean" Analyze="True">
           <Accessors>
            <Accessor Name="get_Mean():System.Double" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Median" Analyze="True">
           <Accessors>
            <Accessor Name="get_Median():System.Double" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Minimum" Analyze="True">
           <Accessors>
            <Accessor Name="get_Minimum():System.Double" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="NextDouble():System.Double" Analyze="True" />
          <Member Name="ProbabilityDensity(System.Double):System.Double" Analyze="True" />
          <Member Name="RandomSource" Analyze="True">
           <Accessors>
            <Accessor Name="set_RandomSource(MathNet.Numerics.RandomSources.RandomSource):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="SetDistributionParameters(System.Int32):System.Void" Analyze="True" />
          <Member Name="Skewness" Analyze="True">
           <Accessors>
            <Accessor Name="get_Skewness():System.Double" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Variance" Analyze="True">
           <Accessors>
            <Accessor Name="get_Variance():System.Double" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="ContinuousDistribution" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name=".ctor(MathNet.Numerics.RandomSources.RandomSource)" Analyze="True" />
          <Member Name="_random" Analyze="True" />
          <Member Name="CanReset" Analyze="True">
           <Accessors>
            <Accessor Name="get_CanReset():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="CumulativeDistribution(System.Double):System.Double" Analyze="True" />
          <Member Name="Maximum" Analyze="True">
           <Accessors>
            <Accessor Name="get_Maximum():System.Double" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Mean" Analyze="True">
           <Accessors>
            <Accessor Name="get_Mean():System.Double" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Median" Analyze="True">
           <Accessors>
            <Accessor Name="get_Median():System.Double" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Minimum" Analyze="True">
           <Accessors>
            <Accessor Name="get_Minimum():System.Double" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="NextDouble():System.Double" Analyze="True" />
          <Member Name="ProbabilityDensity(System.Double):System.Double" Analyze="True" />
          <Member Name="RandomSource" Analyze="True">
           <Accessors>
            <Accessor Name="get_RandomSource():MathNet.Numerics.RandomSources.RandomSource" Analyze="True" />
            <Accessor Name="set_RandomSource(MathNet.Numerics.RandomSources.RandomSource):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Reset():System.Void" Analyze="True" />
          <Member Name="Skewness" Analyze="True">
           <Accessors>
            <Accessor Name="get_Skewness():System.Double" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Variance" Analyze="True">
           <Accessors>
            <Accessor Name="get_Variance():System.Double" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="ContinuousUniformDistribution" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name=".ctor(MathNet.Numerics.RandomSources.RandomSource)" Analyze="True" />
          <Member Name=".ctor(System.Double,System.Double)" Analyze="True" />
          <Member Name="_a" Analyze="True" />
          <Member Name="_b" Analyze="True" />
          <Member Name="_diff" Analyze="True" />
          <Member Name="CumulativeDistribution(System.Double):System.Double" Analyze="True" />
          <Member Name="IsValidParameterSet(System.Double,System.Double):System.Boolean" Analyze="True" />
          <Member Name="LowerLimit" Analyze="True">
           <Accessors>
            <Accessor Name="get_LowerLimit():System.Double" Analyze="True" />
            <Accessor Name="set_LowerLimit(System.Double):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Maximum" Analyze="True">
           <Accessors>
            <Accessor Name="get_Maximum():System.Double" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Mean" Analyze="True">
           <Accessors>
            <Accessor Name="get_Mean():System.Double" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Median" Analyze="True">
           <Accessors>
            <Accessor Name="get_Median():System.Double" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Minimum" Analyze="True">
           <Accessors>
            <Accessor Name="get_Minimum():System.Double" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="NextDouble():System.Double" Analyze="True" />
          <Member Name="ProbabilityDensity(System.Double):System.Double" Analyze="True" />
          <Member Name="SetDistributionParameters(System.Double,System.Double):System.Void" Analyze="True" />
          <Member Name="Skewness" Analyze="True">
           <Accessors>
            <Accessor Name="get_Skewness():System.Double" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="UpperLimit" Analyze="True">
           <Accessors>
            <Accessor Name="get_UpperLimit():System.Double" Analyze="True" />
            <Accessor Name="set_UpperLimit(System.Double):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Variance" Analyze="True">
           <Accessors>
            <Accessor Name="get_Variance():System.Double" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="DiscreteDistribution" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name=".ctor(MathNet.Numerics.RandomSources.RandomSource)" Analyze="True" />
          <Member Name="_random" Analyze="True" />
          <Member Name="CanReset" Analyze="True">
           <Accessors>
            <Accessor Name="get_CanReset():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="CumulativeDistribution(System.Double):System.Double" Analyze="True" />
          <Member Name="Maximum" Analyze="True">
           <Accessors>
            <Accessor Name="get_Maximum():System.Int32" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Mean" Analyze="True">
           <Accessors>
            <Accessor Name="get_Mean():System.Double" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Median" Analyze="True">
           <Accessors>
            <Accessor Name="get_Median():System.Int32" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Minimum" Analyze="True">
           <Accessors>
            <Accessor Name="get_Minimum():System.Int32" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="NextInt32():System.Int32" Analyze="True" />
          <Member Name="ProbabilityMass(System.Int32):System.Double" Analyze="True" />
          <Member Name="RandomSource" Analyze="True">
           <Accessors>
            <Accessor Name="get_RandomSource():MathNet.Numerics.RandomSources.RandomSource" Analyze="True" />
            <Accessor Name="set_RandomSource(MathNet.Numerics.RandomSources.RandomSource):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Reset():System.Void" Analyze="True" />
          <Member Name="Skewness" Analyze="True">
           <Accessors>
            <Accessor Name="get_Skewness():System.Double" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Variance" Analyze="True">
           <Accessors>
            <Accessor Name="get_Variance():System.Double" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="DiscreteUniformDistribution" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name=".ctor(MathNet.Numerics.RandomSources.RandomSource)" Analyze="True" />
          <Member Name=".ctor(System.Int32,System.Int32)" Analyze="True" />
          <Member Name="_a" Analyze="True" />
          <Member Name="_b" Analyze="True" />
          <Member Name="_n" Analyze="True" />
          <Member Name="CumulativeDistribution(System.Double):System.Double" Analyze="True" />
          <Member Name="IsValidParameterSet(System.Int32,System.Int32):System.Boolean" Analyze="True" />
          <Member Name="LowerLimit" Analyze="True">
           <Accessors>
            <Accessor Name="get_LowerLimit():System.Int32" Analyze="True" />
            <Accessor Name="set_LowerLimit(System.Int32):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Maximum" Analyze="True">
           <Accessors>
            <Accessor Name="get_Maximum():System.Int32" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Mean" Analyze="True">
           <Accessors>
            <Accessor Name="get_Mean():System.Double" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Median" Analyze="True">
           <Accessors>
            <Accessor Name="get_Median():System.Int32" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Minimum" Analyze="True">
           <Accessors>
            <Accessor Name="get_Minimum():System.Int32" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="NextInt32():System.Int32" Analyze="True" />
          <Member Name="ProbabilityMass(System.Int32):System.Double" Analyze="True" />
          <Member Name="SetDistributionParameters(System.Int32,System.Int32):System.Void" Analyze="True" />
          <Member Name="Skewness" Analyze="True">
           <Accessors>
            <Accessor Name="get_Skewness():System.Double" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="UpperLimit" Analyze="True">
           <Accessors>
            <Accessor Name="get_UpperLimit():System.Int32" Analyze="True" />
            <Accessor Name="set_UpperLimit(System.Int32):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Variance" Analyze="True">
           <Accessors>
            <Accessor Name="get_Variance():System.Double" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="ErlangDistribution" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name=".ctor(MathNet.Numerics.RandomSources.RandomSource)" Analyze="True" />
          <Member Name=".ctor(System.Int32,System.Double)" Analyze="True" />
          <Member Name="_helper1" Analyze="True" />
          <Member Name="_rate" Analyze="True" />
          <Member Name="_shape" Analyze="True" />
          <Member Name="CumulativeDistribution(System.Double):System.Double" Analyze="True" />
          <Member Name="IsValidParameterSet(System.Int32,System.Double):System.Boolean" Analyze="True" />
          <Member Name="Maximum" Analyze="True">
           <Accessors>
            <Accessor Name="get_Maximum():System.Double" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Mean" Analyze="True">
           <Accessors>
            <Accessor Name="get_Mean():System.Double" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Median" Analyze="True">
           <Accessors>
            <Accessor Name="get_Median():System.Double" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Minimum" Analyze="True">
           <Accessors>
            <Accessor Name="get_Minimum():System.Double" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="NextDouble():System.Double" Analyze="True" />
          <Member Name="ProbabilityDensity(System.Double):System.Double" Analyze="True" />
          <Member Name="Rate" Analyze="True">
           <Accessors>
            <Accessor Name="get_Rate():System.Double" Analyze="True" />
            <Accessor Name="set_Rate(System.Double):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="SetDistributionParameters(System.Int32,System.Double):System.Void" Analyze="True" />
          <Member Name="Shape" Analyze="True">
           <Accessors>
            <Accessor Name="get_Shape():System.Int32" Analyze="True" />
            <Accessor Name="set_Shape(System.Int32):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Skewness" Analyze="True">
           <Accessors>
            <Accessor Name="get_Skewness():System.Double" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Variance" Analyze="True">
           <Accessors>
            <Accessor Name="get_Variance():System.Double" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="ExponentialDistribution" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name=".ctor(MathNet.Numerics.RandomSources.RandomSource)" Analyze="True" />
          <Member Name=".ctor(System.Double)" Analyze="True" />
          <Member Name="_helper1" Analyze="True" />
          <Member Name="_rate" Analyze="True" />
          <Member Name="CumulativeDistribution(System.Double):System.Double" Analyze="True" />
          <Member Name="IsValidParameterSet(System.Double):System.Boolean" Analyze="True" />
          <Member Name="Maximum" Analyze="True">
           <Accessors>
            <Accessor Name="get_Maximum():System.Double" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Mean" Analyze="True">
           <Accessors>
            <Accessor Name="get_Mean():System.Double" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Median" Analyze="True">
           <Accessors>
            <Accessor Name="get_Median():System.Double" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Minimum" Analyze="True">
           <Accessors>
            <Accessor Name="get_Minimum():System.Double" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="NextDouble():System.Double" Analyze="True" />
          <Member Name="ProbabilityDensity(System.Double):System.Double" Analyze="True" />
          <Member Name="Rate" Analyze="True">
           <Accessors>
            <Accessor Name="get_Rate():System.Double" Analyze="True" />
            <Accessor Name="set_Rate(System.Double):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="SetDistributionParameters(System.Double):System.Void" Analyze="True" />
          <Member Name="Skewness" Analyze="True">
           <Accessors>
            <Accessor Name="get_Skewness():System.Double" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Variance" Analyze="True">
           <Accessors>
            <Accessor Name="get_Variance():System.Double" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="GammaDistribution" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name=".ctor(MathNet.Numerics.RandomSources.RandomSource)" Analyze="True" />
          <Member Name=".ctor(System.Double,System.Double)" Analyze="True" />
          <Member Name="_alpha" Analyze="True" />
          <Member Name="_alphaLnTheta" Analyze="True" />
          <Member Name="_helper1" Analyze="True" />
          <Member Name="_helper2" Analyze="True" />
          <Member Name="_lngammaAlpha" Analyze="True" />
          <Member Name="_theta" Analyze="True" />
          <Member Name="Alpha" Analyze="True">
           <Accessors>
            <Accessor Name="get_Alpha():System.Double" Analyze="True" />
            <Accessor Name="set_Alpha(System.Double):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="CumulativeDistribution(System.Double):System.Double" Analyze="True" />
          <Member Name="IsValidParameterSet(System.Double,System.Double):System.Boolean" Analyze="True" />
          <Member Name="Maximum" Analyze="True">
           <Accessors>
            <Accessor Name="get_Maximum():System.Double" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Mean" Analyze="True">
           <Accessors>
            <Accessor Name="get_Mean():System.Double" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Median" Analyze="True">
           <Accessors>
            <Accessor Name="get_Median():System.Double" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Minimum" Analyze="True">
           <Accessors>
            <Accessor Name="get_Minimum():System.Double" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="NextDouble():System.Double" Analyze="True" />
          <Member Name="ProbabilityDensity(System.Double):System.Double" Analyze="True" />
          <Member Name="SetDistributionParameters(System.Double,System.Double):System.Void" Analyze="True" />
          <Member Name="Skewness" Analyze="True">
           <Accessors>
            <Accessor Name="get_Skewness():System.Double" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Theta" Analyze="True">
           <Accessors>
            <Accessor Name="get_Theta():System.Double" Analyze="True" />
            <Accessor Name="set_Theta(System.Double):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Variance" Analyze="True">
           <Accessors>
            <Accessor Name="get_Variance():System.Double" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="GeometricDistribution" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name=".ctor(MathNet.Numerics.RandomSources.RandomSource)" Analyze="True" />
          <Member Name=".ctor(System.Double)" Analyze="True" />
          <Member Name="_p" Analyze="True" />
          <Member Name="CumulativeDistribution(System.Double):System.Double" Analyze="True" />
          <Member Name="IsValidParameterSet(System.Double):System.Boolean" Analyze="True" />
          <Member Name="Maximum" Analyze="True">
           <Accessors>
            <Accessor Name="get_Maximum():System.Int32" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Mean" Analyze="True">
           <Accessors>
            <Accessor Name="get_Mean():System.Double" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Median" Analyze="True">
           <Accessors>
            <Accessor Name="get_Median():System.Int32" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Minimum" Analyze="True">
           <Accessors>
            <Accessor Name="get_Minimum():System.Int32" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="NextInt32():System.Int32" Analyze="True" />
          <Member Name="ProbabilityMass(System.Int32):System.Double" Analyze="True" />
          <Member Name="ProbabilityOfSuccess" Analyze="True">
           <Accessors>
            <Accessor Name="get_ProbabilityOfSuccess():System.Double" Analyze="True" />
            <Accessor Name="set_ProbabilityOfSuccess(System.Double):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="SetDistributionParameters(System.Double):System.Void" Analyze="True" />
          <Member Name="Skewness" Analyze="True">
           <Accessors>
            <Accessor Name="get_Skewness():System.Double" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Variance" Analyze="True">
           <Accessors>
            <Accessor Name="get_Variance():System.Double" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="HypergeometricDistribution" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name=".ctor(MathNet.Numerics.RandomSources.RandomSource)" Analyze="True" />
          <Member Name=".ctor(System.Int32,System.Int32,System.Int32)" Analyze="True" />
          <Member Name="_M" Analyze="True" />
          <Member Name="_n" Analyze="True" />
          <Member Name="_N" Analyze="True" />
          <Member Name="_p" Analyze="True" />
          <Member Name="CumulativeDistribution(System.Double):System.Double" Analyze="True" />
          <Member Name="FavoredItems" Analyze="True">
           <Accessors>
            <Accessor Name="get_FavoredItems():System.Int32" Analyze="True" />
            <Accessor Name="set_FavoredItems(System.Int32):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="IsValidParameterSet(System.Int32,System.Int32,System.Int32):System.Boolean" Analyze="True" />
          <Member Name="Maximum" Analyze="True">
           <Accessors>
            <Accessor Name="get_Maximum():System.Int32" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Mean" Analyze="True">
           <Accessors>
            <Accessor Name="get_Mean():System.Double" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Median" Analyze="True">
           <Accessors>
            <Accessor Name="get_Median():System.Int32" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Minimum" Analyze="True">
           <Accessors>
            <Accessor Name="get_Minimum():System.Int32" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="NextInt32():System.Int32" Analyze="True" />
          <Member Name="NumberOfSamples" Analyze="True">
           <Accessors>
            <Accessor Name="get_NumberOfSamples():System.Int32" Analyze="True" />
            <Accessor Name="set_NumberOfSamples(System.Int32):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="PopulationSize" Analyze="True">
           <Accessors>
            <Accessor Name="get_PopulationSize():System.Int32" Analyze="True" />
            <Accessor Name="set_PopulationSize(System.Int32):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ProbabilityMass(System.Int32):System.Double" Analyze="True" />
          <Member Name="SetDistributionParameters(System.Int32,System.Int32,System.Int32):System.Void" Analyze="True" />
          <Member Name="Skewness" Analyze="True">
           <Accessors>
            <Accessor Name="get_Skewness():System.Double" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Variance" Analyze="True">
           <Accessors>
            <Accessor Name="get_Variance():System.Double" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="IContinuousGenerator" Analyze="True">
         <Members>
          <Member Name="CanReset" Analyze="True">
           <Accessors>
            <Accessor Name="get_CanReset():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="NextDouble():System.Double" Analyze="True" />
          <Member Name="Reset():System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="IContinuousProbabilityDistribution" Analyze="True">
         <Members>
          <Member Name="CumulativeDistribution(System.Double):System.Double" Analyze="True" />
          <Member Name="Maximum" Analyze="True">
           <Accessors>
            <Accessor Name="get_Maximum():System.Double" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Mean" Analyze="True">
           <Accessors>
            <Accessor Name="get_Mean():System.Double" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Median" Analyze="True">
           <Accessors>
            <Accessor Name="get_Median():System.Double" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Minimum" Analyze="True">
           <Accessors>
            <Accessor Name="get_Minimum():System.Double" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ProbabilityDensity(System.Double):System.Double" Analyze="True" />
          <Member Name="Skewness" Analyze="True">
           <Accessors>
            <Accessor Name="get_Skewness():System.Double" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Variance" Analyze="True">
           <Accessors>
            <Accessor Name="get_Variance():System.Double" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="IDiscreteGenerator" Analyze="True">
         <Members>
          <Member Name="CanReset" Analyze="True">
           <Accessors>
            <Accessor Name="get_CanReset():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="NextInt32():System.Int32" Analyze="True" />
          <Member Name="Reset():System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="IDiscreteProbabilityDistribution" Analyze="True">
         <Members>
          <Member Name="CumulativeDistribution(System.Double):System.Double" Analyze="True" />
          <Member Name="Maximum" Analyze="True">
           <Accessors>
            <Accessor Name="get_Maximum():System.Int32" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Mean" Analyze="True">
           <Accessors>
            <Accessor Name="get_Mean():System.Double" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Median" Analyze="True">
           <Accessors>
            <Accessor Name="get_Median():System.Int32" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Minimum" Analyze="True">
           <Accessors>
            <Accessor Name="get_Minimum():System.Int32" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ProbabilityMass(System.Int32):System.Double" Analyze="True" />
          <Member Name="Skewness" Analyze="True">
           <Accessors>
            <Accessor Name="get_Skewness():System.Double" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Variance" Analyze="True">
           <Accessors>
            <Accessor Name="get_Variance():System.Double" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="LaplaceDistribution" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name=".ctor(MathNet.Numerics.RandomSources.RandomSource)" Analyze="True" />
          <Member Name=".ctor(System.Double,System.Double)" Analyze="True" />
          <Member Name="_location" Analyze="True" />
          <Member Name="_scale" Analyze="True" />
          <Member Name="CumulativeDistribution(System.Double):System.Double" Analyze="True" />
          <Member Name="IsValidParameterSet(System.Double,System.Double):System.Boolean" Analyze="True" />
          <Member Name="Location" Analyze="True">
           <Accessors>
            <Accessor Name="get_Location():System.Double" Analyze="True" />
            <Accessor Name="set_Location(System.Double):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Maximum" Analyze="True">
           <Accessors>
            <Accessor Name="get_Maximum():System.Double" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Mean" Analyze="True">
           <Accessors>
            <Accessor Name="get_Mean():System.Double" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Median" Analyze="True">
           <Accessors>
            <Accessor Name="get_Median():System.Double" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Minimum" Analyze="True">
           <Accessors>
            <Accessor Name="get_Minimum():System.Double" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="NextDouble():System.Double" Analyze="True" />
          <Member Name="ProbabilityDensity(System.Double):System.Double" Analyze="True" />
          <Member Name="Scale" Analyze="True">
           <Accessors>
            <Accessor Name="get_Scale():System.Double" Analyze="True" />
            <Accessor Name="set_Scale(System.Double):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="SetDistributionParameters(System.Double,System.Double):System.Void" Analyze="True" />
          <Member Name="Skewness" Analyze="True">
           <Accessors>
            <Accessor Name="get_Skewness():System.Double" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Variance" Analyze="True">
           <Accessors>
            <Accessor Name="get_Variance():System.Double" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="LognormalDistribution" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name=".ctor(MathNet.Numerics.RandomSources.RandomSource)" Analyze="True" />
          <Member Name=".ctor(System.Double,System.Double)" Analyze="True" />
          <Member Name="_mu" Analyze="True" />
          <Member Name="_sigma" Analyze="True" />
          <Member Name="_sigma2" Analyze="True" />
          <Member Name="_standard" Analyze="True" />
          <Member Name="CumulativeDistribution(System.Double):System.Double" Analyze="True" />
          <Member Name="InverseCumulativeDistribution(System.Double):System.Double" Analyze="True" />
          <Member Name="IsValidParameterSet(System.Double,System.Double):System.Boolean" Analyze="True" />
          <Member Name="Maximum" Analyze="True">
           <Accessors>
            <Accessor Name="get_Maximum():System.Double" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Mean" Analyze="True">
           <Accessors>
            <Accessor Name="get_Mean():System.Double" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Median" Analyze="True">
           <Accessors>
            <Accessor Name="get_Median():System.Double" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Minimum" Analyze="True">
           <Accessors>
            <Accessor Name="get_Minimum():System.Double" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Mu" Analyze="True">
           <Accessors>
            <Accessor Name="get_Mu():System.Double" Analyze="True" />
            <Accessor Name="set_Mu(System.Double):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="NextDouble():System.Double" Analyze="True" />
          <Member Name="ProbabilityDensity(System.Double):System.Double" Analyze="True" />
          <Member Name="RandomSource" Analyze="True">
           <Accessors>
            <Accessor Name="set_RandomSource(MathNet.Numerics.RandomSources.RandomSource):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="SetDistributionParameters(System.Double,System.Double):System.Void" Analyze="True" />
          <Member Name="Sigma" Analyze="True">
           <Accessors>
            <Accessor Name="get_Sigma():System.Double" Analyze="True" />
            <Accessor Name="set_Sigma(System.Double):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Skewness" Analyze="True">
           <Accessors>
            <Accessor Name="get_Skewness():System.Double" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Variance" Analyze="True">
           <Accessors>
            <Accessor Name="get_Variance():System.Double" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="NormalDistribution" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name=".ctor(MathNet.Numerics.RandomSources.RandomSource)" Analyze="True" />
          <Member Name=".ctor(System.Double,System.Double)" Analyze="True" />
          <Member Name="_mu" Analyze="True" />
          <Member Name="_sigma" Analyze="True" />
          <Member Name="_standard" Analyze="True" />
          <Member Name="CumulativeDistribution(System.Double):System.Double" Analyze="True" />
          <Member Name="InverseCumulativeDistribution(System.Double):System.Double" Analyze="True" />
          <Member Name="IsValidParameterSet(System.Double,System.Double):System.Boolean" Analyze="True" />
          <Member Name="Maximum" Analyze="True">
           <Accessors>
            <Accessor Name="get_Maximum():System.Double" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Mean" Analyze="True">
           <Accessors>
            <Accessor Name="get_Mean():System.Double" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Median" Analyze="True">
           <Accessors>
            <Accessor Name="get_Median():System.Double" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Minimum" Analyze="True">
           <Accessors>
            <Accessor Name="get_Minimum():System.Double" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Mu" Analyze="True">
           <Accessors>
            <Accessor Name="get_Mu():System.Double" Analyze="True" />
            <Accessor Name="set_Mu(System.Double):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="NextDouble():System.Double" Analyze="True" />
          <Member Name="ProbabilityDensity(System.Double):System.Double" Analyze="True" />
          <Member Name="RandomSource" Analyze="True">
           <Accessors>
            <Accessor Name="set_RandomSource(MathNet.Numerics.RandomSources.RandomSource):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="SetDistributionParameters(System.Double,System.Double):System.Void" Analyze="True" />
          <Member Name="Sigma" Analyze="True">
           <Accessors>
            <Accessor Name="get_Sigma():System.Double" Analyze="True" />
            <Accessor Name="set_Sigma(System.Double):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Skewness" Analyze="True">
           <Accessors>
            <Accessor Name="get_Skewness():System.Double" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Variance" Analyze="True">
           <Accessors>
            <Accessor Name="get_Variance():System.Double" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="ParetoDistribution" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name=".ctor(MathNet.Numerics.RandomSources.RandomSource)" Analyze="True" />
          <Member Name=".ctor(System.Double,System.Double)" Analyze="True" />
          <Member Name="_location" Analyze="True" />
          <Member Name="_shape" Analyze="True" />
          <Member Name="CumulativeDistribution(System.Double):System.Double" Analyze="True" />
          <Member Name="helper1" Analyze="True" />
          <Member Name="IsValidParameterSet(System.Double,System.Double):System.Boolean" Analyze="True" />
          <Member Name="Location" Analyze="True">
           <Accessors>
            <Accessor Name="get_Location():System.Double" Analyze="True" />
            <Accessor Name="set_Location(System.Double):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Maximum" Analyze="True">
           <Accessors>
            <Accessor Name="get_Maximum():System.Double" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Mean" Analyze="True">
           <Accessors>
            <Accessor Name="get_Mean():System.Double" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Median" Analyze="True">
           <Accessors>
            <Accessor Name="get_Median():System.Double" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Minimum" Analyze="True">
           <Accessors>
            <Accessor Name="get_Minimum():System.Double" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="NextDouble():System.Double" Analyze="True" />
          <Member Name="ProbabilityDensity(System.Double):System.Double" Analyze="True" />
          <Member Name="SetDistributionParameters(System.Double,System.Double):System.Void" Analyze="True" />
          <Member Name="Shape" Analyze="True">
           <Accessors>
            <Accessor Name="get_Shape():System.Double" Analyze="True" />
            <Accessor Name="set_Shape(System.Double):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Skewness" Analyze="True">
           <Accessors>
            <Accessor Name="get_Skewness():System.Double" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Variance" Analyze="True">
           <Accessors>
            <Accessor Name="get_Variance():System.Double" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="PoissonDistribution" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name=".ctor(MathNet.Numerics.RandomSources.RandomSource)" Analyze="True" />
          <Member Name=".ctor(System.Double)" Analyze="True" />
          <Member Name="_helper1" Analyze="True" />
          <Member Name="_lambda" Analyze="True" />
          <Member Name="CumulativeDistribution(System.Double):System.Double" Analyze="True" />
          <Member Name="IsValidParameterSet(System.Double):System.Boolean" Analyze="True" />
          <Member Name="Lambda" Analyze="True">
           <Accessors>
            <Accessor Name="get_Lambda():System.Double" Analyze="True" />
            <Accessor Name="set_Lambda(System.Double):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Maximum" Analyze="True">
           <Accessors>
            <Accessor Name="get_Maximum():System.Int32" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Mean" Analyze="True">
           <Accessors>
            <Accessor Name="get_Mean():System.Double" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Median" Analyze="True">
           <Accessors>
            <Accessor Name="get_Median():System.Int32" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Minimum" Analyze="True">
           <Accessors>
            <Accessor Name="get_Minimum():System.Int32" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="NextInt32():System.Int32" Analyze="True" />
          <Member Name="ProbabilityMass(System.Int32):System.Double" Analyze="True" />
          <Member Name="SetDistributionParameters(System.Double):System.Void" Analyze="True" />
          <Member Name="Skewness" Analyze="True">
           <Accessors>
            <Accessor Name="get_Skewness():System.Double" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Variance" Analyze="True">
           <Accessors>
            <Accessor Name="get_Variance():System.Double" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="StandardDistribution" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name=".ctor(MathNet.Numerics.RandomSources.RandomSource)" Analyze="True" />
          <Member Name="_extraNormal" Analyze="True" />
          <Member Name="CumulativeDistribution(System.Double):System.Double" Analyze="True" />
          <Member Name="InverseCumulativeDistribution(System.Double):System.Double" Analyze="True" />
          <Member Name="Maximum" Analyze="True">
           <Accessors>
            <Accessor Name="get_Maximum():System.Double" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Mean" Analyze="True">
           <Accessors>
            <Accessor Name="get_Mean():System.Double" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Median" Analyze="True">
           <Accessors>
            <Accessor Name="get_Median():System.Double" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Minimum" Analyze="True">
           <Accessors>
            <Accessor Name="get_Minimum():System.Double" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="NextDouble():System.Double" Analyze="True" />
          <Member Name="ProbabilityDensity(System.Double):System.Double" Analyze="True" />
          <Member Name="Skewness" Analyze="True">
           <Accessors>
            <Accessor Name="get_Skewness():System.Double" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Variance" Analyze="True">
           <Accessors>
            <Accessor Name="get_Variance():System.Double" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="TriangularDistribution" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name=".ctor(MathNet.Numerics.RandomSources.RandomSource)" Analyze="True" />
          <Member Name=".ctor(System.Double,System.Double,System.Double)" Analyze="True" />
          <Member Name="_a" Analyze="True" />
          <Member Name="_b" Analyze="True" />
          <Member Name="_c" Analyze="True" />
          <Member Name="_diff" Analyze="True" />
          <Member Name="_lowerPart" Analyze="True" />
          <Member Name="_upperPart" Analyze="True" />
          <Member Name="Center" Analyze="True">
           <Accessors>
            <Accessor Name="get_Center():System.Double" Analyze="True" />
            <Accessor Name="set_Center(System.Double):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="CumulativeDistribution(System.Double):System.Double" Analyze="True" />
          <Member Name="helper3" Analyze="True" />
          <Member Name="helper4" Analyze="True" />
          <Member Name="IsValidParameterSet(System.Double,System.Double,System.Double):System.Boolean" Analyze="True" />
          <Member Name="LowerLimit" Analyze="True">
           <Accessors>
            <Accessor Name="get_LowerLimit():System.Double" Analyze="True" />
            <Accessor Name="set_LowerLimit(System.Double):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Maximum" Analyze="True">
           <Accessors>
            <Accessor Name="get_Maximum():System.Double" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Mean" Analyze="True">
           <Accessors>
            <Accessor Name="get_Mean():System.Double" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Median" Analyze="True">
           <Accessors>
            <Accessor Name="get_Median():System.Double" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Minimum" Analyze="True">
           <Accessors>
            <Accessor Name="get_Minimum():System.Double" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="NextDouble():System.Double" Analyze="True" />
          <Member Name="ProbabilityDensity(System.Double):System.Double" Analyze="True" />
          <Member Name="SetDistributionParameters(System.Double,System.Double,System.Double):System.Void" Analyze="True" />
          <Member Name="Skewness" Analyze="True">
           <Accessors>
            <Accessor Name="get_Skewness():System.Double" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="UpperLimit" Analyze="True">
           <Accessors>
            <Accessor Name="get_UpperLimit():System.Double" Analyze="True" />
            <Accessor Name="set_UpperLimit(System.Double):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Variance" Analyze="True">
           <Accessors>
            <Accessor Name="get_Variance():System.Double" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="ZipfDistribution" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name=".ctor(MathNet.Numerics.RandomSources.RandomSource)" Analyze="True" />
          <Member Name=".ctor(System.Double)" Analyze="True" />
          <Member Name=".ctor(System.Double,System.Int32)" Analyze="True" />
          <Member Name="Next():System.Double" Analyze="True" />
          <Member Name="random" Analyze="True" />
          <Member Name="skew" Analyze="True" />
          <Member Name="Skew" Analyze="True">
           <Accessors>
            <Accessor Name="get_Skew():System.Double" Analyze="True" />
            <Accessor Name="set_Skew(System.Double):System.Void" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="MathNet.Numerics.Equations" Analyze="True">
       <Types>
        <Type Name="ScalarIterator" Analyze="True">
         <Members>
          <Member Name=".ctor(MathNet.Numerics.IRealFunction)" Analyze="True" />
          <Member Name=".ctor(MathNet.Numerics.IRealFunction,MathNet.Numerics.IRealFunction)" Analyze="True" />
          <Member Name="f" Analyze="True" />
          <Member Name="fderiv" Analyze="True" />
          <Member Name="FindFixpoint(System.Double,System.Double,System.Double):System.Double" Analyze="True" />
          <Member Name="FindRoot(System.Double,System.Double,System.Double,System.Double):System.Double" Analyze="True" />
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="MathNet.Numerics.Interpolation" Analyze="True">
       <Types>
        <Type Name="IInterpolationAlgorithm" Analyze="True">
         <Members>
          <Member Name="Extrapolate(System.Double):System.Double" Analyze="True" />
          <Member Name="Interpolate(System.Double):System.Double" Analyze="True" />
          <Member Name="Interpolate(System.Double,System.Double&amp;):System.Double" Analyze="True" />
          <Member Name="Prepare(MathNet.Numerics.SampleList):System.Void" Analyze="True" />
          <Member Name="SupportErrorEstimation" Analyze="True">
           <Accessors>
            <Accessor Name="get_SupportErrorEstimation():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="InterpolationMode" Analyze="True">
         <Members>
          <Member Name="ExpectNoPoles" Analyze="True" />
          <Member Name="ExpectPoles" Analyze="True" />
          <Member Name="Smooth" Analyze="True" />
          <Member Name="value__" Analyze="True" />
         </Members>
        </Type>
        <Type Name="InterpolationSingleDimension" Analyze="True">
         <Members>
          <Member Name=".ctor(MathNet.Numerics.SampleList)" Analyze="True" />
          <Member Name=".ctor(MathNet.Numerics.SampleList,MathNet.Numerics.Interpolation.IInterpolationAlgorithm)" Analyze="True" />
          <Member Name=".ctor(MathNet.Numerics.SampleList,MathNet.Numerics.Interpolation.InterpolationMode)" Analyze="True" />
          <Member Name=".ctor(MathNet.Numerics.SampleList,MathNet.Numerics.Interpolation.InterpolationMode,System.Int32)" Analyze="True" />
          <Member Name=".ctor(System.Collections.IDictionary)" Analyze="True" />
          <Member Name="algorithm" Analyze="True" />
          <Member Name="dirty" Analyze="True" />
          <Member Name="Evaluate(System.Double):System.Double" Analyze="True" />
          <Member Name="Evaluate(System.Double,System.Double&amp;):System.Double" Analyze="True" />
          <Member Name="samples" Analyze="True" />
          <Member Name="samples_SampleAltered(System.Object,MathNet.Numerics.SampleList+SampleAlteredEventArgs):System.Void" Analyze="True" />
          <Member Name="SelectAlgorithm(MathNet.Numerics.Interpolation.InterpolationMode,System.Int32):MathNet.Numerics.Interpolation.IInterpolationAlgorithm" Analyze="True" />
          <Member Name="SupportErrorEstimation" Analyze="True">
           <Accessors>
            <Accessor Name="get_SupportErrorEstimation():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="PolynomialInterpolationAlgorithm" Analyze="True">
         <Members>
          <Member Name=".ctor(System.Int32)" Analyze="True" />
          <Member Name="effectiveOrder" Analyze="True" />
          <Member Name="Extrapolate(System.Double):System.Double" Analyze="True" />
          <Member Name="Interpolate(System.Double):System.Double" Analyze="True" />
          <Member Name="Interpolate(System.Double,System.Double&amp;):System.Double" Analyze="True" />
          <Member Name="order" Analyze="True" />
          <Member Name="Prepare(MathNet.Numerics.SampleList):System.Void" Analyze="True" />
          <Member Name="samples" Analyze="True" />
          <Member Name="SuggestOffset(System.Double,System.Int32&amp;):System.Int32" Analyze="True" />
          <Member Name="SupportErrorEstimation" Analyze="True">
           <Accessors>
            <Accessor Name="get_SupportErrorEstimation():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="RationalInterpolationAlgorithm" Analyze="True">
         <Members>
          <Member Name=".ctor(System.Int32)" Analyze="True" />
          <Member Name="effectiveOrder" Analyze="True" />
          <Member Name="Extrapolate(System.Double):System.Double" Analyze="True" />
          <Member Name="Interpolate(System.Double):System.Double" Analyze="True" />
          <Member Name="Interpolate(System.Double,System.Double&amp;):System.Double" Analyze="True" />
          <Member Name="order" Analyze="True" />
          <Member Name="Prepare(MathNet.Numerics.SampleList):System.Void" Analyze="True" />
          <Member Name="samples" Analyze="True" />
          <Member Name="SuggestOffset(System.Double,System.Int32&amp;):System.Int32" Analyze="True" />
          <Member Name="SupportErrorEstimation" Analyze="True">
           <Accessors>
            <Accessor Name="get_SupportErrorEstimation():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="MathNet.Numerics.LinearAlgebra" Analyze="True">
       <Types>
        <Type Name="CholeskyDecomposition" Analyze="True">
         <Members>
          <Member Name=".ctor(MathNet.Numerics.LinearAlgebra.Matrix)" Analyze="True" />
          <Member Name="_isSymmetricPositiveDefinite" Analyze="True" />
          <Member Name="GetL():MathNet.Numerics.LinearAlgebra.Matrix" Analyze="True" />
          <Member Name="IsSPD" Analyze="True">
           <Accessors>
            <Accessor Name="get_IsSPD():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="L" Analyze="True" />
          <Member Name="Solve(MathNet.Numerics.LinearAlgebra.Matrix):MathNet.Numerics.LinearAlgebra.Matrix" Analyze="True" />
          <Member Name="Solve(System.Double[]):System.Double[]" Analyze="True" />
         </Members>
        </Type>
        <Type Name="EigenvalueDecomposition" Analyze="True">
         <Members>
          <Member Name=".ctor(MathNet.Numerics.LinearAlgebra.Matrix)" Analyze="True" />
          <Member Name=".ctor(System.Double[],System.Double[])" Analyze="True" />
          <Member Name="BlockDiagonal" Analyze="True">
           <Accessors>
            <Accessor Name="get_BlockDiagonal():MathNet.Numerics.LinearAlgebra.Matrix" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="cdiv(System.Double,System.Double,System.Double,System.Double):System.Void" Analyze="True" />
          <Member Name="cdivi" Analyze="True" />
          <Member Name="cdivr" Analyze="True" />
          <Member Name="d" Analyze="True" />
          <Member Name="e" Analyze="True" />
          <Member Name="EigenValues" Analyze="True">
           <Accessors>
            <Accessor Name="get_EigenValues():MathNet.Numerics.Complex[]" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="EigenVectors" Analyze="True">
           <Accessors>
            <Accessor Name="get_EigenVectors():MathNet.Numerics.LinearAlgebra.Matrix" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="H" Analyze="True" />
          <Member Name="hqr2():System.Void" Analyze="True" />
          <Member Name="ImagEigenvalues" Analyze="True">
           <Accessors>
            <Accessor Name="get_ImagEigenvalues():System.Double[]" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="isSymmetric" Analyze="True" />
          <Member Name="n" Analyze="True" />
          <Member Name="ort" Analyze="True" />
          <Member Name="orthes():System.Void" Analyze="True" />
          <Member Name="RealEigenvalues" Analyze="True">
           <Accessors>
            <Accessor Name="get_RealEigenvalues():System.Double[]" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="tql2():System.Void" Analyze="True" />
          <Member Name="tred2():System.Void" Analyze="True" />
          <Member Name="V" Analyze="True" />
         </Members>
        </Type>
        <Type Name="IMatrix" Analyze="True">
         <Members>
          <Member Name="ColumnCount" Analyze="True">
           <Accessors>
            <Accessor Name="get_ColumnCount():System.Int32" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Item[System.Int32,System.Int32]" Analyze="True">
           <Accessors>
            <Accessor Name="get_Item(System.Int32,System.Int32):System.Double" Analyze="True" />
            <Accessor Name="set_Item(System.Int32,System.Int32,System.Double):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="RowCount" Analyze="True">
           <Accessors>
            <Accessor Name="get_RowCount():System.Int32" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="LUDecomposition" Analyze="True">
         <Members>
          <Member Name=".ctor(MathNet.Numerics.LinearAlgebra.Matrix)" Analyze="True" />
          <Member Name="_columnCount" Analyze="True" />
          <Member Name="_rowCount" Analyze="True" />
          <Member Name="Determinant():System.Double" Analyze="True" />
          <Member Name="DoublePivot" Analyze="True">
           <Accessors>
            <Accessor Name="get_DoublePivot():System.Double[]" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="IsNonSingular" Analyze="True">
           <Accessors>
            <Accessor Name="get_IsNonSingular():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="L" Analyze="True">
           <Accessors>
            <Accessor Name="get_L():MathNet.Numerics.LinearAlgebra.Matrix" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="LU" Analyze="True" />
          <Member Name="piv" Analyze="True" />
          <Member Name="Pivot" Analyze="True">
           <Accessors>
            <Accessor Name="get_Pivot():System.Int32[]" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="pivsign" Analyze="True" />
          <Member Name="Solve(MathNet.Numerics.LinearAlgebra.Matrix):MathNet.Numerics.LinearAlgebra.Matrix" Analyze="True" />
          <Member Name="U" Analyze="True">
           <Accessors>
            <Accessor Name="get_U():MathNet.Numerics.LinearAlgebra.Matrix" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="Matrix" Analyze="True">
         <Members>
          <Member Name=".ctor(System.Double[,])" Analyze="True" />
          <Member Name=".ctor(System.Double[],System.Int32)" Analyze="True" />
          <Member Name=".ctor(System.Double[][])" Analyze="True" />
          <Member Name=".ctor(System.Int32,System.Double)" Analyze="True" />
          <Member Name=".ctor(System.Int32,System.Int32)" Analyze="True" />
          <Member Name=".ctor(System.Int32,System.Int32,System.Double)" Analyze="True" />
          <Member Name="_columnCount" Analyze="True" />
          <Member Name="_data" Analyze="True" />
          <Member Name="_rowCount" Analyze="True" />
          <Member Name="Add(MathNet.Numerics.LinearAlgebra.IMatrix):System.Void" Analyze="True" />
          <Member Name="AlmostEqual(MathNet.Numerics.LinearAlgebra.Matrix,MathNet.Numerics.LinearAlgebra.Matrix):System.Boolean" Analyze="True" />
          <Member Name="AlmostEqual(MathNet.Numerics.LinearAlgebra.Matrix,MathNet.Numerics.LinearAlgebra.Matrix,System.Double):System.Boolean" Analyze="True" />
          <Member Name="ArrayDivide(MathNet.Numerics.LinearAlgebra.IMatrix):System.Void" Analyze="True" />
          <Member Name="ArrayDivide(MathNet.Numerics.LinearAlgebra.IMatrix,MathNet.Numerics.LinearAlgebra.IMatrix):MathNet.Numerics.LinearAlgebra.Matrix" Analyze="True" />
          <Member Name="ArrayMultiply(MathNet.Numerics.LinearAlgebra.IMatrix):System.Void" Analyze="True" />
          <Member Name="ArrayMultiply(MathNet.Numerics.LinearAlgebra.IMatrix,MathNet.Numerics.LinearAlgebra.IMatrix):MathNet.Numerics.LinearAlgebra.Matrix" Analyze="True" />
          <Member Name="CheckMatchingMatrixDimensions(MathNet.Numerics.LinearAlgebra.IMatrix,MathNet.Numerics.LinearAlgebra.IMatrix):System.Void" Analyze="True" />
          <Member Name="chol():MathNet.Numerics.LinearAlgebra.CholeskyDecomposition" Analyze="True" />
          <Member Name="Clone():MathNet.Numerics.LinearAlgebra.Matrix" Analyze="True" />
          <Member Name="CloneMatrixData(System.Double[][]):System.Double[][]" Analyze="True" />
          <Member Name="ColumnCount" Analyze="True">
           <Accessors>
            <Accessor Name="get_ColumnCount():System.Int32" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Condition():System.Double" Analyze="True" />
          <Member Name="CopyToArray():System.Double[,]" Analyze="True" />
          <Member Name="CopyToJaggedArray():System.Double[][]" Analyze="True" />
          <Member Name="Create(System.Double[,]):MathNet.Numerics.LinearAlgebra.Matrix" Analyze="True" />
          <Member Name="Create(System.Double[][]):MathNet.Numerics.LinearAlgebra.Matrix" Analyze="True" />
          <Member Name="CreateMatrixData(System.Int32,System.Int32):System.Double[][]" Analyze="True" />
          <Member Name="Determinant():System.Double" Analyze="True" />
          <Member Name="Eigen():MathNet.Numerics.LinearAlgebra.EigenvalueDecomposition" Analyze="True" />
          <Member Name="GetArray():System.Double[][]" Analyze="True" />
          <Member Name="GetMatrix(System.Int32,System.Int32,System.Int32,System.Int32):MathNet.Numerics.LinearAlgebra.Matrix" Analyze="True" />
          <Member Name="GetMatrix(System.Int32,System.Int32,System.Int32[]):MathNet.Numerics.LinearAlgebra.Matrix" Analyze="True" />
          <Member Name="GetMatrix(System.Int32[],System.Int32,System.Int32):MathNet.Numerics.LinearAlgebra.Matrix" Analyze="True" />
          <Member Name="GetMatrix(System.Int32[],System.Int32[]):MathNet.Numerics.LinearAlgebra.Matrix" Analyze="True" />
          <Member Name="GetRowColumnCount(System.Double[][],System.Int32&amp;,System.Int32&amp;):System.Void" Analyze="True" />
          <Member Name="Identity(System.Int32,System.Int32):MathNet.Numerics.LinearAlgebra.Matrix" Analyze="True" />
          <Member Name="Inverse():MathNet.Numerics.LinearAlgebra.Matrix" Analyze="True" />
          <Member Name="Item[System.Int32,System.Int32]" Analyze="True">
           <Accessors>
            <Accessor Name="get_Item(System.Int32,System.Int32):System.Double" Analyze="True" />
            <Accessor Name="set_Item(System.Int32,System.Int32,System.Double):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="LUD():MathNet.Numerics.LinearAlgebra.LUDecomposition" Analyze="True" />
          <Member Name="Multiply(MathNet.Numerics.LinearAlgebra.Matrix):MathNet.Numerics.LinearAlgebra.Matrix" Analyze="True" />
          <Member Name="Multiply(System.Double):System.Void" Analyze="True" />
          <Member Name="Multiply(System.Double[]):System.Void" Analyze="True" />
          <Member Name="Norm1():System.Double" Analyze="True" />
          <Member Name="Norm2():System.Double" Analyze="True" />
          <Member Name="NormF():System.Double" Analyze="True" />
          <Member Name="NormInf():System.Double" Analyze="True" />
          <Member Name="Ones(System.Int32):MathNet.Numerics.LinearAlgebra.Matrix" Analyze="True" />
          <Member Name="op_Addition(MathNet.Numerics.LinearAlgebra.Matrix,MathNet.Numerics.LinearAlgebra.Matrix):MathNet.Numerics.LinearAlgebra.Matrix" Analyze="True" />
          <Member Name="op_Explicit(MathNet.Numerics.LinearAlgebra.Matrix):System.Double" Analyze="True" />
          <Member Name="op_Explicit(MathNet.Numerics.LinearAlgebra.Matrix):System.Double[,]" Analyze="True" />
          <Member Name="op_Explicit(MathNet.Numerics.LinearAlgebra.Matrix):System.Double[]" Analyze="True" />
          <Member Name="op_Implicit(MathNet.Numerics.LinearAlgebra.Matrix):System.Double[][]" Analyze="True" />
          <Member Name="op_Multiply(MathNet.Numerics.LinearAlgebra.Matrix,MathNet.Numerics.LinearAlgebra.Matrix):MathNet.Numerics.LinearAlgebra.Matrix" Analyze="True" />
          <Member Name="op_Multiply(MathNet.Numerics.LinearAlgebra.Matrix,System.Double):MathNet.Numerics.LinearAlgebra.Matrix" Analyze="True" />
          <Member Name="op_Multiply(System.Double,MathNet.Numerics.LinearAlgebra.Matrix):MathNet.Numerics.LinearAlgebra.Matrix" Analyze="True" />
          <Member Name="op_Subtraction(MathNet.Numerics.LinearAlgebra.Matrix,MathNet.Numerics.LinearAlgebra.Matrix):MathNet.Numerics.LinearAlgebra.Matrix" Analyze="True" />
          <Member Name="QRD():MathNet.Numerics.LinearAlgebra.QRDecomposition" Analyze="True" />
          <Member Name="Random(System.Int32,System.Int32):MathNet.Numerics.LinearAlgebra.Matrix" Analyze="True" />
          <Member Name="Random(System.Int32,System.Int32,MathNet.Numerics.Distributions.IContinuousGenerator):MathNet.Numerics.LinearAlgebra.Matrix" Analyze="True" />
          <Member Name="Rank():System.Int32" Analyze="True" />
          <Member Name="RowCount" Analyze="True">
           <Accessors>
            <Accessor Name="get_RowCount():System.Int32" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="SetMatrix(System.Int32,System.Int32,System.Int32,System.Int32,MathNet.Numerics.LinearAlgebra.IMatrix):System.Void" Analyze="True" />
          <Member Name="SetMatrix(System.Int32,System.Int32,System.Int32[],MathNet.Numerics.LinearAlgebra.IMatrix):System.Void" Analyze="True" />
          <Member Name="SetMatrix(System.Int32[],System.Int32,System.Int32,MathNet.Numerics.LinearAlgebra.IMatrix):System.Void" Analyze="True" />
          <Member Name="SetMatrix(System.Int32[],System.Int32[],MathNet.Numerics.LinearAlgebra.IMatrix):System.Void" Analyze="True" />
          <Member Name="Solve(MathNet.Numerics.LinearAlgebra.Matrix):MathNet.Numerics.LinearAlgebra.Matrix" Analyze="True" />
          <Member Name="SolveRobust(MathNet.Numerics.LinearAlgebra.Matrix):MathNet.Numerics.LinearAlgebra.Matrix" Analyze="True" />
          <Member Name="SolveTranspose(MathNet.Numerics.LinearAlgebra.Matrix):MathNet.Numerics.LinearAlgebra.Matrix" Analyze="True" />
          <Member Name="Subtract(MathNet.Numerics.LinearAlgebra.IMatrix):System.Void" Analyze="True" />
          <Member Name="SVD():MathNet.Numerics.LinearAlgebra.SingularValueDecomposition" Analyze="True" />
          <Member Name="System.ICloneable.Clone():System.Object" Analyze="True" />
          <Member Name="ToString():System.String" Analyze="True" />
          <Member Name="Trace():System.Double" Analyze="True" />
          <Member Name="Transpose():System.Void" Analyze="True" />
          <Member Name="Transpose(MathNet.Numerics.LinearAlgebra.IMatrix):MathNet.Numerics.LinearAlgebra.Matrix" Analyze="True" />
          <Member Name="UnaryMinus():System.Void" Analyze="True" />
          <Member Name="Zeros(System.Int32):MathNet.Numerics.LinearAlgebra.Matrix" Analyze="True" />
         </Members>
        </Type>
        <Type Name="QRDecomposition" Analyze="True">
         <Members>
          <Member Name=".ctor(MathNet.Numerics.LinearAlgebra.Matrix)" Analyze="True" />
          <Member Name="FullRank" Analyze="True">
           <Accessors>
            <Accessor Name="get_FullRank():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="H" Analyze="True">
           <Accessors>
            <Accessor Name="get_H():MathNet.Numerics.LinearAlgebra.Matrix" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="m" Analyze="True">
           <Accessors>
            <Accessor Name="get_m():System.Int32" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="n" Analyze="True">
           <Accessors>
            <Accessor Name="get_n():System.Int32" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Q" Analyze="True">
           <Accessors>
            <Accessor Name="get_Q():MathNet.Numerics.LinearAlgebra.Matrix" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="QR" Analyze="True" />
          <Member Name="R" Analyze="True">
           <Accessors>
            <Accessor Name="get_R():MathNet.Numerics.LinearAlgebra.Matrix" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Rdiag" Analyze="True" />
          <Member Name="Solve(MathNet.Numerics.LinearAlgebra.Matrix):MathNet.Numerics.LinearAlgebra.Matrix" Analyze="True" />
         </Members>
        </Type>
        <Type Name="SingularValueDecomposition" Analyze="True">
         <Members>
          <Member Name=".ctor(MathNet.Numerics.LinearAlgebra.Matrix)" Analyze="True" />
          <Member Name="Condition():System.Double" Analyze="True" />
          <Member Name="LeftSingularVectors" Analyze="True">
           <Accessors>
            <Accessor Name="get_LeftSingularVectors():MathNet.Numerics.LinearAlgebra.Matrix" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="m" Analyze="True" />
          <Member Name="n" Analyze="True" />
          <Member Name="Norm2():System.Double" Analyze="True" />
          <Member Name="Rank():System.Int32" Analyze="True" />
          <Member Name="RightSingularVectors" Analyze="True">
           <Accessors>
            <Accessor Name="get_RightSingularVectors():MathNet.Numerics.LinearAlgebra.Matrix" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="s" Analyze="True" />
          <Member Name="S" Analyze="True">
           <Accessors>
            <Accessor Name="get_S():MathNet.Numerics.LinearAlgebra.Matrix" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="SingularValues" Analyze="True">
           <Accessors>
            <Accessor Name="get_SingularValues():System.Double[]" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="transpose" Analyze="True" />
          <Member Name="U" Analyze="True" />
          <Member Name="V" Analyze="True" />
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="MathNet.Numerics.Properties" Analyze="True">
       <Types>
        <Type Name="Resources" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="ArgumentHistogramContainsNot" Analyze="True">
           <Accessors>
            <Accessor Name="get_ArgumentHistogramContainsNot():System.String" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ArgumentInIntervalXYInclusive" Analyze="True">
           <Accessors>
            <Accessor Name="get_ArgumentInIntervalXYInclusive():System.String" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ArgumentMatrixIndexOutOfRange" Analyze="True">
           <Accessors>
            <Accessor Name="get_ArgumentMatrixIndexOutOfRange():System.String" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ArgumentMatrixNotRankDeficient" Analyze="True">
           <Accessors>
            <Accessor Name="get_ArgumentMatrixNotRankDeficient():System.String" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ArgumentMatrixNotSingular" Analyze="True">
           <Accessors>
            <Accessor Name="get_ArgumentMatrixNotSingular():System.String" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ArgumentMatrixSameColumnDimension" Analyze="True">
           <Accessors>
            <Accessor Name="get_ArgumentMatrixSameColumnDimension():System.String" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ArgumentMatrixSameDimensions" Analyze="True">
           <Accessors>
            <Accessor Name="get_ArgumentMatrixSameDimensions():System.String" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ArgumentMatrixSameRowDimension" Analyze="True">
           <Accessors>
            <Accessor Name="get_ArgumentMatrixSameRowDimension():System.String" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ArgumentMatrixSingleColumn" Analyze="True">
           <Accessors>
            <Accessor Name="get_ArgumentMatrixSingleColumn():System.String" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ArgumentMatrixSingleColumnRow" Analyze="True">
           <Accessors>
            <Accessor Name="get_ArgumentMatrixSingleColumnRow():System.String" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ArgumentMatrixSingleRow" Analyze="True">
           <Accessors>
            <Accessor Name="get_ArgumentMatrixSingleRow():System.String" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ArgumentMatrixSquare" Analyze="True">
           <Accessors>
            <Accessor Name="get_ArgumentMatrixSquare():System.String" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ArgumentMatrixSymmetric" Analyze="True">
           <Accessors>
            <Accessor Name="get_ArgumentMatrixSymmetric():System.String" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ArgumentMatrixSymmetricPositiveDefinite" Analyze="True">
           <Accessors>
            <Accessor Name="get_ArgumentMatrixSymmetricPositiveDefinite():System.String" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ArgumentNotInfinityNaN" Analyze="True">
           <Accessors>
            <Accessor Name="get_ArgumentNotInfinityNaN():System.String" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ArgumentNotNegative" Analyze="True">
           <Accessors>
            <Accessor Name="get_ArgumentNotNegative():System.String" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ArgumentNull" Analyze="True">
           <Accessors>
            <Accessor Name="get_ArgumentNull():System.String" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ArgumentOutOfRangeGreater" Analyze="True">
           <Accessors>
            <Accessor Name="get_ArgumentOutOfRangeGreater():System.String" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ArgumentOutOfRangeGreaterEqual" Analyze="True">
           <Accessors>
            <Accessor Name="get_ArgumentOutOfRangeGreaterEqual():System.String" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ArgumentParseComplexNumber" Analyze="True">
           <Accessors>
            <Accessor Name="get_ArgumentParseComplexNumber():System.String" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ArgumentPositive" Analyze="True">
           <Accessors>
            <Accessor Name="get_ArgumentPositive():System.String" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ArgumentPowerOfTwo" Analyze="True">
           <Accessors>
            <Accessor Name="get_ArgumentPowerOfTwo():System.String" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ArgumentPowerOfTwoEveryDimension" Analyze="True">
           <Accessors>
            <Accessor Name="get_ArgumentPowerOfTwoEveryDimension():System.String" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ArgumentRangeLessEqual" Analyze="True">
           <Accessors>
            <Accessor Name="get_ArgumentRangeLessEqual():System.String" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ArgumentSingleDimensionArray" Analyze="True">
           <Accessors>
            <Accessor Name="get_ArgumentSingleDimensionArray():System.String" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ArgumentTooLarge" Analyze="True">
           <Accessors>
            <Accessor Name="get_ArgumentTooLarge():System.String" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ArgumentTooLargeForIterationLimit" Analyze="True">
           <Accessors>
            <Accessor Name="get_ArgumentTooLargeForIterationLimit():System.String" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ArgumentTypeMismatch" Analyze="True">
           <Accessors>
            <Accessor Name="get_ArgumentTypeMismatch():System.String" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ArgumentVectorLengthsMultipleOf" Analyze="True">
           <Accessors>
            <Accessor Name="get_ArgumentVectorLengthsMultipleOf():System.String" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ArgumentVectorsSameLengths" Analyze="True">
           <Accessors>
            <Accessor Name="get_ArgumentVectorsSameLengths():System.String" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Culture" Analyze="True">
           <Accessors>
            <Accessor Name="get_Culture():System.Globalization.CultureInfo" Analyze="True" />
            <Accessor Name="set_Culture(System.Globalization.CultureInfo):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="InvalidOperationAccumulatorEmpty" Analyze="True">
           <Accessors>
            <Accessor Name="get_InvalidOperationAccumulatorEmpty():System.String" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="InvalidOperationHistogramEmpty" Analyze="True">
           <Accessors>
            <Accessor Name="get_InvalidOperationHistogramEmpty():System.String" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="InvalidOperationHistogramNotEnoughPoints" Analyze="True">
           <Accessors>
            <Accessor Name="get_InvalidOperationHistogramNotEnoughPoints():System.String" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="InvalidOperationNoSamplesProvided" Analyze="True">
           <Accessors>
            <Accessor Name="get_InvalidOperationNoSamplesProvided():System.String" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="resourceCulture" Analyze="True" />
          <Member Name="resourceMan" Analyze="True" />
          <Member Name="ResourceManager" Analyze="True">
           <Accessors>
            <Accessor Name="get_ResourceManager():System.Resources.ResourceManager" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="MathNet.Numerics.RandomSources" Analyze="True">
       <Types>
        <Type Name="AdditiveLaggedFibonacciRandomSource" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name=".ctor(System.Int32)" Analyze="True" />
          <Member Name=".ctor(System.UInt32)" Analyze="True" />
          <Member Name="_bitBuffer" Analyze="True" />
          <Member Name="_bitCount" Analyze="True" />
          <Member Name="_i" Analyze="True" />
          <Member Name="_longLag" Analyze="True" />
          <Member Name="_seed" Analyze="True" />
          <Member Name="_shortLag" Analyze="True" />
          <Member Name="_x" Analyze="True" />
          <Member Name="CanReset" Analyze="True">
           <Accessors>
            <Accessor Name="get_CanReset():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Fill():System.Void" Analyze="True" />
          <Member Name="IntToDoubleMultiplier" Analyze="True" />
          <Member Name="IsValidLongLag(System.Int32):System.Boolean" Analyze="True" />
          <Member Name="IsValidShortLag(System.Int32):System.Boolean" Analyze="True" />
          <Member Name="LongLag" Analyze="True">
           <Accessors>
            <Accessor Name="get_LongLag():System.Int32" Analyze="True" />
            <Accessor Name="set_LongLag(System.Int32):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Next():System.Int32" Analyze="True" />
          <Member Name="Next(System.Int32):System.Int32" Analyze="True" />
          <Member Name="Next(System.Int32,System.Int32):System.Int32" Analyze="True" />
          <Member Name="NextBoolean():System.Boolean" Analyze="True" />
          <Member Name="NextBytes(System.Byte[]):System.Void" Analyze="True" />
          <Member Name="NextDouble():System.Double" Analyze="True" />
          <Member Name="NextDouble(System.Double):System.Double" Analyze="True" />
          <Member Name="NextDouble(System.Double,System.Double):System.Double" Analyze="True" />
          <Member Name="NextInclusiveMaxValue():System.Int32" Analyze="True" />
          <Member Name="NextUInt():System.UInt32" Analyze="True" />
          <Member Name="Reset():System.Void" Analyze="True" />
          <Member Name="ResetGenerator():System.Void" Analyze="True" />
          <Member Name="ShortLag" Analyze="True">
           <Accessors>
            <Accessor Name="get_ShortLag():System.Int32" Analyze="True" />
            <Accessor Name="set_ShortLag(System.Int32):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="UIntToDoubleMultiplier" Analyze="True" />
         </Members>
        </Type>
        <Type Name="MersenneTwisterRandomSource" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name=".ctor(System.Int32)" Analyze="True" />
          <Member Name=".ctor(System.Int32[])" Analyze="True" />
          <Member Name=".ctor(System.UInt32)" Analyze="True" />
          <Member Name=".ctor(System.UInt32[])" Analyze="True" />
          <Member Name="_bitBuffer" Analyze="True" />
          <Member Name="_bitCount" Analyze="True" />
          <Member Name="_mt" Analyze="True" />
          <Member Name="_mti" Analyze="True" />
          <Member Name="_seed" Analyze="True" />
          <Member Name="_seedArray" Analyze="True" />
          <Member Name="CanReset" Analyze="True">
           <Accessors>
            <Accessor Name="get_CanReset():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="GenerateNUInts():System.Void" Analyze="True" />
          <Member Name="IntToDoubleMultiplier" Analyze="True" />
          <Member Name="LowerMask" Analyze="True" />
          <Member Name="M" Analyze="True" />
          <Member Name="N" Analyze="True" />
          <Member Name="Next():System.Int32" Analyze="True" />
          <Member Name="Next(System.Int32):System.Int32" Analyze="True" />
          <Member Name="Next(System.Int32,System.Int32):System.Int32" Analyze="True" />
          <Member Name="NextBoolean():System.Boolean" Analyze="True" />
          <Member Name="NextBytes(System.Byte[]):System.Void" Analyze="True" />
          <Member Name="NextDouble():System.Double" Analyze="True" />
          <Member Name="NextDouble(System.Double):System.Double" Analyze="True" />
          <Member Name="NextDouble(System.Double,System.Double):System.Double" Analyze="True" />
          <Member Name="NextInclusiveMaxValue():System.Int32" Analyze="True" />
          <Member Name="NextUInt():System.UInt32" Analyze="True" />
          <Member Name="Reset():System.Void" Analyze="True" />
          <Member Name="ResetBySeedArray():System.Void" Analyze="True" />
          <Member Name="ResetGenerator():System.Void" Analyze="True" />
          <Member Name="UIntToDoubleMultiplier" Analyze="True" />
          <Member Name="UpperMask" Analyze="True" />
          <Member Name="VectorA" Analyze="True" />
         </Members>
        </Type>
        <Type Name="RandomSource" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="CanReset" Analyze="True">
           <Accessors>
            <Accessor Name="get_CanReset():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Next():System.Int32" Analyze="True" />
          <Member Name="Next(System.Int32):System.Int32" Analyze="True" />
          <Member Name="Next(System.Int32,System.Int32):System.Int32" Analyze="True" />
          <Member Name="NextBoolean():System.Boolean" Analyze="True" />
          <Member Name="NextBytes(System.Byte[]):System.Void" Analyze="True" />
          <Member Name="NextDouble():System.Double" Analyze="True" />
          <Member Name="NextDouble(System.Double):System.Double" Analyze="True" />
          <Member Name="NextDouble(System.Double,System.Double):System.Double" Analyze="True" />
          <Member Name="Reset():System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="SystemRandomSource" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name=".ctor(System.Int32)" Analyze="True" />
          <Member Name="_bitBuffer" Analyze="True" />
          <Member Name="_bitCount" Analyze="True" />
          <Member Name="_generator" Analyze="True" />
          <Member Name="_seed" Analyze="True" />
          <Member Name="CanReset" Analyze="True">
           <Accessors>
            <Accessor Name="get_CanReset():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Next():System.Int32" Analyze="True" />
          <Member Name="Next(System.Int32):System.Int32" Analyze="True" />
          <Member Name="Next(System.Int32,System.Int32):System.Int32" Analyze="True" />
          <Member Name="NextBoolean():System.Boolean" Analyze="True" />
          <Member Name="NextBytes(System.Byte[]):System.Void" Analyze="True" />
          <Member Name="NextDouble():System.Double" Analyze="True" />
          <Member Name="NextDouble(System.Double):System.Double" Analyze="True" />
          <Member Name="NextDouble(System.Double,System.Double):System.Double" Analyze="True" />
          <Member Name="Reset():System.Void" Analyze="True" />
          <Member Name="ResetGenerator():System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="XorShiftRandomSource" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name=".ctor(System.Int32)" Analyze="True" />
          <Member Name=".ctor(System.UInt32)" Analyze="True" />
          <Member Name="_bitBuffer" Analyze="True" />
          <Member Name="_bitCount" Analyze="True" />
          <Member Name="_seed" Analyze="True" />
          <Member Name="_w" Analyze="True" />
          <Member Name="_x" Analyze="True" />
          <Member Name="_y" Analyze="True" />
          <Member Name="_z" Analyze="True" />
          <Member Name="CanReset" Analyze="True">
           <Accessors>
            <Accessor Name="get_CanReset():System.Boolean" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="IntToDoubleMultiplier" Analyze="True" />
          <Member Name="Next():System.Int32" Analyze="True" />
          <Member Name="Next(System.Int32):System.Int32" Analyze="True" />
          <Member Name="Next(System.Int32,System.Int32):System.Int32" Analyze="True" />
          <Member Name="NextBoolean():System.Boolean" Analyze="True" />
          <Member Name="NextBytes(System.Byte[]):System.Void" Analyze="True" />
          <Member Name="NextDouble():System.Double" Analyze="True" />
          <Member Name="NextDouble(System.Double):System.Double" Analyze="True" />
          <Member Name="NextDouble(System.Double,System.Double):System.Double" Analyze="True" />
          <Member Name="NextInclusiveMaxValue():System.Int32" Analyze="True" />
          <Member Name="NextUInt():System.UInt32" Analyze="True" />
          <Member Name="Reset():System.Void" Analyze="True" />
          <Member Name="ResetGenerator():System.Void" Analyze="True" />
          <Member Name="SeedW" Analyze="True" />
          <Member Name="SeedY" Analyze="True" />
          <Member Name="SeedZ" Analyze="True" />
          <Member Name="UIntToDoubleMultiplier" Analyze="True" />
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="MathNet.Numerics.Statistics" Analyze="True">
       <Types>
        <Type Name="Accumulator" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name=".ctor(System.Collections.Generic.IEnumerable`1&lt;System.Double&gt;)" Analyze="True" />
          <Member Name=".ctor(System.Collections.ICollection)" Analyze="True" />
          <Member Name=".ctor(System.Double[])" Analyze="True" />
          <Member Name="Add(System.Double):System.Void" Analyze="True" />
          <Member Name="AddRange(System.Collections.Generic.IEnumerable`1&lt;System.Double&gt;):System.Void" Analyze="True" />
          <Member Name="AddRange(System.Collections.ICollection):System.Void" Analyze="True" />
          <Member Name="AddRange(System.Double[]):System.Void" Analyze="True" />
          <Member Name="Clear():System.Void" Analyze="True" />
          <Member Name="count" Analyze="True" />
          <Member Name="Count" Analyze="True">
           <Accessors>
            <Accessor Name="get_Count():System.Int32" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="ErrorEstimate" Analyze="True">
           <Accessors>
            <Accessor Name="get_ErrorEstimate():System.Double" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Mean" Analyze="True">
           <Accessors>
            <Accessor Name="get_Mean():System.Double" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="MeanSquared" Analyze="True">
           <Accessors>
            <Accessor Name="get_MeanSquared():System.Double" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Remove(System.Double):System.Void" Analyze="True" />
          <Member Name="RemoveRange(System.Collections.Generic.IEnumerable`1&lt;System.Double&gt;):System.Void" Analyze="True" />
          <Member Name="RemoveRange(System.Collections.ICollection):System.Void" Analyze="True" />
          <Member Name="RemoveRange(System.Double[]):System.Void" Analyze="True" />
          <Member Name="Sigma" Analyze="True">
           <Accessors>
            <Accessor Name="get_Sigma():System.Double" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="squaredSum" Analyze="True" />
          <Member Name="SquaredSum" Analyze="True">
           <Accessors>
            <Accessor Name="get_SquaredSum():System.Double" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="sum" Analyze="True" />
          <Member Name="Sum" Analyze="True">
           <Accessors>
            <Accessor Name="get_Sum():System.Double" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Variance" Analyze="True">
           <Accessors>
            <Accessor Name="get_Variance():System.Double" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="Bucket" Analyze="True">
         <Members>
          <Member Name=".cctor()" Analyze="True" />
          <Member Name=".ctor(MathNet.Numerics.Statistics.Bucket)" Analyze="True" />
          <Member Name=".ctor(System.Double,System.Double)" Analyze="True" />
          <Member Name=".ctor(System.Double,System.Double,System.Double)" Analyze="True" />
          <Member Name="Clone():System.Object" Analyze="True" />
          <Member Name="CompareTo(System.Object):System.Int32" Analyze="True" />
          <Member Name="DefaultPointComparer" Analyze="True">
           <Accessors>
            <Accessor Name="get_DefaultPointComparer():System.Collections.IComparer" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="depth" Analyze="True" />
          <Member Name="Depth" Analyze="True">
           <Accessors>
            <Accessor Name="get_Depth():System.Double" Analyze="True" />
            <Accessor Name="set_Depth(System.Double):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Equals(System.Object):System.Boolean" Analyze="True" />
          <Member Name="lowerBound" Analyze="True" />
          <Member Name="LowerBound" Analyze="True">
           <Accessors>
            <Accessor Name="get_LowerBound():System.Double" Analyze="True" />
            <Accessor Name="set_LowerBound(System.Double):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="pointComparer" Analyze="True" />
          <Member Name="ToString():System.String" Analyze="True" />
          <Member Name="upperBound" Analyze="True" />
          <Member Name="UpperBound" Analyze="True">
           <Accessors>
            <Accessor Name="get_UpperBound():System.Double" Analyze="True" />
            <Accessor Name="set_UpperBound(System.Double):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="Width" Analyze="True">
           <Accessors>
            <Accessor Name="get_Width():System.Double" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="Bucket+PointComparer" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="Compare(System.Object,System.Object):System.Int32" Analyze="True" />
         </Members>
        </Type>
        <Type Name="Histogram" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="Add(MathNet.Numerics.Statistics.Bucket):System.Void" Analyze="True" />
          <Member Name="areBucketsSorted" Analyze="True" />
          <Member Name="buckets" Analyze="True" />
          <Member Name="Count" Analyze="True">
           <Accessors>
            <Accessor Name="get_Count():System.Int32" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="GetContainerIndexOf(System.Double):System.Int32" Analyze="True" />
          <Member Name="GetContainerOf(System.Double):MathNet.Numerics.Statistics.Bucket" Analyze="True" />
          <Member Name="Item[System.Int32]" Analyze="True">
           <Accessors>
            <Accessor Name="get_Item(System.Int32):MathNet.Numerics.Statistics.Bucket" Analyze="True" />
            <Accessor Name="set_Item(System.Int32,MathNet.Numerics.Statistics.Bucket):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="JoinBuckets():System.Void" Analyze="True" />
          <Member Name="LazySort():System.Void" Analyze="True" />
          <Member Name="OptimalDispersion(System.Int32,System.Collections.ICollection):MathNet.Numerics.Statistics.Histogram" Analyze="True" />
          <Member Name="OptimalFreedom(System.Int32,System.Collections.ICollection):MathNet.Numerics.Statistics.Histogram" Analyze="True" />
          <Member Name="OptimalSquaredFreedom(System.Int32,System.Collections.ICollection):MathNet.Numerics.Statistics.Histogram" Analyze="True" />
          <Member Name="OptimalVariance(System.Int32,System.Collections.ICollection):MathNet.Numerics.Statistics.Histogram" Analyze="True" />
          <Member Name="Sort():System.Void" Analyze="True" />
          <Member Name="ToString():System.String" Analyze="True" />
          <Member Name="TotalDepth" Analyze="True">
           <Accessors>
            <Accessor Name="get_TotalDepth():System.Double" Analyze="True" />
           </Accessors>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="MathNet.Numerics.Transformations" Analyze="True">
       <Types>
        <Type Name="ComplexFourierTransformation" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name=".ctor(MathNet.Numerics.Transformations.TransformationConvention)" Analyze="True" />
          <Member Name="_convention" Analyze="True" />
          <Member Name="_fft" Analyze="True" />
          <Member Name="Convention" Analyze="True">
           <Accessors>
            <Accessor Name="get_Convention():MathNet.Numerics.Transformations.TransformationConvention" Analyze="True" />
            <Accessor Name="set_Convention(MathNet.Numerics.Transformations.TransformationConvention):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="GenerateFrequencyScale(System.Double,System.Int32):System.Double[]" Analyze="True" />
          <Member Name="GenerateTimeScale(System.Double,System.Int32):System.Double[]" Analyze="True" />
          <Member Name="TransformBackward(MathNet.Numerics.Complex[]):System.Void" Analyze="True" />
          <Member Name="TransformBackward(MathNet.Numerics.Complex[],System.Int32[]):System.Void" Analyze="True" />
          <Member Name="TransformBackward(System.Double[]):System.Void" Analyze="True" />
          <Member Name="TransformBackward(System.Double[],System.Int32[]):System.Void" Analyze="True" />
          <Member Name="TransformForward(MathNet.Numerics.Complex[]):System.Void" Analyze="True" />
          <Member Name="TransformForward(MathNet.Numerics.Complex[],System.Int32[]):System.Void" Analyze="True" />
          <Member Name="TransformForward(System.Double[]):System.Void" Analyze="True" />
          <Member Name="TransformForward(System.Double[],System.Int32[]):System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="InternalFFT" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name="BuildCoefficientsForLevels(System.Int32):System.Void" Analyze="True" />
          <Member Name="DanielsonLanczosTransform(System.Double[],System.Boolean,MathNet.Numerics.Transformations.TransformationConvention):System.Void" Analyze="True" />
          <Member Name="DanielsonLanczosTransformMultiDim(System.Double[],System.Int32,System.Int32,System.Boolean,MathNet.Numerics.Transformations.TransformationConvention):System.Void" Analyze="True" />
          <Member Name="DiscreteFourierTransform(System.Double[],System.Boolean,MathNet.Numerics.Transformations.TransformationConvention):System.Void" Analyze="True" />
          <Member Name="DiscreteFourierTransformMultiDim(System.Double[],System.Int32[],System.Boolean,MathNet.Numerics.Transformations.TransformationConvention):System.Void" Analyze="True" />
          <Member Name="ExtendToPowerOf2Length(System.Double[]):System.Double[]" Analyze="True" />
          <Member Name="imagCoefficients" Analyze="True" />
          <Member Name="ImaginarySineCoefficients(System.Int32,System.Boolean):System.Double[]" Analyze="True" />
          <Member Name="maxBits" Analyze="True" />
          <Member Name="maxLength" Analyze="True" />
          <Member Name="minBits" Analyze="True" />
          <Member Name="minLength" Analyze="True" />
          <Member Name="realCoefficients" Analyze="True" />
          <Member Name="RealCosineCoefficients(System.Int32,System.Boolean):System.Double[]" Analyze="True" />
          <Member Name="ReorderSamples(System.Double[]):System.Void" Analyze="True" />
          <Member Name="ReorderSamplesMultiDim(System.Double[],System.Int32,System.Int32):System.Void" Analyze="True" />
          <Member Name="Rescale(System.Double[],System.Boolean,MathNet.Numerics.Transformations.TransformationConvention):System.Void" Analyze="True" />
          <Member Name="ReverseBits(System.Int32):System.Int32[]" Analyze="True" />
          <Member Name="reversedBitsLookup" Analyze="True" />
         </Members>
        </Type>
        <Type Name="RealFourierTransformation" Analyze="True">
         <Members>
          <Member Name=".ctor()" Analyze="True" />
          <Member Name=".ctor(MathNet.Numerics.Transformations.TransformationConvention)" Analyze="True" />
          <Member Name="_convention" Analyze="True" />
          <Member Name="_fft" Analyze="True" />
          <Member Name="Convention" Analyze="True">
           <Accessors>
            <Accessor Name="get_Convention():MathNet.Numerics.Transformations.TransformationConvention" Analyze="True" />
            <Accessor Name="set_Convention(MathNet.Numerics.Transformations.TransformationConvention):System.Void" Analyze="True" />
           </Accessors>
          </Member>
          <Member Name="GenerateFrequencyScale(System.Double,System.Int32):System.Double[]" Analyze="True" />
          <Member Name="GenerateTimeScale(System.Double,System.Int32):System.Double[]" Analyze="True" />
          <Member Name="TransformBackward(System.Double[],System.Double[],System.Double[]&amp;):System.Void" Analyze="True" />
          <Member Name="TransformBackward(System.Double[],System.Double[],System.Double[]&amp;,System.Int32[]):System.Void" Analyze="True" />
          <Member Name="TransformBackward(System.Double[],System.Double[],System.Double[],System.Double[],System.Double[]&amp;,System.Double[]&amp;):System.Void" Analyze="True" />
          <Member Name="TransformForward(System.Double[],System.Double[]&amp;,System.Double[]&amp;):System.Void" Analyze="True" />
          <Member Name="TransformForward(System.Double[],System.Double[]&amp;,System.Double[]&amp;,System.Int32[]):System.Void" Analyze="True" />
          <Member Name="TransformForward(System.Double[],System.Double[],System.Double[]&amp;,System.Double[]&amp;,System.Double[]&amp;,System.Double[]&amp;):System.Void" Analyze="True" />
         </Members>
        </Type>
        <Type Name="TransformationConvention" Analyze="True">
         <Members>
          <Member Name="AsymmetricScaling" Analyze="True" />
          <Member Name="Default" Analyze="True" />
          <Member Name="InverseExponent" Analyze="True" />
          <Member Name="Matlab" Analyze="True" />
          <Member Name="NoScaling" Analyze="True" />
          <Member Name="NumericalRecipes" Analyze="True" />
          <Member Name="value__" Analyze="True" />
         </Members>
        </Type>
       </Types>
      </Namespace>
     </Namespaces>
     <Resources>
      <Resource Name="MathNet.Numerics.Properties.Resources.resources" Analyze="True" />
     </Resources>
    </Module>
   </Modules>
  </Target>
 </Targets>
 <Rules>
  <RuleFiles>
   <RuleFile Name="$(FxCopDir)\Rules\DesignRules.dll" Enabled="True">
    <Rule Name="AbstractTypesShouldNotHaveConstructors" Enabled="True" />
    <Rule Name="AssembliesShouldHaveValidStrongNames" Enabled="True" />
    <Rule Name="AvoidEmptyInterfaces" Enabled="True" />
    <Rule Name="AvoidExcessiveParametersOnGenericTypes" Enabled="True" />
    <Rule Name="AvoidNamespacesWithFewTypes" Enabled="True" />
    <Rule Name="AvoidOutParameters" Enabled="True" />
    <Rule Name="CollectionsShouldImplementGenericInterface" Enabled="True" />
    <Rule Name="ConsiderPassingBaseTypesAsParameters" Enabled="True" />
    <Rule Name="DeclareEventHandlersCorrectly" Enabled="True" />
    <Rule Name="DeclareTypesInNamespaces" Enabled="True" />
    <Rule Name="DefaultParametersShouldNotBeUsed" Enabled="True" />
    <Rule Name="DefineAccessorsForAttributeArguments" Enabled="True" />
    <Rule Name="DoNotCatchGeneralExceptionTypes" Enabled="True" />
    <Rule Name="DoNotDeclareProtectedMembersInSealedTypes" Enabled="True" />
    <Rule Name="DoNotDeclareStaticMembersOnGenericTypes" Enabled="True" />
    <Rule Name="DoNotDeclareVirtualMembersInSealedTypes" Enabled="True" />
    <Rule Name="DoNotDeclareVisibleInstanceFields" Enabled="True" />
    <Rule Name="DoNotExposeGenericLists" Enabled="True" />
    <Rule Name="DoNotHideBaseClassMethods" Enabled="True" />
    <Rule Name="DoNotNestGenericTypesInMemberSignatures" Enabled="True" />
    <Rule Name="DoNotOverloadOperatorEqualsOnReferenceTypes" Enabled="True" />
    <Rule Name="DoNotPassTypesByReference" Enabled="True" />
    <Rule Name="EnumeratorsShouldBeStronglyTyped" Enabled="True" />
    <Rule Name="EnumsShouldHaveZeroValue" Enabled="True" />
    <Rule Name="EnumStorageShouldBeInt32" Enabled="True" />
    <Rule Name="ExceptionsShouldBePublic" Enabled="True" />
    <Rule Name="GenericMethodsShouldProvideTypeParameter" Enabled="True" />
    <Rule Name="ICollectionImplementationsHaveStronglyTypedMembers" Enabled="True" />
    <Rule Name="ImplementIDisposableCorrectly" Enabled="True" />
    <Rule Name="ImplementStandardExceptionConstructors" Enabled="True" />
    <Rule Name="IndexersShouldNotBeMultidimensional" Enabled="True" />
    <Rule Name="InterfaceMethodsShouldBeCallableByChildTypes" Enabled="True" />
    <Rule Name="ListsAreStronglyTyped" Enabled="True" />
    <Rule Name="MarkAssembliesWithAssemblyVersion" Enabled="True" />
    <Rule Name="MarkAssembliesWithClsCompliant" Enabled="True" />
    <Rule Name="MarkAssembliesWithComVisible" Enabled="True" />
    <Rule Name="MarkAttributesWithAttributeUsage" Enabled="True" />
    <Rule Name="MarkEnumsWithFlags" Enabled="True" />
    <Rule Name="MembersShouldNotExposeCertainConcreteTypes" Enabled="True" />
    <Rule Name="MovePInvokesToNativeMethodsClass" Enabled="True" />
    <Rule Name="NestedTypesShouldNotBeVisible" Enabled="True" />
    <Rule Name="OverloadOperatorEqualsOnOverloadingAddAndSubtract" Enabled="True" />
    <Rule Name="OverrideMethodsOnComparableTypes" Enabled="True" />
    <Rule Name="PropertiesShouldNotBeWriteOnly" Enabled="True" />
    <Rule Name="ProvideObsoleteAttributeMessage" Enabled="True" />
    <Rule Name="ReplaceRepetitiveArgumentsWithParamsArray" Enabled="True" />
    <Rule Name="StaticHolderTypesShouldBeSealed" Enabled="True" />
    <Rule Name="StaticHolderTypesShouldNotHaveConstructors" Enabled="True" />
    <Rule Name="StringUriOverloadsCallSystemUriOverloads" Enabled="True" />
    <Rule Name="TypesShouldNotExtendCertainBaseTypes" Enabled="True" />
    <Rule Name="TypesThatOwnDisposableFieldsShouldBeDisposable" Enabled="True" />
    <Rule Name="TypesThatOwnNativeResourcesShouldBeDisposable" Enabled="True" />
    <Rule Name="UriParametersShouldNotBeStrings" Enabled="True" />
    <Rule Name="UriPropertiesShouldNotBeStrings" Enabled="True" />
    <Rule Name="UriReturnValuesShouldNotBeStrings" Enabled="True" />
    <Rule Name="UseEventsWhereAppropriate" Enabled="True" />
    <Rule Name="UseGenericEventHandlerInstances" Enabled="True" />
    <Rule Name="UseGenericsWhereAppropriate" Enabled="True" />
    <Rule Name="UseIntegralOrStringArgumentForIndexers" Enabled="True" />
    <Rule Name="UsePropertiesWhereAppropriate" Enabled="True" />
    <Rule Name="ValidateArgumentsOfPublicMethods" Enabled="True" />
   </RuleFile>
   <RuleFile Name="$(FxCopDir)\Rules\GlobalizationRules.dll" Enabled="True">
    <Rule Name="AvoidDuplicateAccelerators" Enabled="True" />
    <Rule Name="DoNotHardcodeLocaleSpecificStrings" Enabled="True" />
    <Rule Name="DoNotPassLiteralsAsLocalizedParameters" Enabled="True" />
    <Rule Name="SetLocaleForDataTypes" Enabled="True" />
    <Rule Name="SpecifyCultureInfo" Enabled="True" />
    <Rule Name="SpecifyIFormatProvider" Enabled="True" />
    <Rule Name="SpecifyMessageBoxOptions" Enabled="True" />
   </RuleFile>
   <RuleFile Name="$(FxCopDir)\Rules\InteroperabilityRules.dll" Enabled="True">
    <Rule Name="AutoLayoutTypesShouldNotBeComVisible" Enabled="True" />
    <Rule Name="AvoidInt64ArgumentsForVB6Clients" Enabled="True" />
    <Rule Name="AvoidNonpublicFieldsInComVisibleValueTypes" Enabled="True" />
    <Rule Name="AvoidOverloadsInComVisibleInterfaces" Enabled="True" />
    <Rule Name="AvoidStaticMembersInComVisibleTypes" Enabled="True" />
    <Rule Name="CallGetLastErrorImmediatelyAfterPInvoke" Enabled="True" />
    <Rule Name="ComRegistrationMethodsShouldBeMatched" Enabled="True" />
    <Rule Name="ComRegistrationMethodsShouldNotBeVisible" Enabled="True" />
    <Rule Name="ComVisibleTypeBaseTypesShouldBeComVisible" Enabled="True" />
    <Rule Name="ComVisibleTypesShouldBeCreatable" Enabled="True" />
    <Rule Name="DeclarePInvokesCorrectly" Enabled="True" />
    <Rule Name="DoNotUseAutoDualClassInterfaceType" Enabled="True" />
    <Rule Name="MarkBooleanPInvokeArgumentsWithMarshalAs" Enabled="True" />
    <Rule Name="MarkComSourceInterfacesAsIDispatch" Enabled="True" />
    <Rule Name="PInvokeEntryPointsShouldExist" Enabled="True" />
    <Rule Name="PInvokesShouldNotBeVisible" Enabled="True" />
   </RuleFile>
   <RuleFile Name="$(FxCopDir)\Rules\MobilityRules.dll" Enabled="True">
    <Rule Name="DoNotUseIdleProcessPriority" Enabled="True" />
    <Rule Name="DoNotUseTimersThatPreventPowerStateChanges" Enabled="True" />
   </RuleFile>
   <RuleFile Name="$(FxCopDir)\Rules\NamingRules.dll" Enabled="True">
    <Rule Name="AvoidLanguageSpecificTypeNamesInParameters" Enabled="True" />
    <Rule Name="AvoidTypeNamesInParameters" Enabled="True" />
    <Rule Name="CompoundWordsShouldBeCasedCorrectly" Enabled="True" />
    <Rule Name="DoNotNameEnumValuesReserved" Enabled="True" />
    <Rule Name="DoNotPrefixEnumValuesWithTypeName" Enabled="True" />
    <Rule Name="EventsShouldNotHaveBeforeOrAfterPrefix" Enabled="True" />
    <Rule Name="FlagsEnumsShouldHavePluralNames" Enabled="True" />
    <Rule Name="IdentifiersShouldBeCasedCorrectly" Enabled="True" />
    <Rule Name="IdentifiersShouldBeSpelledCorrectly" Enabled="True" />
    <Rule Name="IdentifiersShouldDifferByMoreThanCase" Enabled="True" />
    <Rule Name="IdentifiersShouldHaveCorrectPrefix" Enabled="True" />
    <Rule Name="IdentifiersShouldHaveCorrectSuffix" Enabled="True" />
    <Rule Name="IdentifiersShouldNotContainUnderscores" Enabled="True" />
    <Rule Name="IdentifiersShouldNotHaveIncorrectPrefix" Enabled="True" />
    <Rule Name="IdentifiersShouldNotHaveIncorrectSuffix" Enabled="True" />
    <Rule Name="IdentifiersShouldNotMatchKeywords" Enabled="True" />
    <Rule Name="LongAcronymsShouldBePascalCased" Enabled="True" />
    <Rule Name="OnlyFlagsEnumsShouldHavePluralNames" Enabled="True" />
    <Rule Name="ParameterNamesShouldMatchBaseDeclaration" Enabled="True" />
    <Rule Name="ParameterNamesShouldNotMatchMemberNames" Enabled="True" />
    <Rule Name="PropertyNamesShouldNotMatchGetMethods" Enabled="True" />
    <Rule Name="ResourceStringCompoundWordsShouldBeCasedCorrectly" Enabled="True" />
    <Rule Name="ResourceStringsShouldBeSpelledCorrectly" Enabled="True" />
    <Rule Name="ShortAcronymsShouldBeUppercase" Enabled="True" />
    <Rule Name="TypeNamesShouldNotMatchNamespaces" Enabled="True" />
    <Rule Name="UsePreferredTerms" Enabled="True" />
   </RuleFile>
   <RuleFile Name="$(FxCopDir)\Rules\PerformanceRules.dll" Enabled="True">
    <Rule Name="AvoidExcessiveLocals" Enabled="True" />
    <Rule Name="AvoidUncalledPrivateCode" Enabled="True" />
    <Rule Name="AvoidUninstantiatedInternalClasses" Enabled="True" />
    <Rule Name="AvoidUnnecessaryStringCreation" Enabled="True" />
    <Rule Name="AvoidUnsealedAttributes" Enabled="True" />
    <Rule Name="AvoidUnusedPrivateFields" Enabled="True" />
    <Rule Name="DisposeMethodsShouldCallSuppressFinalize" Enabled="True" />
    <Rule Name="DoNotCallPropertiesThatCloneValuesInLoops" Enabled="True" />
    <Rule Name="DoNotCastUnnecessarily" Enabled="True" />
    <Rule Name="DoNotConcatenateStringsInsideLoops" Enabled="True" />
    <Rule Name="DoNotInitializeUnnecessarily" Enabled="True" />
    <Rule Name="InitializeReferenceTypeStaticFieldsInline" Enabled="True" />
    <Rule Name="MarkMembersAsStatic" Enabled="True" />
    <Rule Name="OverrideEqualsAndOperatorEqualsOnValueTypes" Enabled="True" />
    <Rule Name="PreferJaggedArraysOverMultidimensional" Enabled="True" />
    <Rule Name="PropertiesShouldNotReturnArrays" Enabled="True" />
    <Rule Name="RemoveEmptyFinalizers" Enabled="True" />
    <Rule Name="RemoveUnusedLocals" Enabled="True" />
    <Rule Name="TestForEmptyStringsUsingStringLength" Enabled="True" />
    <Rule Name="UseLiteralsWhereAppropriate" Enabled="True" />
   </RuleFile>
   <RuleFile Name="$(FxCopDir)\Rules\PortabilityRules.dll" Enabled="True">
    <Rule Name="PInvokeDeclarationsShouldBePortable" Enabled="True" />
    <Rule Name="ValueTypeFieldsShouldBePortable" Enabled="True" />
   </RuleFile>
   <RuleFile Name="$(FxCopDir)\Rules\SecurityRules.dll" Enabled="True">
    <Rule Name="AptcaMethodsShouldOnlyCallAptcaMethods" Enabled="True" />
    <Rule Name="AptcaTypesShouldOnlyExtendAptcaBaseTypes" Enabled="True" />
    <Rule Name="ArrayFieldsShouldNotBeReadOnly" Enabled="True" />
    <Rule Name="CallGCKeepAliveWhenUsingNativeResources" Enabled="True" />
    <Rule Name="CatchNonClsCompliantExceptionsInGeneralHandlers" Enabled="True" />
    <Rule Name="DoNotDeclareReadOnlyMutableReferenceTypes" Enabled="True" />
    <Rule Name="DoNotIndirectlyExposeMethodsWithLinkDemands" Enabled="True" />
    <Rule Name="MethodSecurityShouldBeASupersetOfType" Enabled="True" />
    <Rule Name="OverrideLinkDemandsShouldBeIdenticalToBase" Enabled="True" />
    <Rule Name="PointersShouldNotBeVisible" Enabled="True" />
    <Rule Name="ReviewDeclarativeSecurityOnValueTypes" Enabled="True" />
    <Rule Name="ReviewDenyAndPermitOnlyUsage" Enabled="True" />
    <Rule Name="ReviewImperativeSecurity" Enabled="True" />
    <Rule Name="ReviewSqlQueriesForSecurityVulnerabilities" Enabled="True" />
    <Rule Name="ReviewSuppressUnmanagedCodeSecurityUsage" Enabled="True" />
    <Rule Name="ReviewVisibleEventHandlers" Enabled="True" />
    <Rule Name="SealMethodsThatSatisfyPrivateInterfaces" Enabled="True" />
    <Rule Name="SecureAsserts" Enabled="True" />
    <Rule Name="SecuredTypesShouldNotExposeFields" Enabled="True" />
    <Rule Name="SecureGetObjectDataOverrides" Enabled="True" />
    <Rule Name="SecureSerializationConstructors" Enabled="True" />
    <Rule Name="SecurityTransparentAssembliesShouldNotContainSecurityCriticalCode" Enabled="True" />
    <Rule Name="SecurityTransparentCodeShouldNotAssert" Enabled="True" />
    <Rule Name="SecurityTransparentCodeShouldNotReferenceNonpublicSecurityCriticalCode" Enabled="True" />
    <Rule Name="SpecifyMarshalingForPInvokeStringArguments" Enabled="True" />
    <Rule Name="StaticConstructorsShouldBePrivate" Enabled="True" />
    <Rule Name="TypeLinkDemandsRequireInheritanceDemands" Enabled="True" />
    <Rule Name="WrapVulnerableFinallyClausesInOuterTry" Enabled="True" />
   </RuleFile>
   <RuleFile Name="$(FxCopDir)\Rules\UsageRules.dll" Enabled="True">
    <Rule Name="AssembliesShouldDeclareMinimumSecurity" Enabled="True" />
    <Rule Name="AttributeStringLiteralsShouldParseCorrectly" Enabled="True" />
    <Rule Name="CallBaseClassMethodsOnISerializableTypes" Enabled="True" />
    <Rule Name="CollectionPropertiesShouldBeReadOnly" Enabled="True" />
    <Rule Name="DisposableFieldsShouldBeDisposed" Enabled="True" />
    <Rule Name="DisposableTypesShouldDeclareFinalizer" Enabled="True" />
    <Rule Name="DisposeMethodsShouldCallBaseClassDispose" Enabled="True" />
    <Rule Name="DoNotCallOverridableMethodsInConstructors" Enabled="True" />
    <Rule Name="DoNotDecreaseInheritedMemberVisibility" Enabled="True" />
    <Rule Name="DoNotDisposeObjectsMultipleTimes" Enabled="True" />
    <Rule Name="DoNotIgnoreMethodResults" Enabled="True" />
    <Rule Name="DoNotMarkEnumsWithFlags" Enabled="True" />
    <Rule Name="DoNotMarkServicedComponentsWithWebMethod" Enabled="True" />
    <Rule Name="DoNotRaiseExceptionsInFilterBlocks" Enabled="True" />
    <Rule Name="DoNotRaiseReservedExceptionTypes" Enabled="True" />
    <Rule Name="DoNotShipUnreleasedResourceFormats" Enabled="True" />
    <Rule Name="FinalizersShouldBeProtected" Enabled="True" />
    <Rule Name="FinalizersShouldCallBaseClassFinalizer" Enabled="True" />
    <Rule Name="ImplementISerializableCorrectly" Enabled="True" />
    <Rule Name="ImplementSerializationConstructors" Enabled="True" />
    <Rule Name="ImplementSerializationMethodsCorrectly" Enabled="True" />
    <Rule Name="InitializeValueTypeStaticFieldsInline" Enabled="True" />
    <Rule Name="InstantiateArgumentExceptionsCorrectly" Enabled="True" />
    <Rule Name="LiteralsShouldBeSpelledCorrectly" Enabled="True" />
    <Rule Name="MarkAllNonSerializableFields" Enabled="True" />
    <Rule Name="MarkISerializableTypesWithSerializable" Enabled="True" />
    <Rule Name="MarkWindowsFormsEntryPointsWithStaThread" Enabled="True" />
    <Rule Name="MembersShouldDifferByMoreThanReturnType" Enabled="True" />
    <Rule Name="NonConstantFieldsShouldNotBeVisible" Enabled="True" />
    <Rule Name="OperationsShouldNotOverflow" Enabled="True" />
    <Rule Name="OperatorOverloadsHaveNamedAlternates" Enabled="True" />
    <Rule Name="OperatorsShouldHaveSymmetricalOverloads" Enabled="True" />
    <Rule Name="OverloadOperatorEqualsOnOverridingValueTypeEquals" Enabled="True" />
    <Rule Name="OverrideEqualsOnOverloadingOperatorEquals" Enabled="True" />
    <Rule Name="OverrideGetHashCodeOnOverridingEquals" Enabled="True" />
    <Rule Name="PassSystemUriObjectsInsteadOfStrings" Enabled="True" />
    <Rule Name="ProvideCorrectArgumentsToFormattingMethods" Enabled="True" />
    <Rule Name="ProvideDeserializationMethodsForOptionalFields" Enabled="True" />
    <Rule Name="RethrowToPreserveStackDetails" Enabled="True" />
    <Rule Name="ReviewUnusedParameters" Enabled="True" />
    <Rule Name="TestForNaNCorrectly" Enabled="True" />
    <Rule Name="UseManagedEquivalentsOfWin32Api" Enabled="True" />
    <Rule Name="UseParamsForVariableArguments" Enabled="True" />
   </RuleFile>
  </RuleFiles>
  <Groups />
  <Settings />
 </Rules>
 <FxCopReport Version="1.35" />
</FxCopProject>
